From: <Saved by Blink>
Snapshot-Content-Location: https://creativetechguy.com/utilities/codedetector
Subject: Code Detector & Formatter
Date: Wed, 1 Feb 2023 19:22:53 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--xlhojiW3QPKL7wqKJw6yCE1xA9Dpwi1jQtYcmnCE38----"


------MultipartBoundary--xlhojiW3QPKL7wqKJw6yCE1xA9Dpwi1jQtYcmnCE38----
Content-Type: text/html
Content-ID: <frame-037956F1B5A734BC25AC4B1DBCCEAD35@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://creativetechguy.com/utilities/codedetector

<!DOCTYPE html><html lang=3D"en"><head><meta http-equiv=3D"Content-Type" co=
ntent=3D"text/html; charset=3DUTF-8"><link rel=3D"stylesheet" type=3D"text/=
css" href=3D"cid:css-f52cbe0b-b911-4037-82a2-fc83e18c7e45@mhtml.blink" />
=09
	<meta name=3D"keywords" content=3D"programming, language, detector, identi=
fier, highlighter, syntax, code, ctg, Creative Tech Guy, Jason O'Neill">
	<meta name=3D"description" content=3D"Automatically detect a programming l=
anguage by pasting a snippet of code.">
	<meta name=3D"author" content=3D"Jason O'Neill">
	<meta name=3D"viewport" content=3D"width=3Ddevice-width, initial-scale=3D1=
.0">

	<title>Code Detector &amp; Formatter</title>

	<link rel=3D"apple-touch-icon" sizes=3D"180x180" href=3D"https://creativet=
echguy.com/apple-touch-icon.png">
	<link rel=3D"icon" type=3D"image/png" sizes=3D"32x32" href=3D"https://crea=
tivetechguy.com/favicon-32x32.png">
	<link rel=3D"icon" type=3D"image/png" sizes=3D"16x16" href=3D"https://crea=
tivetechguy.com/favicon-16x16.png">
	<link rel=3D"manifest" href=3D"https://creativetechguy.com/manifest.json">
	<link rel=3D"mask-icon" href=3D"https://creativetechguy.com/safari-pinned-=
tab.svg" color=3D"#5bbad5">
	<link rel=3D"shortcut icon" href=3D"https://creativetechguy.com/favicon.ic=
o">
	<meta name=3D"apple-mobile-web-app-title" content=3D"Code Detector">
	<meta name=3D"application-name" content=3D"Code Detector">
	<meta name=3D"theme-color" content=3D"#ffffff">

	<meta property=3D"og:title" content=3D"Code Detector &amp; Formatter">
	<meta property=3D"og:type" content=3D"website">
	<meta property=3D"og:locale" content=3D"en_US">
	<meta property=3D"og:url" content=3D"https://creativetechguy.com/utilities=
/codedetector">
	<meta property=3D"og:description" content=3D"Automatically detect a progra=
mming language by pasting a snippet of code.">
	<meta property=3D"og:image" content=3D"https://creativetechguy.com/images/=
logo.png">

	<meta name=3D"twitter:card" content=3D"summary">
	<meta name=3D"twitter:site" content=3D"@JasonONeillCTG">
	<meta name=3D"twitter:title" content=3D"Code Detector &amp; Formatter">
	<meta name=3D"twitter:description" content=3D"Automatically detect a progr=
amming language by pasting a snippet of code.">
	<meta name=3D"twitter:image" content=3D"https://creativetechguy.com/images=
/logo.png">

	<link rel=3D"stylesheet" href=3D"https://creativetechguy.com/global/css/ga=
mes.css?v=3D1555270978969" type=3D"text/css">
	<link rel=3D"stylesheet" href=3D"https://creativetechguy.com/utilities/cod=
edetector/styles/vs2015.css?v=3D1552844680374">
=09
</head>
<body>
=09
=09
	<pre><code id=3D"highlightCode" style=3D"overflow: auto;" class=3D"hljs"><=
span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> auto_res=
et</span> {} {
    <span class=3D"hljs-keyword">global</span> auto_execs auto_index auto_o=
ldpath
    <span class=3D"hljs-keyword">foreach</span> p [<span class=3D"hljs-keyw=
ord">info</span> procs] {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info=
</span> exists auto_index($p)] &amp;&amp; ![<span class=3D"hljs-keyword">st=
ring</span> match auto_* $p] &amp;&amp;([<span class=3D"hljs-keyword">lsear=
ch</span> -exact {<span class=3D"hljs-keyword">unknown</span> <span class=
=3D"hljs-keyword">pkg_mkIndex</span> tclPkgSetup
<span class=3D"hljs-keyword">tcl_findLibrary</span> pkg_compareExtension
tclMacPkgSearch tclPkgUnknown} $p] &lt; <span class=3D"hljs-number">0</span=
>)} then {
	    <span class=3D"hljs-keyword">rename</span> $p {}
	}
    }
    <span class=3D"hljs-keyword">catch</span> {<span class=3D"hljs-keyword"=
>unset</span> auto_execs}
    <span class=3D"hljs-keyword">catch</span> {<span class=3D"hljs-keyword"=
>unset</span> auto_index}
    <span class=3D"hljs-keyword">catch</span> {<span class=3D"hljs-keyword"=
>unset</span> auto_oldpath}
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tcl_fin=
dLibrary</span> {basename version patch initScript enVarName varName} {
    <span class=3D"hljs-keyword">upvar</span> #<span class=3D"hljs-number">=
0</span> $varName the_library
    <span class=3D"hljs-keyword">global</span> env errorInfo
    <span class=3D"hljs-keyword">set</span> dirs {}
    <span class=3D"hljs-keyword">set</span> errors {}
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exist the_library] &amp;&amp; [<span class=3D"hljs-keyword">stri=
ng</span> compare $the_library {}]} then {
	<span class=3D"hljs-keyword">lappend</span> dirs $the_library
    } else {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info=
</span> exists env($enVarName)]} then {
	    <span class=3D"hljs-keyword">lappend</span> dirs $env($enVarName)
	}
	<span class=3D"hljs-keyword">lappend</span> dirs [<span class=3D"hljs-keyw=
ord">file</span> <span class=3D"hljs-keyword">join</span> [<span class=3D"h=
ljs-keyword">file</span> dirname [<span class=3D"hljs-keyword">info</span> =
library]] $basename$version]
	<span class=3D"hljs-keyword">set</span> parentDir [<span class=3D"hljs-key=
word">file</span> dirname [<span class=3D"hljs-keyword">file</span> dirname=
 [<span class=3D"hljs-keyword">info</span> nameofexecutable]]]
	<span class=3D"hljs-keyword">set</span> grandParentDir [<span class=3D"hlj=
s-keyword">file</span> dirname $parentDir]
	<span class=3D"hljs-keyword">lappend</span> dirs [<span class=3D"hljs-keyw=
ord">file</span> <span class=3D"hljs-keyword">join</span> $parentDir lib $b=
asename$version]
	<span class=3D"hljs-keyword">lappend</span> dirs [<span class=3D"hljs-keyw=
ord">file</span> <span class=3D"hljs-keyword">join</span> $grandParentDir l=
ib $basename$version]
	<span class=3D"hljs-keyword">lappend</span> dirs [<span class=3D"hljs-keyw=
ord">file</span> <span class=3D"hljs-keyword">join</span> $parentDir librar=
y]
	<span class=3D"hljs-keyword">lappend</span> dirs [<span class=3D"hljs-keyw=
ord">file</span> <span class=3D"hljs-keyword">join</span> $grandParentDir l=
ibrary]
	<span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">reg=
exp</span> {.*[ab][<span class=3D"hljs-number">0</span><span class=3D"hljs-=
number">-9</span>]*} $patch ver]} then {
	    <span class=3D"hljs-keyword">set</span> ver $version
	}
	<span class=3D"hljs-keyword">lappend</span> dirs [<span class=3D"hljs-keyw=
ord">file</span> <span class=3D"hljs-keyword">join</span> $grandParentDir $=
basename$ver library]
	<span class=3D"hljs-keyword">lappend</span> dirs [<span class=3D"hljs-keyw=
ord">file</span> <span class=3D"hljs-keyword">join</span> [<span class=3D"h=
ljs-keyword">file</span> dirname $grandParentDir] $basename$ver library]
    }
    <span class=3D"hljs-keyword">foreach</span> i $dirs {
	<span class=3D"hljs-keyword">set</span> the_library $i
	<span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">file<=
/span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keywor=
d">join</span> $i $initScript]
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">inte=
rp</span> issafe] || [<span class=3D"hljs-keyword">file</span> exists $file=
]} then {
	    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword"=
>catch</span> {<span class=3D"hljs-keyword">uplevel</span> #<span class=3D"=
hljs-number">0</span> [<span class=3D"hljs-keyword">list</span> <span class=
=3D"hljs-keyword">source</span> $file]} msg]} then {
		<span class=3D"hljs-keyword">return</span>
	    } else {
		<span class=3D"hljs-keyword">append</span> errors <span class=3D"hljs-str=
ing">"$file: $msg\n$errorInfo\n"</span>
	    }
	}
    }
    <span class=3D"hljs-keyword">set</span> msg <span class=3D"hljs-string"=
>"Can't find a usable $initScript in the following directories: \n"</span>
    <span class=3D"hljs-keyword">append</span> msg <span class=3D"hljs-stri=
ng">"    $dirs\n\n"</span>
    <span class=3D"hljs-keyword">append</span> msg <span class=3D"hljs-stri=
ng">"$errors\n\n"</span>
    <span class=3D"hljs-keyword">append</span> msg <span class=3D"hljs-stri=
ng">"This probably means that $basename wasn't installed properly.\n"</span=
>
    <span class=3D"hljs-keyword">error</span> $msg
}
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">inter=
p</span> issafe]} then {
    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-comment"=
>;# Stop sourcing the file here</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> auto_mk=
index</span> {dir args} {
    <span class=3D"hljs-keyword">global</span> errorCode errorInfo
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nterp</span> issafe]} then {
	<span class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">"can=
't generate index within safe interpreter"</span>
    }
    <span class=3D"hljs-keyword">set</span> oldDir [<span class=3D"hljs-key=
word">pwd</span>]
    <span class=3D"hljs-keyword">cd</span> $dir
    <span class=3D"hljs-keyword">set</span> dir [<span class=3D"hljs-keywor=
d">pwd</span>]
    <span class=3D"hljs-keyword">append</span> index <span class=3D"hljs-st=
ring">"# Tcl autoload index file, version 2.0\n"</span>
    <span class=3D"hljs-keyword">append</span> index <span class=3D"hljs-st=
ring">"# This file is generated by the \"auto_mkindex\" command\n"</span>
    <span class=3D"hljs-keyword">append</span> index <span class=3D"hljs-st=
ring">"# and sourced to set up indexing information for one or\n"</span>
    <span class=3D"hljs-keyword">append</span> index <span class=3D"hljs-st=
ring">"# more commands.  Typically each line is a command that\n"</span>
    <span class=3D"hljs-keyword">append</span> index <span class=3D"hljs-st=
ring">"# sets an element in the auto_index array, where the\n"</span>
    <span class=3D"hljs-keyword">append</span> index <span class=3D"hljs-st=
ring">"# element name is the name of a command and the value is\n"</span>
    <span class=3D"hljs-keyword">append</span> index <span class=3D"hljs-st=
ring">"# a script that loads the command.\n\n"</span>
    <span class=3D"hljs-keyword">if</span> {$args =3D=3D <span class=3D"hlj=
s-string">""</span>} then {
	<span class=3D"hljs-keyword">set</span> args *.tcl
    }
    auto_mkindex_parser::init
    <span class=3D"hljs-keyword">foreach</span> <span class=3D"hljs-keyword=
">file</span> [<span class=3D"hljs-keyword">eval</span> <span class=3D"hljs=
-keyword">glob</span> $args] {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">catc=
h</span> {auto_mkindex_parser::mkindex $file} msg] =3D=3D <span class=3D"hl=
js-number">0</span>} then {
	    <span class=3D"hljs-keyword">append</span> index $msg
	} else {
	    <span class=3D"hljs-keyword">set</span> code $errorCode
	    <span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">i=
nfo</span> $errorInfo
	    <span class=3D"hljs-keyword">cd</span> $oldDir
	    <span class=3D"hljs-keyword">error</span> $msg $info $code
	}
    }
    auto_mkindex_parser::cleanup
    <span class=3D"hljs-keyword">set</span> fid [<span class=3D"hljs-keywor=
d">open</span> <span class=3D"hljs-string">"tclIndex"</span> w]
    <span class=3D"hljs-keyword">puts</span> -nonewline $fid $index
    <span class=3D"hljs-keyword">close</span> $fid
    <span class=3D"hljs-keyword">cd</span> $oldDir
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> auto_mk=
index_old</span> {dir args} {
    <span class=3D"hljs-keyword">global</span> errorCode errorInfo
    <span class=3D"hljs-keyword">set</span> oldDir [<span class=3D"hljs-key=
word">pwd</span>]
    <span class=3D"hljs-keyword">cd</span> $dir
    <span class=3D"hljs-keyword">set</span> dir [<span class=3D"hljs-keywor=
d">pwd</span>]
    <span class=3D"hljs-keyword">append</span> index <span class=3D"hljs-st=
ring">"# Tcl autoload index file, version 2.0\n"</span>
    <span class=3D"hljs-keyword">append</span> index <span class=3D"hljs-st=
ring">"# This file is generated by the \"auto_mkindex\" command\n"</span>
    <span class=3D"hljs-keyword">append</span> index <span class=3D"hljs-st=
ring">"# and sourced to set up indexing information for one or\n"</span>
    <span class=3D"hljs-keyword">append</span> index <span class=3D"hljs-st=
ring">"# more commands.  Typically each line is a command that\n"</span>
    <span class=3D"hljs-keyword">append</span> index <span class=3D"hljs-st=
ring">"# sets an element in the auto_index array, where the\n"</span>
    <span class=3D"hljs-keyword">append</span> index <span class=3D"hljs-st=
ring">"# element name is the name of a command and the value is\n"</span>
    <span class=3D"hljs-keyword">append</span> index <span class=3D"hljs-st=
ring">"# a script that loads the command.\n\n"</span>
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $args <span class=3D"hljs-string">""</span>]} then {
	<span class=3D"hljs-keyword">set</span> args *.tcl
    }
    <span class=3D"hljs-keyword">foreach</span> <span class=3D"hljs-keyword=
">file</span> [<span class=3D"hljs-keyword">eval</span> <span class=3D"hljs=
-keyword">glob</span> $args] {
	<span class=3D"hljs-keyword">set</span> f <span class=3D"hljs-string">""</=
span>
	<span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">error=
</span> [<span class=3D"hljs-keyword">catch</span> {
	    <span class=3D"hljs-keyword">set</span> f [<span class=3D"hljs-keyword=
">open</span> $file]
	    <span class=3D"hljs-keyword">while</span> {[<span class=3D"hljs-keywor=
d">gets</span> $f line] &gt;=3D <span class=3D"hljs-number">0</span>} {
		<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">reg=
exp</span> {^<span class=3D"hljs-keyword">proc</span>[ 	]+([^ 	]*)} $line<s=
pan class=3D"hljs-title"> match</span> procName]}<span class=3D"hljs-title"=
> then</span> {
		    <span class=3D"hljs-keyword">set</span> procName [<span class=3D"hljs=
-keyword">lindex</span> [<span class=3D"hljs-keyword">auto_qualify</span> $=
procName <span class=3D"hljs-string">"::"</span>] <span class=3D"hljs-numbe=
r">0</span>]
		    <span class=3D"hljs-keyword">append</span> index <span class=3D"hljs-=
string">"set [list auto_index($procName)]"</span>
		    <span class=3D"hljs-keyword">append</span> index <span class=3D"hljs-=
string">" \[list source \[file join \$dir [list $file]\]\]\n"</span>
		}
	    }
	    <span class=3D"hljs-keyword">close</span> $f
	} msg]
	<span class=3D"hljs-keyword">if</span> {$error} then {
	    <span class=3D"hljs-keyword">set</span> code $errorCode
	    <span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">i=
nfo</span> $errorInfo
	    <span class=3D"hljs-keyword">catch</span> {<span class=3D"hljs-keyword=
">close</span> $f}
	    <span class=3D"hljs-keyword">cd</span> $oldDir
	    <span class=3D"hljs-keyword">error</span> $msg $info $code
	}
    }
    <span class=3D"hljs-keyword">set</span> f <span class=3D"hljs-string">"=
"</span>
    <span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">er=
ror</span> [<span class=3D"hljs-keyword">catch</span> {
	<span class=3D"hljs-keyword">set</span> f [<span class=3D"hljs-keyword">op=
en</span> tclIndex w]
	<span class=3D"hljs-keyword">puts</span> -nonewline $f $index
	<span class=3D"hljs-keyword">close</span> $f
	<span class=3D"hljs-keyword">cd</span> $oldDir
    } msg]
    <span class=3D"hljs-keyword">if</span> {$error} then {
	<span class=3D"hljs-keyword">set</span> code $errorCode
	<span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">info<=
/span> $errorInfo
	<span class=3D"hljs-keyword">catch</span> {<span class=3D"hljs-keyword">cl=
ose</span> $f}
	<span class=3D"hljs-keyword">cd</span> $oldDir
	<span class=3D"hljs-keyword">error</span> $msg $info $code
    }
}
<span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keyword">=
eval</span> auto_mkindex_parser {
    <span class=3D"hljs-keyword">variable</span> parser <span class=3D"hljs=
-string">""</span> <span class=3D"hljs-comment">;# parser used to build ind=
ex</span>
    <span class=3D"hljs-keyword">variable</span> index <span class=3D"hljs-=
string">""</span> <span class=3D"hljs-comment">;# maintains index as it is =
built</span>
    <span class=3D"hljs-keyword">variable</span> scriptFile <span class=3D"=
hljs-string">""</span> <span class=3D"hljs-comment">;# name of file being p=
rocessed</span>
    <span class=3D"hljs-keyword">variable</span> contextStack <span class=
=3D"hljs-string">""</span> <span class=3D"hljs-comment">;# stack of namespa=
ce scopes</span>
    <span class=3D"hljs-keyword">variable</span> imports <span class=3D"hlj=
s-string">""</span> <span class=3D"hljs-comment">;# keeps track of all impo=
rted cmds</span>
    <span class=3D"hljs-keyword">variable</span> initCommands <span class=
=3D"hljs-string">""</span> <span class=3D"hljs-comment">;# list of commands=
 that create aliases</span>
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ini=
t</span> {} {
	<span class=3D"hljs-keyword">variable</span> parser
	<span class=3D"hljs-keyword">variable</span> initCommands
	<span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">int=
erp</span> issafe]} then {
	    <span class=3D"hljs-keyword">set</span> parser [<span class=3D"hljs-ke=
yword">interp</span> create -<span class=3D"hljs-keyword">safe</span>]
	    $parser hide <span class=3D"hljs-keyword">info</span>
	    $parser hide <span class=3D"hljs-keyword">rename</span>
	    $parser hide <span class=3D"hljs-keyword">proc</span>
	    $parser<span class=3D"hljs-title"> hide</span> namespace
	    $parser<span class=3D"hljs-title"> hide</span> eval
	    $parser<span class=3D"hljs-title"> hide</span> puts
	    $parser<span class=3D"hljs-title"> invokehidden</span> namespace<span =
class=3D"hljs-title"> delete</span> ::
	    $parser<span class=3D"hljs-title"> invokehidden</span> <span class=3D"=
hljs-keyword">proc</span><span class=3D"hljs-title"> unknown</span> {args} =
{}
	    $parser expose <span class=3D"hljs-keyword">namespace</span>
	    $parser invokehidden <span class=3D"hljs-keyword">rename</span> <span =
class=3D"hljs-keyword">namespace</span> _%@<span class=3D"hljs-keyword">nam=
espace</span>
	    $parser expose <span class=3D"hljs-keyword">eval</span>
	    $parser invokehidden <span class=3D"hljs-keyword">rename</span> <span =
class=3D"hljs-keyword">eval</span> _%@<span class=3D"hljs-keyword">eval</sp=
an>
	    <span class=3D"hljs-keyword">foreach</span> cmd $initCommands {
		<span class=3D"hljs-keyword">eval</span> $cmd
	    }
	}
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> cle=
anup</span> {} {
	<span class=3D"hljs-keyword">variable</span> parser
	<span class=3D"hljs-keyword">interp</span> delete $parser
	<span class=3D"hljs-keyword">unset</span> parser
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> auto_mk=
index_parser::mkindex</span> {<span class=3D"hljs-keyword">file</span>} {
    <span class=3D"hljs-keyword">variable</span> parser
    <span class=3D"hljs-keyword">variable</span> index
    <span class=3D"hljs-keyword">variable</span> scriptFile
    <span class=3D"hljs-keyword">variable</span> contextStack
    <span class=3D"hljs-keyword">variable</span> imports
    <span class=3D"hljs-keyword">set</span> scriptFile $file
    <span class=3D"hljs-keyword">set</span> fid [<span class=3D"hljs-keywor=
d">open</span> $file]
    <span class=3D"hljs-keyword">set</span> contents [<span class=3D"hljs-k=
eyword">read</span> $fid]
    <span class=3D"hljs-keyword">close</span> $fid
    <span class=3D"hljs-keyword">regsub</span> -all {\$} $contents <span cl=
ass=3D"hljs-string">"\0"</span> contents
    <span class=3D"hljs-keyword">set</span> index <span class=3D"hljs-strin=
g">""</span>
    <span class=3D"hljs-keyword">set</span> contextStack <span class=3D"hlj=
s-string">""</span>
    <span class=3D"hljs-keyword">set</span> imports <span class=3D"hljs-str=
ing">""</span>
    $parser <span class=3D"hljs-keyword">eval</span> $contents
    <span class=3D"hljs-keyword">foreach</span> name $imports {
	<span class=3D"hljs-keyword">catch</span> {$parser <span class=3D"hljs-key=
word">eval</span> [<span class=3D"hljs-keyword">list</span> _%@<span class=
=3D"hljs-keyword">namespace</span> forget $name]}
    }
    <span class=3D"hljs-keyword">return</span> $index
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> auto_mk=
index_parser::hook</span> {cmd} {
    <span class=3D"hljs-keyword">variable</span> initCommands
    <span class=3D"hljs-keyword">lappend</span> initCommands $cmd
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> auto_mk=
index_parser::slavehook</span> {cmd} {
    <span class=3D"hljs-keyword">variable</span> initCommands
    <span class=3D"hljs-keyword">lappend</span> initCommands <span class=3D=
"hljs-string">"\$parser eval [list $cmd]"</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> auto_mk=
index_parser::command</span> {name arglist body} {
    hook [<span class=3D"hljs-keyword">list</span> auto_mkindex_parser::com=
mandInit $name $arglist $body]
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> auto_mk=
index_parser::commandInit</span> {name arglist body} {
    <span class=3D"hljs-keyword">variable</span> parser
    <span class=3D"hljs-keyword">set</span> ns [<span class=3D"hljs-keyword=
">namespace</span> qualifiers $name]
    <span class=3D"hljs-keyword">set</span> tail [<span class=3D"hljs-keywo=
rd">namespace</span> tail $name]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $ns <span class=3D"hljs-string">""</span>]} then {
	<span class=3D"hljs-keyword">set</span> fakeName <span class=3D"hljs-strin=
g">"[namespace current]::_%@fake_$tail"</span>
    } else {
	<span class=3D"hljs-keyword">set</span> fakeName <span class=3D"hljs-strin=
g">"_%@fake_$name"</span>
	<span class=3D"hljs-keyword">regsub</span> -all {::} $fakeName <span class=
=3D"hljs-string">"_"</span> fakeName
	<span class=3D"hljs-keyword">set</span> fakeName <span class=3D"hljs-strin=
g">"[namespace current]::$fakeName"</span>
    }
    <span class=3D"hljs-keyword">proc</span> $fakeName $arglist $body<span =
class=3D"hljs-title">
    if</span> {[<span class=3D"hljs-keyword">regexp</span> {::} $name]} the=
n {
	<span class=3D"hljs-keyword">set</span> exportCmd [<span class=3D"hljs-key=
word">list</span> _%@<span class=3D"hljs-keyword">namespace</span> export [=
<span class=3D"hljs-keyword">namespace</span> tail $name]]
	$parser <span class=3D"hljs-keyword">eval</span> [<span class=3D"hljs-keyw=
ord">list</span> _%@<span class=3D"hljs-keyword">namespace</span> <span cla=
ss=3D"hljs-keyword">eval</span> $ns $exportCmd]
	<span class=3D"hljs-keyword">set</span> alias [<span class=3D"hljs-keyword=
">namespace</span> tail $fakeName]
	$parser invokehidden <span class=3D"hljs-keyword">proc</span> $name {args}=
 <span class=3D"hljs-string">"_%@eval {$alias} \$args"</span>
	$parser alias $alias $fakeName
    } else {
	$parser alias $name $fakeName
    }
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> auto_mk=
index_parser::fullname</span> {name} {
    <span class=3D"hljs-keyword">variable</span> contextStack
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
string</span> match ::* $name]} then {
	<span class=3D"hljs-keyword">foreach</span> ns $contextStack {
	    <span class=3D"hljs-keyword">set</span> name <span class=3D"hljs-strin=
g">"${ns}::$name"</span>
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
string</span> match ::* $name]} then {
		<span class=3D"hljs-keyword">break</span>
	    }
	}
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal [<span class=3D"hljs-keyword">namespace</span> qualifier=
s $name] <span class=3D"hljs-string">""</span>]} then {
	<span class=3D"hljs-keyword">set</span> name [<span class=3D"hljs-keyword"=
>namespace</span> tail $name]
    } elseif {![<span class=3D"hljs-keyword">string</span> match ::* $name]=
} {
	<span class=3D"hljs-keyword">set</span> name <span class=3D"hljs-string">"=
::$name"</span>
    }
    <span class=3D"hljs-keyword">regsub</span> -all <span class=3D"hljs-str=
ing">"\0"</span> $name <span class=3D"hljs-string">"\$"</span> name
    <span class=3D"hljs-keyword">return</span> $name
}
auto_mkindex_parser::command <span class=3D"hljs-keyword">proc</span> {name=
 args} {
<span class=3D"hljs-keyword">variable</span> index
<span class=3D"hljs-keyword">variable</span> scriptFile
<span class=3D"hljs-keyword">append</span> index [<span class=3D"hljs-keywo=
rd">list</span> <span class=3D"hljs-keyword">set</span> auto_index([fullnam=
e $name])] \
	    [<span class=3D"hljs-keyword">format</span> { [<span class=3D"hljs-key=
word">list</span> <span class=3D"hljs-keyword">source</span> [<span class=
=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">join</span> $dir=
 %s]]} \
	    [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword"=
>split</span> $scriptFile]] <span class=3D"hljs-string">"\n"</span>
}
auto_mkindex_parser::hook {
<span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">catc=
h</span> {<span class=3D"hljs-keyword">package</span> require tbcload}]} {
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">lleng=
th</span> [<span class=3D"hljs-keyword">info</span> commands tbcload::bcpro=
c]] =3D=3D <span class=3D"hljs-number">0</span>} {
<span class=3D"hljs-keyword">auto_load</span> tbcload::bcproc
}
<span class=3D"hljs-keyword">load</span> {} tbcload $auto_mkindex_parser::p=
arser
auto_mkindex_parser::commandInit tbcload::bcproc {name args} {
<span class=3D"hljs-keyword">variable</span> index
<span class=3D"hljs-keyword">variable</span> scriptFile
<span class=3D"hljs-keyword">append</span> index [<span class=3D"hljs-keywo=
rd">list</span> <span class=3D"hljs-keyword">set</span> auto_index([fullnam=
e $name])] \
		    [<span class=3D"hljs-keyword">format</span> { [<span class=3D"hljs-ke=
yword">list</span> <span class=3D"hljs-keyword">source</span> [<span class=
=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">join</span> $dir=
 %s]]} \
		    [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword=
">split</span> $scriptFile]] <span class=3D"hljs-string">"\n"</span>
}
}
}
auto_mkindex_parser::command <span class=3D"hljs-keyword">namespace</span> =
{op args} {
<span class=3D"hljs-keyword">switch</span> -- $op {
<span class=3D"hljs-keyword">eval</span> {
<span class=3D"hljs-keyword">variable</span> parser
<span class=3D"hljs-keyword">variable</span> contextStack
<span class=3D"hljs-keyword">set</span> name [<span class=3D"hljs-keyword">=
lindex</span> $args <span class=3D"hljs-number">0</span>]
<span class=3D"hljs-keyword">set</span> args [<span class=3D"hljs-keyword">=
lrange</span> $args <span class=3D"hljs-number">1</span> end]
<span class=3D"hljs-keyword">set</span> contextStack [<span class=3D"hljs-k=
eyword">linsert</span> $contextStack <span class=3D"hljs-number">0</span> $=
name]
$parser <span class=3D"hljs-keyword">eval</span> [<span class=3D"hljs-keywo=
rd">list</span> _%@<span class=3D"hljs-keyword">namespace</span> <span clas=
s=3D"hljs-keyword">eval</span> $name] $args
<span class=3D"hljs-keyword">set</span> contextStack [<span class=3D"hljs-k=
eyword">lrange</span> $contextStack <span class=3D"hljs-number">1</span> en=
d]
}
import {
<span class=3D"hljs-keyword">variable</span> parser
<span class=3D"hljs-keyword">variable</span> imports
<span class=3D"hljs-keyword">foreach</span> pattern $args {
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">strin=
g</span> compare $pattern <span class=3D"hljs-string">"-force"</span>]} {
<span class=3D"hljs-keyword">lappend</span> imports $pattern
}
}
<span class=3D"hljs-keyword">catch</span> {$parser <span class=3D"hljs-keyw=
ord">eval</span> <span class=3D"hljs-string">"_%@namespace import $args"</s=
pan>}
}
}
}
<span class=3D"hljs-keyword">return</span>
<span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keyword">=
eval</span> tcl {
    <span class=3D"hljs-keyword">variable</span> <span class=3D"hljs-keywor=
d">history</span>
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists <span class=3D"hljs-keyword">history</span>]} then {
	<span class=3D"hljs-keyword">array</span> <span class=3D"hljs-keyword">set=
</span> <span class=3D"hljs-keyword">history</span> {
nextid	<span class=3D"hljs-number">0</span>
keep	<span class=3D"hljs-number">20</span>
oldest	<span class=3D"hljs-number">-20</span>
}
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> history=
</span> {args} {
    <span class=3D"hljs-keyword">set</span> len [<span class=3D"hljs-keywor=
d">llength</span> $args]
    <span class=3D"hljs-keyword">if</span> {$len =3D=3D <span class=3D"hljs=
-number">0</span>} then {
	<span class=3D"hljs-keyword">return</span> [tcl::HistInfo]
    }
    <span class=3D"hljs-keyword">set</span> key [<span class=3D"hljs-keywor=
d">lindex</span> $args <span class=3D"hljs-number">0</span>]
    <span class=3D"hljs-keyword">set</span> options <span class=3D"hljs-str=
ing">"add, change, clear, event, info, keep, nextid, or redo"</span>
    <span class=3D"hljs-keyword">switch</span> -<span class=3D"hljs-keyword=
">glob</span> -- $key {
    a* {
<span class=3D"hljs-comment">	    # history add</span>
	    <span class=3D"hljs-keyword">if</span> {$len &gt; <span class=3D"hljs-=
number">3</span>} then {
		<span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-keyw=
ord">error</span> <span class=3D"hljs-string">"wrong # args: should be \"hi=
story add event ?exec?\""</span>
	    }
	    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword"=
>string</span> match $key* add]} then {
		<span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-keyw=
ord">error</span> <span class=3D"hljs-string">"bad option \"$key\": must be=
 $options"</span>
	    }
	    <span class=3D"hljs-keyword">if</span> {$len =3D=3D <span class=3D"hlj=
s-number">3</span>} then {
		<span class=3D"hljs-keyword">set</span> arg [<span class=3D"hljs-keyword"=
>lindex</span> $args <span class=3D"hljs-number">2</span>]
		<span class=3D"hljs-keyword">if</span> {!([<span class=3D"hljs-keyword">s=
tring</span> match e* $arg] &amp;&amp; [<span class=3D"hljs-keyword">string=
</span> match $arg* <span class=3D"hljs-keyword">exec</span>])} then {
		    <span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-=
keyword">error</span> <span class=3D"hljs-string">"bad argument \"$arg\": s=
hould be \"exec\""</span>
		}
	    }
	    <span class=3D"hljs-keyword">return</span> [tcl::HistAdd [<span class=
=3D"hljs-keyword">lindex</span> $args <span class=3D"hljs-number">1</span>]=
 [<span class=3D"hljs-keyword">lindex</span> $args <span class=3D"hljs-numb=
er">2</span>]]
	}
    ch* {
<span class=3D"hljs-comment">	    # history change</span>
	    <span class=3D"hljs-keyword">if</span> {($len &gt; <span class=3D"hljs=
-number">3</span>) ||($len &lt; <span class=3D"hljs-number">2</span>)} then=
 {
		<span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-keyw=
ord">error</span> <span class=3D"hljs-string">"wrong # args: should be \"hi=
story change newValue ?event?\""</span>
	    }
	    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword"=
>string</span> match $key* change]} then {
		<span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-keyw=
ord">error</span> <span class=3D"hljs-string">"bad option \"$key\": must be=
 $options"</span>
	    }
	    <span class=3D"hljs-keyword">if</span> {$len =3D=3D <span class=3D"hlj=
s-number">2</span>} then {
		<span class=3D"hljs-keyword">set</span> event <span class=3D"hljs-number"=
>0</span>
	    } else {
		<span class=3D"hljs-keyword">set</span> event [<span class=3D"hljs-keywor=
d">lindex</span> $args <span class=3D"hljs-number">2</span>]
	    }
	    <span class=3D"hljs-keyword">return</span> [tcl::HistChange [<span cla=
ss=3D"hljs-keyword">lindex</span> $args <span class=3D"hljs-number">1</span=
>] $event]
	}
    cl* {
<span class=3D"hljs-comment">	    # history clear</span>
	    <span class=3D"hljs-keyword">if</span> {($len &gt; <span class=3D"hljs=
-number">1</span>)} then {
		<span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-keyw=
ord">error</span> <span class=3D"hljs-string">"wrong # args: should be \"hi=
story clear\""</span>
	    }
	    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword"=
>string</span> match $key* clear]} then {
		<span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-keyw=
ord">error</span> <span class=3D"hljs-string">"bad option \"$key\": must be=
 $options"</span>
	    }
	    <span class=3D"hljs-keyword">return</span> [tcl::HistClear]
	}
    e* {
<span class=3D"hljs-comment">	    # history event</span>
	    <span class=3D"hljs-keyword">if</span> {$len &gt; <span class=3D"hljs-=
number">2</span>} then {
		<span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-keyw=
ord">error</span> <span class=3D"hljs-string">"wrong # args: should be \"hi=
story event ?event?\""</span>
	    }
	    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword"=
>string</span> match $key* event]} then {
		<span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-keyw=
ord">error</span> <span class=3D"hljs-string">"bad option \"$key\": must be=
 $options"</span>
	    }
	    <span class=3D"hljs-keyword">if</span> {$len =3D=3D <span class=3D"hlj=
s-number">1</span>} then {
		<span class=3D"hljs-keyword">set</span> event <span class=3D"hljs-number"=
>-1</span>
	    } else {
		<span class=3D"hljs-keyword">set</span> event [<span class=3D"hljs-keywor=
d">lindex</span> $args <span class=3D"hljs-number">1</span>]
	    }
	    <span class=3D"hljs-keyword">return</span> [tcl::HistEvent $event]
	}
    i* {
<span class=3D"hljs-comment">	    # history info</span>
	    <span class=3D"hljs-keyword">if</span> {$len &gt; <span class=3D"hljs-=
number">2</span>} then {
		<span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-keyw=
ord">error</span> <span class=3D"hljs-string">"wrong # args: should be \"hi=
story info ?count?\""</span>
	    }
	    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword"=
>string</span> match $key* <span class=3D"hljs-keyword">info</span>]} then =
{
		<span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-keyw=
ord">error</span> <span class=3D"hljs-string">"bad option \"$key\": must be=
 $options"</span>
	    }
	    <span class=3D"hljs-keyword">return</span> [tcl::HistInfo [<span class=
=3D"hljs-keyword">lindex</span> $args <span class=3D"hljs-number">1</span>]=
]
	}
    k* {
<span class=3D"hljs-comment">	    # history keep</span>
	    <span class=3D"hljs-keyword">if</span> {$len &gt; <span class=3D"hljs-=
number">2</span>} then {
		<span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-keyw=
ord">error</span> <span class=3D"hljs-string">"wrong # args: should be \"hi=
story keep ?count?\""</span>
	    }
	    <span class=3D"hljs-keyword">if</span> {$len =3D=3D <span class=3D"hlj=
s-number">1</span>} then {
		<span class=3D"hljs-keyword">return</span> [tcl::HistKeep]
	    } else {
		<span class=3D"hljs-keyword">set</span> limit [<span class=3D"hljs-keywor=
d">lindex</span> $args <span class=3D"hljs-number">1</span>]
		<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">cat=
ch</span> {<span class=3D"hljs-keyword">expr</span> {~$limit}}] ||($limit &=
lt; <span class=3D"hljs-number">0</span>)} then {
		    <span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-=
keyword">error</span> <span class=3D"hljs-string">"illegal keep count \"$li=
mit\""</span>
		}
		<span class=3D"hljs-keyword">return</span> [tcl::HistKeep $limit]
	    }
	}
    n* {
<span class=3D"hljs-comment">	    # history nextid</span>
	    <span class=3D"hljs-keyword">if</span> {$len &gt; <span class=3D"hljs-=
number">1</span>} then {
		<span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-keyw=
ord">error</span> <span class=3D"hljs-string">"wrong # args: should be \"hi=
story nextid\""</span>
	    }
	    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword"=
>string</span> match $key* nextid]} then {
		<span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-keyw=
ord">error</span> <span class=3D"hljs-string">"bad option \"$key\": must be=
 $options"</span>
	    }
	    <span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keywor=
d">expr</span> {$tcl::history(nextid) + <span class=3D"hljs-number">1</span=
>}]
	}
    r* {
<span class=3D"hljs-comment">	    # history redo</span>
	    <span class=3D"hljs-keyword">if</span> {$len &gt; <span class=3D"hljs-=
number">2</span>} then {
		<span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-keyw=
ord">error</span> <span class=3D"hljs-string">"wrong # args: should be \"hi=
story redo ?event?\""</span>
	    }
	    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword"=
>string</span> match $key* redo]} then {
		<span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-keyw=
ord">error</span> <span class=3D"hljs-string">"bad option \"$key\": must be=
 $options"</span>
	    }
	    <span class=3D"hljs-keyword">return</span> [tcl::HistRedo [<span class=
=3D"hljs-keyword">lindex</span> $args <span class=3D"hljs-number">1</span>]=
]
	}
    default {
	    <span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-k=
eyword">error</span> <span class=3D"hljs-string">"bad option \"$key\": must=
 be $options"</span>
	}
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tcl::Hi=
stAdd</span> {command {<span class=3D"hljs-keyword">exec</span> {}}} {
    <span class=3D"hljs-keyword">variable</span> <span class=3D"hljs-keywor=
d">history</span>
    <span class=3D"hljs-keyword">set</span> i [<span class=3D"hljs-keyword"=
>incr</span> <span class=3D"hljs-keyword">history</span>(nextid)]
    <span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">hi=
story</span>($i) $command
    <span class=3D"hljs-keyword">set</span> j [<span class=3D"hljs-keyword"=
>incr</span> <span class=3D"hljs-keyword">history</span>(oldest)]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists <span class=3D"hljs-keyword">history</span>($j)]} then {
	<span class=3D"hljs-keyword">unset</span> <span class=3D"hljs-keyword">his=
tory</span>($j)
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> match e* $exec]} then {
	<span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keyword">u=
plevel</span> #<span class=3D"hljs-number">0</span> $command]
    } else {
	<span class=3D"hljs-keyword">return</span> {}
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tcl::Hi=
stKeep</span> {{limit {}}} {
    <span class=3D"hljs-keyword">variable</span> <span class=3D"hljs-keywor=
d">history</span>
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> length $limit] =3D=3D <span class=3D"hljs-number">0</span>} th=
en {
	<span class=3D"hljs-keyword">return</span> $history(keep)
    } else {
	<span class=3D"hljs-keyword">set</span> oldold $history(oldest)
	<span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">histo=
ry</span>(oldest) [<span class=3D"hljs-keyword">expr</span> {$history(nexti=
d) - $limit}]
	<span class=3D"hljs-keyword">for</span> {} {$oldold &lt;=3D $history(oldes=
t)} {<span class=3D"hljs-keyword">incr</span> oldold} {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
info</span> exists <span class=3D"hljs-keyword">history</span>($oldold)]} t=
hen {
		<span class=3D"hljs-keyword">unset</span> <span class=3D"hljs-keyword">hi=
story</span>($oldold)
	    }
	}
	<span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">histo=
ry</span>(keep) $limit
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tcl::Hi=
stClear</span> {} {
    <span class=3D"hljs-keyword">variable</span> <span class=3D"hljs-keywor=
d">history</span>
    <span class=3D"hljs-keyword">set</span> keep $history(keep)
    <span class=3D"hljs-keyword">unset</span> <span class=3D"hljs-keyword">=
history</span>
    <span class=3D"hljs-keyword">array</span> <span class=3D"hljs-keyword">=
set</span> <span class=3D"hljs-keyword">history</span> [<span class=3D"hljs=
-keyword">list</span> nextid <span class=3D"hljs-number">0</span> keep $kee=
p oldest -$keep]
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tcl::Hi=
stInfo</span> {{num {}}} {
    <span class=3D"hljs-keyword">variable</span> <span class=3D"hljs-keywor=
d">history</span>
    <span class=3D"hljs-keyword">if</span> {$num =3D=3D {}} then {
	<span class=3D"hljs-keyword">set</span> num [<span class=3D"hljs-keyword">=
expr</span> {$history(keep) + <span class=3D"hljs-number">1</span>}]
    }
    <span class=3D"hljs-keyword">set</span> result {}
    <span class=3D"hljs-keyword">set</span> newline <span class=3D"hljs-str=
ing">""</span>
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i [<span class=3D"hljs-keyword">expr</span> {$history(nextid) - $=
num + <span class=3D"hljs-number">1</span>}]} {$i &lt;=3D $history(nextid)}=
 {<span class=3D"hljs-keyword">incr</span> i} {
	<span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">inf=
o</span> exists <span class=3D"hljs-keyword">history</span>($i)]} then {
	    <span class=3D"hljs-keyword">continue</span>
	}
	<span class=3D"hljs-keyword">set</span> cmd [<span class=3D"hljs-keyword">=
string</span> trimright $history($i) \ \n]
	<span class=3D"hljs-keyword">regsub</span> -all \n $cmd <span class=3D"hlj=
s-string">"\n\t"</span> cmd
	<span class=3D"hljs-keyword">append</span> result $newline[<span class=3D"=
hljs-keyword">format</span> <span class=3D"hljs-string">"%6d  %s"</span> $i=
 $cmd]
	<span class=3D"hljs-keyword">set</span> newline \n
    }
    <span class=3D"hljs-keyword">return</span> $result
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tcl::Hi=
stRedo</span> {{event <span class=3D"hljs-number">-1</span>}} {
    <span class=3D"hljs-keyword">variable</span> <span class=3D"hljs-keywor=
d">history</span>
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> length $event] =3D=3D <span class=3D"hljs-number">0</span>} th=
en {
	<span class=3D"hljs-keyword">set</span> event <span class=3D"hljs-number">=
-1</span>
    }
    <span class=3D"hljs-keyword">set</span> i [HistIndex $event]
    <span class=3D"hljs-keyword">if</span> {$i =3D=3D $history(nextid)} the=
n {
	<span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-keywo=
rd">error</span> <span class=3D"hljs-string">"cannot redo the current event=
"</span>
    }
    <span class=3D"hljs-keyword">set</span> cmd $history($i)
    HistChange $cmd <span class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">uplevel</span> #<span class=3D"hljs-number=
">0</span> $cmd
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tcl::Hi=
stIndex</span> {event} {
    <span class=3D"hljs-keyword">variable</span> <span class=3D"hljs-keywor=
d">history</span>
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">c=
atch</span> {<span class=3D"hljs-keyword">expr</span> {~$event}}]} then {
	<span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">set<=
/span> i $history(nextid)} {[<span class=3D"hljs-keyword">info</span> exist=
s <span class=3D"hljs-keyword">history</span>($i)]} {<span class=3D"hljs-ke=
yword">incr</span> i <span class=3D"hljs-number">-1</span>} {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
string</span> match $event* $history($i)]} then {
		<span class=3D"hljs-keyword">return</span> $i

	    }
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
string</span> match $event $history($i)]} then {
		<span class=3D"hljs-keyword">return</span> $i

	    }
	}
	<span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-keywo=
rd">error</span> <span class=3D"hljs-string">"no event matches \"$event\""<=
/span>
    } elseif {$event &lt;=3D <span class=3D"hljs-number">0</span>} {
	<span class=3D"hljs-keyword">set</span> i [<span class=3D"hljs-keyword">ex=
pr</span> {$history(nextid) + $event}]
    } else {
	<span class=3D"hljs-keyword">set</span> i $event
    }
    <span class=3D"hljs-keyword">if</span> {$i &lt;=3D $history(oldest)} th=
en {
	<span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-keywo=
rd">error</span> <span class=3D"hljs-string">"event \"$event\" is too far i=
n the past"</span>
    }
    <span class=3D"hljs-keyword">if</span> {$i &gt; $history(nextid)} then =
{
	<span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-keywo=
rd">error</span> <span class=3D"hljs-string">"event \"$event\" hasn't occur=
ed yet"</span>
    }
    <span class=3D"hljs-keyword">return</span> $i
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tcl::Hi=
stEvent</span> {event} {
    <span class=3D"hljs-keyword">variable</span> <span class=3D"hljs-keywor=
d">history</span>
    <span class=3D"hljs-keyword">set</span> i [HistIndex $event]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists <span class=3D"hljs-keyword">history</span>($i)]} then {
	<span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keyword">s=
tring</span> trimright $history($i) \ \n]
    } else {
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-string">""<=
/span>

    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tcl::Hi=
stChange</span> {cmd {event <span class=3D"hljs-number">0</span>}} {
    <span class=3D"hljs-keyword">variable</span> <span class=3D"hljs-keywor=
d">history</span>
    <span class=3D"hljs-keyword">set</span> i [HistIndex $event]
    <span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">hi=
story</span>($i) $cmd
}
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info<=
/span> commands <span class=3D"hljs-keyword">package</span>] =3D=3D <span c=
lass=3D"hljs-string">""</span>} then {
    <span class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">"=
version mismatch: library\nscripts expect Tcl version 7.5b1 or later but th=
e loaded version is\nonly [info patchlevel]"</span>
}
<span class=3D"hljs-keyword">package</span> require -exact Tcl <span class=
=3D"hljs-number">8.3</span>
<span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">info=
</span> exists auto_path]} then {
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exist env(TCLLIBPATH)]} then {
	<span class=3D"hljs-keyword">set</span> auto_path $env(TCLLIBPATH)
    } else {
	<span class=3D"hljs-keyword">set</span> auto_path <span class=3D"hljs-stri=
ng">""</span>
    }
}
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">strin=
g</span> compare [<span class=3D"hljs-keyword">info</span> library] {}]} th=
en {
    <span class=3D"hljs-keyword">foreach</span> __dir [<span class=3D"hljs-=
keyword">list</span> [<span class=3D"hljs-keyword">info</span> library] [<s=
pan class=3D"hljs-keyword">file</span> dirname [<span class=3D"hljs-keyword=
">info</span> library]]] {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">lsea=
rch</span> -exact $auto_path $__dir] &lt; <span class=3D"hljs-number">0</sp=
an>} then {
	    <span class=3D"hljs-keyword">lappend</span> auto_path $__dir
	}
    }
}
<span class=3D"hljs-keyword">set</span> __dir [<span class=3D"hljs-keyword"=
>file</span> <span class=3D"hljs-keyword">join</span> [<span class=3D"hljs-=
keyword">file</span> dirname [<span class=3D"hljs-keyword">file</span> dirn=
ame [<span class=3D"hljs-keyword">info</span> nameofexecutable]]] lib]
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">lsear=
ch</span> -exact $auto_path $__dir] &lt; <span class=3D"hljs-number">0</spa=
n>} then {
    <span class=3D"hljs-keyword">lappend</span> auto_path $__dir
}
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info<=
/span> exist tcl_pkgPath]} then {
    <span class=3D"hljs-keyword">foreach</span> __dir $tcl_pkgPath {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">lsea=
rch</span> -exact $auto_path $__dir] &lt; <span class=3D"hljs-number">0</sp=
an>} then {
	    <span class=3D"hljs-keyword">lappend</span> auto_path $__dir
	}
    }
}
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info<=
/span> exists __dir]} then {
    <span class=3D"hljs-keyword">unset</span> __dir
}
<span class=3D"hljs-keyword">if</span> {(![<span class=3D"hljs-keyword">int=
erp</span> issafe]) &amp;&amp; [<span class=3D"hljs-keyword">string</span> =
equal $tcl_platform(platform) <span class=3D"hljs-string">"windows"</span>]=
} then {
    <span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keywo=
rd">eval</span> tcl {
	<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> envTra=
ceProc</span> {lo n1 n2 op} {
	    <span class=3D"hljs-keyword">set</span> x $::env($n2)
	    <span class=3D"hljs-keyword">set</span> ::env($lo) $x
	    <span class=3D"hljs-keyword">set</span> ::env([<span class=3D"hljs-key=
word">string</span> toupper $lo]) $x
	}
    }
    <span class=3D"hljs-keyword">foreach</span> p [<span class=3D"hljs-keyw=
ord">array</span> names env] {
	<span class=3D"hljs-keyword">set</span> u [<span class=3D"hljs-keyword">st=
ring</span> toupper $p]
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> compare $u $p]} then {
	    <span class=3D"hljs-keyword">switch</span> -- $u {
	    COMSPEC -
	    PATH {
		    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword=
">info</span> exists env($u)]} then {
			<span class=3D"hljs-keyword">set</span> env($u) $env($p)
		    }
		    <span class=3D"hljs-keyword">trace</span> <span class=3D"hljs-keyword=
">variable</span> env($p) w [<span class=3D"hljs-keyword">list</span> tcl::=
envTraceProc $p]
		    <span class=3D"hljs-keyword">trace</span> <span class=3D"hljs-keyword=
">variable</span> env($u) w [<span class=3D"hljs-keyword">list</span> tcl::=
envTraceProc $p]
		}
	    }
	}
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists p]} then {
	<span class=3D"hljs-keyword">unset</span> p
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists u]} then {
	<span class=3D"hljs-keyword">unset</span> u
    }
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists env(COMSPEC)]} then {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> equal $tcl_platform(os) <span class=3D"hljs-string">"Windows NT"<=
/span>]} then {
	    <span class=3D"hljs-keyword">set</span> env(COMSPEC) cmd.exe
	} else {
	    <span class=3D"hljs-keyword">set</span> env(COMSPEC) command.com
	}
    }
}
<span class=3D"hljs-keyword">package</span> <span class=3D"hljs-keyword">un=
known</span> tclPkgUnknown
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">lleng=
th</span> [<span class=3D"hljs-keyword">info</span> commands <span class=3D=
"hljs-keyword">exec</span>]] =3D=3D <span class=3D"hljs-number">0</span>} t=
hen {
    <span class=3D"hljs-keyword">set</span> auto_noexec <span class=3D"hljs=
-number">1</span>
}
<span class=3D"hljs-keyword">set</span> errorCode <span class=3D"hljs-strin=
g">""</span>
<span class=3D"hljs-keyword">set</span> errorInfo <span class=3D"hljs-strin=
g">""</span>
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">lleng=
th</span> [<span class=3D"hljs-keyword">info</span> commands tclLog]] =3D=
=3D <span class=3D"hljs-number">0</span>} then {
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tcl=
Log</span> {<span class=3D"hljs-keyword">string</span>} {
	<span class=3D"hljs-keyword">catch</span> {<span class=3D"hljs-keyword">pu=
ts</span> stderr $string}
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> unknown=
</span> args {
    <span class=3D"hljs-keyword">global</span> auto_noexec auto_noload env =
unknown_pending tcl_interactive
    <span class=3D"hljs-keyword">global</span> errorCode errorInfo
    <span class=3D"hljs-keyword">set</span> cmd [<span class=3D"hljs-keywor=
d">lindex</span> $args <span class=3D"hljs-number">0</span>]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">r=
egexp</span> <span class=3D"hljs-string">"^namespace\[ \t\n\]+inscope"</spa=
n> $cmd] &amp;&amp; [<span class=3D"hljs-keyword">llength</span> $cmd] =3D=
=3D <span class=3D"hljs-number">4</span>} then {
	<span class=3D"hljs-keyword">set</span> arglist [<span class=3D"hljs-keywo=
rd">lrange</span> $args <span class=3D"hljs-number">1</span> end]
	<span class=3D"hljs-keyword">set</span> ret [<span class=3D"hljs-keyword">=
catch</span> {<span class=3D"hljs-keyword">uplevel</span> $cmd $arglist} re=
sult]
	<span class=3D"hljs-keyword">if</span> {$ret =3D=3D <span class=3D"hljs-nu=
mber">0</span>} then {
	    <span class=3D"hljs-keyword">return</span> $result
	} else {
	    <span class=3D"hljs-keyword">return</span> -code $ret -errorcode $erro=
rCode $result
	}
    }
    <span class=3D"hljs-keyword">set</span> savedErrorCode $errorCode
    <span class=3D"hljs-keyword">set</span> savedErrorInfo $errorInfo
    <span class=3D"hljs-keyword">set</span> name [<span class=3D"hljs-keywo=
rd">lindex</span> $args <span class=3D"hljs-number">0</span>]
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists auto_noload]} then {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info=
</span> exists unknown_pending($name)]} then {
	    <span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-k=
eyword">error</span> <span class=3D"hljs-string">"self-referential recursio=
n in \"unknown\" for command \"$name\""</span>

	}
	<span class=3D"hljs-keyword">set</span> unknown_pending($name) pending

	<span class=3D"hljs-keyword">set</span> ret [<span class=3D"hljs-keyword">=
catch</span> {<span class=3D"hljs-keyword">auto_load</span> $name [<span cl=
ass=3D"hljs-keyword">uplevel</span> <span class=3D"hljs-number">1</span> {<=
span class=3D"hljs-keyword">namespace</span> current}]} msg]
	<span class=3D"hljs-keyword">unset</span> unknown_pending($name)

	<span class=3D"hljs-keyword">if</span> {$ret !=3D <span class=3D"hljs-numb=
er">0</span>} then {
	    <span class=3D"hljs-keyword">append</span> errorInfo <span class=3D"hl=
js-string">"\n    (autoloading \"$name\")"</span>
	    <span class=3D"hljs-keyword">return</span> -code $ret -errorcode $erro=
rCode -errorinfo $errorInfo $msg
	}
	<span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">arr=
ay</span> size unknown_pending]} then {
	    <span class=3D"hljs-keyword">unset</span> unknown_pending
	}
	<span class=3D"hljs-keyword">if</span> {$msg} then {
	    <span class=3D"hljs-keyword">set</span> errorCode $savedErrorCode
	    <span class=3D"hljs-keyword">set</span> errorInfo $savedErrorInfo
	    <span class=3D"hljs-keyword">set</span> code [<span class=3D"hljs-keyw=
ord">catch</span> {<span class=3D"hljs-keyword">uplevel</span> <span class=
=3D"hljs-number">1</span> $args} msg]
	    <span class=3D"hljs-keyword">if</span> {$code =3D=3D <span class=3D"hl=
js-number">1</span>} then {
		<span class=3D"hljs-keyword">set</span> new [<span class=3D"hljs-keyword"=
>split</span> $errorInfo \n]
		<span class=3D"hljs-keyword">set</span> new [<span class=3D"hljs-keyword"=
>join</span> [<span class=3D"hljs-keyword">lrange</span> $new <span class=
=3D"hljs-number">0</span> [<span class=3D"hljs-keyword">expr</span> {[<span=
 class=3D"hljs-keyword">llength</span> $new] - <span class=3D"hljs-number">=
6</span>}]] \n]
		<span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-keyw=
ord">error</span> -errorcode $errorCode -errorinfo $new $msg
	    } else {
		<span class=3D"hljs-keyword">return</span> -code $code $msg
	    }
	}
    }
    <span class=3D"hljs-keyword">if</span> {([<span class=3D"hljs-keyword">=
info</span> level] =3D=3D <span class=3D"hljs-number">1</span>) &amp;&amp; =
[<span class=3D"hljs-keyword">string</span> equal [<span class=3D"hljs-keyw=
ord">info</span> script] <span class=3D"hljs-string">""</span>] &amp;&amp; =
[<span class=3D"hljs-keyword">info</span> exists tcl_interactive] &amp;&amp=
; $tcl_interactive} then {
	<span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">inf=
o</span> exists auto_noexec]} then {
	    <span class=3D"hljs-keyword">set</span> new [<span class=3D"hljs-keywo=
rd">auto_execok</span> $name]
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
string</span> compare {} $new]} then {
		<span class=3D"hljs-keyword">set</span> errorCode $savedErrorCode
		<span class=3D"hljs-keyword">set</span> errorInfo $savedErrorInfo
		<span class=3D"hljs-keyword">set</span> redir <span class=3D"hljs-string"=
>""</span>
		<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">str=
ing</span> equal [<span class=3D"hljs-keyword">info</span> commands console=
] <span class=3D"hljs-string">""</span>]} then {
		    <span class=3D"hljs-keyword">set</span> redir <span class=3D"hljs-str=
ing">"&gt;&amp;@stdout &lt;@stdin"</span>
		}
		<span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keyword">=
uplevel</span> <span class=3D"hljs-keyword">exec</span> $redir $new [<span =
class=3D"hljs-keyword">lrange</span> $args <span class=3D"hljs-number">1</s=
pan> end]]
	    }
	}
	<span class=3D"hljs-keyword">set</span> errorCode $savedErrorCode
	<span class=3D"hljs-keyword">set</span> errorInfo $savedErrorInfo
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> equal $name <span class=3D"hljs-string">"!!"</span>]} then {
	    <span class=3D"hljs-keyword">set</span> newcmd [<span class=3D"hljs-ke=
yword">history</span> event]
	} elseif {[<span class=3D"hljs-keyword">regexp</span> {^!(.+)$} $name dumm=
y event]} {
	    <span class=3D"hljs-keyword">set</span> newcmd [<span class=3D"hljs-ke=
yword">history</span> event $event]
	} elseif {[<span class=3D"hljs-keyword">regexp</span> {^\^([^^]*)\^([^^]*)=
\^?$} $name dummy old new]} {
	    <span class=3D"hljs-keyword">set</span> newcmd [<span class=3D"hljs-ke=
yword">history</span> event <span class=3D"hljs-number">-1</span>]
	    <span class=3D"hljs-keyword">catch</span> {<span class=3D"hljs-keyword=
">regsub</span> -all -- $old $newcmd $new newcmd}
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info=
</span> exists newcmd]} then {
	    tclLog $newcmd
	    <span class=3D"hljs-keyword">history</span> change $newcmd <span class=
=3D"hljs-number">0</span>
	    <span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keywor=
d">uplevel</span> $newcmd]
	}
	<span class=3D"hljs-keyword">set</span> ret [<span class=3D"hljs-keyword">=
catch</span> {<span class=3D"hljs-keyword">set</span> cmds [<span class=3D"=
hljs-keyword">info</span> commands $name*]} msg]
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> equal $name <span class=3D"hljs-string">"::"</span>]} then {
	    <span class=3D"hljs-keyword">set</span> name <span class=3D"hljs-strin=
g">""</span>
	}
	<span class=3D"hljs-keyword">if</span> {$ret !=3D <span class=3D"hljs-numb=
er">0</span>} then {
	    <span class=3D"hljs-keyword">return</span> -code $ret -errorcode $erro=
rCode <span class=3D"hljs-string">"error in unknown while checking if \"$na=
me\" is a unique command abbreviation: $msg"</span>
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">llen=
gth</span> $cmds] =3D=3D <span class=3D"hljs-number">1</span>} then {
	    <span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keywor=
d">uplevel</span> [<span class=3D"hljs-keyword">lreplace</span> $args <span=
 class=3D"hljs-number">0</span> <span class=3D"hljs-number">0</span> $cmds]=
]
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">llen=
gth</span> $cmds]} then {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
string</span> equal $name <span class=3D"hljs-string">""</span>]} then {
		<span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-keyw=
ord">error</span> <span class=3D"hljs-string">"empty command name \"\""</sp=
an>
	    } else {
		<span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-keyw=
ord">error</span> <span class=3D"hljs-string">"ambiguous command name \"$na=
me\": [lsort $cmds]"</span>
	    }
	}
    }
    <span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-ke=
yword">error</span> <span class=3D"hljs-string">"invalid command name \"$na=
me\""</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> auto_lo=
ad</span> {cmd {<span class=3D"hljs-keyword">namespace</span> {}}} {
    <span class=3D"hljs-keyword">global</span> auto_index auto_oldpath auto=
_path
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> length $namespace] =3D=3D <span class=3D"hljs-number">0</span>=
} then {
	<span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">names=
pace</span> [<span class=3D"hljs-keyword">uplevel</span> {<span class=3D"hl=
js-keyword">namespace</span> current}]
    }
    <span class=3D"hljs-keyword">set</span> nameList [<span class=3D"hljs-k=
eyword">auto_qualify</span> $cmd $namespace]
    <span class=3D"hljs-keyword">lappend</span> nameList $cmd
    <span class=3D"hljs-keyword">foreach</span> name $nameList {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info=
</span> exists auto_index($name)]} then {
	    <span class=3D"hljs-keyword">uplevel</span> #<span class=3D"hljs-numbe=
r">0</span> $auto_index($name)
	    <span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keywor=
d">expr</span> {[<span class=3D"hljs-keyword">info</span> commands $name] !=
=3D <span class=3D"hljs-string">""</span>}]
	}
    }
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists auto_path]} then {
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">if</span> {![auto_load_index]} then {
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">foreach</span> name $nameList {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info=
</span> exists auto_index($name)]} then {
	    <span class=3D"hljs-keyword">uplevel</span> #<span class=3D"hljs-numbe=
r">0</span> $auto_index($name)
	    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword"=
>string</span> equal [<span class=3D"hljs-keyword">namespace</span> which -=
command $name] <span class=3D"hljs-string">""</span>]} then {
		<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">1<=
/span>
	    }
	}
    }
    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">=
0</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> auto_lo=
ad_index</span> {} {
    <span class=3D"hljs-keyword">global</span> auto_index auto_oldpath auto=
_path errorInfo errorCode
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists auto_oldpath] &amp;&amp; [<span class=3D"hljs-keyword">st=
ring</span> equal $auto_oldpath $auto_path]} then {
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">set</span> auto_oldpath $auto_path
    <span class=3D"hljs-keyword">set</span> issafe [<span class=3D"hljs-key=
word">interp</span> issafe]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i [<span class=3D"hljs-keyword">expr</span> {[<span class=3D"hljs=
-keyword">llength</span> $auto_path] - <span class=3D"hljs-number">1</span>=
}]} {$i &gt;=3D <span class=3D"hljs-number">0</span>} {<span class=3D"hljs-=
keyword">incr</span> i <span class=3D"hljs-number">-1</span>} {
	<span class=3D"hljs-keyword">set</span> dir [<span class=3D"hljs-keyword">=
lindex</span> $auto_path $i]
	<span class=3D"hljs-keyword">set</span> f <span class=3D"hljs-string">""</=
span>
	<span class=3D"hljs-keyword">if</span> {$issafe} then {
	    <span class=3D"hljs-keyword">catch</span> {<span class=3D"hljs-keyword=
">source</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hl=
js-keyword">join</span> $dir tclIndex]}
	} elseif {[<span class=3D"hljs-keyword">catch</span> {<span class=3D"hljs-=
keyword">set</span> f [<span class=3D"hljs-keyword">open</span> [<span clas=
s=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">join</span> $di=
r tclIndex]]}]} {
	    <span class=3D"hljs-keyword">continue</span>
	} else {
	    <span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">e=
rror</span> [<span class=3D"hljs-keyword">catch</span> {
		<span class=3D"hljs-keyword">set</span> id [<span class=3D"hljs-keyword">=
gets</span> $f]
		<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">str=
ing</span> equal $id <span class=3D"hljs-string">"# Tcl autoload index file=
, version 2.0"</span>]} then {
		    <span class=3D"hljs-keyword">eval</span> [<span class=3D"hljs-keyword=
">read</span> $f]
		} elseif {[<span class=3D"hljs-keyword">string</span> equal $id <span cla=
ss=3D"hljs-string">"# Tcl autoload index file: each line identifies a Tcl"<=
/span>]} {
		    <span class=3D"hljs-keyword">while</span> {[<span class=3D"hljs-keywo=
rd">gets</span> $f line] &gt;=3D <span class=3D"hljs-number">0</span>} {
			<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">st=
ring</span> equal [<span class=3D"hljs-keyword">string</span> index $line <=
span class=3D"hljs-number">0</span>] <span class=3D"hljs-string">"#"</span>=
] ||([<span class=3D"hljs-keyword">llength</span> $line] !=3D <span class=
=3D"hljs-number">2</span>)} then {
			    <span class=3D"hljs-keyword">continue</span>
			}
			<span class=3D"hljs-keyword">set</span> name [<span class=3D"hljs-keywor=
d">lindex</span> $line <span class=3D"hljs-number">0</span>]
			<span class=3D"hljs-keyword">set</span> auto_index($name) <span class=3D=
"hljs-string">"source [file join $dir [lindex $line 1]]"</span>
		    }
		} else {
		    <span class=3D"hljs-keyword">error</span> <span class=3D"hljs-string"=
>"[file join $dir tclIndex] isn't a proper Tcl index file"</span>
		}
	    } msg]
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
string</span> compare $f <span class=3D"hljs-string">""</span>]} then {
		<span class=3D"hljs-keyword">close</span> $f
	    }
	    <span class=3D"hljs-keyword">if</span> {$error} then {
		<span class=3D"hljs-keyword">error</span> $msg $errorInfo $errorCode
	    }
	}
    }
    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">=
1</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> auto_qu=
alify</span> {cmd <span class=3D"hljs-keyword">namespace</span>} {
    <span class=3D"hljs-keyword">set</span> n [<span class=3D"hljs-keyword"=
>regsub</span> -all {::+} $cmd :: cmd]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">r=
egexp</span> {^::(.*)$} $cmd x tail]} then {
	<span class=3D"hljs-keyword">if</span> {$n &gt; <span class=3D"hljs-number=
">1</span>} then {
	    <span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keywor=
d">list</span> $cmd]
	} else {
	    <span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keywor=
d">list</span> $tail]
	}
    }
    <span class=3D"hljs-keyword">if</span> {$n =3D=3D <span class=3D"hljs-n=
umber">0</span>} then {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> equal $namespace ::]} then {
	    <span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keywor=
d">list</span> $cmd]
	} else {
	    <span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keywor=
d">list</span> ${namespace}::$cmd $cmd]
	}
    } elseif {[<span class=3D"hljs-keyword">string</span> equal $namespace =
::]} {
	<span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keyword">l=
ist</span> ::$cmd]
    } else {
	<span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keyword">l=
ist</span> ${namespace}::$cmd ::$cmd]
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> auto_im=
port</span> {pattern} {
    <span class=3D"hljs-keyword">global</span> auto_index
    <span class=3D"hljs-keyword">set</span> ns [<span class=3D"hljs-keyword=
">uplevel</span> <span class=3D"hljs-keyword">namespace</span> current]
    <span class=3D"hljs-keyword">set</span> patternList [<span class=3D"hlj=
s-keyword">auto_qualify</span> $pattern $ns]
    auto_load_index
    <span class=3D"hljs-keyword">foreach</span> pattern $patternList {
	<span class=3D"hljs-keyword">foreach</span> name [<span class=3D"hljs-keyw=
ord">array</span> names auto_index] {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
string</span> match $pattern $name] &amp;&amp; [<span class=3D"hljs-keyword=
">string</span> equal <span class=3D"hljs-string">""</span> [<span class=3D=
"hljs-keyword">info</span> commands $name]]} then {
		<span class=3D"hljs-keyword">uplevel</span> #<span class=3D"hljs-number">=
0</span> $auto_index($name)
	    }
	}
    }
}
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">strin=
g</span> equal windows $tcl_platform(platform)]} then {
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> aut=
o_execok</span> name {
	<span class=3D"hljs-keyword">global</span> auto_execs env tcl_platform
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info=
</span> exists auto_execs($name)]} then {
	    <span class=3D"hljs-keyword">return</span> $auto_execs($name)
	}
	<span class=3D"hljs-keyword">set</span> auto_execs($name) <span class=3D"h=
ljs-string">""</span>
	<span class=3D"hljs-keyword">set</span> shellBuiltins [<span class=3D"hljs=
-keyword">list</span> cls copy date del erase dir echo mkdir md <span class=
=3D"hljs-keyword">rename</span> ren rmdir rd <span class=3D"hljs-keyword">t=
ime</span> type ver vol]
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> equal $tcl_platform(os) <span class=3D"hljs-string">"Windows NT"<=
/span>]} then {
	    <span class=3D"hljs-keyword">lappend</span> shellBuiltins <span class=
=3D"hljs-string">"start"</span>
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">lsea=
rch</span> -exact $shellBuiltins $name] !=3D <span class=3D"hljs-number">-1=
</span>} then {
	    <span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keywor=
d">set</span> auto_execs($name) [<span class=3D"hljs-keyword">list</span> $=
env(COMSPEC) /c $name]]
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">llen=
gth</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-ke=
yword">split</span> $name]] !=3D <span class=3D"hljs-number">1</span>} then=
 {
	    <span class=3D"hljs-keyword">foreach</span> ext {{} .com .exe .bat} {
		<span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">file=
</span> ${name}${ext}
		<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">fil=
e</span> exists $file] &amp;&amp; ![<span class=3D"hljs-keyword">file</span=
> isdirectory $file]} then {
		    <span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keywo=
rd">set</span> auto_execs($name) [<span class=3D"hljs-keyword">list</span> =
$file]]
		}
	    }
	    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-string"=
>""</span>
	}
	<span class=3D"hljs-keyword">set</span> path <span class=3D"hljs-string">"=
[file dirname [info nameof]];.;"</span>
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info=
</span> exists env(WINDIR)]} then {
	    <span class=3D"hljs-keyword">set</span> windir $env(WINDIR)
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info=
</span> exists windir]} then {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
string</span> equal $tcl_platform(os) <span class=3D"hljs-string">"Windows =
NT"</span>]} then {
		<span class=3D"hljs-keyword">append</span> path <span class=3D"hljs-strin=
g">"$windir/system32;"</span>
	    }
	    <span class=3D"hljs-keyword">append</span> path <span class=3D"hljs-st=
ring">"$windir/system;$windir;"</span>
	}
	<span class=3D"hljs-keyword">foreach</span> var {PATH Path path} {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
info</span> exists env($var)]} then {
		<span class=3D"hljs-keyword">append</span> path <span class=3D"hljs-strin=
g">";$env($var)"</span>
	    }
	}
	<span class=3D"hljs-keyword">foreach</span> dir [<span class=3D"hljs-keywo=
rd">split</span> $path {;}] {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
info</span> exists checked($dir)] || [<span class=3D"hljs-keyword">string</=
span> equal {} $dir]} then {
		<span class=3D"hljs-keyword">continue</span>
	    }
	    <span class=3D"hljs-keyword">set</span> checked($dir) {}
	    <span class=3D"hljs-keyword">foreach</span> ext {{} .com .exe .bat} {
		<span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">file=
</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keywo=
rd">join</span> $dir ${name}${ext}]
		<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">fil=
e</span> exists $file] &amp;&amp; ![<span class=3D"hljs-keyword">file</span=
> isdirectory $file]} then {
		    <span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keywo=
rd">set</span> auto_execs($name) [<span class=3D"hljs-keyword">list</span> =
$file]]
		}
	    }
	}
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-string">""<=
/span>
    }
} else {
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> aut=
o_execok</span> name {
	<span class=3D"hljs-keyword">global</span> auto_execs env
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info=
</span> exists auto_execs($name)]} then {
	    <span class=3D"hljs-keyword">return</span> $auto_execs($name)
	}
	<span class=3D"hljs-keyword">set</span> auto_execs($name) <span class=3D"h=
ljs-string">""</span>
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">llen=
gth</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-ke=
yword">split</span> $name]] !=3D <span class=3D"hljs-number">1</span>} then=
 {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
file</span> executable $name] &amp;&amp; ![<span class=3D"hljs-keyword">fil=
e</span> isdirectory $name]} then {
		<span class=3D"hljs-keyword">set</span> auto_execs($name) [<span class=3D=
"hljs-keyword">list</span> $name]
	    }
	    <span class=3D"hljs-keyword">return</span> $auto_execs($name)
	}
	<span class=3D"hljs-keyword">foreach</span> dir [<span class=3D"hljs-keywo=
rd">split</span> $env(PATH) :] {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
string</span> equal $dir <span class=3D"hljs-string">""</span>]} then {
		<span class=3D"hljs-keyword">set</span> dir .
	    }
	    <span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">f=
ile</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-ke=
yword">join</span> $dir $name]
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
file</span> executable $file] &amp;&amp; ![<span class=3D"hljs-keyword">fil=
e</span> isdirectory $file]} then {
		<span class=3D"hljs-keyword">set</span> auto_execs($name) [<span class=3D=
"hljs-keyword">list</span> $file]
		<span class=3D"hljs-keyword">return</span> $auto_execs($name)
	    }
	}
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-string">""<=
/span>
    }
}
<span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keyword">=
eval</span> ::pkg {
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> pkg_com=
pareExtension</span> {fileName {ext {}}} {
    <span class=3D"hljs-keyword">global</span> tcl_platform
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> length $ext] =3D=3D <span class=3D"hljs-number">0</span>} then=
 {
	<span class=3D"hljs-keyword">set</span> ext [<span class=3D"hljs-keyword">=
info</span> sharedlibextension]
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $tcl_platform(platform) <span class=3D"hljs-string">"win=
dows"</span>]} then {
	<span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keyword">s=
tring</span> equal -nocase [<span class=3D"hljs-keyword">file</span> extens=
ion $fileName] $ext]
    } else {
	<span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keyword">s=
tring</span> equal [<span class=3D"hljs-keyword">file</span> extension $fil=
eName] $ext]
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> pkg_mkI=
ndex</span> {args} {
    <span class=3D"hljs-keyword">global</span> errorCode errorInfo
    <span class=3D"hljs-keyword">set</span> usage {<span class=3D"hljs-stri=
ng">"pkg_mkIndex ?-direct? ?-verbose? ?-load pattern? ?--? dir ?pattern ...=
?"</span>}

    <span class=3D"hljs-keyword">set</span> argCount [<span class=3D"hljs-k=
eyword">llength</span> $args]
    <span class=3D"hljs-keyword">if</span> {$argCount &lt; <span class=3D"h=
ljs-number">1</span>} then {
	<span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-keywo=
rd">error</span> <span class=3D"hljs-string">"wrong # args: should be\n$usa=
ge"</span>
    }
    <span class=3D"hljs-keyword">set</span> more <span class=3D"hljs-string=
">""</span>
    <span class=3D"hljs-keyword">set</span> direct <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">set</span> doVerbose <span class=3D"hljs-n=
umber">0</span>
    <span class=3D"hljs-keyword">set</span> loadPat <span class=3D"hljs-str=
ing">""</span>
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> idx <span class=3D"hljs-number">0</span>} {$idx &lt; $argCount} {=
<span class=3D"hljs-keyword">incr</span> idx} {
	<span class=3D"hljs-keyword">set</span> flag [<span class=3D"hljs-keyword"=
>lindex</span> $args $idx]
	<span class=3D"hljs-keyword">switch</span> -<span class=3D"hljs-keyword">g=
lob</span> -- $flag {
	-- {
		<span class=3D"hljs-keyword">incr</span> idx
		<span class=3D"hljs-keyword">break</span>
	    }
	-verbose {
		<span class=3D"hljs-keyword">set</span> doVerbose <span class=3D"hljs-num=
ber">1</span>
	    }
	-lazy {
		<span class=3D"hljs-keyword">set</span> direct <span class=3D"hljs-number=
">0</span>
		<span class=3D"hljs-keyword">append</span> more <span class=3D"hljs-strin=
g">" -lazy"</span>
	    }
	-direct {
		<span class=3D"hljs-keyword">append</span> more <span class=3D"hljs-strin=
g">" -direct"</span>
	    }
	-<span class=3D"hljs-keyword">load</span> {
		<span class=3D"hljs-keyword">incr</span> idx
		<span class=3D"hljs-keyword">set</span> loadPat [<span class=3D"hljs-keyw=
ord">lindex</span> $args $idx]
		<span class=3D"hljs-keyword">append</span> more <span class=3D"hljs-strin=
g">" -load $loadPat"</span>
	    }
	-* {
		<span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-keyw=
ord">error</span> <span class=3D"hljs-string">"unknown flag $flag: should b=
e\n$usage"</span>
	    }
	default {
		<span class=3D"hljs-keyword">break</span>
	    }
	}
    }
    <span class=3D"hljs-keyword">set</span> dir [<span class=3D"hljs-keywor=
d">lindex</span> $args $idx]
    <span class=3D"hljs-keyword">set</span> patternList [<span class=3D"hlj=
s-keyword">lrange</span> $args [<span class=3D"hljs-keyword">expr</span> {$=
idx + <span class=3D"hljs-number">1</span>}] end]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">l=
length</span> $patternList] =3D=3D <span class=3D"hljs-number">0</span>} th=
en {
	<span class=3D"hljs-keyword">set</span> patternList [<span class=3D"hljs-k=
eyword">list</span> <span class=3D"hljs-string">"*.tcl"</span> <span class=
=3D"hljs-string">"*[info sharedlibextension]"</span>]
    }
    <span class=3D"hljs-keyword">set</span> oldDir [<span class=3D"hljs-key=
word">pwd</span>]
    <span class=3D"hljs-keyword">cd</span> $dir
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">c=
atch</span> {<span class=3D"hljs-keyword">eval</span> <span class=3D"hljs-k=
eyword">glob</span> $patternList} fileList]} then {
	<span class=3D"hljs-keyword">global</span> errorCode errorInfo
	<span class=3D"hljs-keyword">cd</span> $oldDir
	<span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-keywo=
rd">error</span> -errorcode $errorCode -errorinfo $errorInfo $fileList
    }
    <span class=3D"hljs-keyword">foreach</span> <span class=3D"hljs-keyword=
">file</span> $fileList {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> equal $file <span class=3D"hljs-string">"pkgIndex.tcl"</span>]} t=
hen {
	    <span class=3D"hljs-keyword">continue</span>
	}
	<span class=3D"hljs-keyword">cd</span> $oldDir
	<span class=3D"hljs-keyword">set</span> c [<span class=3D"hljs-keyword">in=
terp</span> create]
	<span class=3D"hljs-keyword">foreach</span> pkg [<span class=3D"hljs-keywo=
rd">info</span> loaded] {
	    <span class=3D"hljs-keyword">if</span> {! [<span class=3D"hljs-keyword=
">string</span> match $loadPat [<span class=3D"hljs-keyword">lindex</span> =
$pkg <span class=3D"hljs-number">1</span>]]} then {
		<span class=3D"hljs-keyword">continue</span>
	    }
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
catch</span> {
		<span class=3D"hljs-keyword">load</span> [<span class=3D"hljs-keyword">li=
ndex</span> $pkg <span class=3D"hljs-number">0</span>] [<span class=3D"hljs=
-keyword">lindex</span> $pkg <span class=3D"hljs-number">1</span>] $c
	    } err]} then {
		<span class=3D"hljs-keyword">if</span> {$doVerbose} then {
		    tclLog <span class=3D"hljs-string">"warning: load [lindex $pkg 0] [li=
ndex $pkg 1]\nfailed with: $err"</span>
		}
	    } elseif {$doVerbose} {
		tclLog <span class=3D"hljs-string">"loaded [lindex $pkg 0] [lindex $pkg 1=
]"</span>
	    }
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
string</span> equal [<span class=3D"hljs-keyword">lindex</span> $pkg <span =
class=3D"hljs-number">1</span>] <span class=3D"hljs-string">"Tk"</span>]} t=
hen {
		$c <span class=3D"hljs-keyword">eval</span> [<span class=3D"hljs-keyword"=
>list</span> wm withdraw .]
	    }
	}
	<span class=3D"hljs-keyword">cd</span> $dir
	$c <span class=3D"hljs-keyword">eval</span> {
<span class=3D"hljs-keyword">rename</span> <span class=3D"hljs-keyword">pac=
kage</span> __package_orig
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> package=
</span> {what args} {
<span class=3D"hljs-keyword">switch</span> -- $what {
require { <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-co=
mment">; # ignore transitive requires }</span>
default { <span class=3D"hljs-keyword">eval</span> __package_orig {$what} $=
args }
}
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tclPkgU=
nknown</span> args {}
<span class=3D"hljs-keyword">package</span> <span class=3D"hljs-keyword">un=
known</span> tclPkgUnknown
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> unknown=
</span> {args} {}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> auto_im=
port</span> {args} {}
<span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keyword">=
eval</span> ::tcl {
<span class=3D"hljs-keyword">variable</span> <span class=3D"hljs-keyword">f=
ile</span>		<span class=3D"hljs-comment">;# Current file being processed</s=
pan>
<span class=3D"hljs-keyword">variable</span> direct		<span class=3D"hljs-co=
mment">;# -direct flag value</span>
<span class=3D"hljs-keyword">variable</span> x		<span class=3D"hljs-comment=
">;# Loop variable</span>
<span class=3D"hljs-keyword">variable</span> debug		<span class=3D"hljs-com=
ment">;# For debugging</span>
<span class=3D"hljs-keyword">variable</span> type		<span class=3D"hljs-comm=
ent">;# "load" or "source", for -direct</span>
<span class=3D"hljs-keyword">variable</span> namespaces	<span class=3D"hljs=
-comment">;# Existing namespaces (e.g., ::tcl)</span>
<span class=3D"hljs-keyword">variable</span> packages	<span class=3D"hljs-c=
omment">;# Existing packages (e.g., Tcl)</span>
<span class=3D"hljs-keyword">variable</span> origCmds	<span class=3D"hljs-c=
omment">;# Existing commands</span>
<span class=3D"hljs-keyword">variable</span> newCmds	<span class=3D"hljs-co=
mment">;# Newly created commands</span>
<span class=3D"hljs-keyword">variable</span> newPkgs {}	<span class=3D"hljs=
-comment">;# Newly created packages</span>
}
}
	$c <span class=3D"hljs-keyword">eval</span> [<span class=3D"hljs-keyword">=
list</span> <span class=3D"hljs-keyword">set</span> ::tcl::<span class=3D"h=
ljs-keyword">file</span> $file]
	$c <span class=3D"hljs-keyword">eval</span> [<span class=3D"hljs-keyword">=
list</span> <span class=3D"hljs-keyword">set</span> ::tcl::direct $direct]
	<span class=3D"hljs-keyword">foreach</span> p {pkg_compareExtension} {
	    $c <span class=3D"hljs-keyword">eval</span> [<span class=3D"hljs-keywo=
rd">list</span> <span class=3D"hljs-keyword">proc</span> $p [info<span clas=
s=3D"hljs-title"> args</span> $p] [info<span class=3D"hljs-title"> body</sp=
an> $p]]
	}<span class=3D"hljs-title">
	if</span> {[<span class=3D"hljs-keyword">catch</span> {
	    $c <span class=3D"hljs-keyword">eval</span> {
<span class=3D"hljs-keyword">set</span> ::tcl::debug <span class=3D"hljs-st=
ring">"loading or sourcing"</span>
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::tcl::=
GetAllNamespaces</span> {{root ::}} {
<span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">list</=
span> $root
<span class=3D"hljs-keyword">foreach</span> ns [<span class=3D"hljs-keyword=
">namespace</span> children $root] {
<span class=3D"hljs-keyword">eval</span> <span class=3D"hljs-keyword">lappe=
nd</span> <span class=3D"hljs-keyword">list</span> [::tcl::GetAllNamespaces=
 $ns]
}
<span class=3D"hljs-keyword">return</span> $list
}
<span class=3D"hljs-keyword">foreach</span> ::tcl::x [::tcl::GetAllNamespac=
es] {
<span class=3D"hljs-keyword">set</span> ::tcl::namespaces($::tcl::x) <span =
class=3D"hljs-number">1</span>
}
<span class=3D"hljs-keyword">foreach</span> ::tcl::x [<span class=3D"hljs-k=
eyword">package</span> names] {
<span class=3D"hljs-keyword">set</span> ::tcl::packages($::tcl::x) <span cl=
ass=3D"hljs-number">1</span>
}
<span class=3D"hljs-keyword">set</span> ::tcl::origCmds [<span class=3D"hlj=
s-keyword">info</span> commands]
<span class=3D"hljs-keyword">if</span> {[pkg_compareExtension $::tcl::file =
[<span class=3D"hljs-keyword">info</span> sharedlibextension]]} {
<span class=3D"hljs-keyword">set</span> ::tcl::debug loading
<span class=3D"hljs-keyword">load</span> [<span class=3D"hljs-keyword">file=
</span> <span class=3D"hljs-keyword">join</span> . $::tcl::file]
<span class=3D"hljs-keyword">set</span> ::tcl::type <span class=3D"hljs-key=
word">load</span>
} else {
<span class=3D"hljs-keyword">set</span> ::tcl::debug sourcing
<span class=3D"hljs-keyword">source</span> $::tcl::file
<span class=3D"hljs-keyword">set</span> ::tcl::type <span class=3D"hljs-key=
word">source</span>
}
<span class=3D"hljs-keyword">if</span> { !$::tcl::direct } {
<span class=3D"hljs-keyword">foreach</span> ::tcl::x [::tcl::GetAllNamespac=
es] {
<span class=3D"hljs-keyword">if</span> {! [<span class=3D"hljs-keyword">inf=
o</span> exists ::tcl::namespaces($::tcl::x)]} {
<span class=3D"hljs-keyword">namespace</span> import -force ${::tcl::x}::*
}
<span class=3D"hljs-keyword">foreach</span> ::tcl::x [<span class=3D"hljs-k=
eyword">info</span> commands] {
<span class=3D"hljs-keyword">set</span> ::tcl::newCmds($::tcl::x) <span cla=
ss=3D"hljs-number">1</span>
}
<span class=3D"hljs-keyword">foreach</span> ::tcl::x $::tcl::origCmds {
<span class=3D"hljs-keyword">catch</span> {<span class=3D"hljs-keyword">uns=
et</span> ::tcl::newCmds($::tcl::x)}
}
<span class=3D"hljs-keyword">foreach</span> ::tcl::x [<span class=3D"hljs-k=
eyword">array</span> names ::tcl::newCmds] {
<span class=3D"hljs-keyword">set</span> ::tcl::abs [<span class=3D"hljs-key=
word">namespace</span> origin $::tcl::x]
<span class=3D"hljs-keyword">set</span> ::tcl::abs \
				    [<span class=3D"hljs-keyword">lindex</span> [<span class=3D"hljs-ke=
yword">auto_qualify</span> $::tcl::abs ::] <span class=3D"hljs-number">0</s=
pan>]
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">strin=
g</span> compare $::tcl::x $::tcl::abs]} {
<span class=3D"hljs-keyword">set</span> ::tcl::newCmds($::tcl::abs) <span c=
lass=3D"hljs-number">1</span>
<span class=3D"hljs-keyword">unset</span> ::tcl::newCmds($::tcl::x)
}
}
}
}
<span class=3D"hljs-keyword">foreach</span> ::tcl::x [<span class=3D"hljs-k=
eyword">package</span> names] {
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">strin=
g</span> compare [<span class=3D"hljs-keyword">package</span> provide $::tc=
l::x] <span class=3D"hljs-string">""</span>] \
			    &amp;&amp; ![<span class=3D"hljs-keyword">info</span> exists ::tcl::=
packages($::tcl::x)]} {
<span class=3D"hljs-keyword">lappend</span> ::tcl::newPkgs \
			    [<span class=3D"hljs-keyword">list</span> $::tcl::x [<span class=3D"=
hljs-keyword">package</span> provide $::tcl::x]]
}
}
}
	} msg] =3D=3D <span class=3D"hljs-number">1</span>} then {
	    <span class=3D"hljs-keyword">set</span> what [$c <span class=3D"hljs-k=
eyword">eval</span> <span class=3D"hljs-keyword">set</span> ::tcl::debug]
	    <span class=3D"hljs-keyword">if</span> {$doVerbose} then {
		tclLog <span class=3D"hljs-string">"warning: error while $what $file: $ms=
g"</span>
	    }
	} else {
	    <span class=3D"hljs-keyword">set</span> type [$c <span class=3D"hljs-k=
eyword">eval</span> <span class=3D"hljs-keyword">set</span> ::tcl::type]
	    <span class=3D"hljs-keyword">set</span> cmds [<span class=3D"hljs-keyw=
ord">lsort</span> [$c <span class=3D"hljs-keyword">eval</span> <span class=
=3D"hljs-keyword">array</span> names ::tcl::newCmds]]
	    <span class=3D"hljs-keyword">set</span> pkgs [$c <span class=3D"hljs-k=
eyword">eval</span> <span class=3D"hljs-keyword">set</span> ::tcl::newPkgs]
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
llength</span> $pkgs] &gt; <span class=3D"hljs-number">1</span>} then {
		tclLog <span class=3D"hljs-string">"warning: \"$file\" provides more than=
 one package ($pkgs)"</span>
	    }
	    <span class=3D"hljs-keyword">foreach</span> pkg $pkgs {
		<span class=3D"hljs-keyword">lappend</span> files($pkg) [<span class=3D"h=
ljs-keyword">list</span> $file $type $cmds]
	    }
	    <span class=3D"hljs-keyword">if</span> {$doVerbose} then {
		tclLog <span class=3D"hljs-string">"processed $file"</span>
	    }
	    <span class=3D"hljs-keyword">interp</span> delete $c
	}
    }
    <span class=3D"hljs-keyword">append</span> index <span class=3D"hljs-st=
ring">"# Tcl package index file, version 1.1\n"</span>
    <span class=3D"hljs-keyword">append</span> index <span class=3D"hljs-st=
ring">"# This file is generated by the \"pkg_mkIndex$more\" command\n"</spa=
n>
    <span class=3D"hljs-keyword">append</span> index <span class=3D"hljs-st=
ring">"# and sourced either when an application starts up or\n"</span>
    <span class=3D"hljs-keyword">append</span> index <span class=3D"hljs-st=
ring">"# by a \"package unknown\" script.  It invokes the\n"</span>
    <span class=3D"hljs-keyword">append</span> index <span class=3D"hljs-st=
ring">"# \"package ifneeded\" command to set up package-related\n"</span>
    <span class=3D"hljs-keyword">append</span> index <span class=3D"hljs-st=
ring">"# information so that packages will be loaded automatically\n"</span=
>
    <span class=3D"hljs-keyword">append</span> index <span class=3D"hljs-st=
ring">"# in response to \"package require\" commands.  When this\n"</span>
    <span class=3D"hljs-keyword">append</span> index <span class=3D"hljs-st=
ring">"# script is sourced, the variable \$dir must contain the\n"</span>
    <span class=3D"hljs-keyword">append</span> index <span class=3D"hljs-st=
ring">"# full path name of this file's directory.\n"</span>
    <span class=3D"hljs-keyword">foreach</span> pkg [<span class=3D"hljs-ke=
yword">lsort</span> [<span class=3D"hljs-keyword">array</span> names files]=
] {
	<span class=3D"hljs-keyword">set</span> cmd {}
	<span class=3D"hljs-keyword">foreach</span> {name version} $pkg {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">lappend</span> cmd ::pkg::create -name $name =
-version $version
	<span class=3D"hljs-keyword">foreach</span> spec $files($pkg) {
	    <span class=3D"hljs-keyword">foreach</span> {<span class=3D"hljs-keywo=
rd">file</span> type procs} $spec {
		<span class=3D"hljs-keyword">if</span> {$direct} then {
		    <span class=3D"hljs-keyword">set</span> procs {}
		}
		<span class=3D"hljs-keyword">lappend</span> cmd <span class=3D"hljs-strin=
g">"-$type"</span> [<span class=3D"hljs-keyword">list</span> $file $procs]
	    }
	}
	<span class=3D"hljs-keyword">append</span> index <span class=3D"hljs-strin=
g">"\n[eval $cmd]"</span>
    }
    <span class=3D"hljs-keyword">set</span> f [<span class=3D"hljs-keyword"=
>open</span> pkgIndex.tcl w]
    <span class=3D"hljs-keyword">puts</span> $f $index
    <span class=3D"hljs-keyword">close</span> $f
    <span class=3D"hljs-keyword">cd</span> $oldDir
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tclPkgS=
etup</span> {dir pkg version files} {
    <span class=3D"hljs-keyword">global</span> auto_index
    <span class=3D"hljs-keyword">package</span> provide $pkg $version
    <span class=3D"hljs-keyword">foreach</span> fileInfo $files {
	<span class=3D"hljs-keyword">set</span> f [<span class=3D"hljs-keyword">li=
ndex</span> $fileInfo <span class=3D"hljs-number">0</span>]
	<span class=3D"hljs-keyword">set</span> type [<span class=3D"hljs-keyword"=
>lindex</span> $fileInfo <span class=3D"hljs-number">1</span>]
	<span class=3D"hljs-keyword">foreach</span> cmd [<span class=3D"hljs-keywo=
rd">lindex</span> $fileInfo <span class=3D"hljs-number">2</span>] {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
string</span> equal $type <span class=3D"hljs-string">"load"</span>]} then =
{
		<span class=3D"hljs-keyword">set</span> auto_index($cmd) [<span class=3D"=
hljs-keyword">list</span> <span class=3D"hljs-keyword">load</span> [<span c=
lass=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">join</span> =
$dir $f] $pkg]
	    } else {
		<span class=3D"hljs-keyword">set</span> auto_index($cmd) [<span class=3D"=
hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span> [<span=
 class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">join</span=
> $dir $f]]
	    }
	}
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tclMacP=
kgSearch</span> {dir} {
    <span class=3D"hljs-keyword">foreach</span> x [<span class=3D"hljs-keyw=
ord">glob</span> -nocomplain [<span class=3D"hljs-keyword">file</span> <spa=
n class=3D"hljs-keyword">join</span> $dir *.shlb]] {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">file=
</span> isfile $x]} then {
	    <span class=3D"hljs-keyword">set</span> res [resource <span class=3D"h=
ljs-keyword">open</span> $x]
	    <span class=3D"hljs-keyword">foreach</span> y [resource <span class=3D=
"hljs-keyword">list</span> TEXT $res] {
		<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">str=
ing</span> equal $y <span class=3D"hljs-string">"pkgIndex"</span>]} then {
		    <span class=3D"hljs-keyword">source</span> -rsrc pkgIndex
		}
	    }
	    <span class=3D"hljs-keyword">catch</span> {resource <span class=3D"hlj=
s-keyword">close</span> $res}
	}
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tclPkgU=
nknown</span> {name version {exact {}}} {
    <span class=3D"hljs-keyword">global</span> auto_path tcl_platform env
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists auto_path]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">set</span> old_path [<span class=3D"hljs-k=
eyword">set</span> use_path $auto_path]
    <span class=3D"hljs-keyword">while</span> {[<span class=3D"hljs-keyword=
">llength</span> $use_path]} {
	<span class=3D"hljs-keyword">set</span> dir [<span class=3D"hljs-keyword">=
lindex</span> $use_path end]
	<span class=3D"hljs-keyword">catch</span> {
	    <span class=3D"hljs-keyword">foreach</span> <span class=3D"hljs-keywor=
d">file</span> [<span class=3D"hljs-keyword">glob</span> -nocomplain [<span=
 class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">join</span=
> $dir * pkgIndex.tcl]] {
		<span class=3D"hljs-keyword">set</span> dir [<span class=3D"hljs-keyword"=
>file</span> dirname $file]
		<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">fil=
e</span> readable $file] &amp;&amp; ![<span class=3D"hljs-keyword">info</sp=
an> exists procdDirs($dir)]} then {
		    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword"=
>catch</span> {<span class=3D"hljs-keyword">source</span> $file} msg]} then=
 {
			tclLog <span class=3D"hljs-string">"error reading package index file $fi=
le: $msg"</span>
		    } else {
			<span class=3D"hljs-keyword">set</span> procdDirs($dir) <span class=3D"h=
ljs-number">1</span>
		    }
		}
	    }
	}
	<span class=3D"hljs-keyword">set</span> dir [<span class=3D"hljs-keyword">=
lindex</span> $use_path end]
	<span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">file<=
/span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keywor=
d">join</span> $dir pkgIndex.tcl]
	<span class=3D"hljs-keyword">if</span> {([<span class=3D"hljs-keyword">int=
erp</span> issafe] || [<span class=3D"hljs-keyword">file</span> readable $f=
ile]) &amp;&amp; ![<span class=3D"hljs-keyword">info</span> exists procdDir=
s($dir)]} then {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
catch</span> {<span class=3D"hljs-keyword">source</span> $file} msg] &amp;&=
amp; ![<span class=3D"hljs-keyword">interp</span> issafe]} then {
		tclLog <span class=3D"hljs-string">"error reading package index file $fil=
e: $msg"</span>
	    } else {
		<span class=3D"hljs-keyword">set</span> procdDirs($dir) <span class=3D"hl=
js-number">1</span>
	    }
	}
	<span class=3D"hljs-keyword">if</span> {(![<span class=3D"hljs-keyword">in=
terp</span> issafe]) &amp;&amp; [<span class=3D"hljs-keyword">string</span>=
 equal $tcl_platform(platform) <span class=3D"hljs-string">"macintosh"</spa=
n>]} then {
	    <span class=3D"hljs-keyword">set</span> dir [<span class=3D"hljs-keywo=
rd">lindex</span> $use_path end]
	    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword"=
>info</span> exists procdDirs($dir)]} then {
		tclMacPkgSearch $dir
		<span class=3D"hljs-keyword">set</span> procdDirs($dir) <span class=3D"hl=
js-number">1</span>
	    }
	    <span class=3D"hljs-keyword">foreach</span> x [<span class=3D"hljs-key=
word">glob</span> -nocomplain [<span class=3D"hljs-keyword">file</span> <sp=
an class=3D"hljs-keyword">join</span> $dir *]] {
		<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">fil=
e</span> isdirectory $x] &amp;&amp; ![<span class=3D"hljs-keyword">info</sp=
an> exists procdDirs($x)]} then {
		    <span class=3D"hljs-keyword">set</span> dir $x
		    tclMacPkgSearch $dir
		    <span class=3D"hljs-keyword">set</span> procdDirs($dir) <span class=
=3D"hljs-number">1</span>
		}
	    }
	}
	<span class=3D"hljs-keyword">set</span> use_path [<span class=3D"hljs-keyw=
ord">lrange</span> $use_path <span class=3D"hljs-number">0</span> end<span =
class=3D"hljs-number">-1</span>]
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> compare $old_path $auto_path]} then {
	    <span class=3D"hljs-keyword">foreach</span> dir $auto_path {
		<span class=3D"hljs-keyword">lappend</span> use_path $dir
	    }
	    <span class=3D"hljs-keyword">set</span> old_path $auto_path
	}
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::pkg::=
create</span> {args} {
    <span class=3D"hljs-keyword">append</span> err(usage) <span class=3D"hl=
js-string">"[lindex [info level 0] 0] "</span>
    <span class=3D"hljs-keyword">append</span> err(usage) <span class=3D"hl=
js-string">"-name packageName -version packageVersion"</span>
    <span class=3D"hljs-keyword">append</span> err(usage) <span class=3D"hl=
js-string">"?-load {filename ?{procs}?}? ... "</span>
    <span class=3D"hljs-keyword">append</span> err(usage) <span class=3D"hl=
js-string">"?-source {filename ?{procs}?}? ..."</span>
    <span class=3D"hljs-keyword">set</span> err(wrongNumArgs) <span class=
=3D"hljs-string">"wrong # args: should be \"$err(usage)\""</span>
    <span class=3D"hljs-keyword">set</span> err(valueMissing) <span class=
=3D"hljs-string">"value for \"%s\" missing: should be \"$err(usage)\""</spa=
n>
    <span class=3D"hljs-keyword">set</span> err(unknownOpt) <span class=3D"=
hljs-string">"unknown option \"%s\": should be \"$err(usage)\""</span>
    <span class=3D"hljs-keyword">set</span> err(noLoadOrSource) <span class=
=3D"hljs-string">"at least one of -load and -source must be given"</span>
    <span class=3D"hljs-keyword">set</span> len [<span class=3D"hljs-keywor=
d">llength</span> $args]
    <span class=3D"hljs-keyword">if</span> {$len &lt; <span class=3D"hljs-n=
umber">6</span>} then {
	<span class=3D"hljs-keyword">error</span> $err(wrongNumArgs)
    }
    <span class=3D"hljs-keyword">set</span> opts(-name) {}
    <span class=3D"hljs-keyword">set</span> opts(-version) {}
    <span class=3D"hljs-keyword">set</span> opts(-<span class=3D"hljs-keywo=
rd">source</span>) {}
    <span class=3D"hljs-keyword">set</span> opts(-<span class=3D"hljs-keywo=
rd">load</span>) {}
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">0</span>} {$i &lt; $len} {<span cla=
ss=3D"hljs-keyword">incr</span> i} {
	<span class=3D"hljs-keyword">set</span> flag [<span class=3D"hljs-keyword"=
>lindex</span> $args $i]
	<span class=3D"hljs-keyword">incr</span> i
	<span class=3D"hljs-keyword">switch</span> -<span class=3D"hljs-keyword">g=
lob</span> -- $flag {
	<span class=3D"hljs-string">"-name"</span> -
	<span class=3D"hljs-string">"-version"</span> {
		<span class=3D"hljs-keyword">if</span> {$i &gt;=3D $len} then {
		    <span class=3D"hljs-keyword">error</span> [<span class=3D"hljs-keywor=
d">format</span> $err(valueMissing) $flag]
		}
		<span class=3D"hljs-keyword">set</span> opts($flag) [<span class=3D"hljs-=
keyword">lindex</span> $args $i]
	    }
	<span class=3D"hljs-string">"-source"</span> -
	<span class=3D"hljs-string">"-load"</span> {
		<span class=3D"hljs-keyword">if</span> {$i &gt;=3D $len} then {
		    <span class=3D"hljs-keyword">error</span> [<span class=3D"hljs-keywor=
d">format</span> $err(valueMissing) $flag]
		}
		<span class=3D"hljs-keyword">lappend</span> opts($flag) [<span class=3D"h=
ljs-keyword">lindex</span> $args $i]
	    }
	default {
		<span class=3D"hljs-keyword">error</span> [<span class=3D"hljs-keyword">f=
ormat</span> $err(unknownOpt) [<span class=3D"hljs-keyword">lindex</span> $=
args $i]]
	    }
	}
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">l=
length</span> $opts(-name)] =3D=3D <span class=3D"hljs-number">0</span>} th=
en {
	<span class=3D"hljs-keyword">error</span> [<span class=3D"hljs-keyword">fo=
rmat</span> $err(valueMissing) <span class=3D"hljs-string">"-name"</span>]
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">l=
length</span> $opts(-version)] =3D=3D <span class=3D"hljs-number">0</span>}=
 then {
	<span class=3D"hljs-keyword">error</span> [<span class=3D"hljs-keyword">fo=
rmat</span> $err(valueMissing) <span class=3D"hljs-string">"-version"</span=
>]
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">l=
length</span> $opts(-<span class=3D"hljs-keyword">source</span>)] =3D=3D <s=
pan class=3D"hljs-number">0</span> &amp;&amp; [<span class=3D"hljs-keyword"=
>llength</span> $opts(-<span class=3D"hljs-keyword">load</span>)] =3D=3D <s=
pan class=3D"hljs-number">0</span>} then {
	<span class=3D"hljs-keyword">error</span> $err(noLoadOrSource)
    }
    <span class=3D"hljs-keyword">set</span> cmdline <span class=3D"hljs-str=
ing">"package ifneeded $opts(-name) $opts(-version) "</span>
    <span class=3D"hljs-keyword">set</span> cmdList {}
    <span class=3D"hljs-keyword">set</span> lazyFileList {}
    <span class=3D"hljs-keyword">foreach</span> key {<span class=3D"hljs-ke=
yword">load</span> <span class=3D"hljs-keyword">source</span>} {
	<span class=3D"hljs-keyword">foreach</span> filespec $opts(-$key) {
	    <span class=3D"hljs-keyword">foreach</span> {<span class=3D"hljs-keywo=
rd">filename</span> proclist} {{} {}} {
		<span class=3D"hljs-keyword">break</span>
	    }
	    <span class=3D"hljs-keyword">foreach</span> {<span class=3D"hljs-keywo=
rd">filename</span> proclist} $filespec {
		<span class=3D"hljs-keyword">break</span>
	    }
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
llength</span> $proclist] =3D=3D <span class=3D"hljs-number">0</span>} then=
 {
		<span class=3D"hljs-keyword">set</span> cmd <span class=3D"hljs-string">"=
\[list $key \[file join \$dir [list $filename]\]\]"</span>
		<span class=3D"hljs-keyword">lappend</span> cmdList $cmd
	    } else {
		<span class=3D"hljs-keyword">lappend</span> lazyFileList [<span class=3D"=
hljs-keyword">list</span> $filename $key $proclist]
	    }
	}
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">l=
length</span> $lazyFileList] &gt; <span class=3D"hljs-number">0</span>} the=
n {
	<span class=3D"hljs-keyword">lappend</span> cmdList <span class=3D"hljs-st=
ring">"\[list tclPkgSetup \$dir $opts(-name) $opts(-version) [list $lazyFil=
eList]\]"</span>
    }
    <span class=3D"hljs-keyword">append</span> cmdline [<span class=3D"hljs=
-keyword">join</span> $cmdList <span class=3D"hljs-string">"\\n"</span>]
    <span class=3D"hljs-keyword">return</span> $cmdline
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> parray<=
/span> {a {pattern *}} {
    <span class=3D"hljs-keyword">upvar</span> <span class=3D"hljs-number">1=
</span> $a <span class=3D"hljs-keyword">array</span>
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
array</span> exists <span class=3D"hljs-keyword">array</span>]} then {
	<span class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">"\"$=
a\" isn't an array"</span>
    }
    <span class=3D"hljs-keyword">set</span> maxl <span class=3D"hljs-number=
">0</span>
    <span class=3D"hljs-keyword">foreach</span> name [<span class=3D"hljs-k=
eyword">lsort</span> [<span class=3D"hljs-keyword">array</span> names <span=
 class=3D"hljs-keyword">array</span> $pattern]] {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> length $name] &gt; $maxl} then {
	    <span class=3D"hljs-keyword">set</span> maxl [<span class=3D"hljs-keyw=
ord">string</span> length $name]
	}
    }
    <span class=3D"hljs-keyword">set</span> maxl [<span class=3D"hljs-keywo=
rd">expr</span> {$maxl + [<span class=3D"hljs-keyword">string</span> length=
 $a] + <span class=3D"hljs-number">2</span>}]
    <span class=3D"hljs-keyword">foreach</span> name [<span class=3D"hljs-k=
eyword">lsort</span> [<span class=3D"hljs-keyword">array</span> names <span=
 class=3D"hljs-keyword">array</span> $pattern]] {
	<span class=3D"hljs-keyword">set</span> nameString [<span class=3D"hljs-ke=
yword">format</span> %s(%s) $a $name]
	<span class=3D"hljs-keyword">puts</span> stdout [<span class=3D"hljs-keywo=
rd">format</span> <span class=3D"hljs-string">"%-*s =3D %s"</span> $maxl $n=
ameString $array($name)]
    }
}
<span class=3D"hljs-keyword">package</span> require opt <span class=3D"hljs=
-number">0.4</span><span class=3D"hljs-number">.1</span>

<span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keyword">=
eval</span> ::<span class=3D"hljs-keyword">safe</span> {
    <span class=3D"hljs-keyword">namespace</span> export interpCreate inter=
pInit interpConfigure interpDelete interpAddToAccessPath interpFindInAccess=
Path setLogCmd
    <span class=3D"hljs-keyword">set</span> temp [::tcl::OptKeyRegister {
{-accessPath -<span class=3D"hljs-keyword">list</span> {} <span class=3D"hl=
js-string">"access path for the slave"</span>}
{-noStatics <span class=3D"hljs-string">"prevent loading of statically link=
ed pkgs"</span>}
{-statics true <span class=3D"hljs-string">"loading of statically linked pk=
gs"</span>}
{-nestedLoadOk <span class=3D"hljs-string">"allow nested loading"</span>}
{-nested false <span class=3D"hljs-string">"nested loading"</span>}
{-deleteHook -script {} <span class=3D"hljs-string">"delete hook"</span>}
}]
    ::tcl::OptKeyRegister {
{?slave? -name {} <span class=3D"hljs-string">"name of the slave (optional)=
"</span>}
} ::<span class=3D"hljs-keyword">safe</span>::interpCreate
    <span class=3D"hljs-keyword">lappend</span> ::tcl::OptDesc(::<span clas=
s=3D"hljs-keyword">safe</span>::interpCreate) $::tcl::OptDesc($temp)
    ::tcl::OptKeyRegister {
{slave -name {} <span class=3D"hljs-string">"name of the slave"</span>}
} ::<span class=3D"hljs-keyword">safe</span>::interpIC
    <span class=3D"hljs-keyword">lappend</span> ::tcl::OptDesc(::<span clas=
s=3D"hljs-keyword">safe</span>::interpIC) $::tcl::OptDesc($temp)
    ::tcl::OptKeyDelete $temp
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> Int=
erpStatics</span> {} {
	<span class=3D"hljs-keyword">foreach</span> v {Args statics noStatics} {
	    <span class=3D"hljs-keyword">upvar</span> $v $v
	}
	<span class=3D"hljs-keyword">set</span> flag [::tcl::OptProcArgGiven -noSt=
atics]

	<span class=3D"hljs-keyword">if</span> {$flag &amp;&amp;($noStatics =3D=3D=
 $statics) &amp;&amp;([::tcl::OptProcArgGiven -statics])} then {
	    <span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-k=
eyword">error</span> <span class=3D"hljs-string">"conflicting values given =
for -statics and -noStatics"</span>
	}
	<span class=3D"hljs-keyword">if</span> {$flag} then {
	    <span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keywor=
d">expr</span> {!$noStatics}]
	} else {
	    <span class=3D"hljs-keyword">return</span> $statics
	}
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> Int=
erpNested</span> {} {
	<span class=3D"hljs-keyword">foreach</span> v {Args nested nestedLoadOk} {
	    <span class=3D"hljs-keyword">upvar</span> $v $v
	}
	<span class=3D"hljs-keyword">set</span> flag [::tcl::OptProcArgGiven -nest=
edLoadOk]

	<span class=3D"hljs-keyword">if</span> {$flag &amp;&amp;($nestedLoadOk !=
=3D $nested) &amp;&amp;([::tcl::OptProcArgGiven -nested])} then {
	    <span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-k=
eyword">error</span> <span class=3D"hljs-string">"conflicting values given =
for -nested and -nestedLoadOk"</span>
	}
	<span class=3D"hljs-keyword">if</span> {$flag} then {
	    <span class=3D"hljs-keyword">return</span> $nestedLoadOk
	} else {
	    <span class=3D"hljs-keyword">return</span> $nested
	}
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> int=
erpCreate</span> {args} {
	<span class=3D"hljs-keyword">set</span> Args [::tcl::OptKeyParse ::<span c=
lass=3D"hljs-keyword">safe</span>::interpCreate $args]
	InterpCreate $slave $accessPath [InterpStatics] [InterpNested] $deleteHook
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> int=
erpInit</span> {args} {
	<span class=3D"hljs-keyword">set</span> Args [::tcl::OptKeyParse ::<span c=
lass=3D"hljs-keyword">safe</span>::interpIC $args]
	<span class=3D"hljs-keyword">if</span> {![::<span class=3D"hljs-keyword">i=
nterp</span> exists $slave]} then {
	    <span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-k=
eyword">error</span> <span class=3D"hljs-string">"\"$slave\" is not an inte=
rpreter"</span>
	}
	InterpInit $slave $accessPath [InterpStatics] [InterpNested] $deleteHook

    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> Che=
ckInterp</span> {slave} {
	<span class=3D"hljs-keyword">if</span> {![IsInterp $slave]} then {
	    <span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-k=
eyword">error</span> <span class=3D"hljs-string">"\"$slave\" is not an inte=
rpreter managed by ::safe::"</span>
	}
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> int=
erpConfigure</span> {args} {
	<span class=3D"hljs-keyword">switch</span> [<span class=3D"hljs-keyword">l=
length</span> $args] {
	<span class=3D"hljs-number">1</span> {
		<span class=3D"hljs-keyword">set</span> Args [::tcl::OptKeyParse ::<span =
class=3D"hljs-keyword">safe</span>::interpIC $args]
		CheckInterp $slave
		<span class=3D"hljs-keyword">set</span> res {}
		<span class=3D"hljs-keyword">lappend</span> res [<span class=3D"hljs-keyw=
ord">list</span> -accessPath [Set [PathListName $slave]]]
		<span class=3D"hljs-keyword">lappend</span> res [<span class=3D"hljs-keyw=
ord">list</span> -statics [Set [StaticsOkName $slave]]]
		<span class=3D"hljs-keyword">lappend</span> res [<span class=3D"hljs-keyw=
ord">list</span> -nested [Set [NestedOkName $slave]]]
		<span class=3D"hljs-keyword">lappend</span> res [<span class=3D"hljs-keyw=
ord">list</span> -deleteHook [Set [DeleteHookName $slave]]]
		<span class=3D"hljs-keyword">join</span> $res
	    }
	<span class=3D"hljs-number">2</span> {
		::tcl::Lassign $args slave arg
		<span class=3D"hljs-keyword">set</span> desc [<span class=3D"hljs-keyword=
">lindex</span> [::tcl::OptKeyGetDesc ::<span class=3D"hljs-keyword">safe</=
span>::interpIC] <span class=3D"hljs-number">2</span>]
		<span class=3D"hljs-keyword">set</span> hits [::tcl::OptHits desc $arg]
		<span class=3D"hljs-keyword">if</span> {$hits &gt; <span class=3D"hljs-nu=
mber">1</span>} then {
		    <span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-=
keyword">error</span> [::tcl::OptAmbigous $desc $arg]
		} elseif {$hits =3D=3D <span class=3D"hljs-number">0</span>} {
		    <span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-=
keyword">error</span> [::tcl::OptFlagUsage $desc $arg]
		}
		CheckInterp $slave
		<span class=3D"hljs-keyword">set</span> item [::tcl::OptCurDesc $desc]
		<span class=3D"hljs-keyword">set</span> name [::tcl::OptName $item]
		<span class=3D"hljs-keyword">switch</span> -exact -- $name {
		-accessPath {
			<span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keyword"=
>list</span> -accessPath [Set [PathListName $slave]]]
		    }
		-statics {
			<span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keyword"=
>list</span> -statics [Set [StaticsOkName $slave]]]
		    }
		-nested {
			<span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keyword"=
>list</span> -nested [Set [NestedOkName $slave]]]
		    }
		-deleteHook {
			<span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keyword"=
>list</span> -deleteHook [Set [DeleteHookName $slave]]]
		    }
		-noStatics {
			<span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-key=
word">error</span> <span class=3D"hljs-string">"ambigous query (get or set =
-noStatics ?) use -statics instead"</span>
		    }
		-nestedLoadOk {
			<span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-key=
word">error</span> <span class=3D"hljs-string">"ambigous query (get or set =
-nestedLoadOk ?) use -nested instead"</span>
		    }
		default {
			<span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-key=
word">error</span> <span class=3D"hljs-string">"unknown flag $name (bug)"</=
span>
		    }
		}
	    }
	default {
		<span class=3D"hljs-keyword">set</span> Args [::tcl::OptKeyParse ::<span =
class=3D"hljs-keyword">safe</span>::interpIC $args]
		CheckInterp $slave
		<span class=3D"hljs-keyword">if</span> {![::tcl::OptProcArgGiven -accessP=
ath]} then {
		    <span class=3D"hljs-keyword">set</span> doreset <span class=3D"hljs-n=
umber">1</span>
		    <span class=3D"hljs-keyword">set</span> accessPath [Set [PathListName=
 $slave]]
		} else {
		    <span class=3D"hljs-keyword">set</span> doreset <span class=3D"hljs-n=
umber">0</span>
		}
		<span class=3D"hljs-keyword">if</span> {(![::tcl::OptProcArgGiven -static=
s]) &amp;&amp;(![::tcl::OptProcArgGiven -noStatics])} then {
		    <span class=3D"hljs-keyword">set</span> statics [Set [StaticsOkName $=
slave]]
		} else {
		    <span class=3D"hljs-keyword">set</span> statics [InterpStatics]
		}
		<span class=3D"hljs-keyword">if</span> {([::tcl::OptProcArgGiven -nested]=
) ||([::tcl::OptProcArgGiven -nestedLoadOk])} then {
		    <span class=3D"hljs-keyword">set</span> nested [InterpNested]
		} else {
		    <span class=3D"hljs-keyword">set</span> nested [Set [NestedOkName $sl=
ave]]
		}
		<span class=3D"hljs-keyword">if</span> {![::tcl::OptProcArgGiven -deleteH=
ook]} then {
		    <span class=3D"hljs-keyword">set</span> deleteHook [Set [DeleteHookNa=
me $slave]]
		}
		InterpSetConfig $slave $accessPath $statics $nested $deleteHook
		<span class=3D"hljs-keyword">if</span> {$doreset} then {
		    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword"=
>catch</span> {::<span class=3D"hljs-keyword">interp</span> <span class=3D"=
hljs-keyword">eval</span> $slave {<span class=3D"hljs-keyword">auto_reset</=
span>}} msg]} then {
			Log $slave <span class=3D"hljs-string">"auto_reset failed: $msg"</span>
		    } else {
			Log $slave <span class=3D"hljs-string">"successful auto_reset"</span> NO=
TICE
		    }
		}
	    }
	}
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::s=
afe::InterpCreate</span> {slave access_path staticsok nestedok deletehook} =
{
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> compare <span class=3D"hljs-string">""</span> $slave]} then {
	    ::<span class=3D"hljs-keyword">interp</span> create -<span class=3D"hl=
js-keyword">safe</span> $slave
	} else {
	    <span class=3D"hljs-keyword">set</span> slave [::<span class=3D"hljs-k=
eyword">interp</span> create -<span class=3D"hljs-keyword">safe</span>]
	}
	Log $slave <span class=3D"hljs-string">"Created"</span> NOTICE
	InterpInit $slave $access_path $staticsok $nestedok $deletehook
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::s=
afe::InterpSetConfig</span> {slave access_path staticsok nestedok deletehoo=
k} {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> equal <span class=3D"hljs-string">""</span> $access_path]} then {
	    <span class=3D"hljs-keyword">set</span> access_path [<span class=3D"hl=
js-keyword">uplevel</span> #<span class=3D"hljs-number">0</span> <span clas=
s=3D"hljs-keyword">set</span> auto_path]
	    <span class=3D"hljs-keyword">set</span> where [<span class=3D"hljs-key=
word">lsearch</span> -exact $access_path [<span class=3D"hljs-keyword">info=
</span> library]]
	    <span class=3D"hljs-keyword">if</span> {$where =3D=3D <span class=3D"h=
ljs-number">-1</span>} then {
		<span class=3D"hljs-keyword">set</span> access_path [<span class=3D"hljs-=
keyword">concat</span> [<span class=3D"hljs-keyword">list</span> [<span cla=
ss=3D"hljs-keyword">info</span> library]] $access_path]
		Log $slave <span class=3D"hljs-string">"tcl_library was not in auto_path,=
 added it to slave's access_path"</span> NOTICE
	    } elseif {$where !=3D <span class=3D"hljs-number">0</span>} {
		<span class=3D"hljs-keyword">set</span> access_path [<span class=3D"hljs-=
keyword">concat</span> [<span class=3D"hljs-keyword">list</span> [<span cla=
ss=3D"hljs-keyword">info</span> library]] [<span class=3D"hljs-keyword">lre=
place</span> $access_path $where $where]]
		Log $slave <span class=3D"hljs-string">"tcl_libray was not in first in au=
to_path, moved it to front of slave's access_path"</span> NOTICE
	    }
	    <span class=3D"hljs-keyword">set</span> access_path [AddSubDirs $acces=
s_path]
	}
	Log $slave <span class=3D"hljs-string">"Setting accessPath=3D($access_path=
) staticsok=3D$staticsok nestedok=3D$nestedok deletehook=3D($deletehook)"</=
span> NOTICE
	<span class=3D"hljs-keyword">set</span> nname [PathNumberName $slave]
	<span class=3D"hljs-keyword">if</span> {[Exists $nname]} then {
	    <span class=3D"hljs-keyword">set</span> n [Set $nname]
	    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">=
set</span> i <span class=3D"hljs-number">0</span>} {$i&lt;$n} {<span class=
=3D"hljs-keyword">incr</span> i} {
		Unset [PathToken $i $slave]
	    }
	}
	<span class=3D"hljs-keyword">set</span> slave_auto_path {}
	<span class=3D"hljs-keyword">set</span> i <span class=3D"hljs-number">0</s=
pan>
	<span class=3D"hljs-keyword">foreach</span> dir $access_path {
	    Set [PathToken $i $slave] $dir
	    <span class=3D"hljs-keyword">lappend</span> slave_auto_path <span clas=
s=3D"hljs-string">"\$[PathToken $i]"</span>
	    <span class=3D"hljs-keyword">incr</span> i
	}
	Set $nname $i
	Set [PathListName $slave] $access_path
	Set [VirtualPathListName $slave] $slave_auto_path
	Set [StaticsOkName $slave] $staticsok
	Set [NestedOkName $slave] $nestedok
	Set [DeleteHookName $slave] $deletehook
	SyncAccessPath $slave
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::s=
afe::interpFindInAccessPath</span> {slave path} {
	<span class=3D"hljs-keyword">set</span> access_path [GetAccessPath $slave]
	<span class=3D"hljs-keyword">set</span> where [<span class=3D"hljs-keyword=
">lsearch</span> -exact $access_path $path]
	<span class=3D"hljs-keyword">if</span> {$where =3D=3D <span class=3D"hljs-=
number">-1</span>} then {
	    <span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-k=
eyword">error</span> <span class=3D"hljs-string">"$path not found in access=
 path $access_path"</span>
	}
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-string">"\$=
[PathToken $where]"</span>
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::s=
afe::interpAddToAccessPath</span> {slave path} {
	<span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">cat=
ch</span> {interpFindInAccessPath $slave $path} res]} then {
	    <span class=3D"hljs-keyword">return</span> $res
	}
	<span class=3D"hljs-keyword">set</span> nname [PathNumberName $slave]
	<span class=3D"hljs-keyword">set</span> n [Set $nname]
	Set [PathToken $n $slave] $path
	<span class=3D"hljs-keyword">set</span> token <span class=3D"hljs-string">=
"\$[PathToken $n]"</span>
	Lappend [VirtualPathListName $slave] $token
	Lappend [PathListName $slave] $path
	Set $nname [<span class=3D"hljs-keyword">expr</span> {$n+<span class=3D"hl=
js-number">1</span>}]
	SyncAccessPath $slave
	<span class=3D"hljs-keyword">return</span> $token
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::s=
afe::InterpInit</span> {slave access_path staticsok nestedok deletehook} {
	InterpSetConfig $slave $access_path $staticsok $nestedok $deletehook
	::<span class=3D"hljs-keyword">interp</span> alias $slave <span class=3D"h=
ljs-keyword">source</span> {} [<span class=3D"hljs-keyword">namespace</span=
> current]::AliasSource $slave
	::<span class=3D"hljs-keyword">interp</span> alias $slave <span class=3D"h=
ljs-keyword">load</span> {} [<span class=3D"hljs-keyword">namespace</span> =
current]::AliasLoad $slave
	::<span class=3D"hljs-keyword">interp</span> alias $slave <span class=3D"h=
ljs-keyword">encoding</span> {} [<span class=3D"hljs-keyword">namespace</sp=
an> current]::AliasEncoding $slave
	AliasSubset $slave <span class=3D"hljs-keyword">file</span> <span class=3D=
"hljs-keyword">file</span> dir.* <span class=3D"hljs-keyword">join</span> r=
oot.* ext.* tail path.* <span class=3D"hljs-keyword">split</span>
	::<span class=3D"hljs-keyword">interp</span> alias $slave <span class=3D"h=
ljs-keyword">exit</span> {} [<span class=3D"hljs-keyword">namespace</span> =
current]::interpDelete $slave
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">catc=
h</span> {::<span class=3D"hljs-keyword">interp</span> <span class=3D"hljs-=
keyword">eval</span> $slave {<span class=3D"hljs-keyword">source</span> [<s=
pan class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">join</s=
pan> $tcl_library init.tcl]}} msg]} then {
	    Log $slave <span class=3D"hljs-string">"can't source init.tcl ($msg)"<=
/span>
	    <span class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">=
"can't source init.tcl into slave $slave ($msg)"</span>
	}
	<span class=3D"hljs-keyword">return</span> $slave
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> Add=
SubDirs</span> {pathList} {
	<span class=3D"hljs-keyword">set</span> res {}
	<span class=3D"hljs-keyword">foreach</span> dir $pathList {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
file</span> isdirectory $dir]} then {
		<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">lse=
arch</span> -exact $res $dir]&lt;<span class=3D"hljs-number">0</span>} then=
 {
		    <span class=3D"hljs-keyword">lappend</span> res $dir
		}
		<span class=3D"hljs-keyword">foreach</span> sub [<span class=3D"hljs-keyw=
ord">glob</span> -nocomplain -- [<span class=3D"hljs-keyword">file</span> <=
span class=3D"hljs-keyword">join</span> $dir *]] {
		    <span class=3D"hljs-keyword">if</span> {([<span class=3D"hljs-keyword=
">file</span> isdirectory $sub]) &amp;&amp;([<span class=3D"hljs-keyword">l=
search</span> -exact $res $sub]&lt;<span class=3D"hljs-number">0</span>)} t=
hen {
			<span class=3D"hljs-keyword">lappend</span> res $sub
		    }
		}
	    }
	}
	<span class=3D"hljs-keyword">return</span> $res
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::s=
afe::interpDelete</span> {slave} {
	Log $slave <span class=3D"hljs-string">"About to delete"</span> NOTICE
	<span class=3D"hljs-keyword">set</span> hookname [DeleteHookName $slave]
	<span class=3D"hljs-keyword">if</span> {[Exists $hookname]} then {
	    <span class=3D"hljs-keyword">set</span> hook [Set $hookname]
	    <span class=3D"hljs-keyword">if</span> {![::tcl::Lempty $hook]} then {
		Unset $hookname
		<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">cat=
ch</span> {<span class=3D"hljs-keyword">eval</span> $hook [<span class=3D"h=
ljs-keyword">list</span> $slave]} err]} then {
		    Log $slave <span class=3D"hljs-string">"Delete hook error ($err)"</sp=
an>
		}
	    }
	}
	<span class=3D"hljs-keyword">set</span> statename [InterpStateName $slave]
	<span class=3D"hljs-keyword">if</span> {[Exists $statename]} then {
	    Unset $statename
	}
	<span class=3D"hljs-keyword">if</span> {[::<span class=3D"hljs-keyword">in=
terp</span> exists $slave]} then {
	    ::<span class=3D"hljs-keyword">interp</span> delete $slave
	    Log $slave <span class=3D"hljs-string">"Deleted"</span> NOTICE
	}
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::s=
afe::setLogCmd</span> {args} {
	<span class=3D"hljs-keyword">variable</span> Log
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">llen=
gth</span> $args] =3D=3D <span class=3D"hljs-number">0</span>} then {
	    <span class=3D"hljs-keyword">return</span> $Log
	} else {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
llength</span> $args] =3D=3D <span class=3D"hljs-number">1</span>} then {
		<span class=3D"hljs-keyword">set</span> Log [<span class=3D"hljs-keyword"=
>lindex</span> $args <span class=3D"hljs-number">0</span>]
	    } else {
		<span class=3D"hljs-keyword">set</span> Log $args
	    }
	}
    }
    <span class=3D"hljs-keyword">variable</span> Log {}
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> Syn=
cAccessPath</span> {slave} {
	<span class=3D"hljs-keyword">set</span> slave_auto_path [Set [VirtualPathL=
istName $slave]]
	::<span class=3D"hljs-keyword">interp</span> <span class=3D"hljs-keyword">=
eval</span> $slave [<span class=3D"hljs-keyword">list</span> <span class=3D=
"hljs-keyword">set</span> auto_path $slave_auto_path]
	Log $slave <span class=3D"hljs-string">"auto_path in $slave has been set t=
o $slave_auto_path"</span> NOTICE
	::<span class=3D"hljs-keyword">interp</span> <span class=3D"hljs-keyword">=
eval</span> $slave [<span class=3D"hljs-keyword">list</span> <span class=3D=
"hljs-keyword">set</span> tcl_library [<span class=3D"hljs-keyword">lindex<=
/span> $slave_auto_path <span class=3D"hljs-number">0</span>]]
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> Int=
erpStateName</span> {slave} {
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-string">"S$=
slave"</span>
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> IsI=
nterp</span> {slave} {
	<span class=3D"hljs-keyword">expr</span> {[Exists [InterpStateName $slave]=
] &amp;&amp; [::<span class=3D"hljs-keyword">interp</span> exists $slave]}
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> Pat=
hToken</span> {n {slave <span class=3D"hljs-string">""</span>}} {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> compare <span class=3D"hljs-string">""</span> $slave]} then {
	    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-string"=
>"[InterpStateName $slave](access_path,$n)"</span>
	} else {
	    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-string"=
>"p(:$n:)"</span>
	}
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> Pat=
hListName</span> {slave} {
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-string">"[I=
nterpStateName $slave](access_path)"</span>
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> Vir=
tualPathListName</span> {slave} {
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-string">"[I=
nterpStateName $slave](access_path_slave)"</span>
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> Pat=
hNumberName</span> {slave} {
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-string">"[I=
nterpStateName $slave](access_path,n)"</span>
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> Sta=
ticsOkName</span> {slave} {
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-string">"[I=
nterpStateName $slave](staticsok)"</span>
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> Nes=
tedOkName</span> {slave} {
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-string">"[I=
nterpStateName $slave](nestedok)"</span>
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> Top=
level</span> {args} {
	<span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keyword"=
>eval</span> [<span class=3D"hljs-keyword">namespace</span> current] $args
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> Set=
</span> {args} {
	<span class=3D"hljs-keyword">eval</span> Toplevel <span class=3D"hljs-keyw=
ord">set</span> $args
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> Lap=
pend</span> {args} {
	<span class=3D"hljs-keyword">eval</span> Toplevel <span class=3D"hljs-keyw=
ord">lappend</span> $args
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> Uns=
et</span> {args} {
	<span class=3D"hljs-keyword">eval</span> Toplevel <span class=3D"hljs-keyw=
ord">unset</span> $args
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> Exi=
sts</span> {varname} {
	Toplevel <span class=3D"hljs-keyword">info</span> exists $varname
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> Get=
AccessPath</span> {slave} {
	Set [PathListName $slave]
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> Sta=
ticsOk</span> {slave} {
	Set [StaticsOkName $slave]
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> Nes=
tedOk</span> {slave} {
	Set [NestedOkName $slave]
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> Del=
eteHookName</span> {slave} {
	<span class=3D"hljs-keyword">return</span> [InterpStateName $slave](cleanu=
pHook)
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> Tra=
nslatePath</span> {slave path} {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">rege=
xp</span> {(::)|(\.\.)} $path]} then {
	    <span class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">=
"invalid characters in path $path"</span>
	}
	<span class=3D"hljs-keyword">set</span> n [<span class=3D"hljs-keyword">ex=
pr</span> {[Set [PathNumberName $slave]]<span class=3D"hljs-number">-1</spa=
n>}]
	<span class=3D"hljs-keyword">for</span> {} {$n&gt;=3D<span class=3D"hljs-n=
umber">0</span>} {<span class=3D"hljs-keyword">incr</span> n <span class=3D=
"hljs-number">-1</span>} {
	    <span class=3D"hljs-keyword">set</span> [PathToken $n] [Set [PathToken=
 $n $slave]]
	}
	<span class=3D"hljs-keyword">subst</span> -nobackslashes -nocommands $path
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> Log=
</span> {slave msg {type ERROR}} {
	<span class=3D"hljs-keyword">variable</span> Log
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info=
</span> exists Log] &amp;&amp; [<span class=3D"hljs-keyword">llength</span>=
 $Log]} then {
	    <span class=3D"hljs-keyword">eval</span> $Log [<span class=3D"hljs-key=
word">list</span> <span class=3D"hljs-string">"$type for slave $slave : $ms=
g"</span>]
	}
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> Che=
ckFileName</span> {slave <span class=3D"hljs-keyword">file</span>} {
	<span class=3D"hljs-keyword">set</span> ftail [<span class=3D"hljs-keyword=
">file</span> tail $file]
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> length $ftail]&gt;<span class=3D"hljs-number">14</span>} then {
	    <span class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">=
"$ftail: filename too long"</span>
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">rege=
xp</span> {\..*\.} $ftail]} then {
	    <span class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">=
"$ftail: more than one dot is forbidden"</span>
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> compare $ftail <span class=3D"hljs-string">"tclIndex"</span>] &am=
p;&amp; [<span class=3D"hljs-keyword">string</span> compare -nocase [<span =
class=3D"hljs-keyword">file</span> extension $ftail] <span class=3D"hljs-st=
ring">".tcl"</span>]} then {
	    <span class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">=
"$ftail: must be a *.tcl or tclIndex"</span>
	}
	<span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">fil=
e</span> exists $file]} then {
	    <span class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">=
"no such file or directory"</span>
	}
	<span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">fil=
e</span> readable $file]} then {
	    <span class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">=
"not readable"</span>
	}
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> Ali=
asSource</span> {slave args} {
	<span class=3D"hljs-keyword">set</span> argc [<span class=3D"hljs-keyword"=
>llength</span> $args]
	<span class=3D"hljs-keyword">if</span> {$argc !=3D <span class=3D"hljs-num=
ber">1</span>} then {
	    <span class=3D"hljs-keyword">set</span> msg <span class=3D"hljs-string=
">"wrong # args: should be \"source fileName\""</span>
	    Log $slave <span class=3D"hljs-string">"$msg ($args)"</span>
	    <span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-k=
eyword">error</span> $msg
	}
	<span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">file<=
/span> [<span class=3D"hljs-keyword">lindex</span> $args <span class=3D"hlj=
s-number">0</span>]
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">catc=
h</span> {<span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keywo=
rd">file</span> [TranslatePath $slave $file]} msg]} then {
	    Log $slave $msg
	    <span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-k=
eyword">error</span> <span class=3D"hljs-string">"permission denied"</span>
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">catc=
h</span> {FileInAccessPath $slave $file} msg]} then {
	    Log $slave $msg
	    <span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-k=
eyword">error</span> <span class=3D"hljs-string">"permission denied"</span>
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">catc=
h</span> {CheckFileName $slave $file} msg]} then {
	    Log $slave <span class=3D"hljs-string">"$file:$msg"</span>
	    <span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-k=
eyword">error</span> $msg
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">catc=
h</span> {::<span class=3D"hljs-keyword">interp</span> invokehidden $slave =
<span class=3D"hljs-keyword">source</span> $file} msg]} then {
	    Log $slave $msg
	    <span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-k=
eyword">error</span> <span class=3D"hljs-string">"script error"</span>
	}
	<span class=3D"hljs-keyword">return</span> $msg
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> Ali=
asLoad</span> {slave <span class=3D"hljs-keyword">file</span> args} {
	<span class=3D"hljs-keyword">set</span> argc [<span class=3D"hljs-keyword"=
>llength</span> $args]
	<span class=3D"hljs-keyword">if</span> {$argc &gt; <span class=3D"hljs-num=
ber">2</span>} then {
	    <span class=3D"hljs-keyword">set</span> msg <span class=3D"hljs-string=
">"load error: too many arguments"</span>
	    Log $slave <span class=3D"hljs-string">"$msg ($argc) {$file $args}"</s=
pan>
	    <span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-k=
eyword">error</span> $msg
	}
	<span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">packa=
ge</span> [<span class=3D"hljs-keyword">lindex</span> $args <span class=3D"=
hljs-number">0</span>]
	<span class=3D"hljs-keyword">set</span> target [<span class=3D"hljs-keywor=
d">lindex</span> $args <span class=3D"hljs-number">1</span>]
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> length $target]} then {
	    <span class=3D"hljs-keyword">if</span> {![NestedOk $slave]} then {
		Log $slave <span class=3D"hljs-string">"loading to a sub interp (nestedok=
) disabled (trying to load $package to $target)"</span>
		<span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-keyw=
ord">error</span> <span class=3D"hljs-string">"permission denied (nested lo=
ad)"</span>
	    }
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> length $file] =3D=3D <span class=3D"hljs-number">0</span>} then {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
string</span> length $package] =3D=3D <span class=3D"hljs-number">0</span>}=
 then {
		<span class=3D"hljs-keyword">set</span> msg <span class=3D"hljs-string">"=
load error: empty filename and no package name"</span>
		Log $slave $msg
		<span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-keyw=
ord">error</span> $msg
	    }
	    <span class=3D"hljs-keyword">if</span> {![StaticsOk $slave]} then {
		Log $slave <span class=3D"hljs-string">"static packages loading disabled =
(trying to load $package to $target)"</span>
		<span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-keyw=
ord">error</span> <span class=3D"hljs-string">"permission denied (static pa=
ckage)"</span>
	    }
	} else {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
catch</span> {<span class=3D"hljs-keyword">set</span> <span class=3D"hljs-k=
eyword">file</span> [TranslatePath $slave $file]} msg]} then {
		Log $slave $msg
		<span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-keyw=
ord">error</span> <span class=3D"hljs-string">"permission denied"</span>
	    }
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
catch</span> {FileInAccessPath $slave $file} msg]} then {
		Log $slave $msg
		<span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-keyw=
ord">error</span> <span class=3D"hljs-string">"permission denied (path)"</s=
pan>
	    }
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">catc=
h</span> {::<span class=3D"hljs-keyword">interp</span> invokehidden $slave =
<span class=3D"hljs-keyword">load</span> $file $package $target} msg]} then=
 {
	    Log $slave $msg
	    <span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-k=
eyword">error</span> $msg
	}
	<span class=3D"hljs-keyword">return</span> $msg
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> Fil=
eInAccessPath</span> {slave <span class=3D"hljs-keyword">file</span>} {
	<span class=3D"hljs-keyword">set</span> access_path [GetAccessPath $slave]
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">file=
</span> isdirectory $file]} then {
	    <span class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">=
"\"$file\": is a directory"</span>
	}
	<span class=3D"hljs-keyword">set</span> parent [<span class=3D"hljs-keywor=
d">file</span> dirname $file]
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">lsea=
rch</span> -exact $access_path $parent] =3D=3D <span class=3D"hljs-number">=
-1</span>} then {
	    <span class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">=
"\"$file\": not in access_path"</span>
	}
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> Sub=
set</span> {slave command okpat args} {
	<span class=3D"hljs-keyword">set</span> subcommand [<span class=3D"hljs-ke=
yword">lindex</span> $args <span class=3D"hljs-number">0</span>]
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">rege=
xp</span> $okpat $subcommand]} then {
	    <span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keywor=
d">eval</span> {$command $subcommand} [<span class=3D"hljs-keyword">lrange<=
/span> $args <span class=3D"hljs-number">1</span> end]]
	}
	<span class=3D"hljs-keyword">set</span> msg <span class=3D"hljs-string">"n=
ot allowed to invoke subcommand $subcommand of $command"</span>
	Log $slave $msg
	<span class=3D"hljs-keyword">error</span> $msg
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> Ali=
asSubset</span> {slave alias target args} {
	<span class=3D"hljs-keyword">set</span> pat ^(
	<span class=3D"hljs-keyword">set</span> sep <span class=3D"hljs-string">""=
</span>
	<span class=3D"hljs-keyword">foreach</span> sub $args {
	    <span class=3D"hljs-keyword">append</span> pat $sep$sub
	    <span class=3D"hljs-keyword">set</span> sep |
	}
	<span class=3D"hljs-keyword">append</span> pat )\$
	::<span class=3D"hljs-keyword">interp</span> alias $slave $alias {} [<span=
 class=3D"hljs-keyword">namespace</span> current]::Subset $slave $target $p=
at
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> Ali=
asEncoding</span> {slave args} {
	<span class=3D"hljs-keyword">set</span> argc [<span class=3D"hljs-keyword"=
>llength</span> $args]
	<span class=3D"hljs-keyword">set</span> okpat <span class=3D"hljs-string">=
"^(name.*|convert.*)\$"</span>
	<span class=3D"hljs-keyword">set</span> subcommand [<span class=3D"hljs-ke=
yword">lindex</span> $args <span class=3D"hljs-number">0</span>]
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">rege=
xp</span> $okpat $subcommand]} then {
	    <span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keywor=
d">eval</span> ::<span class=3D"hljs-keyword">interp</span> invokehidden $s=
lave <span class=3D"hljs-keyword">encoding</span> $subcommand [<span class=
=3D"hljs-keyword">lrange</span> $args <span class=3D"hljs-number">1</span> =
end]]
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> match $subcommand system]} then {
	    <span class=3D"hljs-keyword">if</span> {$argc =3D=3D <span class=3D"hl=
js-number">1</span>} then {
		<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">cat=
ch</span> {::<span class=3D"hljs-keyword">interp</span> invokehidden $slave=
 <span class=3D"hljs-keyword">encoding</span> system} msg]} then {
		    Log $slave $msg
		    <span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-=
keyword">error</span> <span class=3D"hljs-string">"script error"</span>
		}
	    } else {
		<span class=3D"hljs-keyword">set</span> msg <span class=3D"hljs-string">"=
wrong # args: should be \"encoding system\""</span>
		Log $slave $msg
		<span class=3D"hljs-keyword">error</span> $msg
	    }
	} else {
	    <span class=3D"hljs-keyword">set</span> msg <span class=3D"hljs-string=
">"wrong # args: should be \"encoding option ?arg ...?\""</span>
	    Log $slave $msg
	    <span class=3D"hljs-keyword">error</span> $msg
	}
	<span class=3D"hljs-keyword">return</span> $msg
    }
}
<span class=3D"hljs-comment"># Tcl autoload index file, version 2.0</span>
<span class=3D"hljs-comment"># This file is generated by the "auto_mkindex"=
 command</span>
<span class=3D"hljs-comment"># and sourced to set up indexing information f=
or one or</span>
<span class=3D"hljs-comment"># more commands.  Typically each line is a com=
mand that</span>
<span class=3D"hljs-comment"># sets an element in the auto_index array, whe=
re the</span>
<span class=3D"hljs-comment"># element name is the name of a command and th=
e value is</span>
<span class=3D"hljs-comment"># a script that loads the command.</span>

<span class=3D"hljs-keyword">set</span> auto_index(<span class=3D"hljs-keyw=
ord">auto_reset</span>) [<span class=3D"hljs-keyword">list</span> <span cla=
ss=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword">file</span>=
 <span class=3D"hljs-keyword">join</span> $dir auto.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(<span class=3D"hljs-keyw=
ord">tcl_findLibrary</span>) [<span class=3D"hljs-keyword">list</span> <spa=
n class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword">file</=
span> <span class=3D"hljs-keyword">join</span> $dir auto.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(<span class=3D"hljs-keyw=
ord">auto_mkindex</span>) [<span class=3D"hljs-keyword">list</span> <span c=
lass=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword">file</spa=
n> <span class=3D"hljs-keyword">join</span> $dir auto.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(<span class=3D"hljs-keyw=
ord">auto_mkindex_old</span>) [<span class=3D"hljs-keyword">list</span> <sp=
an class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword">file<=
/span> <span class=3D"hljs-keyword">join</span> $dir auto.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::auto_mkindex_parser::i=
nit) [<span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword"=
>source</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hlj=
s-keyword">join</span> $dir auto.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::auto_mkindex_parser::c=
leanup) [<span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keywo=
rd">source</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"=
hljs-keyword">join</span> $dir auto.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::auto_mkindex_parser::m=
kindex) [<span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keywo=
rd">source</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"=
hljs-keyword">join</span> $dir auto.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::auto_mkindex_parser::h=
ook) [<span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword"=
>source</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hlj=
s-keyword">join</span> $dir auto.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::auto_mkindex_parser::s=
lavehook) [<span class=3D"hljs-keyword">list</span> <span class=3D"hljs-key=
word">source</span> [<span class=3D"hljs-keyword">file</span> <span class=
=3D"hljs-keyword">join</span> $dir auto.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::auto_mkindex_parser::c=
ommand) [<span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keywo=
rd">source</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"=
hljs-keyword">join</span> $dir auto.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::auto_mkindex_parser::c=
ommandInit) [<span class=3D"hljs-keyword">list</span> <span class=3D"hljs-k=
eyword">source</span> [<span class=3D"hljs-keyword">file</span> <span class=
=3D"hljs-keyword">join</span> $dir auto.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::auto_mkindex_parser::f=
ullname) [<span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyw=
ord">source</span> [<span class=3D"hljs-keyword">file</span> <span class=3D=
"hljs-keyword">join</span> $dir auto.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(<span class=3D"hljs-keyw=
ord">history</span>) [<span class=3D"hljs-keyword">list</span> <span class=
=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword">file</span> <=
span class=3D"hljs-keyword">join</span> $dir <span class=3D"hljs-keyword">h=
istory</span>.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::tcl::HistAdd) [<span c=
lass=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span=
> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">jo=
in</span> $dir <span class=3D"hljs-keyword">history</span>.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::tcl::HistKeep) [<span =
class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</spa=
n> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">j=
oin</span> $dir <span class=3D"hljs-keyword">history</span>.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::tcl::HistClear) [<span=
 class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</sp=
an> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">=
join</span> $dir <span class=3D"hljs-keyword">history</span>.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::tcl::HistInfo) [<span =
class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</spa=
n> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">j=
oin</span> $dir <span class=3D"hljs-keyword">history</span>.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::tcl::HistRedo) [<span =
class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</spa=
n> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">j=
oin</span> $dir <span class=3D"hljs-keyword">history</span>.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::tcl::HistIndex) [<span=
 class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</sp=
an> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">=
join</span> $dir <span class=3D"hljs-keyword">history</span>.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::tcl::HistEvent) [<span=
 class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</sp=
an> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">=
join</span> $dir <span class=3D"hljs-keyword">history</span>.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::tcl::HistChange) [<spa=
n class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</s=
pan> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword"=
>join</span> $dir <span class=3D"hljs-keyword">history</span>.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tclLdAout) [<span class=
=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span> [<=
span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">join</=
span> $dir ldAout.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(pkg_compareExtension) [<=
span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source=
</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keywo=
rd">join</span> $dir <span class=3D"hljs-keyword">package</span>.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(<span class=3D"hljs-keyw=
ord">pkg_mkIndex</span>) [<span class=3D"hljs-keyword">list</span> <span cl=
ass=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword">file</span=
> <span class=3D"hljs-keyword">join</span> $dir <span class=3D"hljs-keyword=
">package</span>.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tclPkgSetup) [<span clas=
s=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span> [=
<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">join<=
/span> $dir <span class=3D"hljs-keyword">package</span>.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tclMacPkgSearch) [<span =
class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</spa=
n> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">j=
oin</span> $dir <span class=3D"hljs-keyword">package</span>.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tclPkgUnknown) [<span cl=
ass=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span>=
 [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">joi=
n</span> $dir <span class=3D"hljs-keyword">package</span>.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::pkg::create) [<span cl=
ass=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span>=
 [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">joi=
n</span> $dir <span class=3D"hljs-keyword">package</span>.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(<span class=3D"hljs-keyw=
ord">parray</span>) [<span class=3D"hljs-keyword">list</span> <span class=
=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword">file</span> <=
span class=3D"hljs-keyword">join</span> $dir <span class=3D"hljs-keyword">p=
array</span>.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::<span class=3D"hljs-ke=
yword">safe</span>::InterpStatics) [<span class=3D"hljs-keyword">list</span=
> <span class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword">=
file</span> <span class=3D"hljs-keyword">join</span> $dir <span class=3D"hl=
js-keyword">safe</span>.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::<span class=3D"hljs-ke=
yword">safe</span>::InterpNested) [<span class=3D"hljs-keyword">list</span>=
 <span class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword">f=
ile</span> <span class=3D"hljs-keyword">join</span> $dir <span class=3D"hlj=
s-keyword">safe</span>.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::<span class=3D"hljs-ke=
yword">safe</span>::interpCreate) [<span class=3D"hljs-keyword">list</span>=
 <span class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword">f=
ile</span> <span class=3D"hljs-keyword">join</span> $dir <span class=3D"hlj=
s-keyword">safe</span>.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::<span class=3D"hljs-ke=
yword">safe</span>::interpInit) [<span class=3D"hljs-keyword">list</span> <=
span class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword">fil=
e</span> <span class=3D"hljs-keyword">join</span> $dir <span class=3D"hljs-=
keyword">safe</span>.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::<span class=3D"hljs-ke=
yword">safe</span>::CheckInterp) [<span class=3D"hljs-keyword">list</span> =
<span class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword">fi=
le</span> <span class=3D"hljs-keyword">join</span> $dir <span class=3D"hljs=
-keyword">safe</span>.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::<span class=3D"hljs-ke=
yword">safe</span>::interpConfigure) [<span class=3D"hljs-keyword">list</sp=
an> <span class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword=
">file</span> <span class=3D"hljs-keyword">join</span> $dir <span class=3D"=
hljs-keyword">safe</span>.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::<span class=3D"hljs-ke=
yword">safe</span>::InterpCreate) [<span class=3D"hljs-keyword">list</span>=
 <span class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword">f=
ile</span> <span class=3D"hljs-keyword">join</span> $dir <span class=3D"hlj=
s-keyword">safe</span>.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::<span class=3D"hljs-ke=
yword">safe</span>::InterpSetConfig) [<span class=3D"hljs-keyword">list</sp=
an> <span class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword=
">file</span> <span class=3D"hljs-keyword">join</span> $dir <span class=3D"=
hljs-keyword">safe</span>.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::<span class=3D"hljs-ke=
yword">safe</span>::interpFindInAccessPath) [<span class=3D"hljs-keyword">l=
ist</span> <span class=3D"hljs-keyword">source</span> [<span class=3D"hljs-=
keyword">file</span> <span class=3D"hljs-keyword">join</span> $dir <span cl=
ass=3D"hljs-keyword">safe</span>.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::<span class=3D"hljs-ke=
yword">safe</span>::interpAddToAccessPath) [<span class=3D"hljs-keyword">li=
st</span> <span class=3D"hljs-keyword">source</span> [<span class=3D"hljs-k=
eyword">file</span> <span class=3D"hljs-keyword">join</span> $dir <span cla=
ss=3D"hljs-keyword">safe</span>.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::<span class=3D"hljs-ke=
yword">safe</span>::InterpInit) [<span class=3D"hljs-keyword">list</span> <=
span class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword">fil=
e</span> <span class=3D"hljs-keyword">join</span> $dir <span class=3D"hljs-=
keyword">safe</span>.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::<span class=3D"hljs-ke=
yword">safe</span>::AddSubDirs) [<span class=3D"hljs-keyword">list</span> <=
span class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword">fil=
e</span> <span class=3D"hljs-keyword">join</span> $dir <span class=3D"hljs-=
keyword">safe</span>.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::<span class=3D"hljs-ke=
yword">safe</span>::interpDelete) [<span class=3D"hljs-keyword">list</span>=
 <span class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword">f=
ile</span> <span class=3D"hljs-keyword">join</span> $dir <span class=3D"hlj=
s-keyword">safe</span>.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::<span class=3D"hljs-ke=
yword">safe</span>::setLogCmd) [<span class=3D"hljs-keyword">list</span> <s=
pan class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword">file=
</span> <span class=3D"hljs-keyword">join</span> $dir <span class=3D"hljs-k=
eyword">safe</span>.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::<span class=3D"hljs-ke=
yword">safe</span>::SyncAccessPath) [<span class=3D"hljs-keyword">list</spa=
n> <span class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword"=
>file</span> <span class=3D"hljs-keyword">join</span> $dir <span class=3D"h=
ljs-keyword">safe</span>.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::<span class=3D"hljs-ke=
yword">safe</span>::InterpStateName) [<span class=3D"hljs-keyword">list</sp=
an> <span class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword=
">file</span> <span class=3D"hljs-keyword">join</span> $dir <span class=3D"=
hljs-keyword">safe</span>.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::<span class=3D"hljs-ke=
yword">safe</span>::IsInterp) [<span class=3D"hljs-keyword">list</span> <sp=
an class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword">file<=
/span> <span class=3D"hljs-keyword">join</span> $dir <span class=3D"hljs-ke=
yword">safe</span>.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::<span class=3D"hljs-ke=
yword">safe</span>::PathToken) [<span class=3D"hljs-keyword">list</span> <s=
pan class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword">file=
</span> <span class=3D"hljs-keyword">join</span> $dir <span class=3D"hljs-k=
eyword">safe</span>.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::<span class=3D"hljs-ke=
yword">safe</span>::PathListName) [<span class=3D"hljs-keyword">list</span>=
 <span class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword">f=
ile</span> <span class=3D"hljs-keyword">join</span> $dir <span class=3D"hlj=
s-keyword">safe</span>.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::<span class=3D"hljs-ke=
yword">safe</span>::VirtualPathListName) [<span class=3D"hljs-keyword">list=
</span> <span class=3D"hljs-keyword">source</span> [<span class=3D"hljs-key=
word">file</span> <span class=3D"hljs-keyword">join</span> $dir <span class=
=3D"hljs-keyword">safe</span>.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::<span class=3D"hljs-ke=
yword">safe</span>::PathNumberName) [<span class=3D"hljs-keyword">list</spa=
n> <span class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword"=
>file</span> <span class=3D"hljs-keyword">join</span> $dir <span class=3D"h=
ljs-keyword">safe</span>.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::<span class=3D"hljs-ke=
yword">safe</span>::StaticsOkName) [<span class=3D"hljs-keyword">list</span=
> <span class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword">=
file</span> <span class=3D"hljs-keyword">join</span> $dir <span class=3D"hl=
js-keyword">safe</span>.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::<span class=3D"hljs-ke=
yword">safe</span>::NestedOkName) [<span class=3D"hljs-keyword">list</span>=
 <span class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword">f=
ile</span> <span class=3D"hljs-keyword">join</span> $dir <span class=3D"hlj=
s-keyword">safe</span>.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::<span class=3D"hljs-ke=
yword">safe</span>::Toplevel) [<span class=3D"hljs-keyword">list</span> <sp=
an class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword">file<=
/span> <span class=3D"hljs-keyword">join</span> $dir <span class=3D"hljs-ke=
yword">safe</span>.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::<span class=3D"hljs-ke=
yword">safe</span>::Set) [<span class=3D"hljs-keyword">list</span> <span cl=
ass=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword">file</span=
> <span class=3D"hljs-keyword">join</span> $dir <span class=3D"hljs-keyword=
">safe</span>.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::<span class=3D"hljs-ke=
yword">safe</span>::Lappend) [<span class=3D"hljs-keyword">list</span> <spa=
n class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword">file</=
span> <span class=3D"hljs-keyword">join</span> $dir <span class=3D"hljs-key=
word">safe</span>.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::<span class=3D"hljs-ke=
yword">safe</span>::Unset) [<span class=3D"hljs-keyword">list</span> <span =
class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword">file</sp=
an> <span class=3D"hljs-keyword">join</span> $dir <span class=3D"hljs-keywo=
rd">safe</span>.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::<span class=3D"hljs-ke=
yword">safe</span>::Exists) [<span class=3D"hljs-keyword">list</span> <span=
 class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword">file</s=
pan> <span class=3D"hljs-keyword">join</span> $dir <span class=3D"hljs-keyw=
ord">safe</span>.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::<span class=3D"hljs-ke=
yword">safe</span>::GetAccessPath) [<span class=3D"hljs-keyword">list</span=
> <span class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword">=
file</span> <span class=3D"hljs-keyword">join</span> $dir <span class=3D"hl=
js-keyword">safe</span>.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::<span class=3D"hljs-ke=
yword">safe</span>::StaticsOk) [<span class=3D"hljs-keyword">list</span> <s=
pan class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword">file=
</span> <span class=3D"hljs-keyword">join</span> $dir <span class=3D"hljs-k=
eyword">safe</span>.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::<span class=3D"hljs-ke=
yword">safe</span>::NestedOk) [<span class=3D"hljs-keyword">list</span> <sp=
an class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword">file<=
/span> <span class=3D"hljs-keyword">join</span> $dir <span class=3D"hljs-ke=
yword">safe</span>.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::<span class=3D"hljs-ke=
yword">safe</span>::DeleteHookName) [<span class=3D"hljs-keyword">list</spa=
n> <span class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword"=
>file</span> <span class=3D"hljs-keyword">join</span> $dir <span class=3D"h=
ljs-keyword">safe</span>.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::<span class=3D"hljs-ke=
yword">safe</span>::TranslatePath) [<span class=3D"hljs-keyword">list</span=
> <span class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword">=
file</span> <span class=3D"hljs-keyword">join</span> $dir <span class=3D"hl=
js-keyword">safe</span>.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::<span class=3D"hljs-ke=
yword">safe</span>::Log) [<span class=3D"hljs-keyword">list</span> <span cl=
ass=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword">file</span=
> <span class=3D"hljs-keyword">join</span> $dir <span class=3D"hljs-keyword=
">safe</span>.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::<span class=3D"hljs-ke=
yword">safe</span>::CheckFileName) [<span class=3D"hljs-keyword">list</span=
> <span class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword">=
file</span> <span class=3D"hljs-keyword">join</span> $dir <span class=3D"hl=
js-keyword">safe</span>.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::<span class=3D"hljs-ke=
yword">safe</span>::AliasSource) [<span class=3D"hljs-keyword">list</span> =
<span class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword">fi=
le</span> <span class=3D"hljs-keyword">join</span> $dir <span class=3D"hljs=
-keyword">safe</span>.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::<span class=3D"hljs-ke=
yword">safe</span>::AliasLoad) [<span class=3D"hljs-keyword">list</span> <s=
pan class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword">file=
</span> <span class=3D"hljs-keyword">join</span> $dir <span class=3D"hljs-k=
eyword">safe</span>.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::<span class=3D"hljs-ke=
yword">safe</span>::FileInAccessPath) [<span class=3D"hljs-keyword">list</s=
pan> <span class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keywor=
d">file</span> <span class=3D"hljs-keyword">join</span> $dir <span class=3D=
"hljs-keyword">safe</span>.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::<span class=3D"hljs-ke=
yword">safe</span>::Subset) [<span class=3D"hljs-keyword">list</span> <span=
 class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword">file</s=
pan> <span class=3D"hljs-keyword">join</span> $dir <span class=3D"hljs-keyw=
ord">safe</span>.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::<span class=3D"hljs-ke=
yword">safe</span>::AliasSubset) [<span class=3D"hljs-keyword">list</span> =
<span class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword">fi=
le</span> <span class=3D"hljs-keyword">join</span> $dir <span class=3D"hljs=
-keyword">safe</span>.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(<span class=3D"hljs-keyw=
ord">tcl_wordBreakAfter</span>) [<span class=3D"hljs-keyword">list</span> <=
span class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword">fil=
e</span> <span class=3D"hljs-keyword">join</span> $dir word.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(<span class=3D"hljs-keyw=
ord">tcl_wordBreakBefore</span>) [<span class=3D"hljs-keyword">list</span> =
<span class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword">fi=
le</span> <span class=3D"hljs-keyword">join</span> $dir word.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(<span class=3D"hljs-keyw=
ord">tcl_endOfWord</span>) [<span class=3D"hljs-keyword">list</span> <span =
class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword">file</sp=
an> <span class=3D"hljs-keyword">join</span> $dir word.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(<span class=3D"hljs-keyw=
ord">tcl_startOfNextWord</span>) [<span class=3D"hljs-keyword">list</span> =
<span class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword">fi=
le</span> <span class=3D"hljs-keyword">join</span> $dir word.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(<span class=3D"hljs-keyw=
ord">tcl_startOfPreviousWord</span>) [<span class=3D"hljs-keyword">list</sp=
an> <span class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword=
">file</span> <span class=3D"hljs-keyword">join</span> $dir word.tcl]]
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">strin=
g</span> equal $tcl_platform(platform) <span class=3D"hljs-string">"windows=
"</span>]} then {
    <span class=3D"hljs-keyword">set</span> tcl_wordchars <span class=3D"hl=
js-string">"\\S"</span>
    <span class=3D"hljs-keyword">set</span> tcl_nonwordchars <span class=3D=
"hljs-string">"\\s"</span>
} else {
    <span class=3D"hljs-keyword">set</span> tcl_wordchars <span class=3D"hl=
js-string">"\\w"</span>
    <span class=3D"hljs-keyword">set</span> tcl_nonwordchars <span class=3D=
"hljs-string">"\\W"</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tcl_wor=
dBreakAfter</span> {str start} {
    <span class=3D"hljs-keyword">global</span> tcl_nonwordchars tcl_wordcha=
rs
    <span class=3D"hljs-keyword">set</span> str [<span class=3D"hljs-keywor=
d">string</span> range $str $start end]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">r=
egexp</span> -indices <span class=3D"hljs-string">"$tcl_wordchars$tcl_nonwo=
rdchars|$tcl_nonwordchars$tcl_wordchars"</span> $str result]} then {
	<span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keyword">e=
xpr</span> {[<span class=3D"hljs-keyword">lindex</span> $result <span class=
=3D"hljs-number">1</span>] + $start}]
    }
    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">=
-1</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tcl_wor=
dBreakBefore</span> {str start} {
    <span class=3D"hljs-keyword">global</span> tcl_nonwordchars tcl_wordcha=
rs
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $start end]} then {
	<span class=3D"hljs-keyword">set</span> start [<span class=3D"hljs-keyword=
">string</span> length $str]
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">r=
egexp</span> -indices <span class=3D"hljs-string">"^.*($tcl_wordchars$tcl_n=
onwordchars|$tcl_nonwordchars$tcl_wordchars)"</span> [<span class=3D"hljs-k=
eyword">string</span> range $str <span class=3D"hljs-number">0</span> $star=
t] result]} then {
	<span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keyword">l=
index</span> $result <span class=3D"hljs-number">1</span>]
    }
    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">=
-1</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tcl_end=
OfWord</span> {str start} {
    <span class=3D"hljs-keyword">global</span> tcl_nonwordchars tcl_wordcha=
rs
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">r=
egexp</span> -indices <span class=3D"hljs-string">"$tcl_nonwordchars*$tcl_w=
ordchars+$tcl_nonwordchars"</span> [<span class=3D"hljs-keyword">string</sp=
an> range $str $start end] result]} then {
	<span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keyword">e=
xpr</span> {[<span class=3D"hljs-keyword">lindex</span> $result <span class=
=3D"hljs-number">1</span>] + $start}]
    }
    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">=
-1</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tcl_sta=
rtOfNextWord</span> {str start} {
    <span class=3D"hljs-keyword">global</span> tcl_nonwordchars tcl_wordcha=
rs
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">r=
egexp</span> -indices <span class=3D"hljs-string">"$tcl_wordchars*$tcl_nonw=
ordchars+$tcl_wordchars"</span> [<span class=3D"hljs-keyword">string</span>=
 range $str $start end] result]} then {
	<span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keyword">e=
xpr</span> {[<span class=3D"hljs-keyword">lindex</span> $result <span class=
=3D"hljs-number">1</span>] + $start}]
    }
    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">=
-1</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tcl_sta=
rtOfPreviousWord</span> {str start} {
    <span class=3D"hljs-keyword">global</span> tcl_nonwordchars tcl_wordcha=
rs
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $start end]} then {
	<span class=3D"hljs-keyword">set</span> start [<span class=3D"hljs-keyword=
">string</span> length $str]
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">r=
egexp</span> -indices <span class=3D"hljs-string">"$tcl_nonwordchars*($tcl_=
wordchars+)$tcl_nonwordchars*\$"</span> [<span class=3D"hljs-keyword">strin=
g</span> range $str <span class=3D"hljs-number">0</span> [<span class=3D"hl=
js-keyword">expr</span> {$start - <span class=3D"hljs-number">1</span>}]] r=
esult word]} then {
	<span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keyword">l=
index</span> $word <span class=3D"hljs-number">0</span>]
    }
    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">=
-1</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> bgerror=
</span> err {
    <span class=3D"hljs-keyword">global</span> errorInfo tcl_platform
    <span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">in=
fo</span> $errorInfo

    <span class=3D"hljs-keyword">set</span> ret [<span class=3D"hljs-keywor=
d">catch</span> {tkerror $err} msg]

    <span class=3D"hljs-keyword">if</span> {$ret !=3D <span class=3D"hljs-n=
umber">1</span>} then {
	<span class=3D"hljs-keyword">return</span> -code $ret $msg
    }
    <span class=3D"hljs-keyword">if</span> {$tcl_platform(platform) =3D=3D =
<span class=3D"hljs-string">"macintosh"</span>} then {
	<span class=3D"hljs-keyword">set</span> ok Ok
    } else {
	<span class=3D"hljs-keyword">set</span> ok OK
    }
    <span class=3D"hljs-keyword">set</span> button [tk_dialog .bgerrorDialo=
g <span class=3D"hljs-string">"Error in Tcl Script"</span> <span class=3D"h=
ljs-string">"Error: $err"</span> <span class=3D"hljs-keyword">error</span> =
<span class=3D"hljs-number">0</span> $ok <span class=3D"hljs-string">"Skip =
Messages"</span> <span class=3D"hljs-string">"Stack Trace"</span>]
    <span class=3D"hljs-keyword">if</span> {$button =3D=3D <span class=3D"h=
ljs-number">0</span>} then {
	<span class=3D"hljs-keyword">return</span>
    } elseif {$button =3D=3D <span class=3D"hljs-number">1</span>} {
	<span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-keywo=
rd">break</span>
    }
    <span class=3D"hljs-keyword">set</span> w .bgerrorTrace
    <span class=3D"hljs-keyword">catch</span> {destroy $w}
    toplevel $w -class ErrorTrace
    wm minsize $w <span class=3D"hljs-number">1</span> <span class=3D"hljs-=
number">1</span>
    wm title $w <span class=3D"hljs-string">"Stack Trace for Error"</span>
    wm iconname $w <span class=3D"hljs-string">"Stack Trace"</span>
    button $w.ok -text OK -command <span class=3D"hljs-string">"destroy $w"=
</span> -default active
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
string</span> compare $tcl_platform(platform) <span class=3D"hljs-string">"=
macintosh"</span>]} then {
	text $w.text -relief flat -bd <span class=3D"hljs-number">2</span> -highli=
ghtthickness <span class=3D"hljs-number">0</span> -setgrid true -yscrollcom=
mand <span class=3D"hljs-string">"$w.scroll set"</span> -width <span class=
=3D"hljs-number">60</span> -height <span class=3D"hljs-number">20</span>
    } else {
	text $w.text -relief sunken -bd <span class=3D"hljs-number">2</span> -yscr=
ollcommand <span class=3D"hljs-string">"$w.scroll set"</span> -setgrid true=
 -width <span class=3D"hljs-number">60</span> -height <span class=3D"hljs-n=
umber">20</span>
    }
    scrollbar $w.scroll -relief sunken -command <span class=3D"hljs-string"=
>"$w.text yview"</span>
    pack $w.ok -side bottom -padx <span class=3D"hljs-number">3</span>m -pa=
dy <span class=3D"hljs-number">2</span>m
    pack $w.scroll -side right -fill y
    pack $w.text -side left -expand yes -fill both
    $w.text insert <span class=3D"hljs-number">0.0</span> $info
    $w.text mark <span class=3D"hljs-keyword">set</span> insert <span class=
=3D"hljs-number">0.0</span>
    bind $w &lt;Return&gt; <span class=3D"hljs-string">"destroy $w"</span>
    bind $w.text &lt;Return&gt; <span class=3D"hljs-string">"destroy $w; br=
eak"</span>
    wm withdraw $w
    <span class=3D"hljs-keyword">update</span> idletasks
    <span class=3D"hljs-keyword">set</span> x [<span class=3D"hljs-keyword"=
>expr</span> {[winfo screenwidth $w]/<span class=3D"hljs-number">2</span> -=
 [winfo reqwidth $w]/<span class=3D"hljs-number">2</span> - [winfo vrootx [=
winfo parent $w]]}]
    <span class=3D"hljs-keyword">set</span> y [<span class=3D"hljs-keyword"=
>expr</span> {[winfo screenheight $w]/<span class=3D"hljs-number">2</span> =
- [winfo reqheight $w]/<span class=3D"hljs-number">2</span> - [winfo vrooty=
 [winfo parent $w]]}]
    wm geom $w +$x+$y
    wm deiconify $w
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare [grab current .] <span class=3D"hljs-string">""</span>=
]} then {
	grab release [grab current .]
    }
}
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">strin=
g</span> match <span class=3D"hljs-string">"macintosh"</span> $tcl_platform=
(platform)]} then {
    bind Radiobutton &lt;Enter&gt; {
	tkButtonEnter %W
    }
    bind Radiobutton &lt;<span class=3D"hljs-number">1</span>&gt; {
	tkButtonDown %W
    }
    bind Radiobutton &lt;ButtonRelease<span class=3D"hljs-number">-1</span>=
&gt; {
	tkButtonUp %W
    }
    bind Checkbutton &lt;Enter&gt; {
	tkButtonEnter %W
    }
    bind Checkbutton &lt;<span class=3D"hljs-number">1</span>&gt; {
	tkButtonDown %W
    }
    bind Checkbutton &lt;ButtonRelease<span class=3D"hljs-number">-1</span>=
&gt; {
	tkButtonUp %W
    }
}
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">strin=
g</span> match <span class=3D"hljs-string">"windows"</span> $tcl_platform(p=
latform)]} then {
    bind Checkbutton &lt;equal&gt; {
	tkCheckRadioInvoke %W select
    }
    bind Checkbutton &lt;plus&gt; {
	tkCheckRadioInvoke %W select
    }
    bind Checkbutton &lt;minus&gt; {
	tkCheckRadioInvoke %W deselect
    }
    bind Checkbutton &lt;<span class=3D"hljs-number">1</span>&gt; {
	tkCheckRadioDown %W
    }
    bind Checkbutton &lt;ButtonRelease<span class=3D"hljs-number">-1</span>=
&gt; {
	tkButtonUp %W
    }
    bind Checkbutton &lt;Enter&gt; {
	tkCheckRadioEnter %W
    }
    bind Radiobutton &lt;<span class=3D"hljs-number">1</span>&gt; {
	tkCheckRadioDown %W
    }
    bind Radiobutton &lt;ButtonRelease<span class=3D"hljs-number">-1</span>=
&gt; {
	tkButtonUp %W
    }
    bind Radiobutton &lt;Enter&gt; {
	tkCheckRadioEnter %W
    }
}
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">strin=
g</span> match <span class=3D"hljs-string">"unix"</span> $tcl_platform(plat=
form)]} then {
    bind Checkbutton &lt;Return&gt; {
	<span class=3D"hljs-keyword">if</span> {!$tk_strictMotif} then {
	    tkCheckRadioInvoke %W
	}
    }
    bind Radiobutton &lt;Return&gt; {
	<span class=3D"hljs-keyword">if</span> {!$tk_strictMotif} then {
	    tkCheckRadioInvoke %W
	}
    }
    bind Checkbutton &lt;<span class=3D"hljs-number">1</span>&gt; {
	tkCheckRadioInvoke %W
    }
    bind Radiobutton &lt;<span class=3D"hljs-number">1</span>&gt; {
	tkCheckRadioInvoke %W
    }
    bind Checkbutton &lt;Enter&gt; {
	tkButtonEnter %W
    }
    bind Radiobutton &lt;Enter&gt; {
	tkButtonEnter %W
    }
}
bind Button &lt;space&gt; {
    tkButtonInvoke %W
}
bind Checkbutton &lt;space&gt; {
    tkCheckRadioInvoke %W
}
bind Radiobutton &lt;space&gt; {
    tkCheckRadioInvoke %W
}
bind Button &lt;FocusIn&gt; {}
bind Button &lt;Enter&gt; {
    tkButtonEnter %W
}
bind Button &lt;Leave&gt; {
    tkButtonLeave %W
}
bind Button &lt;<span class=3D"hljs-number">1</span>&gt; {
    tkButtonDown %W
}
bind Button &lt;ButtonRelease<span class=3D"hljs-number">-1</span>&gt; {
    tkButtonUp %W
}
bind Checkbutton &lt;FocusIn&gt; {}
bind Checkbutton &lt;Leave&gt; {
    tkButtonLeave %W
}
bind Radiobutton &lt;FocusIn&gt; {}
bind Radiobutton &lt;Leave&gt; {
    tkButtonLeave %W
}
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">strin=
g</span> match <span class=3D"hljs-string">"windows"</span> $tcl_platform(p=
latform)]} then {
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkB=
uttonEnter</span> w {
	<span class=3D"hljs-keyword">global</span> tkPriv
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> compare [$w cget -state] <span class=3D"hljs-string">"disabled"</=
span>] &amp;&amp; [<span class=3D"hljs-keyword">string</span> equal $tkPriv=
(buttonWindow) $w]} then {
	    $w configure -state active -relief sunken
	}
	<span class=3D"hljs-keyword">set</span> tkPriv(window) $w
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkB=
uttonLeave</span> w {
	<span class=3D"hljs-keyword">global</span> tkPriv
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> compare [$w cget -state] <span class=3D"hljs-string">"disabled"</=
span>]} then {
	    $w configure -state normal
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> equal $tkPriv(buttonWindow) $w]} then {
	    $w configure -relief $tkPriv(relief)
	}
	<span class=3D"hljs-keyword">set</span> tkPriv(window) <span class=3D"hljs=
-string">""</span>
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkC=
heckRadioEnter</span> w {
	<span class=3D"hljs-keyword">global</span> tkPriv
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> compare [$w cget -state] <span class=3D"hljs-string">"disabled"</=
span>] &amp;&amp; [<span class=3D"hljs-keyword">string</span> equal $tkPriv=
(buttonWindow) $w]} then {
	    $w configure -state active
	}
	<span class=3D"hljs-keyword">set</span> tkPriv(window) $w
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkB=
uttonDown</span> w {
	<span class=3D"hljs-keyword">global</span> tkPriv
	<span class=3D"hljs-keyword">set</span> tkPriv(relief) [$w cget -relief]
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> compare [$w cget -state] <span class=3D"hljs-string">"disabled"</=
span>]} then {
	    <span class=3D"hljs-keyword">set</span> tkPriv(buttonWindow) $w
	    $w configure -relief sunken -state active
	}
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkC=
heckRadioDown</span> w {
	<span class=3D"hljs-keyword">global</span> tkPriv
	<span class=3D"hljs-keyword">set</span> tkPriv(relief) [$w cget -relief]
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> compare [$w cget -state] <span class=3D"hljs-string">"disabled"</=
span>]} then {
	    <span class=3D"hljs-keyword">set</span> tkPriv(buttonWindow) $w
	    $w configure -state active
	}
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkB=
uttonUp</span> w {
	<span class=3D"hljs-keyword">global</span> tkPriv
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> equal $tkPriv(buttonWindow) $w]} then {
	    <span class=3D"hljs-keyword">set</span> tkPriv(buttonWindow) <span cla=
ss=3D"hljs-string">""</span>
	    $w configure -relief $tkPriv(relief)
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
string</span> equal $tkPriv(window) $w] &amp;&amp; [<span class=3D"hljs-key=
word">string</span> compare [$w cget -state] <span class=3D"hljs-string">"d=
isabled"</span>]} then {
		$w configure -state normal
		<span class=3D"hljs-keyword">uplevel</span> #<span class=3D"hljs-number">=
0</span> [<span class=3D"hljs-keyword">list</span> $w invoke]
	    }
	}
    }
}
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">strin=
g</span> match <span class=3D"hljs-string">"unix"</span> $tcl_platform(plat=
form)]} then {
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkB=
uttonEnter</span> {w} {
	<span class=3D"hljs-keyword">global</span> tkPriv
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> compare [$w cget -state] <span class=3D"hljs-string">"disabled"</=
span>]} then {
	    $w configure -state active
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
string</span> equal $tkPriv(buttonWindow) $w]} then {
		$w configure -state active -relief sunken
	    }
	}
	<span class=3D"hljs-keyword">set</span> tkPriv(window) $w
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkB=
uttonLeave</span> w {
	<span class=3D"hljs-keyword">global</span> tkPriv
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> compare [$w cget -state] <span class=3D"hljs-string">"disabled"</=
span>]} then {
	    $w configure -state normal
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> equal $tkPriv(buttonWindow) $w]} then {
	    $w configure -relief $tkPriv(relief)
	}
	<span class=3D"hljs-keyword">set</span> tkPriv(window) <span class=3D"hljs=
-string">""</span>
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkB=
uttonDown</span> w {
	<span class=3D"hljs-keyword">global</span> tkPriv
	<span class=3D"hljs-keyword">set</span> tkPriv(relief) [$w cget -relief]
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> compare [$w cget -state] <span class=3D"hljs-string">"disabled"</=
span>]} then {
	    <span class=3D"hljs-keyword">set</span> tkPriv(buttonWindow) $w
	    $w configure -relief sunken
	}
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkB=
uttonUp</span> w {
	<span class=3D"hljs-keyword">global</span> tkPriv
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> equal $w $tkPriv(buttonWindow)]} then {
	    <span class=3D"hljs-keyword">set</span> tkPriv(buttonWindow) <span cla=
ss=3D"hljs-string">""</span>
	    $w configure -relief $tkPriv(relief)
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
string</span> equal $w $tkPriv(window)] &amp;&amp; [<span class=3D"hljs-key=
word">string</span> compare [$w cget -state] <span class=3D"hljs-string">"d=
isabled"</span>]} then {
		<span class=3D"hljs-keyword">uplevel</span> #<span class=3D"hljs-number">=
0</span> [<span class=3D"hljs-keyword">list</span> $w invoke]
	    }
	}
    }
}
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">strin=
g</span> match <span class=3D"hljs-string">"macintosh"</span> $tcl_platform=
(platform)]} then {
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkB=
uttonEnter</span> {w} {
	<span class=3D"hljs-keyword">global</span> tkPriv
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> compare [$w cget -state] <span class=3D"hljs-string">"disabled"</=
span>]} then {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
string</span> equal $w $tkPriv(buttonWindow)]} then {
		$w configure -state active
	    }
	}
	<span class=3D"hljs-keyword">set</span> tkPriv(window) $w
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkB=
uttonLeave</span> w {
	<span class=3D"hljs-keyword">global</span> tkPriv
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> equal $w $tkPriv(buttonWindow)]} then {
	    $w configure -state normal
	}
	<span class=3D"hljs-keyword">set</span> tkPriv(window) <span class=3D"hljs=
-string">""</span>
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkB=
uttonDown</span> w {
	<span class=3D"hljs-keyword">global</span> tkPriv
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> compare [$w cget -state] <span class=3D"hljs-string">"disabled"</=
span>]} then {
	    <span class=3D"hljs-keyword">set</span> tkPriv(buttonWindow) $w
	    $w configure -state active
	}
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkB=
uttonUp</span> w {
	<span class=3D"hljs-keyword">global</span> tkPriv
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> equal $w $tkPriv(buttonWindow)]} then {
	    $w configure -state normal
	    <span class=3D"hljs-keyword">set</span> tkPriv(buttonWindow) <span cla=
ss=3D"hljs-string">""</span>
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
string</span> equal $w $tkPriv(window)] &amp;&amp; [<span class=3D"hljs-key=
word">string</span> compare [$w cget -state] <span class=3D"hljs-string">"d=
isabled"</span>]} then {
		<span class=3D"hljs-keyword">uplevel</span> #<span class=3D"hljs-number">=
0</span> [<span class=3D"hljs-keyword">list</span> $w invoke]
	    }
	}
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkButto=
nInvoke</span> w {
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare [$w cget -state] <span class=3D"hljs-string">"disabled=
"</span>]} then {
	<span class=3D"hljs-keyword">set</span> oldRelief [$w cget -relief]
	<span class=3D"hljs-keyword">set</span> oldState [$w cget -state]
	$w configure -state active -relief sunken
	<span class=3D"hljs-keyword">update</span> idletasks
	<span class=3D"hljs-keyword">after</span> <span class=3D"hljs-number">100<=
/span>
	$w configure -state $oldState -relief $oldRelief
	<span class=3D"hljs-keyword">uplevel</span> #<span class=3D"hljs-number">0=
</span> [<span class=3D"hljs-keyword">list</span> $w invoke]
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkCheck=
RadioInvoke</span> {w {cmd invoke}} {
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare [$w cget -state] <span class=3D"hljs-string">"disabled=
"</span>]} then {
	<span class=3D"hljs-keyword">uplevel</span> #<span class=3D"hljs-number">0=
</span> [<span class=3D"hljs-keyword">list</span> $w $cmd]
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkColor=
Dialog</span> {args} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">set</span> w .__tk__color
    <span class=3D"hljs-keyword">upvar</span> #<span class=3D"hljs-number">=
0</span> $w data
    <span class=3D"hljs-keyword">set</span> data(lines,red,start) <span cla=
ss=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> data(lines,red,last) <span clas=
s=3D"hljs-number">-1</span>
    <span class=3D"hljs-keyword">set</span> data(lines,green,start) <span c=
lass=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> data(lines,green,last) <span cl=
ass=3D"hljs-number">-1</span>
    <span class=3D"hljs-keyword">set</span> data(lines,blue,start) <span cl=
ass=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> data(lines,blue,last) <span cla=
ss=3D"hljs-number">-1</span>
    <span class=3D"hljs-keyword">set</span> data(NUM_COLORBARS) <span class=
=3D"hljs-number">8</span>
    <span class=3D"hljs-keyword">set</span> data(BARS_WIDTH) <span class=3D=
"hljs-number">128</span>
    <span class=3D"hljs-keyword">set</span> data(PLGN_HEIGHT) <span class=
=3D"hljs-number">10</span>
    <span class=3D"hljs-keyword">set</span> data(PLGN_WIDTH) <span class=3D=
"hljs-number">10</span>
    tkColorDialog_Config $w $args
    tkColorDialog_InitValues $w
    <span class=3D"hljs-keyword">set</span> sc [winfo screen $data(-parent)=
]
    <span class=3D"hljs-keyword">set</span> winExists [winfo exists $w]
    <span class=3D"hljs-keyword">if</span> {!$winExists || [<span class=3D"=
hljs-keyword">string</span> compare $sc [winfo screen $w]]} then {
	<span class=3D"hljs-keyword">if</span> {$winExists} then {
	    destroy $w
	}
	toplevel $w -class tkColorDialog -screen $sc
	tkColorDialog_BuildDialog $w
    }
    wm transient $w $data(-parent)
    ::tk::PlaceWindow $w widget $data(-parent)
    wm title $w $data(-title)
    ::tk::SetFocusGrab $w $data(okBtn)
    <span class=3D"hljs-keyword">vwait</span> tkPriv(selectColor)
    ::tk::RestoreFocusGrab $w $data(okBtn)
    <span class=3D"hljs-keyword">unset</span> data
    <span class=3D"hljs-keyword">return</span> $tkPriv(selectColor)
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkColor=
Dialog_InitValues</span> {w} {
    <span class=3D"hljs-keyword">upvar</span> #<span class=3D"hljs-number">=
0</span> $w data
    <span class=3D"hljs-keyword">set</span> data(intensityIncr) [<span clas=
s=3D"hljs-keyword">expr</span> {<span class=3D"hljs-number">256</span> / $d=
ata(NUM_COLORBARS)}]
    <span class=3D"hljs-keyword">set</span> data(colorbarWidth) [<span clas=
s=3D"hljs-keyword">expr</span> {$data(BARS_WIDTH) / $data(NUM_COLORBARS)}]
    <span class=3D"hljs-keyword">set</span> data(indent) [<span class=3D"hl=
js-keyword">expr</span> {$data(PLGN_WIDTH) / <span class=3D"hljs-number">2<=
/span>}]
    <span class=3D"hljs-keyword">set</span> data(colorPad) <span class=3D"h=
ljs-number">2</span>
    <span class=3D"hljs-keyword">set</span> data(selPad) [<span class=3D"hl=
js-keyword">expr</span> {$data(PLGN_WIDTH) / <span class=3D"hljs-number">2<=
/span>}]
    <span class=3D"hljs-keyword">set</span> data(minX) $data(indent)
    <span class=3D"hljs-keyword">set</span> data(maxX) [<span class=3D"hljs=
-keyword">expr</span> {$data(BARS_WIDTH) + $data(indent)-<span class=3D"hlj=
s-number">1</span>}]
    <span class=3D"hljs-keyword">set</span> data(canvasWidth) [<span class=
=3D"hljs-keyword">expr</span> {$data(BARS_WIDTH) + $data(PLGN_WIDTH)}]
    <span class=3D"hljs-keyword">set</span> data(selection) $data(-initialc=
olor)
    <span class=3D"hljs-keyword">set</span> data(finalColor) $data(-initial=
color)
    <span class=3D"hljs-keyword">set</span> rgb [winfo rgb . $data(selectio=
n)]
    <span class=3D"hljs-keyword">set</span> data(red,intensity) [<span clas=
s=3D"hljs-keyword">expr</span> {[<span class=3D"hljs-keyword">lindex</span>=
 $rgb <span class=3D"hljs-number">0</span>]/<span class=3D"hljs-number">0x1=
00</span>}]
    <span class=3D"hljs-keyword">set</span> data(green,intensity) [<span cl=
ass=3D"hljs-keyword">expr</span> {[<span class=3D"hljs-keyword">lindex</spa=
n> $rgb <span class=3D"hljs-number">1</span>]/<span class=3D"hljs-number">0=
x100</span>}]
    <span class=3D"hljs-keyword">set</span> data(blue,intensity) [<span cla=
ss=3D"hljs-keyword">expr</span> {[<span class=3D"hljs-keyword">lindex</span=
> $rgb <span class=3D"hljs-number">2</span>]/<span class=3D"hljs-number">0x=
100</span>}]
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkColor=
Dialog_Config</span> {w argList} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">upvar</span> #<span class=3D"hljs-number">=
0</span> $w data
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists tkPriv(selectColor)] &amp;&amp; [<span class=3D"hljs-keyw=
ord">string</span> compare $tkPriv(selectColor) <span class=3D"hljs-string"=
>""</span>]} then {
	<span class=3D"hljs-keyword">set</span> defaultColor $tkPriv(selectColor)
    } else {
	<span class=3D"hljs-keyword">set</span> defaultColor [. cget -background]
    }
    <span class=3D"hljs-keyword">set</span> specs [<span class=3D"hljs-keyw=
ord">list</span> [<span class=3D"hljs-keyword">list</span> -initialcolor <s=
pan class=3D"hljs-string">""</span> <span class=3D"hljs-string">""</span> $=
defaultColor] [<span class=3D"hljs-keyword">list</span> -parent <span class=
=3D"hljs-string">""</span> <span class=3D"hljs-string">""</span> <span clas=
s=3D"hljs-string">"."</span>] [<span class=3D"hljs-keyword">list</span> -ti=
tle <span class=3D"hljs-string">""</span> <span class=3D"hljs-string">""</s=
pan> <span class=3D"hljs-string">"Color"</span>]]
    tclParseConfigSpec $w $specs <span class=3D"hljs-string">""</span> $arg=
List
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $data(-title) <span class=3D"hljs-string">""</span>]} th=
en {
	<span class=3D"hljs-keyword">set</span> data(-title) <span class=3D"hljs-s=
tring">" "</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">c=
atch</span> {winfo rgb . $data(-initialcolor)} err]} then {
	<span class=3D"hljs-keyword">error</span> $err
    }
    <span class=3D"hljs-keyword">if</span> {![winfo exists $data(-parent)]}=
 then {
	<span class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">"bad=
 window path name \"$data(-parent)\""</span>
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkColor=
Dialog_BuildDialog</span> {w} {
    <span class=3D"hljs-keyword">upvar</span> #<span class=3D"hljs-number">=
0</span> $w data
    <span class=3D"hljs-keyword">set</span> topFrame [frame $w.top -relief =
raised -bd <span class=3D"hljs-number">1</span>]
    <span class=3D"hljs-keyword">set</span> stripsFrame [frame $topFrame.co=
lorStrip]
    <span class=3D"hljs-keyword">foreach</span> c {Red Green Blue} {
	<span class=3D"hljs-keyword">set</span> color [<span class=3D"hljs-keyword=
">string</span> tolower $c]
	<span class=3D"hljs-keyword">set</span> f [frame $stripsFrame.$color]
	<span class=3D"hljs-keyword">set</span> box [frame $f.box]
	label $box.label -text $c: -width <span class=3D"hljs-number">6</span> -un=
der <span class=3D"hljs-number">0</span> -anchor ne
	entry $box.entry -textvariable [<span class=3D"hljs-keyword">format</span>=
 %s $w]($color,intensity) -width <span class=3D"hljs-number">4</span>
	pack $box.label -side left -fill y -padx <span class=3D"hljs-number">2</sp=
an> -pady <span class=3D"hljs-number">3</span>
	pack $box.entry -side left -anchor n -pady <span class=3D"hljs-number">0</=
span>
	pack $box -side left -fill both
	<span class=3D"hljs-keyword">set</span> height [<span class=3D"hljs-keywor=
d">expr</span> {[winfo reqheight $box.entry] - <span class=3D"hljs-number">=
2</span>*([$box.entry cget -highlightthickness] + [$box.entry cget -bd])}]
	canvas $f.color -height $height -width $data(BARS_WIDTH) -relief sunken -b=
d <span class=3D"hljs-number">2</span>
	canvas $f.sel -height $data(PLGN_HEIGHT) -width $data(canvasWidth) -highli=
ghtthickness <span class=3D"hljs-number">0</span>
	pack $f.color -expand yes -fill both
	pack $f.sel -expand yes -fill both
	pack $f -side top -fill x -padx <span class=3D"hljs-number">0</span> -pady=
 <span class=3D"hljs-number">2</span>
	<span class=3D"hljs-keyword">set</span> data($color,entry) $box.entry
	<span class=3D"hljs-keyword">set</span> data($color,col) $f.color
	<span class=3D"hljs-keyword">set</span> data($color,sel) $f.sel
	bind $data($color,col) &lt;Configure&gt; [<span class=3D"hljs-keyword">lis=
t</span> tkColorDialog_DrawColorScale $w $color <span class=3D"hljs-number"=
>1</span>]
	bind $data($color,col) &lt;Enter&gt; [<span class=3D"hljs-keyword">list</s=
pan> tkColorDialog_EnterColorBar $w $color]
	bind $data($color,col) &lt;Leave&gt; [<span class=3D"hljs-keyword">list</s=
pan> tkColorDialog_LeaveColorBar $w $color]
	bind $data($color,sel) &lt;Enter&gt; [<span class=3D"hljs-keyword">list</s=
pan> tkColorDialog_EnterColorBar $w $color]
	bind $data($color,sel) &lt;Leave&gt; [<span class=3D"hljs-keyword">list</s=
pan> tkColorDialog_LeaveColorBar $w $color]
	bind $box.entry &lt;Return&gt; [<span class=3D"hljs-keyword">list</span> t=
kColorDialog_HandleRGBEntry $w]
    }
    pack $stripsFrame -side left -fill both -padx <span class=3D"hljs-numbe=
r">4</span> -pady <span class=3D"hljs-number">10</span>
    <span class=3D"hljs-keyword">set</span> selFrame [frame $topFrame.sel]
    <span class=3D"hljs-keyword">set</span> lab [label $selFrame.lab -text =
<span class=3D"hljs-string">"Selection:"</span> -under <span class=3D"hljs-=
number">0</span> -anchor sw]
    <span class=3D"hljs-keyword">set</span> ent [entry $selFrame.ent -textv=
ariable [<span class=3D"hljs-keyword">format</span> %s $w](selection) -widt=
h <span class=3D"hljs-number">16</span>]
    <span class=3D"hljs-keyword">set</span> f1 [frame $selFrame.f1 -relief =
sunken -bd <span class=3D"hljs-number">2</span>]
    <span class=3D"hljs-keyword">set</span> data(finalCanvas) [frame $f1.de=
mo -bd <span class=3D"hljs-number">0</span> -width <span class=3D"hljs-numb=
er">100</span> -height <span class=3D"hljs-number">70</span>]
    pack $lab $ent -side top -fill x -padx <span class=3D"hljs-number">4</s=
pan> -pady <span class=3D"hljs-number">2</span>
    pack $f1 -expand yes -anchor nw -fill both -padx <span class=3D"hljs-nu=
mber">6</span> -pady <span class=3D"hljs-number">10</span>
    pack $data(finalCanvas) -expand yes -fill both
    bind $ent &lt;Return&gt; [<span class=3D"hljs-keyword">list</span> tkCo=
lorDialog_HandleSelEntry $w]
    pack $selFrame -side left -fill none -anchor nw
    pack $topFrame -side top -expand yes -fill both -anchor nw
    <span class=3D"hljs-keyword">set</span> botFrame [frame $w.bot -relief =
raised -bd <span class=3D"hljs-number">1</span>]
    button $botFrame.ok -text OK -width <span class=3D"hljs-number">8</span=
> -under <span class=3D"hljs-number">0</span> -command [<span class=3D"hljs=
-keyword">list</span> tkColorDialog_OkCmd $w]
    button $botFrame.cancel -text Cancel -width <span class=3D"hljs-number"=
>8</span> -under <span class=3D"hljs-number">0</span> -command [<span class=
=3D"hljs-keyword">list</span> tkColorDialog_CancelCmd $w]
    <span class=3D"hljs-keyword">set</span> data(okBtn) $botFrame.ok
    <span class=3D"hljs-keyword">set</span> data(cancelBtn) $botFrame.cance=
l
    pack $botFrame.ok $botFrame.cancel -padx <span class=3D"hljs-number">10=
</span> -pady <span class=3D"hljs-number">10</span> -expand yes -side left
    pack $botFrame -side bottom -fill x
    bind $w &lt;Alt-r&gt; [<span class=3D"hljs-keyword">list</span> focus $=
data(red,entry)]
    bind $w &lt;Alt-g&gt; [<span class=3D"hljs-keyword">list</span> focus $=
data(green,entry)]
    bind $w &lt;Alt-b&gt; [<span class=3D"hljs-keyword">list</span> focus $=
data(blue,entry)]
    bind $w &lt;Alt-s&gt; [<span class=3D"hljs-keyword">list</span> focus $=
ent]
    bind $w &lt;KeyPress-Escape&gt; [<span class=3D"hljs-keyword">list</spa=
n> tkButtonInvoke $data(cancelBtn)]
    bind $w &lt;Alt-c&gt; [<span class=3D"hljs-keyword">list</span> tkButto=
nInvoke $data(cancelBtn)]
    bind $w &lt;Alt-o&gt; [<span class=3D"hljs-keyword">list</span> tkButto=
nInvoke $data(okBtn)]
    wm protocol $w WM_DELETE_WINDOW [<span class=3D"hljs-keyword">list</spa=
n> tkColorDialog_CancelCmd $w]
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkColor=
Dialog_SetRGBValue</span> {w color} {
    <span class=3D"hljs-keyword">upvar</span> #<span class=3D"hljs-number">=
0</span> $w data
    <span class=3D"hljs-keyword">set</span> data(red,intensity) [<span clas=
s=3D"hljs-keyword">lindex</span> $color <span class=3D"hljs-number">0</span=
>]
    <span class=3D"hljs-keyword">set</span> data(green,intensity) [<span cl=
ass=3D"hljs-keyword">lindex</span> $color <span class=3D"hljs-number">1</sp=
an>]
    <span class=3D"hljs-keyword">set</span> data(blue,intensity) [<span cla=
ss=3D"hljs-keyword">lindex</span> $color <span class=3D"hljs-number">2</spa=
n>]
    tkColorDialog_RedrawColorBars $w all
    <span class=3D"hljs-keyword">foreach</span> color {red green blue} {
	<span class=3D"hljs-keyword">set</span> x [tkColorDialog_RgbToX $w $data($=
color,intensity)]
	tkColorDialog_MoveSelector $w $data($color,sel) $color $x <span class=3D"h=
ljs-number">0</span>
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkColor=
Dialog_XToRgb</span> {w x} {
    <span class=3D"hljs-keyword">upvar</span> #<span class=3D"hljs-number">=
0</span> $w data
    <span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keyword=
">expr</span> {($x * $data(intensityIncr)) / $data(colorbarWidth)}]
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkColor=
Dialog_RgbToX</span> {w color} {
    <span class=3D"hljs-keyword">upvar</span> #<span class=3D"hljs-number">=
0</span> $w data
    <span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keyword=
">expr</span> {($color * $data(colorbarWidth)/ $data(intensityIncr))}]
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkColor=
Dialog_DrawColorScale</span> {w c {create <span class=3D"hljs-number">0</sp=
an>}} {
    <span class=3D"hljs-keyword">global</span> lines
    <span class=3D"hljs-keyword">upvar</span> #<span class=3D"hljs-number">=
0</span> $w data
    <span class=3D"hljs-keyword">set</span> col $data($c,col)
    <span class=3D"hljs-keyword">set</span> sel $data($c,sel)
    <span class=3D"hljs-keyword">if</span> {$create} then {
	<span class=3D"hljs-keyword">if</span> {$data(lines,$c,last) &gt; $data(li=
nes,$c,start)} then {
	    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">=
set</span> i $data(lines,$c,start)} {$i &lt;=3D $data(lines,$c,last)} {<spa=
n class=3D"hljs-keyword">incr</span> i} {
		$sel delete $i
	    }
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info=
</span> exists data($c,index)]} then {
	    $sel delete $data($c,index)
	}
	tkColorDialog_CreateSelector $w $sel $c
	$sel bind $data($c,index) &lt;ButtonPress<span class=3D"hljs-number">-1</s=
pan>&gt; [<span class=3D"hljs-keyword">list</span> tkColorDialog_StartMove =
$w $sel $c %x $data(selPad) <span class=3D"hljs-number">1</span>]
	$sel bind $data($c,index) &lt;B1-Motion&gt; [<span class=3D"hljs-keyword">=
list</span> tkColorDialog_MoveSelector $w $sel $c %x $data(selPad)]
	$sel bind $data($c,index) &lt;ButtonRelease<span class=3D"hljs-number">-1<=
/span>&gt; [<span class=3D"hljs-keyword">list</span> tkColorDialog_ReleaseM=
ouse $w $sel $c %x $data(selPad)]
	<span class=3D"hljs-keyword">set</span> height [winfo height $col]
	<span class=3D"hljs-keyword">set</span> data($c,clickRegion) [$sel create =
rectangle <span class=3D"hljs-number">0</span> <span class=3D"hljs-number">=
0</span> $data(canvasWidth) $height -fill {} -outline {}]
	bind $col &lt;ButtonPress<span class=3D"hljs-number">-1</span>&gt; [<span =
class=3D"hljs-keyword">list</span> tkColorDialog_StartMove $w $sel $c %x $d=
ata(colorPad)]
	bind $col &lt;B1-Motion&gt; [<span class=3D"hljs-keyword">list</span> tkCo=
lorDialog_MoveSelector $w $sel $c %x $data(colorPad)]
	bind $col &lt;ButtonRelease<span class=3D"hljs-number">-1</span>&gt; [<spa=
n class=3D"hljs-keyword">list</span> tkColorDialog_ReleaseMouse $w $sel $c =
%x $data(colorPad)]
	$sel bind $data($c,clickRegion) &lt;ButtonPress<span class=3D"hljs-number"=
>-1</span>&gt; [<span class=3D"hljs-keyword">list</span> tkColorDialog_Star=
tMove $w $sel $c %x $data(selPad)]
	$sel bind $data($c,clickRegion) &lt;B1-Motion&gt; [<span class=3D"hljs-key=
word">list</span> tkColorDialog_MoveSelector $w $sel $c %x $data(selPad)]
	$sel bind $data($c,clickRegion) &lt;ButtonRelease<span class=3D"hljs-numbe=
r">-1</span>&gt; [<span class=3D"hljs-keyword">list</span> tkColorDialog_Re=
leaseMouse $w $sel $c %x $data(selPad)]
    } else {
	<span class=3D"hljs-keyword">set</span> l $data(lines,$c,start)
    }
    <span class=3D"hljs-keyword">set</span> highlightW [<span class=3D"hljs=
-keyword">expr</span> {[$col cget -highlightthickness] + [$col cget -bd]}]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">0</span>} {$i &lt; $data(NUM_COLORB=
ARS)} {<span class=3D"hljs-keyword">incr</span> i} {
	<span class=3D"hljs-keyword">set</span> intensity [<span class=3D"hljs-key=
word">expr</span> {$i * $data(intensityIncr)}]
	<span class=3D"hljs-keyword">set</span> startx [<span class=3D"hljs-keywor=
d">expr</span> {$i * $data(colorbarWidth) + $highlightW}]
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> equal $c <span class=3D"hljs-string">"red"</span>]} then {
	    <span class=3D"hljs-keyword">set</span> color [<span class=3D"hljs-key=
word">format</span> <span class=3D"hljs-string">"#%02x%02x%02x"</span> $int=
ensity $data(green,intensity) $data(blue,intensity)]
	} elseif {[<span class=3D"hljs-keyword">string</span> equal $c <span class=
=3D"hljs-string">"green"</span>]} {
	    <span class=3D"hljs-keyword">set</span> color [<span class=3D"hljs-key=
word">format</span> <span class=3D"hljs-string">"#%02x%02x%02x"</span> $dat=
a(red,intensity) $intensity $data(blue,intensity)]
	} else {
	    <span class=3D"hljs-keyword">set</span> color [<span class=3D"hljs-key=
word">format</span> <span class=3D"hljs-string">"#%02x%02x%02x"</span> $dat=
a(red,intensity) $data(green,intensity) $intensity]
	}
	<span class=3D"hljs-keyword">if</span> {$create} then {
	    <span class=3D"hljs-keyword">set</span> index [$col create rect $start=
x $highlightW [<span class=3D"hljs-keyword">expr</span> {$startx +$data(col=
orbarWidth)}] [<span class=3D"hljs-keyword">expr</span> {[winfo height $col=
] + $highlightW}] -fill $color -outline $color]
	} else {
	    $col itemconfigure $l -fill $color -outline $color
	    <span class=3D"hljs-keyword">incr</span> l
	}
    }
    $sel raise $data($c,index)
    <span class=3D"hljs-keyword">if</span> {$create} then {
	<span class=3D"hljs-keyword">set</span> data(lines,$c,last) $index
	<span class=3D"hljs-keyword">set</span> data(lines,$c,start) [<span class=
=3D"hljs-keyword">expr</span> {$index - $data(NUM_COLORBARS) + <span class=
=3D"hljs-number">1</span>}]
    }
    tkColorDialog_RedrawFinalColor $w
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkColor=
Dialog_CreateSelector</span> {w sel c} {
    <span class=3D"hljs-keyword">upvar</span> #<span class=3D"hljs-number">=
0</span> $w data
    <span class=3D"hljs-keyword">set</span> data($c,index) [$sel create pol=
ygon <span class=3D"hljs-number">0</span> $data(PLGN_HEIGHT) $data(PLGN_WID=
TH) $data(PLGN_HEIGHT) $data(indent) <span class=3D"hljs-number">0</span>]
    <span class=3D"hljs-keyword">set</span> data($c,x) [tkColorDialog_RgbTo=
X $w $data($c,intensity)]
    $sel move $data($c,index) $data($c,x) <span class=3D"hljs-number">0</sp=
an>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkColor=
Dialog_RedrawFinalColor</span> {w} {
    <span class=3D"hljs-keyword">upvar</span> #<span class=3D"hljs-number">=
0</span> $w data
    <span class=3D"hljs-keyword">set</span> color [<span class=3D"hljs-keyw=
ord">format</span> <span class=3D"hljs-string">"#%02x%02x%02x"</span> $data=
(red,intensity) $data(green,intensity) $data(blue,intensity)]
    $data(finalCanvas) configure -bg $color
    <span class=3D"hljs-keyword">set</span> data(finalColor) $color
    <span class=3D"hljs-keyword">set</span> data(selection) $color
    <span class=3D"hljs-keyword">set</span> data(finalRGB) [<span class=3D"=
hljs-keyword">list</span> $data(red,intensity) $data(green,intensity) $data=
(blue,intensity)]
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkColor=
Dialog_RedrawColorBars</span> {w colorChanged} {
    <span class=3D"hljs-keyword">upvar</span> #<span class=3D"hljs-number">=
0</span> $w data
    <span class=3D"hljs-keyword">switch</span> $colorChanged {
    red {
	    tkColorDialog_DrawColorScale $w green
	    tkColorDialog_DrawColorScale $w blue
	}
    green {
	    tkColorDialog_DrawColorScale $w red
	    tkColorDialog_DrawColorScale $w blue
	}
    blue {
	    tkColorDialog_DrawColorScale $w red
	    tkColorDialog_DrawColorScale $w green
	}
    default {
	    tkColorDialog_DrawColorScale $w red
	    tkColorDialog_DrawColorScale $w green
	    tkColorDialog_DrawColorScale $w blue
	}
    }
    tkColorDialog_RedrawFinalColor $w
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkColor=
Dialog_StartMove</span> {w sel color x delta {dontMove <span class=3D"hljs-=
number">0</span>}} {
    <span class=3D"hljs-keyword">upvar</span> #<span class=3D"hljs-number">=
0</span> $w data
    <span class=3D"hljs-keyword">if</span> {!$dontMove} then {
	tkColorDialog_MoveSelector $w $sel $color $x $delta
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkColor=
Dialog_MoveSelector</span> {w sel color x delta} {
    <span class=3D"hljs-keyword">upvar</span> #<span class=3D"hljs-number">=
0</span> $w data
    <span class=3D"hljs-keyword">incr</span> x -$delta
    <span class=3D"hljs-keyword">if</span> {$x &lt; <span class=3D"hljs-num=
ber">0</span>} then {
	<span class=3D"hljs-keyword">set</span> x <span class=3D"hljs-number">0</s=
pan>
    } elseif {$x &gt;=3D $data(BARS_WIDTH)} {
	<span class=3D"hljs-keyword">set</span> x [<span class=3D"hljs-keyword">ex=
pr</span> {$data(BARS_WIDTH) - <span class=3D"hljs-number">1</span>}]
    }
    <span class=3D"hljs-keyword">set</span> diff [<span class=3D"hljs-keywo=
rd">expr</span> {$x - $data($color,x)}]
    $sel move $data($color,index) $diff <span class=3D"hljs-number">0</span=
>
    <span class=3D"hljs-keyword">set</span> data($color,x) [<span class=3D"=
hljs-keyword">expr</span> {$data($color,x) + $diff}]
    <span class=3D"hljs-keyword">return</span> $x
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkColor=
Dialog_ReleaseMouse</span> {w sel color x delta} {
    <span class=3D"hljs-keyword">upvar</span> #<span class=3D"hljs-number">=
0</span> $w data
    <span class=3D"hljs-keyword">set</span> x [tkColorDialog_MoveSelector $=
w $sel $color $x $delta]
    <span class=3D"hljs-keyword">set</span> data($color,intensity) [tkColor=
Dialog_XToRgb $w $x]
    tkColorDialog_RedrawColorBars $w $color
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkColor=
Dialog_ResizeColorBars</span> {w} {
    <span class=3D"hljs-keyword">upvar</span> #<span class=3D"hljs-number">=
0</span> $w data
    <span class=3D"hljs-keyword">if</span> {($data(BARS_WIDTH) &lt; $data(N=
UM_COLORBARS)) ||(($data(BARS_WIDTH) % $data(NUM_COLORBARS)) !=3D <span cla=
ss=3D"hljs-number">0</span>)} then {
	<span class=3D"hljs-keyword">set</span> data(BARS_WIDTH) $data(NUM_COLORBA=
RS)
    }
    tkColorDialog_InitValues $w
    <span class=3D"hljs-keyword">foreach</span> color {red green blue} {
	$data($color,col) configure -width $data(canvasWidth)
	tkColorDialog_DrawColorScale $w $color <span class=3D"hljs-number">1</span=
>
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkColor=
Dialog_HandleSelEntry</span> {w} {
    <span class=3D"hljs-keyword">upvar</span> #<span class=3D"hljs-number">=
0</span> $w data
    <span class=3D"hljs-keyword">set</span> text [<span class=3D"hljs-keywo=
rd">string</span> trim $data(selection)]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">c=
atch</span> {<span class=3D"hljs-keyword">set</span> color [winfo rgb . $te=
xt]}]} then {
	<span class=3D"hljs-keyword">set</span> data(selection) $data(finalColor)
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">set</span> R [<span class=3D"hljs-keyword"=
>expr</span> {[<span class=3D"hljs-keyword">lindex</span> $color <span clas=
s=3D"hljs-number">0</span>]/<span class=3D"hljs-number">0x100</span>}]
    <span class=3D"hljs-keyword">set</span> G [<span class=3D"hljs-keyword"=
>expr</span> {[<span class=3D"hljs-keyword">lindex</span> $color <span clas=
s=3D"hljs-number">1</span>]/<span class=3D"hljs-number">0x100</span>}]
    <span class=3D"hljs-keyword">set</span> B [<span class=3D"hljs-keyword"=
>expr</span> {[<span class=3D"hljs-keyword">lindex</span> $color <span clas=
s=3D"hljs-number">2</span>]/<span class=3D"hljs-number">0x100</span>}]
    tkColorDialog_SetRGBValue $w <span class=3D"hljs-string">"$R $G $B"</sp=
an>
    <span class=3D"hljs-keyword">set</span> data(selection) $text
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkColor=
Dialog_HandleRGBEntry</span> {w} {
    <span class=3D"hljs-keyword">upvar</span> #<span class=3D"hljs-number">=
0</span> $w data
    <span class=3D"hljs-keyword">foreach</span> c {red green blue} {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">catc=
h</span> {
	    <span class=3D"hljs-keyword">set</span> data($c,intensity) [<span clas=
s=3D"hljs-keyword">expr</span> {int($data($c,intensity))}]
	}]} then {
	    <span class=3D"hljs-keyword">set</span> data($c,intensity) <span class=
=3D"hljs-number">0</span>
	}
	<span class=3D"hljs-keyword">if</span> {$data($c,intensity) &lt; <span cla=
ss=3D"hljs-number">0</span>} then {
	    <span class=3D"hljs-keyword">set</span> data($c,intensity) <span class=
=3D"hljs-number">0</span>
	}
	<span class=3D"hljs-keyword">if</span> {$data($c,intensity) &gt; <span cla=
ss=3D"hljs-number">255</span>} then {
	    <span class=3D"hljs-keyword">set</span> data($c,intensity) <span class=
=3D"hljs-number">255</span>
	}
    }
    tkColorDialog_SetRGBValue $w <span class=3D"hljs-string">"$data(red,int=
ensity) $data(green,intensity)  $data(blue,intensity)"</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkColor=
Dialog_EnterColorBar</span> {w color} {
    <span class=3D"hljs-keyword">upvar</span> #<span class=3D"hljs-number">=
0</span> $w data
    $data($color,sel) itemconfig $data($color,index) -fill red
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkColor=
Dialog_LeaveColorBar</span> {w color} {
    <span class=3D"hljs-keyword">upvar</span> #<span class=3D"hljs-number">=
0</span> $w data
    $data($color,sel) itemconfig $data($color,index) -fill black
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkColor=
Dialog_OkCmd</span> {w} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">upvar</span> #<span class=3D"hljs-number">=
0</span> $w data
    <span class=3D"hljs-keyword">set</span> tkPriv(selectColor) $data(final=
Color)
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkColor=
Dialog_CancelCmd</span> {w} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">set</span> tkPriv(selectColor) <span class=
=3D"hljs-string">""</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tclPars=
eConfigSpec</span> {w specs flags argList} {
    <span class=3D"hljs-keyword">upvar</span> #<span class=3D"hljs-number">=
0</span> $w data
    <span class=3D"hljs-keyword">foreach</span> spec $specs {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">llen=
gth</span> $spec] &lt; <span class=3D"hljs-number">4</span>} then {
	    <span class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">=
"\"spec\" should contain 5 or 4 elements"</span>
	}
	<span class=3D"hljs-keyword">set</span> cmdsw [<span class=3D"hljs-keyword=
">lindex</span> $spec <span class=3D"hljs-number">0</span>]
	<span class=3D"hljs-keyword">set</span> cmd($cmdsw) <span class=3D"hljs-st=
ring">""</span>
	<span class=3D"hljs-keyword">set</span> rname($cmdsw) [<span class=3D"hljs=
-keyword">lindex</span> $spec <span class=3D"hljs-number">1</span>]
	<span class=3D"hljs-keyword">set</span> rclass($cmdsw) [<span class=3D"hlj=
s-keyword">lindex</span> $spec <span class=3D"hljs-number">2</span>]
	<span class=3D"hljs-keyword">set</span> def($cmdsw) [<span class=3D"hljs-k=
eyword">lindex</span> $spec <span class=3D"hljs-number">3</span>]
	<span class=3D"hljs-keyword">set</span> verproc($cmdsw) [<span class=3D"hl=
js-keyword">lindex</span> $spec <span class=3D"hljs-number">4</span>]
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">l=
length</span> $argList] &amp; <span class=3D"hljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> cmdsw [<span class=3D"hljs-keyword=
">lindex</span> $argList end]
	<span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">inf=
o</span> exists cmd($cmdsw)]} then {
	    <span class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">=
"bad option \"$cmdsw\": must be [tclListValidFlags cmd]"</span>
	}
	<span class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">"val=
ue for \"$cmdsw\" missing"</span>
    }
    <span class=3D"hljs-keyword">foreach</span> cmdsw [<span class=3D"hljs-=
keyword">array</span> names cmd] {
	<span class=3D"hljs-keyword">set</span> data($cmdsw) $def($cmdsw)
    }
    <span class=3D"hljs-keyword">foreach</span> {cmdsw value} $argList {
	<span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">inf=
o</span> exists cmd($cmdsw)]} then {
	    <span class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">=
"bad option \"$cmdsw\": must be [tclListValidFlags cmd]"</span>
	}
	<span class=3D"hljs-keyword">set</span> data($cmdsw) $value
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tclList=
ValidFlags</span> {v} {
    <span class=3D"hljs-keyword">upvar</span> $v cmd
    <span class=3D"hljs-keyword">set</span> len [<span class=3D"hljs-keywor=
d">llength</span> [<span class=3D"hljs-keyword">array</span> names cmd]]
    <span class=3D"hljs-keyword">set</span> i <span class=3D"hljs-number">1=
</span>
    <span class=3D"hljs-keyword">set</span> separator <span class=3D"hljs-s=
tring">""</span>
    <span class=3D"hljs-keyword">set</span> errormsg <span class=3D"hljs-st=
ring">""</span>
    <span class=3D"hljs-keyword">foreach</span> cmdsw [<span class=3D"hljs-=
keyword">lsort</span> [<span class=3D"hljs-keyword">array</span> names cmd]=
] {
	<span class=3D"hljs-keyword">append</span> errormsg <span class=3D"hljs-st=
ring">"$separator$cmdsw"</span>
	<span class=3D"hljs-keyword">incr</span> i
	<span class=3D"hljs-keyword">if</span> {$i =3D=3D $len} then {
	    <span class=3D"hljs-keyword">set</span> separator <span class=3D"hljs-=
string">", or "</span>
	} else {
	    <span class=3D"hljs-keyword">set</span> separator <span class=3D"hljs-=
string">", "</span>
	}
    }
    <span class=3D"hljs-keyword">return</span> $errormsg
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkFocus=
Group_Create</span> {t} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare [winfo toplevel $t] $t]} then {
	<span class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">"$t =
is not a toplevel window"</span>
    }
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists tkPriv(fg,$t)]} then {
	<span class=3D"hljs-keyword">set</span> tkPriv(fg,$t) <span class=3D"hljs-=
number">1</span>
	<span class=3D"hljs-keyword">set</span> tkPriv(focus,$t) <span class=3D"hl=
js-string">""</span>
	bind $t &lt;FocusIn&gt; [<span class=3D"hljs-keyword">list</span> tkFocusG=
roup_In $t %W %d]
	bind $t &lt;FocusOut&gt; [<span class=3D"hljs-keyword">list</span> tkFocus=
Group_Out $t %W %d]
	bind $t &lt;Destroy&gt; [<span class=3D"hljs-keyword">list</span> tkFocusG=
roup_Destroy $t %W]
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkFocus=
Group_BindIn</span> {t w cmd} {
    <span class=3D"hljs-keyword">global</span> tkFocusIn tkPriv
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists tkPriv(fg,$t)]} then {
	<span class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">"foc=
us group \"$t\" doesn't exist"</span>
    }
    <span class=3D"hljs-keyword">set</span> tkFocusIn($t,$w) $cmd
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkFocus=
Group_BindOut</span> {t w cmd} {
    <span class=3D"hljs-keyword">global</span> tkFocusOut tkPriv
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists tkPriv(fg,$t)]} then {
	<span class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">"foc=
us group \"$t\" doesn't exist"</span>
    }
    <span class=3D"hljs-keyword">set</span> tkFocusOut($t,$w) $cmd
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkFocus=
Group_Destroy</span> {t w} {
    <span class=3D"hljs-keyword">global</span> tkPriv tkFocusIn tkFocusOut
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $t $w]} then {
	<span class=3D"hljs-keyword">unset</span> tkPriv(fg,$t)
	<span class=3D"hljs-keyword">unset</span> tkPriv(focus,$t)
	<span class=3D"hljs-keyword">foreach</span> name [<span class=3D"hljs-keyw=
ord">array</span> names tkFocusIn $t,*] {
	    <span class=3D"hljs-keyword">unset</span> tkFocusIn($name)
	}
	<span class=3D"hljs-keyword">foreach</span> name [<span class=3D"hljs-keyw=
ord">array</span> names tkFocusOut $t,*] {
	    <span class=3D"hljs-keyword">unset</span> tkFocusOut($name)
	}
    } else {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info=
</span> exists tkPriv(focus,$t)] &amp;&amp; [<span class=3D"hljs-keyword">s=
tring</span> equal $tkPriv(focus,$t) $w]} then {
	    <span class=3D"hljs-keyword">set</span> tkPriv(focus,$t) <span class=
=3D"hljs-string">""</span>
	}
	<span class=3D"hljs-keyword">catch</span> {
	    <span class=3D"hljs-keyword">unset</span> tkFocusIn($t,$w)
	}
	<span class=3D"hljs-keyword">catch</span> {
	    <span class=3D"hljs-keyword">unset</span> tkFocusOut($t,$w)
	}
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkFocus=
Group_In</span> {t w detail} {
    <span class=3D"hljs-keyword">global</span> tkPriv tkFocusIn
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare $detail NotifyNonlinear] &amp;&amp; [<span class=3D"hl=
js-keyword">string</span> compare $detail NotifyNonlinearVirtual]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists tkFocusIn($t,$w)]} then {
	<span class=3D"hljs-keyword">set</span> tkFocusIn($t,$w) <span class=3D"hl=
js-string">""</span>
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists tkPriv(focus,$t)]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $tkPriv(focus,$t) $w]} then {
	<span class=3D"hljs-keyword">return</span>
    } else {
	<span class=3D"hljs-keyword">set</span> tkPriv(focus,$t) $w
	<span class=3D"hljs-keyword">eval</span> $tkFocusIn($t,$w)
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkFocus=
Group_Out</span> {t w detail} {
    <span class=3D"hljs-keyword">global</span> tkPriv tkFocusOut
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare $detail NotifyNonlinear] &amp;&amp; [<span class=3D"hl=
js-keyword">string</span> compare $detail NotifyNonlinearVirtual]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists tkPriv(focus,$t)]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists tkFocusOut($t,$w)]} then {
	<span class=3D"hljs-keyword">return</span>
    } else {
	<span class=3D"hljs-keyword">eval</span> $tkFocusOut($t,$w)
	<span class=3D"hljs-keyword">set</span> tkPriv(focus,$t) <span class=3D"hl=
js-string">""</span>
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkFDGet=
FileTypes</span> {<span class=3D"hljs-keyword">string</span>} {
    <span class=3D"hljs-keyword">foreach</span> t $string {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">llen=
gth</span> $t] &lt; <span class=3D"hljs-number">2</span> || [<span class=3D=
"hljs-keyword">llength</span> $t] &gt; <span class=3D"hljs-number">3</span>=
} then {
	    <span class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">=
"bad file type \"$t\", should be \"typeName {extension ?extensions ...?} ?{=
macType ?macTypes ...?}?\""</span>
	}
	<span class=3D"hljs-keyword">eval</span> <span class=3D"hljs-keyword">lapp=
end</span> [<span class=3D"hljs-keyword">list</span> fileTypes([<span class=
=3D"hljs-keyword">lindex</span> $t <span class=3D"hljs-number">0</span>])] =
[<span class=3D"hljs-keyword">lindex</span> $t <span class=3D"hljs-number">=
1</span>]
    }
    <span class=3D"hljs-keyword">set</span> types {}
    <span class=3D"hljs-keyword">foreach</span> t $string {
	<span class=3D"hljs-keyword">set</span> label [<span class=3D"hljs-keyword=
">lindex</span> $t <span class=3D"hljs-number">0</span>]
	<span class=3D"hljs-keyword">set</span> exts {}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info=
</span> exists hasDoneType($label)]} then {
	    <span class=3D"hljs-keyword">continue</span>
	}
	<span class=3D"hljs-keyword">set</span> name <span class=3D"hljs-string">"=
$label ("</span>
	<span class=3D"hljs-keyword">set</span> sep <span class=3D"hljs-string">""=
</span>
	<span class=3D"hljs-keyword">foreach</span> ext $fileTypes($label) {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
string</span> equal $ext <span class=3D"hljs-string">""</span>]} then {
		<span class=3D"hljs-keyword">continue</span>
	    }
	    <span class=3D"hljs-keyword">regsub</span> {^[.]} $ext <span class=3D"=
hljs-string">"*."</span> ext
	    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword"=
>info</span> exists hasGotExt($label,$ext)]} then {
		<span class=3D"hljs-keyword">append</span> name $sep$ext
		<span class=3D"hljs-keyword">lappend</span> exts $ext
		<span class=3D"hljs-keyword">set</span> hasGotExt($label,$ext) <span clas=
s=3D"hljs-number">1</span>
	    }
	    <span class=3D"hljs-keyword">set</span> sep ,
	}
	<span class=3D"hljs-keyword">append</span> name <span class=3D"hljs-string=
">")"</span>
	<span class=3D"hljs-keyword">lappend</span> types [<span class=3D"hljs-key=
word">list</span> $name $exts]
	<span class=3D"hljs-keyword">set</span> hasDoneType($label) <span class=3D=
"hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">return</span> $types
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkConso=
leInit</span> {} {
    <span class=3D"hljs-keyword">global</span> tcl_platform
    <span class=3D"hljs-keyword">if</span> {![consoleinterp <span class=3D"=
hljs-keyword">eval</span> {<span class=3D"hljs-keyword">set</span> tcl_inte=
ractive}]} then {
	wm withdraw .
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare $tcl_platform(platform) <span class=3D"hljs-string">"m=
acintosh"</span>]} then {
	<span class=3D"hljs-keyword">set</span> mod <span class=3D"hljs-string">"C=
trl"</span>
    } else {
	<span class=3D"hljs-keyword">set</span> mod <span class=3D"hljs-string">"C=
md"</span>
    }
    menu .menubar
    .menubar add cascade -label File -menu .menubar.<span class=3D"hljs-key=
word">file</span> -underline <span class=3D"hljs-number">0</span>
    .menubar add cascade -label Edit -menu .menubar.edit -underline <span c=
lass=3D"hljs-number">0</span>
    menu .menubar.<span class=3D"hljs-keyword">file</span> -tearoff <span c=
lass=3D"hljs-number">0</span>
    .menubar.<span class=3D"hljs-keyword">file</span> add command -label <s=
pan class=3D"hljs-string">"Source..."</span> -underline <span class=3D"hljs=
-number">0</span> -command tkConsoleSource
    .menubar.<span class=3D"hljs-keyword">file</span> add command -label <s=
pan class=3D"hljs-string">"Hide Console"</span> -underline <span class=3D"h=
ljs-number">0</span> -command {wm withdraw .}
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare $tcl_platform(platform) <span class=3D"hljs-string">"m=
acintosh"</span>]} then {
	.menubar.<span class=3D"hljs-keyword">file</span> add command -label <span=
 class=3D"hljs-string">"Exit"</span> -underline <span class=3D"hljs-number"=
>1</span> -command <span class=3D"hljs-keyword">exit</span>
    } else {
	.menubar.<span class=3D"hljs-keyword">file</span> add command -label <span=
 class=3D"hljs-string">"Quit"</span> -command <span class=3D"hljs-keyword">=
exit</span> -accel Cmd-Q
    }
    menu .menubar.edit -tearoff <span class=3D"hljs-number">0</span>
    .menubar.edit add command -label <span class=3D"hljs-string">"Cut"</spa=
n> -underline <span class=3D"hljs-number">2</span> -command {event generate=
 .console &lt;&lt;Cut&gt;&gt;} -accel <span class=3D"hljs-string">"$mod+X"<=
/span>
    .menubar.edit add command -label <span class=3D"hljs-string">"Copy"</sp=
an> -underline <span class=3D"hljs-number">0</span> -command {event generat=
e .console &lt;&lt;Copy&gt;&gt;} -accel <span class=3D"hljs-string">"$mod+C=
"</span>
    .menubar.edit add command -label <span class=3D"hljs-string">"Paste"</s=
pan> -underline <span class=3D"hljs-number">1</span> -command {event genera=
te .console &lt;&lt;Paste&gt;&gt;} -accel <span class=3D"hljs-string">"$mod=
+V"</span>
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare $tcl_platform(platform) <span class=3D"hljs-string">"w=
indows"</span>]} then {
	.menubar.edit add command -label <span class=3D"hljs-string">"Clear"</span=
> -underline <span class=3D"hljs-number">2</span> -command {event generate =
.console &lt;&lt;Clear&gt;&gt;}
    } else {
	.menubar.edit add command -label <span class=3D"hljs-string">"Delete"</spa=
n> -underline <span class=3D"hljs-number">0</span> -command {event generate=
 .console &lt;&lt;Clear&gt;&gt;} -accel <span class=3D"hljs-string">"Del"</=
span>
	.menubar add cascade -label Help -menu .menubar.help -underline <span clas=
s=3D"hljs-number">0</span>
	menu .menubar.help -tearoff <span class=3D"hljs-number">0</span>
	.menubar.help add command -label <span class=3D"hljs-string">"About..."</s=
pan> -underline <span class=3D"hljs-number">0</span> -command tkConsoleAbou=
t
    }
    . configure -menu .menubar
    text .console -yscrollcommand <span class=3D"hljs-string">".sb set"</sp=
an> -setgrid true
    scrollbar .sb -command <span class=3D"hljs-string">".console yview"</sp=
an>
    pack .sb -side right -fill both
    pack .console -fill both -expand <span class=3D"hljs-number">1</span> -=
side left
    <span class=3D"hljs-keyword">switch</span> -exact $tcl_platform(platfor=
m) {
    <span class=3D"hljs-string">"macintosh"</span> {
	    .console configure -font {Monaco <span class=3D"hljs-number">9</span> =
normal} -highlightthickness <span class=3D"hljs-number">0</span>
	}
    <span class=3D"hljs-string">"windows"</span> {
	    .console configure -font systemfixed
	}
    }
    tkConsoleBind .console
    .console tag configure stderr -foreground red
    .console tag configure stdin -foreground blue
    focus .console
    wm protocol . WM_DELETE_WINDOW { wm withdraw . }
    wm title . <span class=3D"hljs-string">"Console"</span>
    <span class=3D"hljs-keyword">flush</span> stdout
    .console mark <span class=3D"hljs-keyword">set</span> output [.console =
index <span class=3D"hljs-string">"end - 1 char"</span>]
    tkTextSetCursor .console end
    .console mark <span class=3D"hljs-keyword">set</span> promptEnd insert
    .console mark gravity promptEnd left
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkConso=
leSource</span> {} {
    <span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">fi=
lename</span> [tk_getOpenFile -defaultextension .tcl -parent . -title <span=
 class=3D"hljs-string">"Select a file to source"</span> -filetypes {{<span =
class=3D"hljs-string">"Tcl Scripts"</span> .tcl} {<span class=3D"hljs-strin=
g">"All Files"</span> *}}]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare $filename <span class=3D"hljs-string">""</span>]} then=
 {
	<span class=3D"hljs-keyword">set</span> cmd [<span class=3D"hljs-keyword">=
list</span> <span class=3D"hljs-keyword">source</span> $filename]
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">catc=
h</span> {consoleinterp <span class=3D"hljs-keyword">eval</span> $cmd} resu=
lt]} then {
	    tkConsoleOutput stderr <span class=3D"hljs-string">"$result\n"</span>
	}
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkConso=
leInvoke</span> {args} {
    <span class=3D"hljs-keyword">set</span> ranges [.console tag ranges inp=
ut]
    <span class=3D"hljs-keyword">set</span> cmd <span class=3D"hljs-string"=
>""</span>
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">l=
length</span> $ranges]} then {
	<span class=3D"hljs-keyword">set</span> pos <span class=3D"hljs-number">0<=
/span>
	<span class=3D"hljs-keyword">while</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare [<span class=3D"hljs-keyword">lindex</span> $ranges $p=
os] <span class=3D"hljs-string">""</span>]} {
	    <span class=3D"hljs-keyword">set</span> start [<span class=3D"hljs-key=
word">lindex</span> $ranges $pos]
	    <span class=3D"hljs-keyword">set</span> end [<span class=3D"hljs-keywo=
rd">lindex</span> $ranges [<span class=3D"hljs-keyword">incr</span> pos]]
	    <span class=3D"hljs-keyword">append</span> cmd [.console get $start $e=
nd]
	    <span class=3D"hljs-keyword">incr</span> pos
	}
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $cmd <span class=3D"hljs-string">""</span>]} then {
	tkConsolePrompt
    } elseif {[<span class=3D"hljs-keyword">info</span> complete $cmd]} {
	.console mark <span class=3D"hljs-keyword">set</span> output end
	.console tag delete input
	<span class=3D"hljs-keyword">set</span> result [consoleinterp record $cmd]
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> compare $result <span class=3D"hljs-string">""</span>]} then {
	    <span class=3D"hljs-keyword">puts</span> $result
	}
	tkConsoleHistory reset
	tkConsolePrompt
    } else {
	tkConsolePrompt partial
    }
    .console yview -pickplace insert
}
<span class=3D"hljs-keyword">set</span> histNum <span class=3D"hljs-number"=
>1</span>
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkConso=
leHistory</span> {cmd} {
    <span class=3D"hljs-keyword">global</span> histNum
    <span class=3D"hljs-keyword">switch</span> $cmd {
    prev {
	    <span class=3D"hljs-keyword">incr</span> histNum <span class=3D"hljs-n=
umber">-1</span>
	    <span class=3D"hljs-keyword">if</span> {$histNum =3D=3D <span class=3D=
"hljs-number">0</span>} then {
		<span class=3D"hljs-keyword">set</span> cmd {<span class=3D"hljs-keyword"=
>history</span> event [<span class=3D"hljs-keyword">expr</span> {[<span cla=
ss=3D"hljs-keyword">history</span> nextid] <span class=3D"hljs-number">-1</=
span>}]}
	    } else {
		<span class=3D"hljs-keyword">set</span> cmd <span class=3D"hljs-string">"=
history event $histNum"</span>
	    }
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
catch</span> {consoleinterp <span class=3D"hljs-keyword">eval</span> $cmd} =
cmd]} then {
		<span class=3D"hljs-keyword">incr</span> histNum
		<span class=3D"hljs-keyword">return</span>
	    }
	    .console delete promptEnd end
	    .console insert promptEnd $cmd {input stdin}
	}
    next {
	    <span class=3D"hljs-keyword">incr</span> histNum
	    <span class=3D"hljs-keyword">if</span> {$histNum =3D=3D <span class=3D=
"hljs-number">0</span>} then {
		<span class=3D"hljs-keyword">set</span> cmd {<span class=3D"hljs-keyword"=
>history</span> event [<span class=3D"hljs-keyword">expr</span> {[<span cla=
ss=3D"hljs-keyword">history</span> nextid] <span class=3D"hljs-number">-1</=
span>}]}
	    } elseif {$histNum &gt; <span class=3D"hljs-number">0</span>} {
		<span class=3D"hljs-keyword">set</span> cmd <span class=3D"hljs-string">"=
"</span>
		<span class=3D"hljs-keyword">set</span> histNum <span class=3D"hljs-numbe=
r">1</span>
	    } else {
		<span class=3D"hljs-keyword">set</span> cmd <span class=3D"hljs-string">"=
history event $histNum"</span>
	    }
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
string</span> compare $cmd <span class=3D"hljs-string">""</span>]} then {
		<span class=3D"hljs-keyword">catch</span> {consoleinterp <span class=3D"h=
ljs-keyword">eval</span> $cmd} cmd
	    }
	    .console delete promptEnd end
	    .console insert promptEnd $cmd {input stdin}
	}
    reset {
	    <span class=3D"hljs-keyword">set</span> histNum <span class=3D"hljs-nu=
mber">1</span>
	}
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkConso=
lePrompt</span> {{partial normal}} {
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $partial <span class=3D"hljs-string">"normal"</span>]} t=
hen {
	<span class=3D"hljs-keyword">set</span> temp [.console index <span class=
=3D"hljs-string">"end - 1 char"</span>]
	.console mark <span class=3D"hljs-keyword">set</span> output end
	<span class=3D"hljs-keyword">if</span> {[consoleinterp <span class=3D"hljs=
-keyword">eval</span> <span class=3D"hljs-string">"info exists tcl_prompt1"=
</span>]} then {
	    consoleinterp <span class=3D"hljs-keyword">eval</span> <span class=3D"=
hljs-string">"eval \[set tcl_prompt1\]"</span>
	} else {
	    <span class=3D"hljs-keyword">puts</span> -nonewline <span class=3D"hlj=
s-string">"% "</span>
	}
    } else {
	<span class=3D"hljs-keyword">set</span> temp [.console index output]
	.console mark <span class=3D"hljs-keyword">set</span> output end
	<span class=3D"hljs-keyword">if</span> {[consoleinterp <span class=3D"hljs=
-keyword">eval</span> <span class=3D"hljs-string">"info exists tcl_prompt2"=
</span>]} then {
	    consoleinterp <span class=3D"hljs-keyword">eval</span> <span class=3D"=
hljs-string">"eval \[set tcl_prompt2\]"</span>
	} else {
	    <span class=3D"hljs-keyword">puts</span> -nonewline <span class=3D"hlj=
s-string">"&gt; "</span>
	}
    }
    <span class=3D"hljs-keyword">flush</span> stdout
    .console mark <span class=3D"hljs-keyword">set</span> output $temp
    tkTextSetCursor .console end
    .console mark <span class=3D"hljs-keyword">set</span> promptEnd insert
    .console mark gravity promptEnd left
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkConso=
leBind</span> {win} {
    bindtags $win <span class=3D"hljs-string">"$win Text . all"</span>
    bind $win &lt;Alt-KeyPress&gt; {# nothing }
    bind $win &lt;Meta-KeyPress&gt; {# nothing}
    bind $win &lt;Control-KeyPress&gt; {# nothing}
    bind $win &lt;Escape&gt; {# nothing}
    bind $win &lt;KP_Enter&gt; {# nothing}
    bind $win &lt;Tab&gt; {
	tkConsoleInsert %W \t
	focus %W
	<span class=3D"hljs-keyword">break</span>
    }
    bind $win &lt;Return&gt; {
	%W mark <span class=3D"hljs-keyword">set</span> insert {end - <span class=
=3D"hljs-number">1</span>c}
	tkConsoleInsert %W <span class=3D"hljs-string">"\n"</span>
	tkConsoleInvoke
	<span class=3D"hljs-keyword">break</span>
    }
    bind $win &lt;Delete&gt; {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> compare [%W tag nextrange sel <span class=3D"hljs-number">1.0</sp=
an> end] <span class=3D"hljs-string">""</span>]} then {
	    %W tag remove sel sel.first promptEnd
	} elseif {[%W compare insert &lt; promptEnd]} {
	    <span class=3D"hljs-keyword">break</span>
	}
    }
    bind $win &lt;BackSpace&gt; {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> compare [%W tag nextrange sel <span class=3D"hljs-number">1.0</sp=
an> end] <span class=3D"hljs-string">""</span>]} then {
	    %W tag remove sel sel.first promptEnd
	} elseif {[%W compare insert &lt;=3D promptEnd]} {
	    <span class=3D"hljs-keyword">break</span>
	}
    }
    <span class=3D"hljs-keyword">foreach</span> left {Control-a Home} {
	bind $win &lt;$left&gt; {
	    <span class=3D"hljs-keyword">if</span> {[%W compare insert &lt; prompt=
End]} then {
		tkTextSetCursor %W {insert linestart}
	    } else {
		tkTextSetCursor %W promptEnd
	    }
	    <span class=3D"hljs-keyword">break</span>
	}
    }
    <span class=3D"hljs-keyword">foreach</span> right {Control-e End} {
	bind $win &lt;$right&gt; {
	    tkTextSetCursor %W {insert lineend}
	    <span class=3D"hljs-keyword">break</span>
	}
    }
    bind $win &lt;Control-d&gt; {
	<span class=3D"hljs-keyword">if</span> {[%W compare insert &lt; promptEnd]=
} then {
	    <span class=3D"hljs-keyword">break</span>
	}
    }
    bind $win &lt;Control-k&gt; {
	<span class=3D"hljs-keyword">if</span> {[%W compare insert &lt; promptEnd]=
} then {
	    %W mark <span class=3D"hljs-keyword">set</span> insert promptEnd
	}
    }
    bind $win &lt;Control-t&gt; {
	<span class=3D"hljs-keyword">if</span> {[%W compare insert &lt; promptEnd]=
} then {
	    <span class=3D"hljs-keyword">break</span>
	}
    }
    bind $win &lt;Meta-d&gt; {
	<span class=3D"hljs-keyword">if</span> {[%W compare insert &lt; promptEnd]=
} then {
	    <span class=3D"hljs-keyword">break</span>
	}
    }
    bind $win &lt;Meta-BackSpace&gt; {
	<span class=3D"hljs-keyword">if</span> {[%W compare insert &lt;=3D promptE=
nd]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
    }
    bind $win &lt;Control-h&gt; {
	<span class=3D"hljs-keyword">if</span> {[%W compare insert &lt;=3D promptE=
nd]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
    }
    <span class=3D"hljs-keyword">foreach</span> prev {Control-p Up} {
	bind $win &lt;$prev&gt; {
	    tkConsoleHistory prev
	    <span class=3D"hljs-keyword">break</span>
	}
    }
    <span class=3D"hljs-keyword">foreach</span> prev {Control-n Down} {
	bind $win &lt;$prev&gt; {
	    tkConsoleHistory next
	    <span class=3D"hljs-keyword">break</span>
	}
    }
    bind $win &lt;Insert&gt; {
	<span class=3D"hljs-keyword">catch</span> {tkConsoleInsert %W [selection g=
et -displayof %W]}
	<span class=3D"hljs-keyword">break</span>
    }
    bind $win &lt;KeyPress&gt; {
	tkConsoleInsert %W %A
	<span class=3D"hljs-keyword">break</span>
    }
    <span class=3D"hljs-keyword">foreach</span> left {Control-b Left} {
	bind $win &lt;$left&gt; {
	    <span class=3D"hljs-keyword">if</span> {[%W compare insert =3D=3D prom=
ptEnd]} then {
		<span class=3D"hljs-keyword">break</span>
	    }
	    tkTextSetCursor %W insert<span class=3D"hljs-number">-1</span>c
	    <span class=3D"hljs-keyword">break</span>
	}
    }
    <span class=3D"hljs-keyword">foreach</span> right {Control-f Right} {
	bind $win &lt;$right&gt; {
	    tkTextSetCursor %W insert+<span class=3D"hljs-number">1</span>c
	    <span class=3D"hljs-keyword">break</span>
	}
    }
    bind $win &lt;F9&gt; {
	<span class=3D"hljs-keyword">eval</span> destroy [winfo child .]
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> equal $tcl_platform(platform) <span class=3D"hljs-string">"macint=
osh"</span>]} then {
	    <span class=3D"hljs-keyword">source</span> -rsrc Console
	} else {
	    <span class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keywor=
d">file</span> <span class=3D"hljs-keyword">join</span> $tk_library console=
.tcl]
	}
    }
    bind $win &lt;&lt;Cut&gt;&gt; {
	<span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">cat=
ch</span> {<span class=3D"hljs-keyword">set</span> data [%W get sel.first s=
el.last]}]} then {
	    clipboard clear -displayof %W
	    clipboard <span class=3D"hljs-keyword">append</span> -displayof %W $da=
ta
	}
	<span class=3D"hljs-keyword">break</span>
    }
    bind $win &lt;&lt;Copy&gt;&gt; {
	<span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">cat=
ch</span> {<span class=3D"hljs-keyword">set</span> data [%W get sel.first s=
el.last]}]} then {
	    clipboard clear -displayof %W
	    clipboard <span class=3D"hljs-keyword">append</span> -displayof %W $da=
ta
	}
	<span class=3D"hljs-keyword">break</span>
    }
    bind $win &lt;&lt;Paste&gt;&gt; {
	<span class=3D"hljs-keyword">catch</span> {
	    <span class=3D"hljs-keyword">set</span> clip [selection get -displayof=
 %W -selection CLIPBOARD]
	    <span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">l=
ist</span> [<span class=3D"hljs-keyword">split</span> $clip \n\r]
	    tkConsoleInsert %W [<span class=3D"hljs-keyword">lindex</span> $list <=
span class=3D"hljs-number">0</span>]
	    <span class=3D"hljs-keyword">foreach</span> x [<span class=3D"hljs-key=
word">lrange</span> $list <span class=3D"hljs-number">1</span> end] {
		%W mark <span class=3D"hljs-keyword">set</span> insert {end - <span class=
=3D"hljs-number">1</span>c}
		tkConsoleInsert %W <span class=3D"hljs-string">"\n"</span>
		tkConsoleInvoke
		tkConsoleInsert %W $x
	    }
	}
	<span class=3D"hljs-keyword">break</span>
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkConso=
leInsert</span> {w s} {
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $s <span class=3D"hljs-string">""</span>]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">catch</span> {
	<span class=3D"hljs-keyword">if</span> {[$w compare sel.first &lt;=3D inse=
rt] &amp;&amp; [$w compare sel.last &gt;=3D insert]} then {
	    $w tag remove sel sel.first promptEnd
	    $w delete sel.first sel.last
	}
    }
    <span class=3D"hljs-keyword">if</span> {[$w compare insert &lt; promptE=
nd]} then {
	$w mark <span class=3D"hljs-keyword">set</span> insert end
    }
    $w insert insert $s {input stdin}
    $w see insert
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkConso=
leOutput</span> {dest <span class=3D"hljs-keyword">string</span>} {
    .console insert output $string $dest
    .console see insert
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkConso=
leExit</span> {} {
    destroy .
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkConso=
leAbout</span> {} {
    <span class=3D"hljs-keyword">global</span> tk_patchLevel
    tk_messageBox -type ok -message <span class=3D"hljs-string">"Tcl for Wi=
ndows
Copyright \251 2000 Scriptics Corporation
Tcl [info patchlevel]
Tk $tk_patchLevel"</span>
}
tkConsoleInit
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tk_dial=
og</span> {w title text bitmap default args} {
    <span class=3D"hljs-keyword">global</span> tkPriv tcl_platform
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> is int $default]} then {
	<span class=3D"hljs-keyword">if</span> {$default &gt;=3D [<span class=3D"h=
ljs-keyword">llength</span> $args]} then {
	    <span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-k=
eyword">error</span> <span class=3D"hljs-string">"default button index grea=
ter than number of buttons specified for tk_dialog"</span>
	}
    } elseif {[<span class=3D"hljs-keyword">string</span> equal {} $default=
]} {
	<span class=3D"hljs-keyword">set</span> default <span class=3D"hljs-number=
">-1</span>
    } else {
	<span class=3D"hljs-keyword">set</span> default [<span class=3D"hljs-keywo=
rd">lsearch</span> -exact $args $default]
    }
    <span class=3D"hljs-keyword">catch</span> {destroy $w}
    toplevel $w -class Dialog
    wm title $w $title
    wm iconname $w Dialog
    wm protocol $w WM_DELETE_WINDOW { }
    <span class=3D"hljs-keyword">if</span> {[winfo viewable [winfo toplevel=
 [winfo parent $w]]]} then {
	wm transient $w [winfo toplevel [winfo parent $w]]
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $tcl_platform(platform) <span class=3D"hljs-string">"mac=
intosh"</span>]} then {
	unsupported1 style $w dBoxProc
    }
    frame $w.bot
    frame $w.top
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $tcl_platform(platform) <span class=3D"hljs-string">"uni=
x"</span>]} then {
	$w.bot configure -relief raised -bd <span class=3D"hljs-number">1</span>
	$w.top configure -relief raised -bd <span class=3D"hljs-number">1</span>
    }
    pack $w.bot -side bottom -fill both
    pack $w.top -side top -fill both -expand <span class=3D"hljs-number">1<=
/span>
    option add *Dialog.msg.wrapLength <span class=3D"hljs-number">3</span>i=
 widgetDefault
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $tcl_platform(platform) <span class=3D"hljs-string">"mac=
intosh"</span>]} then {
	option add *Dialog.msg.font system widgetDefault
    } else {
	option add *Dialog.msg.font {Times <span class=3D"hljs-number">12</span>} =
widgetDefault
    }
    label $w.msg -justify left -text $text
    pack $w.msg -in $w.top -side right -expand <span class=3D"hljs-number">=
1</span> -fill both -padx <span class=3D"hljs-number">3</span>m -pady <span=
 class=3D"hljs-number">3</span>m
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare $bitmap <span class=3D"hljs-string">""</span>]} then {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> equal $tcl_platform(platform) <span class=3D"hljs-string">"macint=
osh"</span>] &amp;&amp; [<span class=3D"hljs-keyword">string</span> equal $=
bitmap <span class=3D"hljs-string">"error"</span>]} then {
	    <span class=3D"hljs-keyword">set</span> bitmap <span class=3D"hljs-str=
ing">"stop"</span>
	}
	label $w.bitmap -bitmap $bitmap
	pack $w.bitmap -in $w.top -side left -padx <span class=3D"hljs-number">3</=
span>m -pady <span class=3D"hljs-number">3</span>m
    }
    <span class=3D"hljs-keyword">set</span> i <span class=3D"hljs-number">0=
</span>
    <span class=3D"hljs-keyword">foreach</span> but $args {
	button $w.button$i -text $but -command [<span class=3D"hljs-keyword">list<=
/span> <span class=3D"hljs-keyword">set</span> tkPriv(button) $i]
	<span class=3D"hljs-keyword">if</span> {$i =3D=3D $default} then {
	    $w.button$i configure -default active
	} else {
	    $w.button$i configure -default normal
	}
	grid $w.button$i -in $w.bot -column $i -row <span class=3D"hljs-number">0<=
/span> -sticky ew -padx <span class=3D"hljs-number">10</span>
	grid columnconfigure $w.bot $i
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> equal $tcl_platform(platform) <span class=3D"hljs-string">"macint=
osh"</span>]} then {
	    <span class=3D"hljs-keyword">set</span> tmp [<span class=3D"hljs-keywo=
rd">string</span> tolower $but]
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
string</span> equal $tmp <span class=3D"hljs-string">"ok"</span>] || [<span=
 class=3D"hljs-keyword">string</span> equal $tmp <span class=3D"hljs-string=
">"cancel"</span>]} then {
		grid columnconfigure $w.bot $i -minsize [<span class=3D"hljs-keyword">exp=
r</span> {<span class=3D"hljs-number">59</span> + <span class=3D"hljs-numbe=
r">20</span>}]
	    }
	}
	<span class=3D"hljs-keyword">incr</span> i
    }
    <span class=3D"hljs-keyword">if</span> {$default &gt;=3D <span class=3D=
"hljs-number">0</span>} then {
	bind $w &lt;Return&gt; <span class=3D"hljs-string">"
[list $w.button$default] configure -state active -relief sunken
update idletasks
after 100
set tkPriv(button) $default
"</span>
    }
    bind $w &lt;Destroy&gt; {<span class=3D"hljs-keyword">set</span> tkPriv=
(button) <span class=3D"hljs-number">-1</span>}
    wm withdraw $w
    <span class=3D"hljs-keyword">update</span> idletasks
    <span class=3D"hljs-keyword">set</span> x [<span class=3D"hljs-keyword"=
>expr</span> {[winfo screenwidth $w]/<span class=3D"hljs-number">2</span> -=
 [winfo reqwidth $w]/<span class=3D"hljs-number">2</span> - [winfo vrootx [=
winfo parent $w]]}]
    <span class=3D"hljs-keyword">set</span> y [<span class=3D"hljs-keyword"=
>expr</span> {[winfo screenheight $w]/<span class=3D"hljs-number">2</span> =
- [winfo reqheight $w]/<span class=3D"hljs-number">2</span> - [winfo vrooty=
 [winfo parent $w]]}]
    wm geom $w +$x+$y
    wm deiconify $w
    <span class=3D"hljs-keyword">set</span> oldFocus [focus]
    <span class=3D"hljs-keyword">set</span> oldGrab [grab current $w]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare $oldGrab <span class=3D"hljs-string">""</span>]} then =
{
	<span class=3D"hljs-keyword">set</span> grabStatus [grab status $oldGrab]
    }
    grab $w
    <span class=3D"hljs-keyword">if</span> {$default &gt;=3D <span class=3D=
"hljs-number">0</span>} then {
	focus $w.button$default
    } else {
	focus $w
    }
    tkwait <span class=3D"hljs-keyword">variable</span> tkPriv(button)
    <span class=3D"hljs-keyword">catch</span> {focus $oldFocus}
    <span class=3D"hljs-keyword">catch</span> {
	bind $w &lt;Destroy&gt; {}
	destroy $w
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare $oldGrab <span class=3D"hljs-string">""</span>]} then =
{
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> compare $grabStatus <span class=3D"hljs-string">"global"</span>]}=
 then {
	    grab $oldGrab
	} else {
	    grab -<span class=3D"hljs-keyword">global</span> $oldGrab
	}
    }
    <span class=3D"hljs-keyword">return</span> $tkPriv(button)
}
bind Entry &lt;&lt;Cut&gt;&gt; {
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
catch</span> {tkEntryGetSelection %W} tkPriv(data)]} then {
	clipboard clear -displayof %W
	clipboard <span class=3D"hljs-keyword">append</span> -displayof %W $tkPriv=
(data)
	%W delete sel.first sel.last
	<span class=3D"hljs-keyword">unset</span> tkPriv(data)
    }
}
bind Entry &lt;&lt;Copy&gt;&gt; {
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
catch</span> {tkEntryGetSelection %W} tkPriv(data)]} then {
	clipboard clear -displayof %W
	clipboard <span class=3D"hljs-keyword">append</span> -displayof %W $tkPriv=
(data)
	<span class=3D"hljs-keyword">unset</span> tkPriv(data)
    }
}
bind Entry &lt;&lt;Paste&gt;&gt; {
    <span class=3D"hljs-keyword">global</span> tcl_platform
    <span class=3D"hljs-keyword">catch</span> {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> compare $tcl_platform(platform) <span class=3D"hljs-string">"unix=
"</span>]} then {
	    <span class=3D"hljs-keyword">catch</span> {
		%W delete sel.first sel.last
	    }
	}
	%W insert insert [selection get -displayof %W -selection CLIPBOARD]
	tkEntrySeeInsert %W
    }
}
bind Entry &lt;&lt;Clear&gt;&gt; {
    %W delete sel.first sel.last
}
bind Entry &lt;&lt;PasteSelection&gt;&gt; {
    <span class=3D"hljs-keyword">if</span> {!$tkPriv(mouseMoved) || $tk_str=
ictMotif} then {
	tkEntryPaste %W %x
    }
}
bind Entry &lt;<span class=3D"hljs-number">1</span>&gt; {
    tkEntryButton1 %W %x
    %W selection clear
}
bind Entry &lt;B1-Motion&gt; {
    <span class=3D"hljs-keyword">set</span> tkPriv(x) %x
    tkEntryMouseSelect %W %x
}
bind Entry &lt;Double<span class=3D"hljs-number">-1</span>&gt; {
    <span class=3D"hljs-keyword">set</span> tkPriv(selectMode) word
    tkEntryMouseSelect %W %x
    <span class=3D"hljs-keyword">catch</span> {%W icursor sel.first}
}
bind Entry &lt;Triple<span class=3D"hljs-number">-1</span>&gt; {
    <span class=3D"hljs-keyword">set</span> tkPriv(selectMode) line
    tkEntryMouseSelect %W %x
    %W icursor <span class=3D"hljs-number">0</span>
}
bind Entry &lt;Shift<span class=3D"hljs-number">-1</span>&gt; {
    <span class=3D"hljs-keyword">set</span> tkPriv(selectMode) char
    %W selection adjust @%x
}
bind Entry &lt;Double-Shift<span class=3D"hljs-number">-1</span>&gt; {
    <span class=3D"hljs-keyword">set</span> tkPriv(selectMode) word
    tkEntryMouseSelect %W %x
}
bind Entry &lt;Triple-Shift<span class=3D"hljs-number">-1</span>&gt; {
    <span class=3D"hljs-keyword">set</span> tkPriv(selectMode) line
    tkEntryMouseSelect %W %x
}
bind Entry &lt;B1-Leave&gt; {
    <span class=3D"hljs-keyword">set</span> tkPriv(x) %x
    tkEntryAutoScan %W
}
bind Entry &lt;B1-Enter&gt; {
    tkCancelRepeat
}
bind Entry &lt;ButtonRelease<span class=3D"hljs-number">-1</span>&gt; {
    tkCancelRepeat
}
bind Entry &lt;Control<span class=3D"hljs-number">-1</span>&gt; {
    %W icursor @%x
}
bind Entry &lt;Left&gt; {
    tkEntrySetCursor %W [<span class=3D"hljs-keyword">expr</span> {[%W inde=
x insert] - <span class=3D"hljs-number">1</span>}]
}
bind Entry &lt;Right&gt; {
    tkEntrySetCursor %W [<span class=3D"hljs-keyword">expr</span> {[%W inde=
x insert] + <span class=3D"hljs-number">1</span>}]
}
bind Entry &lt;Shift-Left&gt; {
    tkEntryKeySelect %W [<span class=3D"hljs-keyword">expr</span> {[%W inde=
x insert] - <span class=3D"hljs-number">1</span>}]
    tkEntrySeeInsert %W
}
bind Entry &lt;Shift-Right&gt; {
    tkEntryKeySelect %W [<span class=3D"hljs-keyword">expr</span> {[%W inde=
x insert] + <span class=3D"hljs-number">1</span>}]
    tkEntrySeeInsert %W
}
bind Entry &lt;Control-Left&gt; {
    tkEntrySetCursor %W [tkEntryPreviousWord %W insert]
}
bind Entry &lt;Control-Right&gt; {
    tkEntrySetCursor %W [tkEntryNextWord %W insert]
}
bind Entry &lt;Shift-Control-Left&gt; {
    tkEntryKeySelect %W [tkEntryPreviousWord %W insert]
    tkEntrySeeInsert %W
}
bind Entry &lt;Shift-Control-Right&gt; {
    tkEntryKeySelect %W [tkEntryNextWord %W insert]
    tkEntrySeeInsert %W
}
bind Entry &lt;Home&gt; {
    tkEntrySetCursor %W <span class=3D"hljs-number">0</span>
}
bind Entry &lt;Shift-Home&gt; {
    tkEntryKeySelect %W <span class=3D"hljs-number">0</span>
    tkEntrySeeInsert %W
}
bind Entry &lt;End&gt; {
    tkEntrySetCursor %W end
}
bind Entry &lt;Shift-End&gt; {
    tkEntryKeySelect %W end
    tkEntrySeeInsert %W
}
bind Entry &lt;Delete&gt; {
    <span class=3D"hljs-keyword">if</span> {[%W selection present]} then {
	%W delete sel.first sel.last
    } else {
	%W delete insert
    }
}
bind Entry &lt;BackSpace&gt; {
    tkEntryBackspace %W
}
bind Entry &lt;Control-space&gt; {
    %W selection from insert
}
bind Entry &lt;Select&gt; {
    %W selection from insert
}
bind Entry &lt;Control-Shift-space&gt; {
    %W selection adjust insert
}
bind Entry &lt;Shift-Select&gt; {
    %W selection adjust insert
}
bind Entry &lt;Control-slash&gt; {
    %W selection range <span class=3D"hljs-number">0</span> end
}
bind Entry &lt;Control-backslash&gt; {
    %W selection clear
}
bind Entry &lt;KeyPress&gt; {
    tkEntryInsert %W %A
}
bind Entry &lt;Alt-KeyPress&gt; {# nothing}
bind Entry &lt;Meta-KeyPress&gt; {# nothing}
bind Entry &lt;Control-KeyPress&gt; {# nothing}
bind Entry &lt;Escape&gt; {# nothing}
bind Entry &lt;Return&gt; {# nothing}
bind Entry &lt;KP_Enter&gt; {# nothing}
bind Entry &lt;Tab&gt; {# nothing}
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">strin=
g</span> equal $tcl_platform(platform) <span class=3D"hljs-string">"macinto=
sh"</span>]} then {
    bind Entry &lt;Command-KeyPress&gt; {# nothing}
}
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">strin=
g</span> compare $tcl_platform(platform) <span class=3D"hljs-string">"windo=
ws"</span>]} then {
    bind Entry &lt;Insert&gt; {
	<span class=3D"hljs-keyword">catch</span> {tkEntryInsert %W [selection get=
 -displayof %W]}
    }
}
bind Entry &lt;Control-a&gt; {
    <span class=3D"hljs-keyword">if</span> {!$tk_strictMotif} then {
	tkEntrySetCursor %W <span class=3D"hljs-number">0</span>
    }
}
bind Entry &lt;Control-b&gt; {
    <span class=3D"hljs-keyword">if</span> {!$tk_strictMotif} then {
	tkEntrySetCursor %W [<span class=3D"hljs-keyword">expr</span> {[%W index i=
nsert] - <span class=3D"hljs-number">1</span>}]
    }
}
bind Entry &lt;Control-d&gt; {
    <span class=3D"hljs-keyword">if</span> {!$tk_strictMotif} then {
	%W delete insert
    }
}
bind Entry &lt;Control-e&gt; {
    <span class=3D"hljs-keyword">if</span> {!$tk_strictMotif} then {
	tkEntrySetCursor %W end
    }
}
bind Entry &lt;Control-f&gt; {
    <span class=3D"hljs-keyword">if</span> {!$tk_strictMotif} then {
	tkEntrySetCursor %W [<span class=3D"hljs-keyword">expr</span> {[%W index i=
nsert] + <span class=3D"hljs-number">1</span>}]
    }
}
bind Entry &lt;Control-h&gt; {
    <span class=3D"hljs-keyword">if</span> {!$tk_strictMotif} then {
	tkEntryBackspace %W
    }
}
bind Entry &lt;Control-k&gt; {
    <span class=3D"hljs-keyword">if</span> {!$tk_strictMotif} then {
	%W delete insert end
    }
}
bind Entry &lt;Control-t&gt; {
    <span class=3D"hljs-keyword">if</span> {!$tk_strictMotif} then {
	tkEntryTranspose %W
    }
}
bind Entry &lt;Meta-b&gt; {
    <span class=3D"hljs-keyword">if</span> {!$tk_strictMotif} then {
	tkEntrySetCursor %W [tkEntryPreviousWord %W insert]
    }
}
bind Entry &lt;Meta-d&gt; {
    <span class=3D"hljs-keyword">if</span> {!$tk_strictMotif} then {
	%W delete insert [tkEntryNextWord %W insert]
    }
}
bind Entry &lt;Meta-f&gt; {
    <span class=3D"hljs-keyword">if</span> {!$tk_strictMotif} then {
	tkEntrySetCursor %W [tkEntryNextWord %W insert]
    }
}
bind Entry &lt;Meta-BackSpace&gt; {
    <span class=3D"hljs-keyword">if</span> {!$tk_strictMotif} then {
	%W delete [tkEntryPreviousWord %W insert] insert
    }
}
bind Entry &lt;Meta-Delete&gt; {
    <span class=3D"hljs-keyword">if</span> {!$tk_strictMotif} then {
	%W delete [tkEntryPreviousWord %W insert] insert
    }
}
bind Entry &lt;<span class=3D"hljs-number">2</span>&gt; {
    <span class=3D"hljs-keyword">if</span> {!$tk_strictMotif} then {
	%W <span class=3D"hljs-keyword">scan</span> mark %x
	<span class=3D"hljs-keyword">set</span> tkPriv(x) %x
	<span class=3D"hljs-keyword">set</span> tkPriv(y) %y
	<span class=3D"hljs-keyword">set</span> tkPriv(mouseMoved) <span class=3D"=
hljs-number">0</span>
    }
}
bind Entry &lt;B2-Motion&gt; {
    <span class=3D"hljs-keyword">if</span> {!$tk_strictMotif} then {
	<span class=3D"hljs-keyword">if</span> {abs(%x-$tkPriv(x)) &gt; <span clas=
s=3D"hljs-number">2</span>} then {
	    <span class=3D"hljs-keyword">set</span> tkPriv(mouseMoved) <span class=
=3D"hljs-number">1</span>
	}
	%W <span class=3D"hljs-keyword">scan</span> dragto %x
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkEntry=
ClosestGap</span> {w x} {
    <span class=3D"hljs-keyword">set</span> pos [$w index @$x]
    <span class=3D"hljs-keyword">set</span> bbox [$w bbox $pos]
    <span class=3D"hljs-keyword">if</span> {($x - [<span class=3D"hljs-keyw=
ord">lindex</span> $bbox <span class=3D"hljs-number">0</span>]) &lt;([<span=
 class=3D"hljs-keyword">lindex</span> $bbox <span class=3D"hljs-number">2</=
span>]/<span class=3D"hljs-number">2</span>)} then {
	<span class=3D"hljs-keyword">return</span> $pos
    }
    <span class=3D"hljs-keyword">incr</span> pos
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkEntry=
Button1</span> {w x} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">set</span> tkPriv(selectMode) char
    <span class=3D"hljs-keyword">set</span> tkPriv(mouseMoved) <span class=
=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> tkPriv(pressX) $x
    $w icursor [tkEntryClosestGap $w $x]
    $w selection from insert
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal [$w cget -state] <span class=3D"hljs-string">"normal"</s=
pan>]} then {
	focus $w
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkEntry=
MouseSelect</span> {w x} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">set</span> cur [tkEntryClosestGap $w $x]
    <span class=3D"hljs-keyword">set</span> anchor [$w index anchor]
    <span class=3D"hljs-keyword">if</span> {($cur !=3D $anchor) ||(abs($tkP=
riv(pressX) - $x) &gt;=3D <span class=3D"hljs-number">3</span>)} then {
	<span class=3D"hljs-keyword">set</span> tkPriv(mouseMoved) <span class=3D"=
hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">switch</span> $tkPriv(selectMode) {
    char {
	    <span class=3D"hljs-keyword">if</span> {$tkPriv(mouseMoved)} then {
		<span class=3D"hljs-keyword">if</span> {$cur &lt; $anchor} then {
		    $w selection range $cur $anchor
		} elseif {$cur &gt; $anchor} {
		    $w selection range $anchor $cur
		} else {
		    $w selection clear
		}
	    }
	}
    word {
	    <span class=3D"hljs-keyword">if</span> {$cur &lt; [$w index anchor]} t=
hen {
		<span class=3D"hljs-keyword">set</span> before [<span class=3D"hljs-keywo=
rd">tcl_wordBreakBefore</span> [$w get] $cur]
		<span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">afte=
r</span> [<span class=3D"hljs-keyword">tcl_wordBreakAfter</span> [$w get] [=
<span class=3D"hljs-keyword">expr</span> {$anchor-<span class=3D"hljs-numbe=
r">1</span>}]]
	    } else {
		<span class=3D"hljs-keyword">set</span> before [<span class=3D"hljs-keywo=
rd">tcl_wordBreakBefore</span> [$w get] $anchor]
		<span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">afte=
r</span> [<span class=3D"hljs-keyword">tcl_wordBreakAfter</span> [$w get] [=
<span class=3D"hljs-keyword">expr</span> {$cur - <span class=3D"hljs-number=
">1</span>}]]
	    }
	    <span class=3D"hljs-keyword">if</span> {$before &lt; <span class=3D"hl=
js-number">0</span>} then {
		<span class=3D"hljs-keyword">set</span> before <span class=3D"hljs-number=
">0</span>
	    }
	    <span class=3D"hljs-keyword">if</span> {$after &lt; <span class=3D"hlj=
s-number">0</span>} then {
		<span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">afte=
r</span> end
	    }
	    $w selection range $before $after
	}
    line {
	    $w selection range <span class=3D"hljs-number">0</span> end
	}
    }
    <span class=3D"hljs-keyword">update</span> idletasks
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkEntry=
Paste</span> {w x} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    $w icursor [tkEntryClosestGap $w $x]
    <span class=3D"hljs-keyword">catch</span> {$w insert insert [selection =
get -displayof $w]}
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal [$w cget -state] <span class=3D"hljs-string">"normal"</s=
pan>]} then {
	focus $w
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkEntry=
AutoScan</span> {w} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">set</span> x $tkPriv(x)
    <span class=3D"hljs-keyword">if</span> {![winfo exists $w]} then <span =
class=3D"hljs-keyword">return</span>
    <span class=3D"hljs-keyword">if</span> {$x &gt;=3D [winfo width $w]} th=
en {
	$w xview scroll <span class=3D"hljs-number">2</span> units
	tkEntryMouseSelect $w $x
    } elseif {$x &lt; <span class=3D"hljs-number">0</span>} {
	$w xview scroll <span class=3D"hljs-number">-2</span> units
	tkEntryMouseSelect $w $x
    }
    <span class=3D"hljs-keyword">set</span> tkPriv(afterId) [<span class=3D=
"hljs-keyword">after</span> <span class=3D"hljs-number">50</span> [<span cl=
ass=3D"hljs-keyword">list</span> tkEntryAutoScan $w]]
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkEntry=
KeySelect</span> {w new} {
    <span class=3D"hljs-keyword">if</span> {![$w selection present]} then {
	$w selection from insert
	$w selection to $new
    } else {
	$w selection adjust $new
    }
    $w icursor $new
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkEntry=
Insert</span> {w s} {
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $s <span class=3D"hljs-string">""</span>]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">catch</span> {
	<span class=3D"hljs-keyword">set</span> insert [$w index insert]
	<span class=3D"hljs-keyword">if</span> {([$w index sel.first] &lt;=3D $ins=
ert) &amp;&amp;([$w index sel.last] &gt;=3D $insert)} then {
	    $w delete sel.first sel.last
	}
    }
    $w insert insert $s
    tkEntrySeeInsert $w
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkEntry=
Backspace</span> w {
    <span class=3D"hljs-keyword">if</span> {[$w selection present]} then {
	$w delete sel.first sel.last
    } else {
	<span class=3D"hljs-keyword">set</span> x [<span class=3D"hljs-keyword">ex=
pr</span> {[$w index insert] - <span class=3D"hljs-number">1</span>}]
	<span class=3D"hljs-keyword">if</span> {$x &gt;=3D <span class=3D"hljs-num=
ber">0</span>} then {
	    $w delete $x
	}
	<span class=3D"hljs-keyword">if</span> {[$w index @<span class=3D"hljs-num=
ber">0</span>] &gt;=3D [$w index insert]} then {
	    <span class=3D"hljs-keyword">set</span> range [$w xview]
	    <span class=3D"hljs-keyword">set</span> left [<span class=3D"hljs-keyw=
ord">lindex</span> $range <span class=3D"hljs-number">0</span>]
	    <span class=3D"hljs-keyword">set</span> right [<span class=3D"hljs-key=
word">lindex</span> $range <span class=3D"hljs-number">1</span>]
	    $w xview moveto [<span class=3D"hljs-keyword">expr</span> {$left -($ri=
ght - $left) /<span class=3D"hljs-number">2.0</span>}]
	}
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkEntry=
SeeInsert</span> w {
    <span class=3D"hljs-keyword">set</span> c [$w index insert]
    <span class=3D"hljs-keyword">if</span> {($c &lt; [$w index @<span class=
=3D"hljs-number">0</span>]) ||($c &gt; [$w index @[winfo width $w]])} then =
{
	$w xview $c
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkEntry=
SetCursor</span> {w pos} {
    $w icursor $pos
    $w selection clear
    tkEntrySeeInsert $w
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkEntry=
Transpose</span> w {
    <span class=3D"hljs-keyword">set</span> i [$w index insert]
    <span class=3D"hljs-keyword">if</span> {$i &lt; [$w index end]} then {
	<span class=3D"hljs-keyword">incr</span> i
    }
    <span class=3D"hljs-keyword">set</span> first [<span class=3D"hljs-keyw=
ord">expr</span> {$i-<span class=3D"hljs-number">2</span>}]
    <span class=3D"hljs-keyword">if</span> {$first &lt; <span class=3D"hljs=
-number">0</span>} then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">set</span> new [<span class=3D"hljs-keywor=
d">string</span> index [$w get] [<span class=3D"hljs-keyword">expr</span> {=
$i-<span class=3D"hljs-number">1</span>}]][<span class=3D"hljs-keyword">str=
ing</span> index [$w get] $first]
    $w delete $first $i
    $w insert insert $new
    tkEntrySeeInsert $w
}
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">strin=
g</span> equal $tcl_platform(platform) <span class=3D"hljs-string">"windows=
"</span>]} then {
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkE=
ntryNextWord</span> {w start} {
	<span class=3D"hljs-keyword">set</span> pos [<span class=3D"hljs-keyword">=
tcl_endOfWord</span> [$w get] [$w index $start]]
	<span class=3D"hljs-keyword">if</span> {$pos &gt;=3D <span class=3D"hljs-n=
umber">0</span>} then {
	    <span class=3D"hljs-keyword">set</span> pos [<span class=3D"hljs-keywo=
rd">tcl_startOfNextWord</span> [$w get] $pos]
	}
	<span class=3D"hljs-keyword">if</span> {$pos &lt; <span class=3D"hljs-numb=
er">0</span>} then {
	    <span class=3D"hljs-keyword">return</span> end
	}
	<span class=3D"hljs-keyword">return</span> $pos
    }
} else {
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkE=
ntryNextWord</span> {w start} {
	<span class=3D"hljs-keyword">set</span> pos [<span class=3D"hljs-keyword">=
tcl_endOfWord</span> [$w get] [$w index $start]]
	<span class=3D"hljs-keyword">if</span> {$pos &lt; <span class=3D"hljs-numb=
er">0</span>} then {
	    <span class=3D"hljs-keyword">return</span> end
	}
	<span class=3D"hljs-keyword">return</span> $pos
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkEntry=
PreviousWord</span> {w start} {
    <span class=3D"hljs-keyword">set</span> pos [<span class=3D"hljs-keywor=
d">tcl_startOfPreviousWord</span> [$w get] [$w index $start]]
    <span class=3D"hljs-keyword">if</span> {$pos &lt; <span class=3D"hljs-n=
umber">0</span>} then {
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">return</span> $pos
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkEntry=
GetSelection</span> {w} {
    <span class=3D"hljs-keyword">set</span> entryString [<span class=3D"hlj=
s-keyword">string</span> range [$w get] [$w index sel.first] [<span class=
=3D"hljs-keyword">expr</span> {[$w index sel.last] - <span class=3D"hljs-nu=
mber">1</span>}]]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare [$w cget -show] <span class=3D"hljs-string">""</span>]=
} then {
	<span class=3D"hljs-keyword">regsub</span> -all . $entryString [<span clas=
s=3D"hljs-keyword">string</span> index [$w cget -show] <span class=3D"hljs-=
number">0</span>] entryString
    }
    <span class=3D"hljs-keyword">return</span> $entryString
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tk_focu=
sNext</span> w {
    <span class=3D"hljs-keyword">set</span> cur $w
    <span class=3D"hljs-keyword">while</span> {<span class=3D"hljs-number">=
1</span>} {
	<span class=3D"hljs-keyword">set</span> parent $cur
	<span class=3D"hljs-keyword">set</span> children [winfo children $cur]
	<span class=3D"hljs-keyword">set</span> i <span class=3D"hljs-number">-1</=
span>
	<span class=3D"hljs-keyword">while</span> {<span class=3D"hljs-number">1</=
span>} {
	    <span class=3D"hljs-keyword">incr</span> i
	    <span class=3D"hljs-keyword">if</span> {$i &lt; [<span class=3D"hljs-k=
eyword">llength</span> $children]} then {
		<span class=3D"hljs-keyword">set</span> cur [<span class=3D"hljs-keyword"=
>lindex</span> $children $i]
		<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">str=
ing</span> equal [winfo toplevel $cur] $cur]} then {
		    <span class=3D"hljs-keyword">continue</span>
		} else {
		    <span class=3D"hljs-keyword">break</span>
		}
	    }
	    <span class=3D"hljs-keyword">set</span> cur $parent
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
string</span> equal [winfo toplevel $cur] $cur]} then {
		<span class=3D"hljs-keyword">break</span>
	    }
	    <span class=3D"hljs-keyword">set</span> parent [winfo parent $parent]
	    <span class=3D"hljs-keyword">set</span> children [winfo children $pare=
nt]
	    <span class=3D"hljs-keyword">set</span> i [<span class=3D"hljs-keyword=
">lsearch</span> -exact $children $cur]
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> equal $w $cur] || [tkFocusOK $cur]} then {
	    <span class=3D"hljs-keyword">return</span> $cur
	}
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tk_focu=
sPrev</span> w {
    <span class=3D"hljs-keyword">set</span> cur $w
    <span class=3D"hljs-keyword">while</span> {<span class=3D"hljs-number">=
1</span>} {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> equal [winfo toplevel $cur] $cur]} then {
	    <span class=3D"hljs-keyword">set</span> parent $cur
	    <span class=3D"hljs-keyword">set</span> children [winfo children $cur]
	    <span class=3D"hljs-keyword">set</span> i [<span class=3D"hljs-keyword=
">llength</span> $children]
	} else {
	    <span class=3D"hljs-keyword">set</span> parent [winfo parent $cur]
	    <span class=3D"hljs-keyword">set</span> children [winfo children $pare=
nt]
	    <span class=3D"hljs-keyword">set</span> i [<span class=3D"hljs-keyword=
">lsearch</span> -exact $children $cur]
	}
	<span class=3D"hljs-keyword">while</span> {$i &gt; <span class=3D"hljs-num=
ber">0</span>} {
	    <span class=3D"hljs-keyword">incr</span> i <span class=3D"hljs-number"=
>-1</span>
	    <span class=3D"hljs-keyword">set</span> cur [<span class=3D"hljs-keywo=
rd">lindex</span> $children $i]
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
string</span> equal [winfo toplevel $cur] $cur]} then {
		<span class=3D"hljs-keyword">continue</span>
	    }
	    <span class=3D"hljs-keyword">set</span> parent $cur
	    <span class=3D"hljs-keyword">set</span> children [winfo children $pare=
nt]
	    <span class=3D"hljs-keyword">set</span> i [<span class=3D"hljs-keyword=
">llength</span> $children]
	}
	<span class=3D"hljs-keyword">set</span> cur $parent
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> equal $w $cur] || [tkFocusOK $cur]} then {
	    <span class=3D"hljs-keyword">return</span> $cur
	}
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkFocus=
OK</span> w {
    <span class=3D"hljs-keyword">set</span> code [<span class=3D"hljs-keywo=
rd">catch</span> {$w cget -takefocus} value]
    <span class=3D"hljs-keyword">if</span> {($code =3D=3D <span class=3D"hl=
js-number">0</span>) &amp;&amp; [<span class=3D"hljs-keyword">string</span>=
 compare $value <span class=3D"hljs-string">""</span>]} then {
	<span class=3D"hljs-keyword">if</span> {$value =3D=3D <span class=3D"hljs-=
number">0</span>} then {
	    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number"=
>0</span>
	} elseif {$value =3D=3D <span class=3D"hljs-number">1</span>} {
	    <span class=3D"hljs-keyword">return</span> [winfo viewable $w]
	} else {
	    <span class=3D"hljs-keyword">set</span> value [<span class=3D"hljs-key=
word">uplevel</span> #<span class=3D"hljs-number">0</span> [<span class=3D"=
hljs-keyword">list</span> $value $w]]
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
string</span> compare $value <span class=3D"hljs-string">""</span>]} then {
		<span class=3D"hljs-keyword">return</span> $value
	    }
	}
    }
    <span class=3D"hljs-keyword">if</span> {![winfo viewable $w]} then {
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">set</span> code [<span class=3D"hljs-keywo=
rd">catch</span> {$w cget -state} value]
    <span class=3D"hljs-keyword">if</span> {($code =3D=3D <span class=3D"hl=
js-number">0</span>) &amp;&amp; [<span class=3D"hljs-keyword">string</span>=
 equal $value <span class=3D"hljs-string">"disabled"</span>]} then {
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">regexp</span> Key|Focus <span class=3D"hlj=
s-string">"[bind $w] [bind [winfo class $w]]"</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tk_focu=
sFollowsMouse</span> {} {
    <span class=3D"hljs-keyword">set</span> old [bind all &lt;Enter&gt;]
    <span class=3D"hljs-keyword">set</span> script {
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">strin=
g</span> equal <span class=3D"hljs-string">"%d"</span> <span class=3D"hljs-=
string">"NotifyAncestor"</span>] \
		|| [<span class=3D"hljs-keyword">string</span> equal <span class=3D"hljs-=
string">"%d"</span> <span class=3D"hljs-string">"NotifyNonlinear"</span>] \
		|| [<span class=3D"hljs-keyword">string</span> equal <span class=3D"hljs-=
string">"%d"</span> <span class=3D"hljs-string">"NotifyInferior"</span>]} {
<span class=3D"hljs-keyword">if</span> {[tkFocusOK %W]} {
focus %W
}
}
}
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare $old <span class=3D"hljs-string">""</span>]} then {
	bind all &lt;Enter&gt; <span class=3D"hljs-string">"$old; $script"</span>
    } else {
	bind all &lt;Enter&gt; $script
    }
}
bind Listbox &lt;<span class=3D"hljs-number">1</span>&gt; {
    <span class=3D"hljs-keyword">if</span> {[winfo exists %W]} then {
	tkListboxBeginSelect %W [%W index @%x,%y]
    }
}
bind Listbox &lt;Double<span class=3D"hljs-number">-1</span>&gt; {
}
bind Listbox &lt;B1-Motion&gt; {
    <span class=3D"hljs-keyword">set</span> tkPriv(x) %x
    <span class=3D"hljs-keyword">set</span> tkPriv(y) %y
    tkListboxMotion %W [%W index @%x,%y]
}
bind Listbox &lt;ButtonRelease<span class=3D"hljs-number">-1</span>&gt; {
    tkCancelRepeat
    %W activate @%x,%y
}
bind Listbox &lt;Shift<span class=3D"hljs-number">-1</span>&gt; {
    tkListboxBeginExtend %W [%W index @%x,%y]
}
bind Listbox &lt;Control<span class=3D"hljs-number">-1</span>&gt; {
    tkListboxBeginToggle %W [%W index @%x,%y]
}
bind Listbox &lt;B1-Leave&gt; {
    <span class=3D"hljs-keyword">set</span> tkPriv(x) %x
    <span class=3D"hljs-keyword">set</span> tkPriv(y) %y
    tkListboxAutoScan %W
}
bind Listbox &lt;B1-Enter&gt; {
    tkCancelRepeat
}
bind Listbox &lt;Up&gt; {
    tkListboxUpDown %W <span class=3D"hljs-number">-1</span>
}
bind Listbox &lt;Shift-Up&gt; {
    tkListboxExtendUpDown %W <span class=3D"hljs-number">-1</span>
}
bind Listbox &lt;Down&gt; {
    tkListboxUpDown %W <span class=3D"hljs-number">1</span>
}
bind Listbox &lt;Shift-Down&gt; {
    tkListboxExtendUpDown %W <span class=3D"hljs-number">1</span>
}
bind Listbox &lt;Left&gt; {
    %W xview scroll <span class=3D"hljs-number">-1</span> units
}
bind Listbox &lt;Control-Left&gt; {
    %W xview scroll <span class=3D"hljs-number">-1</span> pages
}
bind Listbox &lt;Right&gt; {
    %W xview scroll <span class=3D"hljs-number">1</span> units
}
bind Listbox &lt;Control-Right&gt; {
    %W xview scroll <span class=3D"hljs-number">1</span> pages
}
bind Listbox &lt;Prior&gt; {
    %W yview scroll <span class=3D"hljs-number">-1</span> pages
    %W activate @<span class=3D"hljs-number">0</span>,<span class=3D"hljs-n=
umber">0</span>
}
bind Listbox &lt;Next&gt; {
    %W yview scroll <span class=3D"hljs-number">1</span> pages
    %W activate @<span class=3D"hljs-number">0</span>,<span class=3D"hljs-n=
umber">0</span>
}
bind Listbox &lt;Control-Prior&gt; {
    %W xview scroll <span class=3D"hljs-number">-1</span> pages
}
bind Listbox &lt;Control-Next&gt; {
    %W xview scroll <span class=3D"hljs-number">1</span> pages
}
bind Listbox &lt;Home&gt; {
    %W xview moveto <span class=3D"hljs-number">0</span>
}
bind Listbox &lt;End&gt; {
    %W xview moveto <span class=3D"hljs-number">1</span>
}
bind Listbox &lt;Control-Home&gt; {
    %W activate <span class=3D"hljs-number">0</span>
    %W see <span class=3D"hljs-number">0</span>
    %W selection clear <span class=3D"hljs-number">0</span> end
    %W selection <span class=3D"hljs-keyword">set</span> <span class=3D"hlj=
s-number">0</span>
    event generate %W &lt;&lt;ListboxSelect&gt;&gt;
}
bind Listbox &lt;Shift-Control-Home&gt; {
    tkListboxDataExtend %W <span class=3D"hljs-number">0</span>
}
bind Listbox &lt;Control-End&gt; {
    %W activate end
    %W see end
    %W selection clear <span class=3D"hljs-number">0</span> end
    %W selection <span class=3D"hljs-keyword">set</span> end
    event generate %W &lt;&lt;ListboxSelect&gt;&gt;
}
bind Listbox &lt;Shift-Control-End&gt; {
    tkListboxDataExtend %W [%W index end]
}
bind Listbox &lt;&lt;Copy&gt;&gt; {
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal [selection own -displayof %W] <span class=3D"hljs-string=
">"%W"</span>]} then {
	clipboard clear -displayof %W
	clipboard <span class=3D"hljs-keyword">append</span> -displayof %W [select=
ion get -displayof %W]
    }
}
bind Listbox &lt;space&gt; {
    tkListboxBeginSelect %W [%W index active]
}
bind Listbox &lt;Select&gt; {
    tkListboxBeginSelect %W [%W index active]
}
bind Listbox &lt;Control-Shift-space&gt; {
    tkListboxBeginExtend %W [%W index active]
}
bind Listbox &lt;Shift-Select&gt; {
    tkListboxBeginExtend %W [%W index active]
}
bind Listbox &lt;Escape&gt; {
    tkListboxCancel %W
}
bind Listbox &lt;Control-slash&gt; {
    tkListboxSelectAll %W
}
bind Listbox &lt;Control-backslash&gt; {
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare [%W cget -selectmode] <span class=3D"hljs-string">"bro=
wse"</span>]} then {
	%W selection clear <span class=3D"hljs-number">0</span> end
	event generate %W &lt;&lt;ListboxSelect&gt;&gt;
    }
}
bind Listbox &lt;<span class=3D"hljs-number">2</span>&gt; {
    %W <span class=3D"hljs-keyword">scan</span> mark %x %y
}
bind Listbox &lt;B2-Motion&gt; {
    %W <span class=3D"hljs-keyword">scan</span> dragto %x %y
}
bind Listbox &lt;MouseWheel&gt; {
    %W yview scroll [<span class=3D"hljs-keyword">expr</span> {-(%D / <span=
 class=3D"hljs-number">120</span>) * <span class=3D"hljs-number">4</span>}]=
 units
}
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">strin=
g</span> equal <span class=3D"hljs-string">"unix"</span> $tcl_platform(plat=
form)]} then {
    bind Listbox &lt;<span class=3D"hljs-number">4</span>&gt; {
	<span class=3D"hljs-keyword">if</span> {!$tk_strictMotif} then {
	    %W yview scroll <span class=3D"hljs-number">-5</span> units
	}
    }
    bind Listbox &lt;<span class=3D"hljs-number">5</span>&gt; {
	<span class=3D"hljs-keyword">if</span> {!$tk_strictMotif} then {
	    %W yview scroll <span class=3D"hljs-number">5</span> units
	}
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkListb=
oxBeginSelect</span> {w el} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal [$w cget -selectmode] <span class=3D"hljs-string">"multi=
ple"</span>]} then {
	<span class=3D"hljs-keyword">if</span> {[$w selection includes $el]} then =
{
	    $w selection clear $el
	} else {
	    $w selection <span class=3D"hljs-keyword">set</span> $el
	}
    } else {
	$w selection clear <span class=3D"hljs-number">0</span> end
	$w selection <span class=3D"hljs-keyword">set</span> $el
	$w selection anchor $el
	<span class=3D"hljs-keyword">set</span> tkPriv(listboxSelection) {}
	<span class=3D"hljs-keyword">set</span> tkPriv(listboxPrev) $el
    }
    event generate $w &lt;&lt;ListboxSelect&gt;&gt;
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkListb=
oxMotion</span> {w el} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">if</span> {$el =3D=3D $tkPriv(listboxPrev)=
} then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">set</span> anchor [$w index anchor]
    <span class=3D"hljs-keyword">switch</span> [$w cget -selectmode] {
    browse {
	    $w selection clear <span class=3D"hljs-number">0</span> end
	    $w selection <span class=3D"hljs-keyword">set</span> $el
	    <span class=3D"hljs-keyword">set</span> tkPriv(listboxPrev) $el
	    event generate $w &lt;&lt;ListboxSelect&gt;&gt;
	}
    extended {
	    <span class=3D"hljs-keyword">set</span> i $tkPriv(listboxPrev)
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
string</span> equal {} $i]} then {
		<span class=3D"hljs-keyword">set</span> i $el
		$w selection <span class=3D"hljs-keyword">set</span> $el
	    }
	    <span class=3D"hljs-keyword">if</span> {[$w selection includes anchor]=
} then {
		$w selection clear $i $el
		$w selection <span class=3D"hljs-keyword">set</span> anchor $el
	    } else {
		$w selection clear $i $el
		$w selection clear anchor $el
	    }
	    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword"=
>info</span> exists tkPriv(listboxSelection)]} then {
		<span class=3D"hljs-keyword">set</span> tkPriv(listboxSelection) [$w curs=
election]
	    }
	    <span class=3D"hljs-keyword">while</span> {($i &lt; $el) &amp;&amp;($i=
 &lt; $anchor)} {
		<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">lse=
arch</span> $tkPriv(listboxSelection) $i] &gt;=3D <span class=3D"hljs-numbe=
r">0</span>} then {
		    $w selection <span class=3D"hljs-keyword">set</span> $i
		}
		<span class=3D"hljs-keyword">incr</span> i
	    }
	    <span class=3D"hljs-keyword">while</span> {($i &gt; $el) &amp;&amp;($i=
 &gt; $anchor)} {
		<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">lse=
arch</span> $tkPriv(listboxSelection) $i] &gt;=3D <span class=3D"hljs-numbe=
r">0</span>} then {
		    $w selection <span class=3D"hljs-keyword">set</span> $i
		}
		<span class=3D"hljs-keyword">incr</span> i <span class=3D"hljs-number">-1=
</span>
	    }
	    <span class=3D"hljs-keyword">set</span> tkPriv(listboxPrev) $el
	    event generate $w &lt;&lt;ListboxSelect&gt;&gt;
	}
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkListb=
oxBeginExtend</span> {w el} {
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal [$w cget -selectmode] <span class=3D"hljs-string">"exten=
ded"</span>]} then {
	<span class=3D"hljs-keyword">if</span> {[$w selection includes anchor]} th=
en {
	    tkListboxMotion $w $el
	} else {
	    tkListboxBeginSelect $w $el
	}
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkListb=
oxBeginToggle</span> {w el} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal [$w cget -selectmode] <span class=3D"hljs-string">"exten=
ded"</span>]} then {
	<span class=3D"hljs-keyword">set</span> tkPriv(listboxSelection) [$w curse=
lection]
	<span class=3D"hljs-keyword">set</span> tkPriv(listboxPrev) $el
	$w selection anchor $el
	<span class=3D"hljs-keyword">if</span> {[$w selection includes $el]} then =
{
	    $w selection clear $el
	} else {
	    $w selection <span class=3D"hljs-keyword">set</span> $el
	}
	event generate $w &lt;&lt;ListboxSelect&gt;&gt;
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkListb=
oxAutoScan</span> {w} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">if</span> {![winfo exists $w]} then <span =
class=3D"hljs-keyword">return</span>
    <span class=3D"hljs-keyword">set</span> x $tkPriv(x)
    <span class=3D"hljs-keyword">set</span> y $tkPriv(y)
    <span class=3D"hljs-keyword">if</span> {$y &gt;=3D [winfo height $w]} t=
hen {
	$w yview scroll <span class=3D"hljs-number">1</span> units
    } elseif {$y &lt; <span class=3D"hljs-number">0</span>} {
	$w yview scroll <span class=3D"hljs-number">-1</span> units
    } elseif {$x &gt;=3D [winfo width $w]} {
	$w xview scroll <span class=3D"hljs-number">2</span> units
    } elseif {$x &lt; <span class=3D"hljs-number">0</span>} {
	$w xview scroll <span class=3D"hljs-number">-2</span> units
    } else {
	<span class=3D"hljs-keyword">return</span>
    }
    tkListboxMotion $w [$w index @$x,$y]
    <span class=3D"hljs-keyword">set</span> tkPriv(afterId) [<span class=3D=
"hljs-keyword">after</span> <span class=3D"hljs-number">50</span> [<span cl=
ass=3D"hljs-keyword">list</span> tkListboxAutoScan $w]]
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkListb=
oxUpDown</span> {w amount} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    $w activate [<span class=3D"hljs-keyword">expr</span> {[$w index active=
] + $amount}]
    $w see active
    <span class=3D"hljs-keyword">switch</span> [$w cget -selectmode] {
    browse {
	    $w selection clear <span class=3D"hljs-number">0</span> end
	    $w selection <span class=3D"hljs-keyword">set</span> active
	    event generate $w &lt;&lt;ListboxSelect&gt;&gt;
	}
    extended {
	    $w selection clear <span class=3D"hljs-number">0</span> end
	    $w selection <span class=3D"hljs-keyword">set</span> active
	    $w selection anchor active
	    <span class=3D"hljs-keyword">set</span> tkPriv(listboxPrev) [$w index =
active]
	    <span class=3D"hljs-keyword">set</span> tkPriv(listboxSelection) {}
	    event generate $w &lt;&lt;ListboxSelect&gt;&gt;
	}
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkListb=
oxExtendUpDown</span> {w amount} {
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare [$w cget -selectmode] <span class=3D"hljs-string">"ext=
ended"</span>]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">set</span> active [$w index active]
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists tkPriv(listboxSelection)]} then {
	<span class=3D"hljs-keyword">global</span> tkPriv
	$w selection <span class=3D"hljs-keyword">set</span> $active
	<span class=3D"hljs-keyword">set</span> tkPriv(listboxSelection) [$w curse=
lection]
    }
    $w activate [<span class=3D"hljs-keyword">expr</span> {$active + $amoun=
t}]
    $w see active
    tkListboxMotion $w [$w index active]
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkListb=
oxDataExtend</span> {w el} {
    <span class=3D"hljs-keyword">set</span> mode [$w cget -selectmode]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $mode <span class=3D"hljs-string">"extended"</span>]} th=
en {
	$w activate $el
	$w see $el
	<span class=3D"hljs-keyword">if</span> {[$w selection includes anchor]} th=
en {
	    tkListboxMotion $w $el
	}
    } elseif {[<span class=3D"hljs-keyword">string</span> equal $mode <span=
 class=3D"hljs-string">"multiple"</span>]} {
	$w activate $el
	$w see $el
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkListb=
oxCancel</span> w {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare [$w cget -selectmode] <span class=3D"hljs-string">"ext=
ended"</span>]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">set</span> first [$w index anchor]
    <span class=3D"hljs-keyword">set</span> last $tkPriv(listboxPrev)
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $last <span class=3D"hljs-string">""</span>]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">if</span> {$first &gt; $last} then {
	<span class=3D"hljs-keyword">set</span> tmp $first
	<span class=3D"hljs-keyword">set</span> first $last
	<span class=3D"hljs-keyword">set</span> last $tmp
    }
    $w selection clear $first $last
    <span class=3D"hljs-keyword">while</span> {$first &lt;=3D $last} {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">lsea=
rch</span> $tkPriv(listboxSelection) $first] &gt;=3D <span class=3D"hljs-nu=
mber">0</span>} then {
	    $w selection <span class=3D"hljs-keyword">set</span> $first
	}
	<span class=3D"hljs-keyword">incr</span> first
    }
    event generate $w &lt;&lt;ListboxSelect&gt;&gt;
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkListb=
oxSelectAll</span> w {
    <span class=3D"hljs-keyword">set</span> mode [$w cget -selectmode]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $mode <span class=3D"hljs-string">"single"</span>] || [<=
span class=3D"hljs-keyword">string</span> equal $mode <span class=3D"hljs-s=
tring">"browse"</span>]} then {
	$w selection clear <span class=3D"hljs-number">0</span> end
	$w selection <span class=3D"hljs-keyword">set</span> active
    } else {
	$w selection <span class=3D"hljs-keyword">set</span> <span class=3D"hljs-n=
umber">0</span> end
    }
    event generate $w &lt;&lt;ListboxSelect&gt;&gt;
}
bind Menubutton &lt;FocusIn&gt; {}
bind Menubutton &lt;Enter&gt; {
    tkMbEnter %W
}
bind Menubutton &lt;Leave&gt; {
    tkMbLeave %W
}
bind Menubutton &lt;<span class=3D"hljs-number">1</span>&gt; {
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare $tkPriv(inMenubutton) <span class=3D"hljs-string">""</=
span>]} then {
	tkMbPost $tkPriv(inMenubutton) %X %Y
    }
}
bind Menubutton &lt;Motion&gt; {
    tkMbMotion %W up %X %Y
}
bind Menubutton &lt;B1-Motion&gt; {
    tkMbMotion %W down %X %Y
}
bind Menubutton &lt;ButtonRelease<span class=3D"hljs-number">-1</span>&gt; =
{
    tkMbButtonUp %W
}
bind Menubutton &lt;space&gt; {
    tkMbPost %W
    tkMenuFirstEntry [%W cget -menu]
}
bind Menu &lt;FocusIn&gt; {}
bind Menu &lt;Enter&gt; {
    <span class=3D"hljs-keyword">set</span> tkPriv(window) %W
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal [%W cget -type] <span class=3D"hljs-string">"tearoff"</s=
pan>]} then {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> compare <span class=3D"hljs-string">"%m"</span> <span class=3D"hl=
js-string">"NotifyUngrab"</span>]} then {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
string</span> equal $tcl_platform(platform) <span class=3D"hljs-string">"un=
ix"</span>]} then {
		tk_menuSetFocus %W
	    }
	}
    }
    tkMenuMotion %W %x %y %s
}
bind Menu &lt;Leave&gt; {
    tkMenuLeave %W %X %Y %s
}
bind Menu &lt;Motion&gt; {
    tkMenuMotion %W %x %y %s
}
bind Menu &lt;ButtonPress&gt; {
    tkMenuButtonDown %W
}
bind Menu &lt;ButtonRelease&gt; {
    tkMenuInvoke %W <span class=3D"hljs-number">1</span>
}
bind Menu &lt;space&gt; {
    tkMenuInvoke %W <span class=3D"hljs-number">0</span>
}
bind Menu &lt;Return&gt; {
    tkMenuInvoke %W <span class=3D"hljs-number">0</span>
}
bind Menu &lt;Escape&gt; {
    tkMenuEscape %W
}
bind Menu &lt;Left&gt; {
    tkMenuLeftArrow %W
}
bind Menu &lt;Right&gt; {
    tkMenuRightArrow %W
}
bind Menu &lt;Up&gt; {
    tkMenuUpArrow %W
}
bind Menu &lt;Down&gt; {
    tkMenuDownArrow %W
}
bind Menu &lt;KeyPress&gt; {
    tkTraverseWithinMenu %W %A
}
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">strin=
g</span> equal $tcl_platform(platform) <span class=3D"hljs-string">"unix"</=
span>]} then {
    bind all &lt;Alt-KeyPress&gt; {
	tkTraverseToMenu %W %A
    }
    bind all &lt;F10&gt; {
	tkFirstMenu %W
    }
} else {
    bind Menubutton &lt;Alt-KeyPress&gt; {
	tkTraverseToMenu %W %A
    }
    bind Menubutton &lt;F10&gt; {
	tkFirstMenu %W
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkMbEnt=
er</span> w {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare $tkPriv(inMenubutton) <span class=3D"hljs-string">""</=
span>]} then {
	tkMbLeave $tkPriv(inMenubutton)
    }
    <span class=3D"hljs-keyword">set</span> tkPriv(inMenubutton) $w
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare [$w cget -state] <span class=3D"hljs-string">"disabled=
"</span>]} then {
	$w configure -state active
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkMbLea=
ve</span> w {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">set</span> tkPriv(inMenubutton) {}
    <span class=3D"hljs-keyword">if</span> {![winfo exists $w]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal [$w cget -state] <span class=3D"hljs-string">"active"</s=
pan>]} then {
	$w configure -state normal
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkMbPos=
t</span> {w {x {}} {y {}}} {
    <span class=3D"hljs-keyword">global</span> tkPriv errorInfo
    <span class=3D"hljs-keyword">global</span> tcl_platform
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal [$w cget -state] <span class=3D"hljs-string">"disabled"<=
/span>] || [<span class=3D"hljs-keyword">string</span> equal $w $tkPriv(pos=
tedMb)]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">set</span> menu [$w cget -menu]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $menu <span class=3D"hljs-string">""</span>]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">set</span> tearoff [<span class=3D"hljs-ke=
yword">expr</span> {[<span class=3D"hljs-keyword">string</span> equal $tcl_=
platform(platform) <span class=3D"hljs-string">"unix"</span>] || [<span cla=
ss=3D"hljs-keyword">string</span> equal [$menu cget -type] <span class=3D"h=
ljs-string">"tearoff"</span>]}]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> first $w $menu] !=3D <span class=3D"hljs-number">0</span>} the=
n {
	<span class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">"can=
't post $menu:  it isn't a descendant of $w (this is a new requirement in T=
k versions 3.0 and later)"</span>
    }
    <span class=3D"hljs-keyword">set</span> cur $tkPriv(postedMb)
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare $cur <span class=3D"hljs-string">""</span>]} then {
	tkMenuUnpost {}
    }
    <span class=3D"hljs-keyword">set</span> tkPriv(cursor) [$w cget -cursor=
]
    <span class=3D"hljs-keyword">set</span> tkPriv(relief) [$w cget -relief=
]
    $w configure -cursor arrow
    $w configure -relief raised
    <span class=3D"hljs-keyword">set</span> tkPriv(postedMb) $w
    <span class=3D"hljs-keyword">set</span> tkPriv(focus) [focus]
    $menu activate none
    tkGenerateMenuSelect $menu
    <span class=3D"hljs-keyword">update</span> idletasks
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">c=
atch</span> {
	<span class=3D"hljs-keyword">switch</span> [$w cget -direction] {
	above {
		<span class=3D"hljs-keyword">set</span> x [winfo rootx $w]
		<span class=3D"hljs-keyword">set</span> y [<span class=3D"hljs-keyword">e=
xpr</span> {[winfo rooty $w] - [winfo reqheight $menu]}]
		$menu post $x $y
	    }
	below {
		<span class=3D"hljs-keyword">set</span> x [winfo rootx $w]
		<span class=3D"hljs-keyword">set</span> y [<span class=3D"hljs-keyword">e=
xpr</span> {[winfo rooty $w] + [winfo height $w]}]
		$menu post $x $y
	    }
	left {
		<span class=3D"hljs-keyword">set</span> x [<span class=3D"hljs-keyword">e=
xpr</span> {[winfo rootx $w] - [winfo reqwidth $menu]}]
		<span class=3D"hljs-keyword">set</span> y [<span class=3D"hljs-keyword">e=
xpr</span> {(<span class=3D"hljs-number">2</span> * [winfo rooty $w] + [win=
fo height $w]) / <span class=3D"hljs-number">2</span>}]
		<span class=3D"hljs-keyword">set</span> entry [tkMenuFindName $menu [$w c=
get -text]]
		<span class=3D"hljs-keyword">if</span> {[$w cget -indicatoron]} then {
		    <span class=3D"hljs-keyword">if</span> {$entry =3D=3D [$menu index la=
st]} then {
			<span class=3D"hljs-keyword">incr</span> y [<span class=3D"hljs-keyword"=
>expr</span> {-([$menu yposition $entry] + [winfo reqheight $menu]) /<span =
class=3D"hljs-number">2</span>}]
		    } else {
			<span class=3D"hljs-keyword">incr</span> y [<span class=3D"hljs-keyword"=
>expr</span> {-([$menu yposition $entry] + [$menu yposition [<span class=3D=
"hljs-keyword">expr</span> {$entry+<span class=3D"hljs-number">1</span>}]])=
 /<span class=3D"hljs-number">2</span>}]
		    }
		}
		$menu post $x $y
		<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">str=
ing</span> compare $entry {}] &amp;&amp; [<span class=3D"hljs-keyword">stri=
ng</span> compare [$menu entrycget $entry -state] <span class=3D"hljs-strin=
g">"disabled"</span>]} then {
		    $menu activate $entry
		    tkGenerateMenuSelect $menu
		}
	    }
	right {
		<span class=3D"hljs-keyword">set</span> x [<span class=3D"hljs-keyword">e=
xpr</span> {[winfo rootx $w] + [winfo width $w]}]
		<span class=3D"hljs-keyword">set</span> y [<span class=3D"hljs-keyword">e=
xpr</span> {(<span class=3D"hljs-number">2</span> * [winfo rooty $w] + [win=
fo height $w]) / <span class=3D"hljs-number">2</span>}]
		<span class=3D"hljs-keyword">set</span> entry [tkMenuFindName $menu [$w c=
get -text]]
		<span class=3D"hljs-keyword">if</span> {[$w cget -indicatoron]} then {
		    <span class=3D"hljs-keyword">if</span> {$entry =3D=3D [$menu index la=
st]} then {
			<span class=3D"hljs-keyword">incr</span> y [<span class=3D"hljs-keyword"=
>expr</span> {-([$menu yposition $entry] + [winfo reqheight $menu]) /<span =
class=3D"hljs-number">2</span>}]
		    } else {
			<span class=3D"hljs-keyword">incr</span> y [<span class=3D"hljs-keyword"=
>expr</span> {-([$menu yposition $entry] + [$menu yposition [<span class=3D=
"hljs-keyword">expr</span> {$entry+<span class=3D"hljs-number">1</span>}]])=
 /<span class=3D"hljs-number">2</span>}]
		    }
		}
		$menu post $x $y
		<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">str=
ing</span> compare $entry {}] &amp;&amp; [<span class=3D"hljs-keyword">stri=
ng</span> compare [$menu entrycget $entry -state] <span class=3D"hljs-strin=
g">"disabled"</span>]} then {
		    $menu activate $entry
		    tkGenerateMenuSelect $menu
		}
	    }
	default {
		<span class=3D"hljs-keyword">if</span> {[$w cget -indicatoron]} then {
		    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword"=
>string</span> equal $y {}]} then {
			<span class=3D"hljs-keyword">set</span> x [<span class=3D"hljs-keyword">=
expr</span> {[winfo rootx $w] + [winfo width $w]/<span class=3D"hljs-number=
">2</span>}]
			<span class=3D"hljs-keyword">set</span> y [<span class=3D"hljs-keyword">=
expr</span> {[winfo rooty $w] + [winfo height $w]/<span class=3D"hljs-numbe=
r">2</span>}]
		    }
		    tkPostOverPoint $menu $x $y [tkMenuFindName $menu [$w cget -text]]
		} else {
		    $menu post [winfo rootx $w] [<span class=3D"hljs-keyword">expr</span>=
 {[winfo rooty $w]+[winfo height $w]}]
		}
	    }
	}
    } msg]} then {
	<span class=3D"hljs-keyword">set</span> savedInfo $errorInfo
	tkMenuUnpost {}
	<span class=3D"hljs-keyword">error</span> $msg $savedInfo
    }
    <span class=3D"hljs-keyword">set</span> tkPriv(tearoff) $tearoff
    <span class=3D"hljs-keyword">if</span> {$tearoff !=3D <span class=3D"hl=
js-number">0</span>} then {
	focus $menu
	<span class=3D"hljs-keyword">if</span> {[winfo viewable $w]} then {
	    tkSaveGrabInfo $w
	    grab -<span class=3D"hljs-keyword">global</span> $w
	}
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkMenuU=
npost</span> menu {
    <span class=3D"hljs-keyword">global</span> tcl_platform
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">set</span> mb $tkPriv(postedMb)
    <span class=3D"hljs-keyword">catch</span> {focus $tkPriv(focus)}
    <span class=3D"hljs-keyword">set</span> tkPriv(focus) <span class=3D"hl=
js-string">""</span>
    <span class=3D"hljs-keyword">catch</span> {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> compare $mb <span class=3D"hljs-string">""</span>]} then {
	    <span class=3D"hljs-keyword">set</span> menu [$mb cget -menu]
	    $menu unpost
	    <span class=3D"hljs-keyword">set</span> tkPriv(postedMb) {}
	    $mb configure -cursor $tkPriv(cursor)
	    $mb configure -relief $tkPriv(relief)
	} elseif {[<span class=3D"hljs-keyword">string</span> compare $tkPriv(popu=
p) <span class=3D"hljs-string">""</span>]} {
	    $tkPriv(popup) unpost
	    <span class=3D"hljs-keyword">set</span> tkPriv(popup) {}
	} elseif {[<span class=3D"hljs-keyword">string</span> compare [$menu cget =
-type] <span class=3D"hljs-string">"menubar"</span>] &amp;&amp; [<span clas=
s=3D"hljs-keyword">string</span> compare [$menu cget -type] <span class=3D"=
hljs-string">"tearoff"</span>]} {
	    <span class=3D"hljs-keyword">while</span> {<span class=3D"hljs-number"=
>1</span>} {
		<span class=3D"hljs-keyword">set</span> parent [winfo parent $menu]
		<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">str=
ing</span> compare [winfo class $parent] <span class=3D"hljs-string">"Menu"=
</span>] || ![winfo ismapped $parent]} then {
		    <span class=3D"hljs-keyword">break</span>
		}
		$parent activate none
		$parent postcascade none
		tkGenerateMenuSelect $parent
		<span class=3D"hljs-keyword">set</span> type [$parent cget -type]
		<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">str=
ing</span> equal $type <span class=3D"hljs-string">"menubar"</span>] || [<s=
pan class=3D"hljs-keyword">string</span> equal $type <span class=3D"hljs-st=
ring">"tearoff"</span>]} then {
		    <span class=3D"hljs-keyword">break</span>
		}
		<span class=3D"hljs-keyword">set</span> menu $parent
	    }
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
string</span> compare [$menu cget -type] <span class=3D"hljs-string">"menub=
ar"</span>]} then {
		$menu unpost
	    }
	}
    }
    <span class=3D"hljs-keyword">if</span> {($tkPriv(tearoff) !=3D <span cl=
ass=3D"hljs-number">0</span>) || [<span class=3D"hljs-keyword">string</span=
> compare $tkPriv(menuBar) <span class=3D"hljs-string">""</span>]} then {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> compare $menu <span class=3D"hljs-string">""</span>]} then {
	    <span class=3D"hljs-keyword">set</span> grab [grab current $menu]
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
string</span> compare $grab <span class=3D"hljs-string">""</span>]} then {
		grab release $grab
	    }
	}
	tkRestoreOldGrab
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> compare $tkPriv(menuBar) <span class=3D"hljs-string">""</span>]} =
then {
	    $tkPriv(menuBar) configure -cursor $tkPriv(cursor)
	    <span class=3D"hljs-keyword">set</span> tkPriv(menuBar) {}
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> compare $tcl_platform(platform) <span class=3D"hljs-string">"unix=
"</span>]} then {
	    <span class=3D"hljs-keyword">set</span> tkPriv(tearoff) <span class=3D=
"hljs-number">0</span>
	}
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkMbMot=
ion</span> {w upDown rootx rooty} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $tkPriv(inMenubutton) $w]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">set</span> new [winfo containing $rootx $r=
ooty]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare $new $tkPriv(inMenubutton)] &amp;&amp;([<span class=3D=
"hljs-keyword">string</span> equal $new <span class=3D"hljs-string">""</spa=
n>] || [<span class=3D"hljs-keyword">string</span> equal [winfo toplevel $n=
ew] [winfo toplevel $w]])} then {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> compare $tkPriv(inMenubutton) <span class=3D"hljs-string">""</spa=
n>]} then {
	    tkMbLeave $tkPriv(inMenubutton)
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> compare $new <span class=3D"hljs-string">""</span>] &amp;&amp; [<=
span class=3D"hljs-keyword">string</span> equal [winfo class $new] <span cl=
ass=3D"hljs-string">"Menubutton"</span>] &amp;&amp;([$new cget -indicatoron=
] =3D=3D <span class=3D"hljs-number">0</span>) &amp;&amp;([$w cget -indicat=
oron] =3D=3D <span class=3D"hljs-number">0</span>)} then {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
string</span> equal $upDown <span class=3D"hljs-string">"down"</span>]} the=
n {
		tkMbPost $new $rootx $rooty
	    } else {
		tkMbEnter $new
	    }
	}
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkMbBut=
tonUp</span> w {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">global</span> tcl_platform
    <span class=3D"hljs-keyword">set</span> menu [$w cget -menu]
    <span class=3D"hljs-keyword">set</span> tearoff [<span class=3D"hljs-ke=
yword">expr</span> {[<span class=3D"hljs-keyword">string</span> equal $tcl_=
platform(platform) <span class=3D"hljs-string">"unix"</span>] ||([<span cla=
ss=3D"hljs-keyword">string</span> compare $menu {}] &amp;&amp; [<span class=
=3D"hljs-keyword">string</span> equal [$menu cget -type] <span class=3D"hlj=
s-string">"tearoff"</span>])}]
    <span class=3D"hljs-keyword">if</span> {($tearoff !=3D <span class=3D"h=
ljs-number">0</span>) &amp;&amp; [<span class=3D"hljs-keyword">string</span=
> equal $tkPriv(postedMb) $w] &amp;&amp; [<span class=3D"hljs-keyword">stri=
ng</span> equal $tkPriv(inMenubutton) $w]} then {
	tkMenuFirstEntry [$tkPriv(postedMb) cget -menu]
    } else {
	tkMenuUnpost {}
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkMenuM=
otion</span> {menu x y state} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $menu $tkPriv(window)]} then {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> equal [$menu cget -type] <span class=3D"hljs-string">"menubar"</s=
pan>]} then {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
info</span> exists tkPriv(focus)] &amp;&amp; [<span class=3D"hljs-keyword">=
string</span> compare $menu $tkPriv(focus)]} then {
		$menu activate @$x,$y
		tkGenerateMenuSelect $menu
	    }
	} else {
	    $menu activate @$x,$y
	    tkGenerateMenuSelect $menu
	}
    }
    <span class=3D"hljs-keyword">if</span> {($state &amp; <span class=3D"hl=
js-number">0x1f00</span>) !=3D <span class=3D"hljs-number">0</span>} then {
	$menu postcascade active
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkMenuB=
uttonDown</span> menu {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">global</span> tcl_platform
    <span class=3D"hljs-keyword">if</span> {![winfo viewable $menu]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    $menu postcascade active
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare $tkPriv(postedMb) <span class=3D"hljs-string">""</span=
>] &amp;&amp; [winfo viewable $tkPriv(postedMb)]} then {
	grab -<span class=3D"hljs-keyword">global</span> $tkPriv(postedMb)
    } else {
	<span class=3D"hljs-keyword">while</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal [$menu cget -type] <span class=3D"hljs-string">"normal"<=
/span>] &amp;&amp; [<span class=3D"hljs-keyword">string</span> equal [winfo=
 class [winfo parent $menu]] <span class=3D"hljs-string">"Menu"</span>] &am=
p;&amp; [winfo ismapped [winfo parent $menu]]} {
	    <span class=3D"hljs-keyword">set</span> menu [winfo parent $menu]
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> equal $tkPriv(menuBar) {}]} then {
	    <span class=3D"hljs-keyword">set</span> tkPriv(menuBar) $menu
	    <span class=3D"hljs-keyword">set</span> tkPriv(cursor) [$menu cget -cu=
rsor]
	    $menu configure -cursor arrow
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> compare $menu [grab current $menu]]} then {
	    tkSaveGrabInfo $menu
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> equal $tcl_platform(platform) <span class=3D"hljs-string">"unix"<=
/span>]} then {
	    grab -<span class=3D"hljs-keyword">global</span> $menu
	}
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkMenuL=
eave</span> {menu rootx rooty state} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">set</span> tkPriv(window) {}
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal [$menu index active] <span class=3D"hljs-string">"none"<=
/span>]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal [$menu type active] <span class=3D"hljs-string">"cascade=
"</span>] &amp;&amp; [<span class=3D"hljs-keyword">string</span> equal [win=
fo containing $rootx $rooty] [$menu entrycget active -menu]]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    $menu activate none
    tkGenerateMenuSelect $menu
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkMenuI=
nvoke</span> {w buttonRelease} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">if</span> {$buttonRelease &amp;&amp; [<spa=
n class=3D"hljs-keyword">string</span> equal $tkPriv(window) {}]} then {
	$w postcascade none
	$w activate none
	event generate $w &lt;&lt;MenuSelect&gt;&gt;
	tkMenuUnpost $w
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal [$w type active] <span class=3D"hljs-string">"cascade"</=
span>]} then {
	$w postcascade active
	<span class=3D"hljs-keyword">set</span> menu [$w entrycget active -menu]
	tkMenuFirstEntry $menu
    } elseif {[<span class=3D"hljs-keyword">string</span> equal [$w type ac=
tive] <span class=3D"hljs-string">"tearoff"</span>]} {
	tkTearOffMenu $w
	tkMenuUnpost $w
    } elseif {[<span class=3D"hljs-keyword">string</span> equal [$w cget -t=
ype] <span class=3D"hljs-string">"menubar"</span>]} {
	$w postcascade none
	<span class=3D"hljs-keyword">set</span> active [$w index active]
	<span class=3D"hljs-keyword">set</span> isCascade [<span class=3D"hljs-key=
word">string</span> equal [$w type $active] <span class=3D"hljs-string">"ca=
scade"</span>]
	<span class=3D"hljs-keyword">if</span> {$isCascade} then {
	    $w activate none
	    event generate $w &lt;&lt;MenuSelect&gt;&gt;
	}
	tkMenuUnpost $w
	<span class=3D"hljs-keyword">if</span> {!$isCascade} then {
	    <span class=3D"hljs-keyword">uplevel</span> #<span class=3D"hljs-numbe=
r">0</span> [<span class=3D"hljs-keyword">list</span> $w invoke $active]
	}
    } else {
	tkMenuUnpost $w
	<span class=3D"hljs-keyword">uplevel</span> #<span class=3D"hljs-number">0=
</span> [<span class=3D"hljs-keyword">list</span> $w invoke active]
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkMenuE=
scape</span> menu {
    <span class=3D"hljs-keyword">set</span> parent [winfo parent $menu]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare [winfo class $parent] <span class=3D"hljs-string">"Men=
u"</span>]} then {
	tkMenuUnpost $menu
    } elseif {[<span class=3D"hljs-keyword">string</span> equal [$parent cg=
et -type] <span class=3D"hljs-string">"menubar"</span>]} {
	tkMenuUnpost $menu
	tkRestoreOldGrab
    } else {
	tkMenuNextMenu $menu left
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkMenuU=
pArrow</span> {menu} {
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal [$menu cget -type] <span class=3D"hljs-string">"menubar"=
</span>]} then {
	tkMenuNextMenu $menu left
    } else {
	tkMenuNextEntry $menu <span class=3D"hljs-number">-1</span>
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkMenuD=
ownArrow</span> {menu} {
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal [$menu cget -type] <span class=3D"hljs-string">"menubar"=
</span>]} then {
	tkMenuNextMenu $menu right
    } else {
	tkMenuNextEntry $menu <span class=3D"hljs-number">1</span>
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkMenuL=
eftArrow</span> {menu} {
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal [$menu cget -type] <span class=3D"hljs-string">"menubar"=
</span>]} then {
	tkMenuNextEntry $menu <span class=3D"hljs-number">-1</span>
    } else {
	tkMenuNextMenu $menu left
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkMenuR=
ightArrow</span> {menu} {
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal [$menu cget -type] <span class=3D"hljs-string">"menubar"=
</span>]} then {
	tkMenuNextEntry $menu <span class=3D"hljs-number">1</span>
    } else {
	tkMenuNextMenu $menu right
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkMenuN=
extMenu</span> {menu direction} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $direction <span class=3D"hljs-string">"right"</span>]} =
then {
	<span class=3D"hljs-keyword">set</span> count <span class=3D"hljs-number">=
1</span>
	<span class=3D"hljs-keyword">set</span> parent [winfo parent $menu]
	<span class=3D"hljs-keyword">set</span> class [winfo class $parent]
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> equal [$menu type active] <span class=3D"hljs-string">"cascade"</=
span>]} then {
	    $menu postcascade active
	    <span class=3D"hljs-keyword">set</span> m2 [$menu entrycget active -me=
nu]
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
string</span> compare $m2 <span class=3D"hljs-string">""</span>]} then {
		tkMenuFirstEntry $m2
	    }
	    <span class=3D"hljs-keyword">return</span>
	} else {
	    <span class=3D"hljs-keyword">set</span> parent [winfo parent $menu]
	    <span class=3D"hljs-keyword">while</span> {[<span class=3D"hljs-keywor=
d">string</span> compare $parent <span class=3D"hljs-string">"."</span>]} {
		<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">str=
ing</span> equal [winfo class $parent] <span class=3D"hljs-string">"Menu"</=
span>] &amp;&amp; [<span class=3D"hljs-keyword">string</span> equal [$paren=
t cget -type] <span class=3D"hljs-string">"menubar"</span>]} then {
		    tk_menuSetFocus $parent
		    tkMenuNextEntry $parent <span class=3D"hljs-number">1</span>
		    <span class=3D"hljs-keyword">return</span>
		}
		<span class=3D"hljs-keyword">set</span> parent [winfo parent $parent]
	    }
	}
    } else {
	<span class=3D"hljs-keyword">set</span> count <span class=3D"hljs-number">=
-1</span>
	<span class=3D"hljs-keyword">set</span> m2 [winfo parent $menu]
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> equal [winfo class $m2] <span class=3D"hljs-string">"Menu"</span>=
]} then {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
string</span> compare [$m2 cget -type] <span class=3D"hljs-string">"menubar=
"</span>]} then {
		$menu activate none
		tkGenerateMenuSelect $menu
		tk_menuSetFocus $m2
		<span class=3D"hljs-keyword">set</span> tmp [$m2 index active]
		$m2 activate none
		$m2 activate $tmp
		<span class=3D"hljs-keyword">return</span>
	    }
	}
    }
    <span class=3D"hljs-keyword">set</span> m2 [winfo parent $menu]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal [winfo class $m2] <span class=3D"hljs-string">"Menu"</sp=
an>]} then {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> equal [$m2 cget -type] <span class=3D"hljs-string">"menubar"</spa=
n>]} then {
	    tk_menuSetFocus $m2
	    tkMenuNextEntry $m2 <span class=3D"hljs-number">-1</span>
	    <span class=3D"hljs-keyword">return</span>
	}
    }
    <span class=3D"hljs-keyword">set</span> w $tkPriv(postedMb)
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $w <span class=3D"hljs-string">""</span>]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">set</span> buttons [winfo children [winfo =
parent $w]]
    <span class=3D"hljs-keyword">set</span> length [<span class=3D"hljs-key=
word">llength</span> $buttons]
    <span class=3D"hljs-keyword">set</span> i [<span class=3D"hljs-keyword"=
>expr</span> {[<span class=3D"hljs-keyword">lsearch</span> -exact $buttons =
$w] + $count}]
    <span class=3D"hljs-keyword">while</span> {<span class=3D"hljs-number">=
1</span>} {
	<span class=3D"hljs-keyword">while</span> {$i &lt; <span class=3D"hljs-num=
ber">0</span>} {
	    <span class=3D"hljs-keyword">incr</span> i $length
	}
	<span class=3D"hljs-keyword">while</span> {$i &gt;=3D $length} {
	    <span class=3D"hljs-keyword">incr</span> i -$length
	}
	<span class=3D"hljs-keyword">set</span> mb [<span class=3D"hljs-keyword">l=
index</span> $buttons $i]
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> equal [winfo class $mb] <span class=3D"hljs-string">"Menubutton"<=
/span>] &amp;&amp; [<span class=3D"hljs-keyword">string</span> compare [$mb=
 cget -state] <span class=3D"hljs-string">"disabled"</span>] &amp;&amp; [<s=
pan class=3D"hljs-keyword">string</span> compare [$mb cget -menu] <span cla=
ss=3D"hljs-string">""</span>] &amp;&amp; [<span class=3D"hljs-keyword">stri=
ng</span> compare [[$mb cget -menu] index last] <span class=3D"hljs-string"=
>"none"</span>]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> equal $mb $w]} then {
	    <span class=3D"hljs-keyword">return</span>
	}
	<span class=3D"hljs-keyword">incr</span> i $count
    }
    tkMbPost $mb
    tkMenuFirstEntry [$mb cget -menu]
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkMenuN=
extEntry</span> {menu count} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal [$menu index last] <span class=3D"hljs-string">"none"</s=
pan>]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">set</span> length [<span class=3D"hljs-key=
word">expr</span> {[$menu index last]+<span class=3D"hljs-number">1</span>}=
]
    <span class=3D"hljs-keyword">set</span> quitAfter $length
    <span class=3D"hljs-keyword">set</span> active [$menu index active]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $active <span class=3D"hljs-string">"none"</span>]} then=
 {
	<span class=3D"hljs-keyword">set</span> i <span class=3D"hljs-number">0</s=
pan>
    } else {
	<span class=3D"hljs-keyword">set</span> i [<span class=3D"hljs-keyword">ex=
pr</span> {$active + $count}]
    }
    <span class=3D"hljs-keyword">while</span> {<span class=3D"hljs-number">=
1</span>} {
	<span class=3D"hljs-keyword">if</span> {$quitAfter &lt;=3D <span class=3D"=
hljs-number">0</span>} then {
	    <span class=3D"hljs-keyword">return</span>
	}
	<span class=3D"hljs-keyword">while</span> {$i &lt; <span class=3D"hljs-num=
ber">0</span>} {
	    <span class=3D"hljs-keyword">incr</span> i $length
	}
	<span class=3D"hljs-keyword">while</span> {$i &gt;=3D $length} {
	    <span class=3D"hljs-keyword">incr</span> i -$length
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">catc=
h</span> {$menu entrycget $i -state} state] =3D=3D <span class=3D"hljs-numb=
er">0</span>} then {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
string</span> compare $state <span class=3D"hljs-string">"disabled"</span>]=
} then {
		<span class=3D"hljs-keyword">break</span>
	    }
	}
	<span class=3D"hljs-keyword">if</span> {$i =3D=3D $active} then {
	    <span class=3D"hljs-keyword">return</span>
	}
	<span class=3D"hljs-keyword">incr</span> i $count
	<span class=3D"hljs-keyword">incr</span> quitAfter <span class=3D"hljs-num=
ber">-1</span>
    }
    $menu activate $i
    tkGenerateMenuSelect $menu
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal [$menu type $i] <span class=3D"hljs-string">"cascade"</s=
pan>]} then {
	<span class=3D"hljs-keyword">set</span> cascade [$menu entrycget $i -menu]
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> compare $cascade <span class=3D"hljs-string">""</span>]} then {
	    $menu postcascade $i
	    tkMenuFirstEntry $cascade
	}
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkMenuF=
ind</span> {w char} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">set</span> char [<span class=3D"hljs-keywo=
rd">string</span> tolower $char]
    <span class=3D"hljs-keyword">set</span> windowlist [winfo child $w]
    <span class=3D"hljs-keyword">foreach</span> child $windowlist {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> compare [winfo toplevel [focus]] [winfo toplevel $child]]} then {
	    <span class=3D"hljs-keyword">continue</span>
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> equal [winfo class $child] <span class=3D"hljs-string">"Menu"</sp=
an>] &amp;&amp; [<span class=3D"hljs-keyword">string</span> equal [$child c=
get -type] <span class=3D"hljs-string">"menubar"</span>]} then {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
string</span> equal $char <span class=3D"hljs-string">""</span>]} then {
		<span class=3D"hljs-keyword">return</span> $child
	    }
	    <span class=3D"hljs-keyword">set</span> last [$child index last]
	    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">=
set</span> i [$child cget -tearoff]} {$i &lt;=3D $last} {<span class=3D"hlj=
s-keyword">incr</span> i} {
		<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">str=
ing</span> equal [$child type $i] <span class=3D"hljs-string">"separator"</=
span>]} then {
		    <span class=3D"hljs-keyword">continue</span>
		}
		<span class=3D"hljs-keyword">set</span> char2 [<span class=3D"hljs-keywor=
d">string</span> index [$child entrycget $i -label] [$child entrycget $i -u=
nderline]]
		<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">str=
ing</span> equal $char [<span class=3D"hljs-keyword">string</span> tolower =
$char2]] || [<span class=3D"hljs-keyword">string</span> equal $char <span c=
lass=3D"hljs-string">""</span>]} then {
		    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword"=
>string</span> compare [$child entrycget $i -state] <span class=3D"hljs-str=
ing">"disabled"</span>]} then {
			<span class=3D"hljs-keyword">return</span> $child
		    }
		}
	    }
	}
    }
    <span class=3D"hljs-keyword">foreach</span> child $windowlist {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> compare [winfo toplevel [focus]] [winfo toplevel $child]]} then {
	    <span class=3D"hljs-keyword">continue</span>
	}
	<span class=3D"hljs-keyword">switch</span> [winfo class $child] {
	Menubutton {
		<span class=3D"hljs-keyword">set</span> char2 [<span class=3D"hljs-keywor=
d">string</span> index [$child cget -text] [$child cget -underline]]
		<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">str=
ing</span> equal $char [<span class=3D"hljs-keyword">string</span> tolower =
$char2]] || [<span class=3D"hljs-keyword">string</span> equal $char <span c=
lass=3D"hljs-string">""</span>]} then {
		    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword"=
>string</span> compare [$child cget -state] <span class=3D"hljs-string">"di=
sabled"</span>]} then {
			<span class=3D"hljs-keyword">return</span> $child
		    }
		}
	    }
	default {
		<span class=3D"hljs-keyword">set</span> match [tkMenuFind $child $char]
		<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">str=
ing</span> compare $match <span class=3D"hljs-string">""</span>]} then {
		    <span class=3D"hljs-keyword">return</span> $match
		}
	    }
	}
    }
    <span class=3D"hljs-keyword">return</span> {}
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkTrave=
rseToMenu</span> {w char} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $char <span class=3D"hljs-string">""</span>]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">while</span> {[<span class=3D"hljs-keyword=
">string</span> equal [winfo class $w] <span class=3D"hljs-string">"Menu"</=
span>]} {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> compare [$w cget -type] <span class=3D"hljs-string">"menubar"</sp=
an>] &amp;&amp; [<span class=3D"hljs-keyword">string</span> equal $tkPriv(p=
ostedMb) <span class=3D"hljs-string">""</span>]} then {
	    <span class=3D"hljs-keyword">return</span>
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> equal [$w cget -type] <span class=3D"hljs-string">"menubar"</span=
>]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">set</span> w [winfo parent $w]
    }
    <span class=3D"hljs-keyword">set</span> w [tkMenuFind [winfo toplevel $=
w] $char]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare $w <span class=3D"hljs-string">""</span>]} then {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> equal [winfo class $w] <span class=3D"hljs-string">"Menu"</span>]=
} then {
	    tk_menuSetFocus $w
	    <span class=3D"hljs-keyword">set</span> tkPriv(window) $w
	    tkSaveGrabInfo $w
	    grab -<span class=3D"hljs-keyword">global</span> $w
	    tkTraverseWithinMenu $w $char
	} else {
	    tkMbPost $w
	    tkMenuFirstEntry [$w cget -menu]
	}
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkFirst=
Menu</span> w {
    <span class=3D"hljs-keyword">set</span> w [tkMenuFind [winfo toplevel $=
w] <span class=3D"hljs-string">""</span>]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare $w <span class=3D"hljs-string">""</span>]} then {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> equal [winfo class $w] <span class=3D"hljs-string">"Menu"</span>]=
} then {
	    tk_menuSetFocus $w
	    <span class=3D"hljs-keyword">set</span> tkPriv(window) $w
	    tkSaveGrabInfo $w
	    grab -<span class=3D"hljs-keyword">global</span> $w
	    tkMenuFirstEntry $w
	} else {
	    tkMbPost $w
	    tkMenuFirstEntry [$w cget -menu]
	}
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkTrave=
rseWithinMenu</span> {w char} {
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $char <span class=3D"hljs-string">""</span>]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">set</span> char [<span class=3D"hljs-keywo=
rd">string</span> tolower $char]
    <span class=3D"hljs-keyword">set</span> last [$w index last]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $last <span class=3D"hljs-string">"none"</span>]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">0</span>} {$i &lt;=3D $last} {<span=
 class=3D"hljs-keyword">incr</span> i} {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">catc=
h</span> {<span class=3D"hljs-keyword">set</span> char2 [<span class=3D"hlj=
s-keyword">string</span> index [$w entrycget $i -label] [$w entrycget $i -u=
nderline]]}]} then {
	    <span class=3D"hljs-keyword">continue</span>
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> equal $char [<span class=3D"hljs-keyword">string</span> tolower $=
char2]]} then {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
string</span> equal [$w type $i] <span class=3D"hljs-string">"cascade"</spa=
n>]} then {
		$w activate $i
		$w postcascade active
		event generate $w &lt;&lt;MenuSelect&gt;&gt;
		<span class=3D"hljs-keyword">set</span> m2 [$w entrycget $i -menu]
		<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">str=
ing</span> compare $m2 <span class=3D"hljs-string">""</span>]} then {
		    tkMenuFirstEntry $m2
		}
	    } else {
		tkMenuUnpost $w
		<span class=3D"hljs-keyword">uplevel</span> #<span class=3D"hljs-number">=
0</span> [<span class=3D"hljs-keyword">list</span> $w invoke $i]
	    }
	    <span class=3D"hljs-keyword">return</span>
	}
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkMenuF=
irstEntry</span> menu {
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $menu <span class=3D"hljs-string">""</span>]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    tk_menuSetFocus $menu
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare [$menu index active] <span class=3D"hljs-string">"none=
"</span>]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">set</span> last [$menu index last]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $last <span class=3D"hljs-string">"none"</span>]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">0</span>} {$i &lt;=3D $last} {<span=
 class=3D"hljs-keyword">incr</span> i} {
	<span class=3D"hljs-keyword">if</span> {([<span class=3D"hljs-keyword">cat=
ch</span> {<span class=3D"hljs-keyword">set</span> state [$menu entrycget $=
i -state]}] =3D=3D <span class=3D"hljs-number">0</span>) &amp;&amp; [<span =
class=3D"hljs-keyword">string</span> compare $state <span class=3D"hljs-str=
ing">"disabled"</span>] &amp;&amp; [<span class=3D"hljs-keyword">string</sp=
an> compare [$menu type $i] <span class=3D"hljs-string">"tearoff"</span>]} =
then {
	    $menu activate $i
	    tkGenerateMenuSelect $menu
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
string</span> equal [$menu type $i] <span class=3D"hljs-string">"cascade"</=
span>] &amp;&amp; [<span class=3D"hljs-keyword">string</span> equal [$menu =
cget -type] <span class=3D"hljs-string">"menubar"</span>]} then {
		<span class=3D"hljs-keyword">set</span> cascade [$menu entrycget $i -menu=
]
		<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">str=
ing</span> compare $cascade <span class=3D"hljs-string">""</span>]} then {
		    $menu postcascade $i
		    tkMenuFirstEntry $cascade
		}
	    }
	    <span class=3D"hljs-keyword">return</span>
	}
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkMenuF=
indName</span> {menu s} {
    <span class=3D"hljs-keyword">set</span> i <span class=3D"hljs-string">"=
"</span>
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
regexp</span> {^active$|^last$|^none$|^[<span class=3D"hljs-number">0</span=
><span class=3D"hljs-number">-9</span>]|^@} $s]} then {
	<span class=3D"hljs-keyword">catch</span> {<span class=3D"hljs-keyword">se=
t</span> i [$menu index $s]}
	<span class=3D"hljs-keyword">return</span> $i
    }
    <span class=3D"hljs-keyword">set</span> last [$menu index last]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $last <span class=3D"hljs-string">"none"</span>]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">0</span>} {$i &lt;=3D $last} {<span=
 class=3D"hljs-keyword">incr</span> i} {
	<span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">cat=
ch</span> {$menu entrycget $i -label} label]} then {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
string</span> equal $label $s]} then {
		<span class=3D"hljs-keyword">return</span> $i
	    }
	}
    }
    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-string">=
""</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkPostO=
verPoint</span> {menu x y {entry {}}} {
    <span class=3D"hljs-keyword">global</span> tcl_platform
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare $entry {}]} then {
	<span class=3D"hljs-keyword">if</span> {$entry =3D=3D [$menu index last]} =
then {
	    <span class=3D"hljs-keyword">incr</span> y [<span class=3D"hljs-keywor=
d">expr</span> {-([$menu yposition $entry] + [winfo reqheight $menu]) /<spa=
n class=3D"hljs-number">2</span>}]
	} else {
	    <span class=3D"hljs-keyword">incr</span> y [<span class=3D"hljs-keywor=
d">expr</span> {-([$menu yposition $entry] + [$menu yposition [<span class=
=3D"hljs-keyword">expr</span> {$entry+<span class=3D"hljs-number">1</span>}=
]]) /<span class=3D"hljs-number">2</span>}]
	}
	<span class=3D"hljs-keyword">incr</span> x [<span class=3D"hljs-keyword">e=
xpr</span> {-[winfo reqwidth $menu]/<span class=3D"hljs-number">2</span>}]
    }
    $menu post $x $y
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare $entry {}] &amp;&amp; [<span class=3D"hljs-keyword">st=
ring</span> compare [$menu entrycget $entry -state] <span class=3D"hljs-str=
ing">"disabled"</span>]} then {
	$menu activate $entry
	tkGenerateMenuSelect $menu
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkSaveG=
rabInfo</span> w {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">set</span> tkPriv(oldGrab) [grab current $=
w]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare $tkPriv(oldGrab) <span class=3D"hljs-string">""</span>=
]} then {
	<span class=3D"hljs-keyword">set</span> tkPriv(grabStatus) [grab status $t=
kPriv(oldGrab)]
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkResto=
reOldGrab</span> {} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare $tkPriv(oldGrab) <span class=3D"hljs-string">""</span>=
]} then {
	<span class=3D"hljs-keyword">catch</span> {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
string</span> equal $tkPriv(grabStatus) <span class=3D"hljs-string">"global=
"</span>]} then {
		grab <span class=3D"hljs-keyword">set</span> -<span class=3D"hljs-keyword=
">global</span> $tkPriv(oldGrab)
	    } else {
		grab <span class=3D"hljs-keyword">set</span> $tkPriv(oldGrab)
	    }
	}
	<span class=3D"hljs-keyword">set</span> tkPriv(oldGrab) <span class=3D"hlj=
s-string">""</span>
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tk_menu=
SetFocus</span> {menu} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists tkPriv(focus)] || [<span class=3D"hljs-keyword">string</=
span> equal $tkPriv(focus) {}]} then {
	<span class=3D"hljs-keyword">set</span> tkPriv(focus) [focus]
    }
    focus $menu
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkGener=
ateMenuSelect</span> {menu} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $tkPriv(activeMenu) $menu] &amp;&amp; [<span class=3D"hl=
js-keyword">string</span> equal $tkPriv(activeItem) [$menu index active]]} =
then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">set</span> tkPriv(activeMenu) $menu
    <span class=3D"hljs-keyword">set</span> tkPriv(activeItem) [$menu index=
 active]
    event generate $menu &lt;&lt;MenuSelect&gt;&gt;
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tk_popu=
p</span> {menu x y {entry {}}} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">global</span> tcl_platform
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare $tkPriv(popup) <span class=3D"hljs-string">""</span>] =
|| [<span class=3D"hljs-keyword">string</span> compare $tkPriv(postedMb) <s=
pan class=3D"hljs-string">""</span>]} then {
	tkMenuUnpost {}
    }
    tkPostOverPoint $menu $x $y $entry
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $tcl_platform(platform) <span class=3D"hljs-string">"uni=
x"</span>] &amp;&amp; [winfo viewable $menu]} then {
	tkSaveGrabInfo $menu
	grab -<span class=3D"hljs-keyword">global</span> $menu
	<span class=3D"hljs-keyword">set</span> tkPriv(popup) $menu
	tk_menuSetFocus $menu
    }
}
<span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keyword">=
eval</span> ::tk::dialog {}
image create bitmap ::tk::dialog::b1 -foreground black -data <span class=3D=
"hljs-string">"#define b1_width 32\n#define b1_height 32
static unsigned char q1_bits[] =3D {
0x00, 0xf8, 0x1f, 0x00, 0x00, 0x07, 0xe0, 0x00, 0xc0, 0x00, 0x00, 0x03,
0x20, 0x00, 0x00, 0x04, 0x10, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x10,
0x04, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x40,
0x01, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x80,
0x01, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x80,
0x01, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x40,
0x04, 0x00, 0x00, 0x20, 0x08, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x08,
0x60, 0x00, 0x00, 0x04, 0x80, 0x03, 0x80, 0x03, 0x00, 0x0c, 0x78, 0x00,
0x00, 0x30, 0x04, 0x00, 0x00, 0x40, 0x04, 0x00, 0x00, 0x40, 0x04, 0x00,
0x00, 0x80, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x06, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};"</span>
image create bitmap ::tk::dialog::b2 -foreground white -data <span class=3D=
"hljs-string">"#define b2_width 32\n#define b2_height 32
static unsigned char b2_bits[] =3D {
0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x00,
0xc0, 0xff, 0xff, 0x03, 0xe0, 0xff, 0xff, 0x07, 0xf0, 0xff, 0xff, 0x0f,
0xf8, 0xff, 0xff, 0x1f, 0xfc, 0xff, 0xff, 0x3f, 0xfc, 0xff, 0xff, 0x3f,
0xfe, 0xff, 0xff, 0x7f, 0xfe, 0xff, 0xff, 0x7f, 0xfe, 0xff, 0xff, 0x7f,
0xfe, 0xff, 0xff, 0x7f, 0xfe, 0xff, 0xff, 0x7f, 0xfe, 0xff, 0xff, 0x7f,
0xfe, 0xff, 0xff, 0x7f, 0xfc, 0xff, 0xff, 0x3f, 0xfc, 0xff, 0xff, 0x3f,
0xf8, 0xff, 0xff, 0x1f, 0xf0, 0xff, 0xff, 0x0f, 0xe0, 0xff, 0xff, 0x07,
0x80, 0xff, 0xff, 0x03, 0x00, 0xfc, 0x7f, 0x00, 0x00, 0xf0, 0x07, 0x00,
0x00, 0xc0, 0x03, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 0x80, 0x03, 0x00,
0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};"</span>
image create bitmap ::tk::dialog::q -foreground blue -data <span class=3D"h=
ljs-string">"#define q_width 32\n#define q_height 32
static unsigned char q_bits[] =3D {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x07, 0x00,
0x00, 0x10, 0x0f, 0x00, 0x00, 0x18, 0x1e, 0x00, 0x00, 0x38, 0x1e, 0x00,
0x00, 0x38, 0x1e, 0x00, 0x00, 0x10, 0x0f, 0x00, 0x00, 0x80, 0x07, 0x00,
0x00, 0xc0, 0x01, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0xe0, 0x01, 0x00,
0x00, 0xe0, 0x01, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};"</span>
image create bitmap ::tk::dialog::i -foreground blue -data <span class=3D"h=
ljs-string">"#define i_width 32\n#define i_height 32
static unsigned char i_bits[] =3D {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0xe0, 0x01, 0x00, 0x00, 0xf0, 0x03, 0x00, 0x00, 0xf0, 0x03, 0x00,
0x00, 0xe0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0xf8, 0x03, 0x00, 0x00, 0xf0, 0x03, 0x00, 0x00, 0xe0, 0x03, 0x00,
0x00, 0xe0, 0x03, 0x00, 0x00, 0xe0, 0x03, 0x00, 0x00, 0xe0, 0x03, 0x00,
0x00, 0xe0, 0x03, 0x00, 0x00, 0xe0, 0x03, 0x00, 0x00, 0xf0, 0x07, 0x00,
0x00, 0xf8, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};"</span>
image create bitmap ::tk::dialog::w1 -foreground black -data <span class=3D=
"hljs-string">"#define w1_width 32\n#define w1_height 32
static unsigned char w1_bits[] =3D {
0x00, 0x80, 0x01, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x20, 0x04, 0x00,
0x00, 0x10, 0x04, 0x00, 0x00, 0x10, 0x08, 0x00, 0x00, 0x08, 0x08, 0x00,
0x00, 0x08, 0x10, 0x00, 0x00, 0x04, 0x10, 0x00, 0x00, 0x04, 0x20, 0x00,
0x00, 0x02, 0x20, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x01, 0x40, 0x00,
0x00, 0x01, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00, 0x01,
0x40, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x02, 0x20, 0x00, 0x00, 0x02,
0x20, 0x00, 0x00, 0x04, 0x10, 0x00, 0x00, 0x04, 0x10, 0x00, 0x00, 0x08,
0x08, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x10, 0x04, 0x00, 0x00, 0x10,
0x04, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x20, 0x01, 0x00, 0x00, 0x40,
0x01, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x20,
0xfc, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00};"</span>
image create bitmap ::tk::dialog::w2 -foreground yellow -data <span class=
=3D"hljs-string">"#define w2_width 32\n#define w2_height 32
static unsigned char w2_bits[] =3D {
0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0xc0, 0x03, 0x00,
0x00, 0xe0, 0x03, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0xf0, 0x07, 0x00,
0x00, 0xf0, 0x0f, 0x00, 0x00, 0xf8, 0x0f, 0x00, 0x00, 0xf8, 0x1f, 0x00,
0x00, 0xfc, 0x1f, 0x00, 0x00, 0xfc, 0x3f, 0x00, 0x00, 0xfe, 0x3f, 0x00,
0x00, 0xfe, 0x7f, 0x00, 0x00, 0xff, 0x7f, 0x00, 0x00, 0xff, 0xff, 0x00,
0x80, 0xff, 0xff, 0x00, 0x80, 0xff, 0xff, 0x01, 0xc0, 0xff, 0xff, 0x01,
0xc0, 0xff, 0xff, 0x03, 0xe0, 0xff, 0xff, 0x03, 0xe0, 0xff, 0xff, 0x07,
0xf0, 0xff, 0xff, 0x07, 0xf0, 0xff, 0xff, 0x0f, 0xf8, 0xff, 0xff, 0x0f,
0xf8, 0xff, 0xff, 0x1f, 0xfc, 0xff, 0xff, 0x1f, 0xfe, 0xff, 0xff, 0x3f,
0xfe, 0xff, 0xff, 0x3f, 0xfe, 0xff, 0xff, 0x3f, 0xfc, 0xff, 0xff, 0x1f,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};"</span>
image create bitmap ::tk::dialog::w3 -foreground black -data <span class=3D=
"hljs-string">"#define w3_width 32\n#define w3_height 32
static unsigned char w3_bits[] =3D {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0xc0, 0x03, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0xe0, 0x07, 0x00,
0x00, 0xe0, 0x07, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0xe0, 0x07, 0x00,
0x00, 0xc0, 0x03, 0x00, 0x00, 0xc0, 0x03, 0x00, 0x00, 0xc0, 0x03, 0x00,
0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0xc0, 0x03, 0x00,
0x00, 0xc0, 0x03, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};"</span>
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkMessa=
geBox</span> {args} {
    <span class=3D"hljs-keyword">global</span> tkPriv tcl_platform tk_stric=
tMotif
    <span class=3D"hljs-keyword">set</span> w tkPrivMsgBox
    <span class=3D"hljs-keyword">upvar</span> #<span class=3D"hljs-number">=
0</span> $w data
    <span class=3D"hljs-keyword">set</span> specs {
{-default <span class=3D"hljs-string">""</span> <span class=3D"hljs-string"=
>""</span> <span class=3D"hljs-string">""</span>}
{-icon <span class=3D"hljs-string">""</span> <span class=3D"hljs-string">""=
</span> <span class=3D"hljs-string">"info"</span>}
{-message <span class=3D"hljs-string">""</span> <span class=3D"hljs-string"=
>""</span> <span class=3D"hljs-string">""</span>}
{-parent <span class=3D"hljs-string">""</span> <span class=3D"hljs-string">=
""</span> .}
{-title <span class=3D"hljs-string">""</span> <span class=3D"hljs-string">"=
"</span> <span class=3D"hljs-string">" "</span>}
{-type <span class=3D"hljs-string">""</span> <span class=3D"hljs-string">""=
</span> <span class=3D"hljs-string">"ok"</span>}
}
    tclParseConfigSpec $w $specs <span class=3D"hljs-string">""</span> $arg=
s
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">l=
search</span> -exact {<span class=3D"hljs-keyword">info</span> warning <spa=
n class=3D"hljs-keyword">error</span> question} $data(-icon)] =3D=3D <span =
class=3D"hljs-number">-1</span>} then {
	<span class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">"bad=
 -icon value \"$data(-icon)\": must be error, info, question, or warning"</=
span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $tcl_platform(platform) <span class=3D"hljs-string">"mac=
intosh"</span>]} then {
	<span class=3D"hljs-keyword">switch</span> -- $data(-icon) {
	<span class=3D"hljs-string">"error"</span> {
		<span class=3D"hljs-keyword">set</span> data(-icon) <span class=3D"hljs-s=
tring">"stop"</span>
	    }
	<span class=3D"hljs-string">"warning"</span> {
		<span class=3D"hljs-keyword">set</span> data(-icon) <span class=3D"hljs-s=
tring">"caution"</span>
	    }
	<span class=3D"hljs-string">"info"</span> {
		<span class=3D"hljs-keyword">set</span> data(-icon) <span class=3D"hljs-s=
tring">"note"</span>
	    }
	}
    }
    <span class=3D"hljs-keyword">if</span> {![winfo exists $data(-parent)]}=
 then {
	<span class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">"bad=
 window path name \"$data(-parent)\""</span>
    }
    <span class=3D"hljs-keyword">switch</span> -- $data(-type) {
    abortretryignore {
	    <span class=3D"hljs-keyword">set</span> buttons {
{abort  -width <span class=3D"hljs-number">6</span> -text Abort -under <spa=
n class=3D"hljs-number">0</span>}
{retry  -width <span class=3D"hljs-number">6</span> -text Retry -under <spa=
n class=3D"hljs-number">0</span>}
{ignore -width <span class=3D"hljs-number">6</span> -text Ignore -under <sp=
an class=3D"hljs-number">0</span>}
}
	}
    ok {
	    <span class=3D"hljs-keyword">set</span> buttons {
{ok -width <span class=3D"hljs-number">6</span> -text OK -under <span class=
=3D"hljs-number">0</span>}
}
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
string</span> equal $data(-default) <span class=3D"hljs-string">""</span>]}=
 then {
		<span class=3D"hljs-keyword">set</span> data(-default) <span class=3D"hlj=
s-string">"ok"</span>
	    }
	}
    okcancel {
	    <span class=3D"hljs-keyword">set</span> buttons {
{ok     -width <span class=3D"hljs-number">6</span> -text OK     -under <sp=
an class=3D"hljs-number">0</span>}
{cancel -width <span class=3D"hljs-number">6</span> -text Cancel -under <sp=
an class=3D"hljs-number">0</span>}
}
	}
    retrycancel {
	    <span class=3D"hljs-keyword">set</span> buttons {
{retry  -width <span class=3D"hljs-number">6</span> -text Retry  -under <sp=
an class=3D"hljs-number">0</span>}
{cancel -width <span class=3D"hljs-number">6</span> -text Cancel -under <sp=
an class=3D"hljs-number">0</span>}
}
	}
    yesno {
	    <span class=3D"hljs-keyword">set</span> buttons {
{yes    -width <span class=3D"hljs-number">6</span> -text Yes -under <span =
class=3D"hljs-number">0</span>}
{no     -width <span class=3D"hljs-number">6</span> -text No  -under <span =
class=3D"hljs-number">0</span>}
}
	}
    yesnocancel {
	    <span class=3D"hljs-keyword">set</span> buttons {
{yes    -width <span class=3D"hljs-number">6</span> -text Yes -under <span =
class=3D"hljs-number">0</span>}
{no     -width <span class=3D"hljs-number">6</span> -text No  -under <span =
class=3D"hljs-number">0</span>}
{cancel -width <span class=3D"hljs-number">6</span> -text Cancel -under <sp=
an class=3D"hljs-number">0</span>}
}
	}
    default {
	    <span class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">=
"bad -type value \"$data(-type)\": must be abortretryignore, ok, okcancel, =
retrycancel, yesno, or yesnocancel"</span>
	}
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare $data(-default) <span class=3D"hljs-string">""</span>]=
} then {
	<span class=3D"hljs-keyword">set</span> valid <span class=3D"hljs-number">=
0</span>
	<span class=3D"hljs-keyword">foreach</span> btn $buttons {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
string</span> equal [<span class=3D"hljs-keyword">lindex</span> $btn <span =
class=3D"hljs-number">0</span>] $data(-default)]} then {
		<span class=3D"hljs-keyword">set</span> valid <span class=3D"hljs-number"=
>1</span>
		<span class=3D"hljs-keyword">break</span>
	    }
	}
	<span class=3D"hljs-keyword">if</span> {!$valid} then {
	    <span class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">=
"invalid default button \"$data(-default)\""</span>
	}
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare $data(-parent) .]} then {
	<span class=3D"hljs-keyword">set</span> w $data(-parent).__tk__messagebox
    } else {
	<span class=3D"hljs-keyword">set</span> w .__tk__messagebox
    }
    <span class=3D"hljs-keyword">catch</span> {destroy $w}
    toplevel $w -class Dialog
    wm title $w $data(-title)
    wm iconname $w Dialog
    wm protocol $w WM_DELETE_WINDOW { }
    <span class=3D"hljs-keyword">if</span> {[winfo viewable [winfo toplevel=
 $data(-parent)]]} then {
	wm transient $w $data(-parent)
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $tcl_platform(platform) <span class=3D"hljs-string">"mac=
intosh"</span>]} then {
	unsupported1 style $w dBoxProc
    }
    frame $w.bot
    pack $w.bot -side bottom -fill both
    frame $w.top
    pack $w.top -side top -fill both -expand <span class=3D"hljs-number">1<=
/span>
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare $tcl_platform(platform) <span class=3D"hljs-string">"m=
acintosh"</span>]} then {
	$w.bot configure -relief raised -bd <span class=3D"hljs-number">1</span>
	$w.top configure -relief raised -bd <span class=3D"hljs-number">1</span>
    }
    option add *Dialog.msg.wrapLength <span class=3D"hljs-number">3</span>i=
 widgetDefault
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $tcl_platform(platform) <span class=3D"hljs-string">"mac=
intosh"</span>]} then {
	option add *Dialog.msg.font system widgetDefault
    } else {
	option add *Dialog.msg.font {Times <span class=3D"hljs-number">18</span>} =
widgetDefault
    }
    label $w.msg -anchor nw -justify left -text $data(-message)
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare $data(-icon) <span class=3D"hljs-string">""</span>]} t=
hen {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> equal $tcl_platform(platform) <span class=3D"hljs-string">"macint=
osh"</span>] ||([winfo depth $w] &lt; <span class=3D"hljs-number">4</span>)=
 || $tk_strictMotif} then {
	    label $w.bitmap -bitmap $data(-icon)
	} else {
	    canvas $w.bitmap -width <span class=3D"hljs-number">32</span> -height =
<span class=3D"hljs-number">32</span> -highlightthickness <span class=3D"hl=
js-number">0</span>
	    <span class=3D"hljs-keyword">switch</span> $data(-icon) {
	    <span class=3D"hljs-keyword">error</span> {
		    $w.bitmap create oval <span class=3D"hljs-number">0</span> <span clas=
s=3D"hljs-number">0</span> <span class=3D"hljs-number">31</span> <span clas=
s=3D"hljs-number">31</span> -fill red -outline black
		    $w.bitmap create line <span class=3D"hljs-number">9</span> <span clas=
s=3D"hljs-number">9</span> <span class=3D"hljs-number">23</span> <span clas=
s=3D"hljs-number">23</span> -fill white -width <span class=3D"hljs-number">=
4</span>
		    $w.bitmap create line <span class=3D"hljs-number">9</span> <span clas=
s=3D"hljs-number">23</span> <span class=3D"hljs-number">23</span> <span cla=
ss=3D"hljs-number">9</span> -fill white -width <span class=3D"hljs-number">=
4</span>
		}
	    <span class=3D"hljs-keyword">info</span> {
		    $w.bitmap create image <span class=3D"hljs-number">0</span> <span cla=
ss=3D"hljs-number">0</span> -anchor nw -image ::tk::dialog::b1
		    $w.bitmap create image <span class=3D"hljs-number">0</span> <span cla=
ss=3D"hljs-number">0</span> -anchor nw -image ::tk::dialog::b2
		    $w.bitmap create image <span class=3D"hljs-number">0</span> <span cla=
ss=3D"hljs-number">0</span> -anchor nw -image ::tk::dialog::i
		}
	    question {
		    $w.bitmap create image <span class=3D"hljs-number">0</span> <span cla=
ss=3D"hljs-number">0</span> -anchor nw -image ::tk::dialog::b1
		    $w.bitmap create image <span class=3D"hljs-number">0</span> <span cla=
ss=3D"hljs-number">0</span> -anchor nw -image ::tk::dialog::b2
		    $w.bitmap create image <span class=3D"hljs-number">0</span> <span cla=
ss=3D"hljs-number">0</span> -anchor nw -image ::tk::dialog::q
		}
	    default {
		    $w.bitmap create image <span class=3D"hljs-number">0</span> <span cla=
ss=3D"hljs-number">0</span> -anchor nw -image ::tk::dialog::w1
		    $w.bitmap create image <span class=3D"hljs-number">0</span> <span cla=
ss=3D"hljs-number">0</span> -anchor nw -image ::tk::dialog::w2
		    $w.bitmap create image <span class=3D"hljs-number">0</span> <span cla=
ss=3D"hljs-number">0</span> -anchor nw -image ::tk::dialog::w3
		}
	    }
	}
    }
    grid $w.bitmap $w.msg -in $w.top -sticky news -padx <span class=3D"hljs=
-number">2</span>m -pady <span class=3D"hljs-number">2</span>m
    grid columnconfigure $w.top <span class=3D"hljs-number">1</span> -weigh=
t <span class=3D"hljs-number">1</span>
    grid rowconfigure $w.top <span class=3D"hljs-number">0</span> -weight <=
span class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> i <span class=3D"hljs-number">0=
</span>
    <span class=3D"hljs-keyword">foreach</span> but $buttons {
	<span class=3D"hljs-keyword">set</span> name [<span class=3D"hljs-keyword"=
>lindex</span> $but <span class=3D"hljs-number">0</span>]
	<span class=3D"hljs-keyword">set</span> opts [<span class=3D"hljs-keyword"=
>lrange</span> $but <span class=3D"hljs-number">1</span> end]
	<span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">lle=
ngth</span> $opts]} then {
	    <span class=3D"hljs-keyword">set</span> capName [<span class=3D"hljs-k=
eyword">string</span> toupper $name <span class=3D"hljs-number">0</span>]
	    <span class=3D"hljs-keyword">set</span> opts [<span class=3D"hljs-keyw=
ord">list</span> -text $capName]
	}
	<span class=3D"hljs-keyword">eval</span> button [<span class=3D"hljs-keywo=
rd">list</span> $w.$name] $opts [<span class=3D"hljs-keyword">list</span> -=
command [<span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keywo=
rd">set</span> tkPriv(button) $name]]
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> equal $name $data(-default)]} then {
	    $w.$name configure -default active
	}
	pack $w.$name -in $w.bot -side left -expand <span class=3D"hljs-number">1<=
/span> -padx <span class=3D"hljs-number">3</span>m -pady <span class=3D"hlj=
s-number">2</span>m
	<span class=3D"hljs-keyword">set</span> underIdx [$w.$name cget -under]
	<span class=3D"hljs-keyword">if</span> {$underIdx &gt;=3D <span class=3D"h=
ljs-number">0</span>} then {
	    <span class=3D"hljs-keyword">set</span> key [<span class=3D"hljs-keywo=
rd">string</span> index [$w.$name cget -text] $underIdx]
	    bind $w &lt;Alt-[<span class=3D"hljs-keyword">string</span> tolower $k=
ey]&gt; [<span class=3D"hljs-keyword">list</span> $w.$name invoke]
	    bind $w &lt;Alt-[<span class=3D"hljs-keyword">string</span> toupper $k=
ey]&gt; [<span class=3D"hljs-keyword">list</span> $w.$name invoke]
	}
	<span class=3D"hljs-keyword">incr</span> i
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare {} $data(-default)]} then {
	bind $w &lt;FocusIn&gt; {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
string</span> equal Button [winfo class %W]]} then {
		%W configure -default active
	    }
	}
	bind $w &lt;FocusOut&gt; {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
string</span> equal Button [winfo class %W]]} then {
		%W configure -default normal
	    }
	}
    }
    bind $w &lt;Return&gt; {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> equal Button [winfo class %W]]} then {
	    tkButtonInvoke %W
	}
    }
    ::tk::PlaceWindow $w widget $data(-parent)
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare $data(-default) <span class=3D"hljs-string">""</span>]=
} then {
	<span class=3D"hljs-keyword">set</span> focus $w.$data(-default)
    } else {
	<span class=3D"hljs-keyword">set</span> focus $w
    }
    ::tk::SetFocusGrab $w $focus
    tkwait <span class=3D"hljs-keyword">variable</span> tkPriv(button)
    ::tk::RestoreFocusGrab $w $focus
    <span class=3D"hljs-keyword">return</span> $tkPriv(button)
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tk_menu=
Bar</span> args { }
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tk_bind=
ForTraversal</span> args { }
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tk_opti=
onMenu</span> {w varName firstValue args} {
    <span class=3D"hljs-keyword">upvar</span> #<span class=3D"hljs-number">=
0</span> $varName var
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists var]} then {
	<span class=3D"hljs-keyword">set</span> var $firstValue
    }
    menubutton $w -textvariable $varName -indicatoron <span class=3D"hljs-n=
umber">1</span> -menu $w.menu -relief raised -bd <span class=3D"hljs-number=
">2</span> -highlightthickness <span class=3D"hljs-number">2</span> -anchor=
 c -direction <span class=3D"hljs-keyword">flush</span>
    menu $w.menu -tearoff <span class=3D"hljs-number">0</span>
    $w.menu add radiobutton -label $firstValue -<span class=3D"hljs-keyword=
">variable</span> $varName
    <span class=3D"hljs-keyword">foreach</span> i $args {
	$w.menu add radiobutton -label $i -<span class=3D"hljs-keyword">variable</=
span> $varName
    }
    <span class=3D"hljs-keyword">return</span> $w.menu
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tk_setP=
alette</span> {args} {
    <span class=3D"hljs-keyword">if</span> {[winfo depth .] =3D=3D <span cl=
ass=3D"hljs-number">1</span>} then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">global</span> tkPalette
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">l=
length</span> $args] =3D=3D <span class=3D"hljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> new(background) [<span class=3D"hl=
js-keyword">lindex</span> $args <span class=3D"hljs-number">0</span>]
    } else {
	<span class=3D"hljs-keyword">array</span> <span class=3D"hljs-keyword">set=
</span> new $args
    }
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists new(background)]} then {
	<span class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">"mus=
t specify a background color"</span>
    }
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists new(foreground)]} then {
	<span class=3D"hljs-keyword">set</span> new(foreground) black
    }
    <span class=3D"hljs-keyword">set</span> bg [winfo rgb . $new(background=
)]
    <span class=3D"hljs-keyword">set</span> fg [winfo rgb . $new(foreground=
)]
    <span class=3D"hljs-keyword">set</span> darkerBg [<span class=3D"hljs-k=
eyword">format</span> #%<span class=3D"hljs-number">02</span>x%<span class=
=3D"hljs-number">02</span>x%<span class=3D"hljs-number">02</span>x [<span c=
lass=3D"hljs-keyword">expr</span> {(<span class=3D"hljs-number">9</span>*[<=
span class=3D"hljs-keyword">lindex</span> $bg <span class=3D"hljs-number">0=
</span>]) /<span class=3D"hljs-number">2560</span>}] [<span class=3D"hljs-k=
eyword">expr</span> {(<span class=3D"hljs-number">9</span>*[<span class=3D"=
hljs-keyword">lindex</span> $bg <span class=3D"hljs-number">1</span>]) /<sp=
an class=3D"hljs-number">2560</span>}] [<span class=3D"hljs-keyword">expr</=
span> {(<span class=3D"hljs-number">9</span>*[<span class=3D"hljs-keyword">=
lindex</span> $bg <span class=3D"hljs-number">2</span>]) /<span class=3D"hl=
js-number">2560</span>}]]
    <span class=3D"hljs-keyword">foreach</span> i {activeForeground insertB=
ackground selectForeground highlightColor} {
	<span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">inf=
o</span> exists new($i)]} then {
	    <span class=3D"hljs-keyword">set</span> new($i) $new(foreground)
	}
    }
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists new(disabledForeground)]} then {
	<span class=3D"hljs-keyword">set</span> new(disabledForeground) [<span cla=
ss=3D"hljs-keyword">format</span> #%<span class=3D"hljs-number">02</span>x%=
<span class=3D"hljs-number">02</span>x%<span class=3D"hljs-number">02</span=
>x [<span class=3D"hljs-keyword">expr</span> {(<span class=3D"hljs-number">=
3</span>*[<span class=3D"hljs-keyword">lindex</span> $bg <span class=3D"hlj=
s-number">0</span>] + [<span class=3D"hljs-keyword">lindex</span> $fg <span=
 class=3D"hljs-number">0</span>]) /<span class=3D"hljs-number">1024</span>}=
] [<span class=3D"hljs-keyword">expr</span> {(<span class=3D"hljs-number">3=
</span>*[<span class=3D"hljs-keyword">lindex</span> $bg <span class=3D"hljs=
-number">1</span>] + [<span class=3D"hljs-keyword">lindex</span> $fg <span =
class=3D"hljs-number">1</span>]) /<span class=3D"hljs-number">1024</span>}]=
 [<span class=3D"hljs-keyword">expr</span> {(<span class=3D"hljs-number">3<=
/span>*[<span class=3D"hljs-keyword">lindex</span> $bg <span class=3D"hljs-=
number">2</span>] + [<span class=3D"hljs-keyword">lindex</span> $fg <span c=
lass=3D"hljs-number">2</span>]) /<span class=3D"hljs-number">1024</span>}]]
    }
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists new(highlightBackground)]} then {
	<span class=3D"hljs-keyword">set</span> new(highlightBackground) $new(back=
ground)
    }
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists new(activeBackground)]} then {
	<span class=3D"hljs-keyword">foreach</span> i {<span class=3D"hljs-number"=
>0</span> <span class=3D"hljs-number">1</span> <span class=3D"hljs-number">=
2</span>} {
	    <span class=3D"hljs-keyword">set</span> light($i) [<span class=3D"hljs=
-keyword">expr</span> {[<span class=3D"hljs-keyword">lindex</span> $bg $i]/=
<span class=3D"hljs-number">256</span>}]
	    <span class=3D"hljs-keyword">set</span> inc1 [<span class=3D"hljs-keyw=
ord">expr</span> {($light($i)*<span class=3D"hljs-number">15</span>) /<span=
 class=3D"hljs-number">100</span>}]
	    <span class=3D"hljs-keyword">set</span> inc2 [<span class=3D"hljs-keyw=
ord">expr</span> {(<span class=3D"hljs-number">255</span>-$light($i)) /<spa=
n class=3D"hljs-number">3</span>}]
	    <span class=3D"hljs-keyword">if</span> {$inc1 &gt; $inc2} then {
		<span class=3D"hljs-keyword">incr</span> light($i) $inc1
	    } else {
		<span class=3D"hljs-keyword">incr</span> light($i) $inc2
	    }
	    <span class=3D"hljs-keyword">if</span> {$light($i) &gt; <span class=3D=
"hljs-number">255</span>} then {
		<span class=3D"hljs-keyword">set</span> light($i) <span class=3D"hljs-num=
ber">255</span>
	    }
	}
	<span class=3D"hljs-keyword">set</span> new(activeBackground) [<span class=
=3D"hljs-keyword">format</span> #%<span class=3D"hljs-number">02</span>x%<s=
pan class=3D"hljs-number">02</span>x%<span class=3D"hljs-number">02</span>x=
 $light(0) $light(1) $light(2)]
    }
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists new(selectBackground)]} then {
	<span class=3D"hljs-keyword">set</span> new(selectBackground) $darkerBg
    }
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists new(troughColor)]} then {
	<span class=3D"hljs-keyword">set</span> new(troughColor) $darkerBg
    }
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists new(selectColor)]} then {
	<span class=3D"hljs-keyword">set</span> new(selectColor) #b03060
    }
    toplevel .___tk_set_palette
    wm withdraw .___tk_set_palette
    <span class=3D"hljs-keyword">foreach</span> q {button canvas checkbutto=
n entry frame label listbox menubutton menu message radiobutton scale scrol=
lbar text} {
	$q .___tk_set_palette.$q
    }
    <span class=3D"hljs-keyword">eval</span> [tkRecolorTree . new]
    <span class=3D"hljs-keyword">catch</span> {destroy .___tk_set_palette}
    <span class=3D"hljs-keyword">foreach</span> option [<span class=3D"hljs=
-keyword">array</span> names new] {
	option add *$option $new($option) widgetDefault
    }
    <span class=3D"hljs-keyword">array</span> <span class=3D"hljs-keyword">=
set</span> tkPalette [<span class=3D"hljs-keyword">array</span> get new]
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkRecol=
orTree</span> {w colors} {
    <span class=3D"hljs-keyword">global</span> tkPalette
    <span class=3D"hljs-keyword">upvar</span> $colors c
    <span class=3D"hljs-keyword">set</span> result {}
    <span class=3D"hljs-keyword">foreach</span> dbOption [<span class=3D"hl=
js-keyword">array</span> names c] {
	<span class=3D"hljs-keyword">set</span> option -[<span class=3D"hljs-keywo=
rd">string</span> tolower $dbOption]
	<span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">cat=
ch</span> {$w config $option} value]} then {
	    <span class=3D"hljs-keyword">set</span> defaultcolor [option get $w $d=
bOption widgetDefault]
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
string</span> match {} $defaultcolor]} then {
		<span class=3D"hljs-keyword">set</span> defaultcolor [winfo rgb . [<span =
class=3D"hljs-keyword">lindex</span> $value <span class=3D"hljs-number">3</=
span>]]
	    } else {
		<span class=3D"hljs-keyword">set</span> defaultcolor [winfo rgb . $defaul=
tcolor]
	    }
	    <span class=3D"hljs-keyword">set</span> chosencolor [winfo rgb . [<spa=
n class=3D"hljs-keyword">lindex</span> $value <span class=3D"hljs-number">4=
</span>]]
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
string</span> match $defaultcolor $chosencolor]} then {
		<span class=3D"hljs-keyword">append</span> result <span class=3D"hljs-str=
ing">";\noption add [list *[winfo class $w].$dbOption $c($dbOption) 60]"</s=
pan>
		$w configure $option $c($dbOption)
	    }
	}
    }
    <span class=3D"hljs-keyword">foreach</span> child [winfo children $w] {
	<span class=3D"hljs-keyword">append</span> result <span class=3D"hljs-stri=
ng">";\n[tkRecolorTree $child c]"</span>
    }
    <span class=3D"hljs-keyword">return</span> $result
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkDarke=
n</span> {color percent} {
    <span class=3D"hljs-keyword">foreach</span> {red green blue} [winfo rgb=
 . $color] {
	<span class=3D"hljs-keyword">set</span> red [<span class=3D"hljs-keyword">=
expr</span> {($red/<span class=3D"hljs-number">256</span>) *$percent/<span =
class=3D"hljs-number">100</span>}]
	<span class=3D"hljs-keyword">set</span> green [<span class=3D"hljs-keyword=
">expr</span> {($green/<span class=3D"hljs-number">256</span>) *$percent/<s=
pan class=3D"hljs-number">100</span>}]
	<span class=3D"hljs-keyword">set</span> blue [<span class=3D"hljs-keyword"=
>expr</span> {($blue/<span class=3D"hljs-number">256</span>) *$percent/<spa=
n class=3D"hljs-number">100</span>}]
	<span class=3D"hljs-keyword">break</span>
    }
    <span class=3D"hljs-keyword">if</span> {$red &gt; <span class=3D"hljs-n=
umber">255</span>} then {
	<span class=3D"hljs-keyword">set</span> red <span class=3D"hljs-number">25=
5</span>
    }
    <span class=3D"hljs-keyword">if</span> {$green &gt; <span class=3D"hljs=
-number">255</span>} then {
	<span class=3D"hljs-keyword">set</span> green <span class=3D"hljs-number">=
255</span>
    }
    <span class=3D"hljs-keyword">if</span> {$blue &gt; <span class=3D"hljs-=
number">255</span>} then {
	<span class=3D"hljs-keyword">set</span> blue <span class=3D"hljs-number">2=
55</span>
    }
    <span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keyword=
">format</span> <span class=3D"hljs-string">"#%02x%02x%02x"</span> $red $gr=
een $blue]
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tk_bisq=
ue</span> {} {
    tk_setPalette activeBackground #e6ceb1 activeForeground black backgroun=
d #ffe4c4 disabledForeground #b0b0b0 foreground black highlightBackground #=
ffe4c4 highlightColor black insertBackground black selectColor #b03060 sele=
ctBackground #e6ceb1 selectForeground black troughColor #cdb79e
}
<span class=3D"hljs-keyword">package</span> require opt <span class=3D"hljs=
-number">0.4</span><span class=3D"hljs-number">.1</span>

<span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keyword">=
eval</span> ::<span class=3D"hljs-keyword">safe</span> {
    <span class=3D"hljs-keyword">variable</span> tkSafeId <span class=3D"hl=
js-number">0</span>

    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::s=
afe::tkInterpInit</span> {slave argv} {
	<span class=3D"hljs-keyword">global</span> env tk_library
	allowTk $slave $argv
	::<span class=3D"hljs-keyword">interp</span> <span class=3D"hljs-keyword">=
eval</span> $slave [<span class=3D"hljs-keyword">list</span> <span class=3D=
"hljs-keyword">set</span> tk_library [::<span class=3D"hljs-keyword">safe</=
span>::interpAddToAccessPath $slave $tk_library]]
	<span class=3D"hljs-keyword">return</span> $slave
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::s=
afe::loadTk</span> {} {}
    ::tcl::OptProc loadTk {
{slave -<span class=3D"hljs-keyword">interp</span> <span class=3D"hljs-stri=
ng">"name of the slave interpreter"</span>}
{-use  -windowId {} <span class=3D"hljs-string">"window Id to use (new topl=
evel otherwise)"</span>}
{-display -displayName {} <span class=3D"hljs-string">"display name to use =
(current one otherwise)"</span>}
} {
<span class=3D"hljs-keyword">set</span> displayGiven [::tcl::OptProcArgGive=
n <span class=3D"hljs-string">"-display"</span>]
<span class=3D"hljs-keyword">if</span> {!$displayGiven} {
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">catch=
</span> {<span class=3D"hljs-keyword">set</span> display [winfo screen .]}]=
} {
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info<=
/span> exists ::env(DISPLAY)]} {
<span class=3D"hljs-keyword">set</span> display $::env(DISPLAY)
} else {
Log $slave <span class=3D"hljs-string">"no winfo screen . nor env(DISPLAY)"=
</span> WARNING
<span class=3D"hljs-keyword">set</span> display <span class=3D"hljs-string"=
>":0.0"</span>
}
}
}
<span class=3D"hljs-keyword">if</span> {![::tcl::OptProcArgGiven <span clas=
s=3D"hljs-string">"-use"</span>]} {
::tcl::Lassign [tkTopLevel $slave $display] w use
Set [DeleteHookName $slave] [<span class=3D"hljs-keyword">list</span> tkDel=
ete {} $w]
} else {
Set [DeleteHookName $slave] [<span class=3D"hljs-keyword">list</span> disal=
lowTk]
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">strin=
g</span> match <span class=3D"hljs-string">".*"</span> $use]} {
<span class=3D"hljs-keyword">set</span> windowName $use
<span class=3D"hljs-keyword">set</span> use [winfo id $windowName]
<span class=3D"hljs-keyword">set</span> nDisplay [winfo screen $windowName]
} else {
<span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">catc=
h</span> {winfo pathname $use} name]} {
<span class=3D"hljs-keyword">set</span> nDisplay [winfo screen $name]
} else {
<span class=3D"hljs-keyword">set</span> nDisplay $display
}
}
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">strin=
g</span> compare $nDisplay $display]} {
<span class=3D"hljs-keyword">if</span> {$displayGiven} {
<span class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">"conf=
licting -display $display and -use\
			$use -&gt; $nDisplay"</span>
} else {
<span class=3D"hljs-keyword">set</span> display $nDisplay
}
}
}
tkInterpInit $slave [<span class=3D"hljs-keyword">list</span> <span class=
=3D"hljs-string">"-use"</span> $use <span class=3D"hljs-string">"-display"<=
/span> $display]
<span class=3D"hljs-keyword">load</span> {} Tk $slave
<span class=3D"hljs-keyword">return</span> $slave
}
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::s=
afe::TkInit</span> {interpPath} {
	<span class=3D"hljs-keyword">variable</span> tkInit
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info=
</span> exists tkInit($interpPath)]} then {
	    <span class=3D"hljs-keyword">set</span> value $tkInit($interpPath)
	    Log $interpPath <span class=3D"hljs-string">"TkInit called, returning =
\"$value\""</span> NOTICE
	    <span class=3D"hljs-keyword">return</span> $value
	} else {
	    Log $interpPath <span class=3D"hljs-string">"TkInit called for interp =
with clearance: preventing Tk init"</span> ERROR
	    <span class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">=
"not allowed"</span>
	}
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::s=
afe::allowTk</span> {interpPath argv} {
	<span class=3D"hljs-keyword">variable</span> tkInit
	<span class=3D"hljs-keyword">set</span> tkInit($interpPath) $argv
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::s=
afe::disallowTk</span> {interpPath} {
	<span class=3D"hljs-keyword">variable</span> tkInit
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info=
</span> exists tkInit($interpPath)]} then {
	    <span class=3D"hljs-keyword">unset</span> tkInit($interpPath)
	}
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::s=
afe::tkDelete</span> {W window slave} {
	Log $slave <span class=3D"hljs-string">"Called tkDelete $W $window"</span>=
 NOTICE
	<span class=3D"hljs-keyword">if</span> {[::<span class=3D"hljs-keyword">in=
terp</span> exists $slave]} then {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
catch</span> {::<span class=3D"hljs-keyword">safe</span>::interpDelete $sla=
ve} msg]} then {
		Log $slave <span class=3D"hljs-string">"Deletion error : $msg"</span>
	    }
	}
	<span class=3D"hljs-keyword">if</span> {[winfo exists $window]} then {
	    Log $slave <span class=3D"hljs-string">"Destroy toplevel $window"</spa=
n> NOTICE
	    destroy $window
	}
	disallowTk $slave
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::s=
afe::tkTopLevel</span> {slave display} {
	<span class=3D"hljs-keyword">variable</span> tkSafeId
	<span class=3D"hljs-keyword">incr</span> tkSafeId
	<span class=3D"hljs-keyword">set</span> w <span class=3D"hljs-string">".sa=
fe$tkSafeId"</span>
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">catc=
h</span> {toplevel $w -screen $display -class SafeTk} msg]} then {
	    <span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-k=
eyword">error</span> <span class=3D"hljs-string">"Unable to create toplevel=
 for safe slave \"$slave\" ($msg)"</span>
	}
	Log $slave <span class=3D"hljs-string">"New toplevel $w"</span> NOTICE
	<span class=3D"hljs-keyword">set</span> msg <span class=3D"hljs-string">"U=
ntrusted Tcl applet ($slave)"</span>
	wm title $w $msg
	<span class=3D"hljs-keyword">set</span> wc $w.fc
	frame $wc -bg red -borderwidth <span class=3D"hljs-number">3</span> -relie=
f ridge
	bindtags $wc [<span class=3D"hljs-keyword">concat</span> Safe$wc [bindtags=
 $wc]]
	bind Safe$wc &lt;Destroy&gt; [<span class=3D"hljs-keyword">list</span> ::<=
span class=3D"hljs-keyword">safe</span>::tkDelete %W $w $slave]
	label $wc.l -text $msg -padx <span class=3D"hljs-number">2</span> -pady <s=
pan class=3D"hljs-number">0</span> -anchor w
	frame $wc.fb -bd <span class=3D"hljs-number">0</span>
	button $wc.fb.b -text <span class=3D"hljs-string">"Delete"</span> -bd <spa=
n class=3D"hljs-number">1</span> -padx <span class=3D"hljs-number">2</span>=
 -pady <span class=3D"hljs-number">0</span> -highlightthickness <span class=
=3D"hljs-number">0</span> -command [<span class=3D"hljs-keyword">list</span=
> ::<span class=3D"hljs-keyword">safe</span>::tkDelete $w $w $slave]
	pack $wc.fb.b -side right -fill both
	pack $wc.fb -side right -fill both -expand <span class=3D"hljs-number">1</=
span>
	pack $wc.l -side left -fill both -expand <span class=3D"hljs-number">1</sp=
an>
	pack $wc -side bottom -fill x
	frame $w.c -container <span class=3D"hljs-number">1</span>
	pack $w.c -fill both -expand <span class=3D"hljs-number">1</span>
	<span class=3D"hljs-keyword">list</span> $w [winfo id $w.c]
    }
}
bind Scale &lt;Enter&gt; {
    <span class=3D"hljs-keyword">if</span> {$tk_strictMotif} then {
	<span class=3D"hljs-keyword">set</span> tkPriv(activeBg) [%W cget -activeb=
ackground]
	%W config -activebackground [%W cget -background]
    }
    tkScaleActivate %W %x %y
}
bind Scale &lt;Motion&gt; {
    tkScaleActivate %W %x %y
}
bind Scale &lt;Leave&gt; {
    <span class=3D"hljs-keyword">if</span> {$tk_strictMotif} then {
	%W config -activebackground $tkPriv(activeBg)
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal [%W cget -state] <span class=3D"hljs-string">"active"</s=
pan>]} then {
	%W configure -state normal
    }
}
bind Scale &lt;<span class=3D"hljs-number">1</span>&gt; {
    tkScaleButtonDown %W %x %y
}
bind Scale &lt;B1-Motion&gt; {
    tkScaleDrag %W %x %y
}
bind Scale &lt;B1-Leave&gt; {}
bind Scale &lt;B1-Enter&gt; {}
bind Scale &lt;ButtonRelease<span class=3D"hljs-number">-1</span>&gt; {
    tkCancelRepeat
    tkScaleEndDrag %W
    tkScaleActivate %W %x %y
}
bind Scale &lt;<span class=3D"hljs-number">2</span>&gt; {
    tkScaleButton2Down %W %x %y
}
bind Scale &lt;B2-Motion&gt; {
    tkScaleDrag %W %x %y
}
bind Scale &lt;B2-Leave&gt; {}
bind Scale &lt;B2-Enter&gt; {}
bind Scale &lt;ButtonRelease<span class=3D"hljs-number">-2</span>&gt; {
    tkCancelRepeat
    tkScaleEndDrag %W
    tkScaleActivate %W %x %y
}
bind Scale &lt;Control<span class=3D"hljs-number">-1</span>&gt; {
    tkScaleControlPress %W %x %y
}
bind Scale &lt;Up&gt; {
    tkScaleIncrement %W up little noRepeat
}
bind Scale &lt;Down&gt; {
    tkScaleIncrement %W down little noRepeat
}
bind Scale &lt;Left&gt; {
    tkScaleIncrement %W up little noRepeat
}
bind Scale &lt;Right&gt; {
    tkScaleIncrement %W down little noRepeat
}
bind Scale &lt;Control-Up&gt; {
    tkScaleIncrement %W up big noRepeat
}
bind Scale &lt;Control-Down&gt; {
    tkScaleIncrement %W down big noRepeat
}
bind Scale &lt;Control-Left&gt; {
    tkScaleIncrement %W up big noRepeat
}
bind Scale &lt;Control-Right&gt; {
    tkScaleIncrement %W down big noRepeat
}
bind Scale &lt;Home&gt; {
    %W <span class=3D"hljs-keyword">set</span> [%W cget -from]
}
bind Scale &lt;End&gt; {
    %W <span class=3D"hljs-keyword">set</span> [%W cget -to]
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkScale=
Activate</span> {w x y} {
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal [$w cget -state] <span class=3D"hljs-string">"disabled"<=
/span>]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal [$w identify $x $y] <span class=3D"hljs-string">"slider"=
</span>]} then {
	<span class=3D"hljs-keyword">set</span> state active
    } else {
	<span class=3D"hljs-keyword">set</span> state normal
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare [$w cget -state] $state]} then {
	$w configure -state $state
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkScale=
ButtonDown</span> {w x y} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">set</span> tkPriv(dragging) <span class=3D=
"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> el [$w identify $x $y]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $el <span class=3D"hljs-string">"trough1"</span>]} then =
{
	tkScaleIncrement $w up little initial
    } elseif {[<span class=3D"hljs-keyword">string</span> equal $el <span c=
lass=3D"hljs-string">"trough2"</span>]} {
	tkScaleIncrement $w down little initial
    } elseif {[<span class=3D"hljs-keyword">string</span> equal $el <span c=
lass=3D"hljs-string">"slider"</span>]} {
	<span class=3D"hljs-keyword">set</span> tkPriv(dragging) <span class=3D"hl=
js-number">1</span>
	<span class=3D"hljs-keyword">set</span> tkPriv(initValue) [$w get]
	<span class=3D"hljs-keyword">set</span> coords [$w coords]
	<span class=3D"hljs-keyword">set</span> tkPriv(deltaX) [<span class=3D"hlj=
s-keyword">expr</span> {$x - [<span class=3D"hljs-keyword">lindex</span> $c=
oords <span class=3D"hljs-number">0</span>]}]
	<span class=3D"hljs-keyword">set</span> tkPriv(deltaY) [<span class=3D"hlj=
s-keyword">expr</span> {$y - [<span class=3D"hljs-keyword">lindex</span> $c=
oords <span class=3D"hljs-number">1</span>]}]
	$w configure -sliderrelief sunken
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkScale=
Drag</span> {w x y} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">if</span> {!$tkPriv(dragging)} then {
	<span class=3D"hljs-keyword">return</span>
    }
    $w <span class=3D"hljs-keyword">set</span> [$w get [<span class=3D"hljs=
-keyword">expr</span> {$x-$tkPriv(deltaX)}] [<span class=3D"hljs-keyword">e=
xpr</span> {$y-$tkPriv(deltaY)}]]
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkScale=
EndDrag</span> {w} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">set</span> tkPriv(dragging) <span class=3D=
"hljs-number">0</span>
    $w configure -sliderrelief raised
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkScale=
Increment</span> {w dir big repeat} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">if</span> {![winfo exists $w]} then <span =
class=3D"hljs-keyword">return</span>
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $big <span class=3D"hljs-string">"big"</span>]} then {
	<span class=3D"hljs-keyword">set</span> inc [$w cget -bigincrement]
	<span class=3D"hljs-keyword">if</span> {$inc =3D=3D <span class=3D"hljs-nu=
mber">0</span>} then {
	    <span class=3D"hljs-keyword">set</span> inc [<span class=3D"hljs-keywo=
rd">expr</span> {abs([$w cget -to] - [$w cget -from]) /<span class=3D"hljs-=
number">10.0</span>}]
	}
	<span class=3D"hljs-keyword">if</span> {$inc &lt; [$w cget -resolution]} t=
hen {
	    <span class=3D"hljs-keyword">set</span> inc [$w cget -resolution]
	}
    } else {
	<span class=3D"hljs-keyword">set</span> inc [$w cget -resolution]
    }
    <span class=3D"hljs-keyword">if</span> {([$w cget -from] &gt; [$w cget =
-to]) ^ [<span class=3D"hljs-keyword">string</span> equal $dir <span class=
=3D"hljs-string">"up"</span>]} then {
	<span class=3D"hljs-keyword">set</span> inc [<span class=3D"hljs-keyword">=
expr</span> {-$inc}]
    }
    $w <span class=3D"hljs-keyword">set</span> [<span class=3D"hljs-keyword=
">expr</span> {[$w get] + $inc}]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $repeat <span class=3D"hljs-string">"again"</span>]} the=
n {
	<span class=3D"hljs-keyword">set</span> tkPriv(afterId) [<span class=3D"hl=
js-keyword">after</span> [$w cget -repeatinterval] [<span class=3D"hljs-key=
word">list</span> tkScaleIncrement $w $dir $big again]]
    } elseif {[<span class=3D"hljs-keyword">string</span> equal $repeat <sp=
an class=3D"hljs-string">"initial"</span>]} {
	<span class=3D"hljs-keyword">set</span> delay [$w cget -repeatdelay]
	<span class=3D"hljs-keyword">if</span> {$delay &gt; <span class=3D"hljs-nu=
mber">0</span>} then {
	    <span class=3D"hljs-keyword">set</span> tkPriv(afterId) [<span class=
=3D"hljs-keyword">after</span> $delay [<span class=3D"hljs-keyword">list</s=
pan> tkScaleIncrement $w $dir $big again]]
	}
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkScale=
ControlPress</span> {w x y} {
    <span class=3D"hljs-keyword">set</span> el [$w identify $x $y]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $el <span class=3D"hljs-string">"trough1"</span>]} then =
{
	$w <span class=3D"hljs-keyword">set</span> [$w cget -from]
    } elseif {[<span class=3D"hljs-keyword">string</span> equal $el <span c=
lass=3D"hljs-string">"trough2"</span>]} {
	$w <span class=3D"hljs-keyword">set</span> [$w cget -to]
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkScale=
Button2Down</span> {w x y} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal [$w cget -state] <span class=3D"hljs-string">"disabled"<=
/span>]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    $w configure -state active
    $w <span class=3D"hljs-keyword">set</span> [$w get $x $y]
    <span class=3D"hljs-keyword">set</span> tkPriv(dragging) <span class=3D=
"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> tkPriv(initValue) [$w get]
    <span class=3D"hljs-keyword">set</span> coords <span class=3D"hljs-stri=
ng">"$x $y"</span>
    <span class=3D"hljs-keyword">set</span> tkPriv(deltaX) <span class=3D"h=
ljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> tkPriv(deltaY) <span class=3D"h=
ljs-number">0</span>
}
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">strin=
g</span> compare $tcl_platform(platform) <span class=3D"hljs-string">"windo=
ws"</span>] &amp;&amp; [<span class=3D"hljs-keyword">string</span> compare =
$tcl_platform(platform) <span class=3D"hljs-string">"macintosh"</span>]} th=
en {
    bind Scrollbar &lt;Enter&gt; {
	<span class=3D"hljs-keyword">if</span> {$tk_strictMotif} then {
	    <span class=3D"hljs-keyword">set</span> tkPriv(activeBg) [%W cget -act=
ivebackground]
	    %W config -activebackground [%W cget -background]
	}
	%W activate [%W identify %x %y]
    }
    bind Scrollbar &lt;Motion&gt; {
	%W activate [%W identify %x %y]
    }
    bind Scrollbar &lt;Leave&gt; {
	<span class=3D"hljs-keyword">if</span> {$tk_strictMotif &amp;&amp; [<span =
class=3D"hljs-keyword">info</span> exists tkPriv(activeBg)]} then {
	    %W config -activebackground $tkPriv(activeBg)
	}
	%W activate {}
    }
    bind Scrollbar &lt;<span class=3D"hljs-number">1</span>&gt; {
	tkScrollButtonDown %W %x %y
    }
    bind Scrollbar &lt;B1-Motion&gt; {
	tkScrollDrag %W %x %y
    }
    bind Scrollbar &lt;B1-B2-Motion&gt; {
	tkScrollDrag %W %x %y
    }
    bind Scrollbar &lt;ButtonRelease<span class=3D"hljs-number">-1</span>&g=
t; {
	tkScrollButtonUp %W %x %y
    }
    bind Scrollbar &lt;B1-Leave&gt; {
    }
    bind Scrollbar &lt;B1-Enter&gt; {
    }
    bind Scrollbar &lt;<span class=3D"hljs-number">2</span>&gt; {
	tkScrollButton2Down %W %x %y
    }
    bind Scrollbar &lt;B1<span class=3D"hljs-number">-2</span>&gt; {
    }
    bind Scrollbar &lt;B2<span class=3D"hljs-number">-1</span>&gt; {
    }
    bind Scrollbar &lt;B2-Motion&gt; {
	tkScrollDrag %W %x %y
    }
    bind Scrollbar &lt;ButtonRelease<span class=3D"hljs-number">-2</span>&g=
t; {
	tkScrollButtonUp %W %x %y
    }
    bind Scrollbar &lt;B1-ButtonRelease<span class=3D"hljs-number">-2</span=
>&gt; {
    }
    bind Scrollbar &lt;B2-ButtonRelease<span class=3D"hljs-number">-1</span=
>&gt; {
    }
    bind Scrollbar &lt;B2-Leave&gt; {
    }
    bind Scrollbar &lt;B2-Enter&gt; {
    }
    bind Scrollbar &lt;Control<span class=3D"hljs-number">-1</span>&gt; {
	tkScrollTopBottom %W %x %y
    }
    bind Scrollbar &lt;Control<span class=3D"hljs-number">-2</span>&gt; {
	tkScrollTopBottom %W %x %y
    }
    bind Scrollbar &lt;Up&gt; {
	tkScrollByUnits %W v <span class=3D"hljs-number">-1</span>
    }
    bind Scrollbar &lt;Down&gt; {
	tkScrollByUnits %W v <span class=3D"hljs-number">1</span>
    }
    bind Scrollbar &lt;Control-Up&gt; {
	tkScrollByPages %W v <span class=3D"hljs-number">-1</span>
    }
    bind Scrollbar &lt;Control-Down&gt; {
	tkScrollByPages %W v <span class=3D"hljs-number">1</span>
    }
    bind Scrollbar &lt;Left&gt; {
	tkScrollByUnits %W h <span class=3D"hljs-number">-1</span>
    }
    bind Scrollbar &lt;Right&gt; {
	tkScrollByUnits %W h <span class=3D"hljs-number">1</span>
    }
    bind Scrollbar &lt;Control-Left&gt; {
	tkScrollByPages %W h <span class=3D"hljs-number">-1</span>
    }
    bind Scrollbar &lt;Control-Right&gt; {
	tkScrollByPages %W h <span class=3D"hljs-number">1</span>
    }
    bind Scrollbar &lt;Prior&gt; {
	tkScrollByPages %W hv <span class=3D"hljs-number">-1</span>
    }
    bind Scrollbar &lt;Next&gt; {
	tkScrollByPages %W hv <span class=3D"hljs-number">1</span>
    }
    bind Scrollbar &lt;Home&gt; {
	tkScrollToPos %W <span class=3D"hljs-number">0</span>
    }
    bind Scrollbar &lt;End&gt; {
	tkScrollToPos %W <span class=3D"hljs-number">1</span>
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkScrol=
lButtonDown</span> {w x y} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">set</span> tkPriv(relief) [$w cget -active=
relief]
    $w configure -activerelief sunken
    <span class=3D"hljs-keyword">set</span> element [$w identify $x $y]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $element <span class=3D"hljs-string">"slider"</span>]} t=
hen {
	tkScrollStartDrag $w $x $y
    } else {
	tkScrollSelect $w $element initial
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkScrol=
lButtonUp</span> {w x y} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    tkCancelRepeat
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists tkPriv(relief)]} then {
	$w configure -activerelief $tkPriv(relief)
	tkScrollEndDrag $w $x $y
	$w activate [$w identify $x $y]
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkScrol=
lSelect</span> {w element repeat} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">if</span> {![winfo exists $w]} then <span =
class=3D"hljs-keyword">return</span>
    <span class=3D"hljs-keyword">switch</span> -- $element {
    <span class=3D"hljs-string">"arrow1"</span> {
	    tkScrollByUnits $w hv <span class=3D"hljs-number">-1</span>
	}
    <span class=3D"hljs-string">"trough1"</span> {
	    tkScrollByPages $w hv <span class=3D"hljs-number">-1</span>
	}
    <span class=3D"hljs-string">"trough2"</span> {
	    tkScrollByPages $w hv <span class=3D"hljs-number">1</span>
	}
    <span class=3D"hljs-string">"arrow2"</span> {
	    tkScrollByUnits $w hv <span class=3D"hljs-number">1</span>
	}
    default {
	    <span class=3D"hljs-keyword">return</span>
	}
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $repeat <span class=3D"hljs-string">"again"</span>]} the=
n {
	<span class=3D"hljs-keyword">set</span> tkPriv(afterId) [<span class=3D"hl=
js-keyword">after</span> [$w cget -repeatinterval] [<span class=3D"hljs-key=
word">list</span> tkScrollSelect $w $element again]]
    } elseif {[<span class=3D"hljs-keyword">string</span> equal $repeat <sp=
an class=3D"hljs-string">"initial"</span>]} {
	<span class=3D"hljs-keyword">set</span> delay [$w cget -repeatdelay]
	<span class=3D"hljs-keyword">if</span> {$delay &gt; <span class=3D"hljs-nu=
mber">0</span>} then {
	    <span class=3D"hljs-keyword">set</span> tkPriv(afterId) [<span class=
=3D"hljs-keyword">after</span> $delay [<span class=3D"hljs-keyword">list</s=
pan> tkScrollSelect $w $element again]]
	}
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkScrol=
lStartDrag</span> {w x y} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal [$w cget -command] <span class=3D"hljs-string">""</span>=
]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">set</span> tkPriv(pressX) $x
    <span class=3D"hljs-keyword">set</span> tkPriv(pressY) $y
    <span class=3D"hljs-keyword">set</span> tkPriv(initValues) [$w get]
    <span class=3D"hljs-keyword">set</span> iv0 [<span class=3D"hljs-keywor=
d">lindex</span> $tkPriv(initValues) <span class=3D"hljs-number">0</span>]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">l=
length</span> $tkPriv(initValues)] =3D=3D <span class=3D"hljs-number">2</sp=
an>} then {
	<span class=3D"hljs-keyword">set</span> tkPriv(initPos) $iv0
    } elseif {$iv0 =3D=3D <span class=3D"hljs-number">0</span>} {
	<span class=3D"hljs-keyword">set</span> tkPriv(initPos) <span class=3D"hlj=
s-number">0.0</span>
    } else {
	<span class=3D"hljs-keyword">set</span> tkPriv(initPos) [<span class=3D"hl=
js-keyword">expr</span> {(double([<span class=3D"hljs-keyword">lindex</span=
> $tkPriv(initValues) <span class=3D"hljs-number">2</span>])) / [<span clas=
s=3D"hljs-keyword">lindex</span> $tkPriv(initValues) <span class=3D"hljs-nu=
mber">0</span>]}]
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkScrol=
lDrag</span> {w x y} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $tkPriv(initPos) <span class=3D"hljs-string">""</span>]}=
 then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">set</span> delta [$w delta [<span class=3D=
"hljs-keyword">expr</span> {$x - $tkPriv(pressX)}] [<span class=3D"hljs-key=
word">expr</span> {$y - $tkPriv(pressY)}]]
    <span class=3D"hljs-keyword">if</span> {[$w cget -jump]} then {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">llen=
gth</span> $tkPriv(initValues)] =3D=3D <span class=3D"hljs-number">2</span>=
} then {
	    $w <span class=3D"hljs-keyword">set</span> [<span class=3D"hljs-keywor=
d">expr</span> {[<span class=3D"hljs-keyword">lindex</span> $tkPriv(initVal=
ues) <span class=3D"hljs-number">0</span>] + $delta}] [<span class=3D"hljs-=
keyword">expr</span> {[<span class=3D"hljs-keyword">lindex</span> $tkPriv(i=
nitValues) <span class=3D"hljs-number">1</span>] + $delta}]
	} else {
	    <span class=3D"hljs-keyword">set</span> delta [<span class=3D"hljs-key=
word">expr</span> {round($delta * [<span class=3D"hljs-keyword">lindex</spa=
n> $tkPriv(initValues) <span class=3D"hljs-number">0</span>])}]
	    <span class=3D"hljs-keyword">eval</span> [<span class=3D"hljs-keyword"=
>list</span> $w] <span class=3D"hljs-keyword">set</span> [<span class=3D"hl=
js-keyword">lreplace</span> $tkPriv(initValues) <span class=3D"hljs-number"=
>2</span> <span class=3D"hljs-number">3</span> [<span class=3D"hljs-keyword=
">expr</span> {[<span class=3D"hljs-keyword">lindex</span> $tkPriv(initValu=
es) <span class=3D"hljs-number">2</span>] + $delta}] [<span class=3D"hljs-k=
eyword">expr</span> {[<span class=3D"hljs-keyword">lindex</span> $tkPriv(in=
itValues) <span class=3D"hljs-number">3</span>] + $delta}]]
	}
    } else {
	tkScrollToPos $w [<span class=3D"hljs-keyword">expr</span> {$tkPriv(initPo=
s) + $delta}]
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkScrol=
lEndDrag</span> {w x y} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $tkPriv(initPos) <span class=3D"hljs-string">""</span>]}=
 then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">if</span> {[$w cget -jump]} then {
	<span class=3D"hljs-keyword">set</span> delta [$w delta [<span class=3D"hl=
js-keyword">expr</span> {$x - $tkPriv(pressX)}] [<span class=3D"hljs-keywor=
d">expr</span> {$y - $tkPriv(pressY)}]]
	tkScrollToPos $w [<span class=3D"hljs-keyword">expr</span> {$tkPriv(initPo=
s) + $delta}]
    }
    <span class=3D"hljs-keyword">set</span> tkPriv(initPos) <span class=3D"=
hljs-string">""</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkScrol=
lByUnits</span> {w orient amount} {
    <span class=3D"hljs-keyword">set</span> cmd [$w cget -command]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $cmd <span class=3D"hljs-string">""</span>] ||([<span cl=
ass=3D"hljs-keyword">string</span> first [<span class=3D"hljs-keyword">stri=
ng</span> index [$w cget -orient] <span class=3D"hljs-number">0</span>] $or=
ient] &lt; <span class=3D"hljs-number">0</span>)} then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">in=
fo</span> [$w get]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">l=
length</span> $info] =3D=3D <span class=3D"hljs-number">2</span>} then {
	<span class=3D"hljs-keyword">uplevel</span> #<span class=3D"hljs-number">0=
</span> $cmd scroll $amount units
    } else {
	<span class=3D"hljs-keyword">uplevel</span> #<span class=3D"hljs-number">0=
</span> $cmd [<span class=3D"hljs-keyword">expr</span> {[<span class=3D"hlj=
s-keyword">lindex</span> $info <span class=3D"hljs-number">2</span>] + $amo=
unt}]
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkScrol=
lByPages</span> {w orient amount} {
    <span class=3D"hljs-keyword">set</span> cmd [$w cget -command]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $cmd <span class=3D"hljs-string">""</span>] ||([<span cl=
ass=3D"hljs-keyword">string</span> first [<span class=3D"hljs-keyword">stri=
ng</span> index [$w cget -orient] <span class=3D"hljs-number">0</span>] $or=
ient] &lt; <span class=3D"hljs-number">0</span>)} then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">in=
fo</span> [$w get]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">l=
length</span> $info] =3D=3D <span class=3D"hljs-number">2</span>} then {
	<span class=3D"hljs-keyword">uplevel</span> #<span class=3D"hljs-number">0=
</span> $cmd scroll $amount pages
    } else {
	<span class=3D"hljs-keyword">uplevel</span> #<span class=3D"hljs-number">0=
</span> $cmd [<span class=3D"hljs-keyword">expr</span> {[<span class=3D"hlj=
s-keyword">lindex</span> $info <span class=3D"hljs-number">2</span>] + $amo=
unt*([<span class=3D"hljs-keyword">lindex</span> $info <span class=3D"hljs-=
number">1</span>] - <span class=3D"hljs-number">1</span>)}]
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkScrol=
lToPos</span> {w pos} {
    <span class=3D"hljs-keyword">set</span> cmd [$w cget -command]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $cmd <span class=3D"hljs-string">""</span>]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">in=
fo</span> [$w get]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">l=
length</span> $info] =3D=3D <span class=3D"hljs-number">2</span>} then {
	<span class=3D"hljs-keyword">uplevel</span> #<span class=3D"hljs-number">0=
</span> $cmd moveto $pos
    } else {
	<span class=3D"hljs-keyword">uplevel</span> #<span class=3D"hljs-number">0=
</span> $cmd [<span class=3D"hljs-keyword">expr</span> {round([<span class=
=3D"hljs-keyword">lindex</span> $info <span class=3D"hljs-number">0</span>]=
*$pos)}]
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkScrol=
lTopBottom</span> {w x y} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">set</span> element [$w identify $x $y]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> match *<span class=3D"hljs-number">1</span> $element]} then {
	tkScrollToPos $w <span class=3D"hljs-number">0</span>
    } elseif {[<span class=3D"hljs-keyword">string</span> match *<span clas=
s=3D"hljs-number">2</span> $element]} {
	tkScrollToPos $w <span class=3D"hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">set</span> tkPriv(relief) [$w cget -active=
relief]
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkScrol=
lButton2Down</span> {w x y} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">set</span> element [$w identify $x $y]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> match {arrow[<span class=3D"hljs-number">12</span>]} $element]=
} then {
	tkScrollButtonDown $w $x $y
	<span class=3D"hljs-keyword">return</span>
    }
    tkScrollToPos $w [$w fraction $x $y]
    <span class=3D"hljs-keyword">set</span> tkPriv(relief) [$w cget -active=
relief]
    <span class=3D"hljs-keyword">update</span> idletasks
    $w configure -activerelief sunken
    $w activate slider
    tkScrollStartDrag $w $x $y
}
<span class=3D"hljs-comment"># Tcl autoload index file, version 2.0</span>
<span class=3D"hljs-comment"># This file is generated by the "auto_mkindex"=
 command</span>
<span class=3D"hljs-comment"># and sourced to set up indexing information f=
or one or</span>
<span class=3D"hljs-comment"># more commands.  Typically each line is a com=
mand that</span>
<span class=3D"hljs-comment"># sets an element in the auto_index array, whe=
re the</span>
<span class=3D"hljs-comment"># element name is the name of a command and th=
e value is</span>
<span class=3D"hljs-comment"># a script that loads the command.</span>

<span class=3D"hljs-keyword">set</span> auto_index(tkButtonEnter) [<span cl=
ass=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span>=
 [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">joi=
n</span> $dir button.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkButtonLeave) [<span cl=
ass=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span>=
 [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">joi=
n</span> $dir button.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkCheckRadioEnter) [<spa=
n class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</s=
pan> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword"=
>join</span> $dir button.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkButtonDown) [<span cla=
ss=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span> =
[<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">join=
</span> $dir button.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkCheckRadioDown) [<span=
 class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</sp=
an> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">=
join</span> $dir button.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkButtonUp) [<span class=
=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span> [<=
span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">join</=
span> $dir button.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkButtonEnter) [<span cl=
ass=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span>=
 [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">joi=
n</span> $dir button.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkButtonLeave) [<span cl=
ass=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span>=
 [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">joi=
n</span> $dir button.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkButtonDown) [<span cla=
ss=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span> =
[<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">join=
</span> $dir button.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkButtonUp) [<span class=
=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span> [<=
span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">join</=
span> $dir button.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkButtonEnter) [<span cl=
ass=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span>=
 [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">joi=
n</span> $dir button.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkButtonLeave) [<span cl=
ass=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span>=
 [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">joi=
n</span> $dir button.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkButtonDown) [<span cla=
ss=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span> =
[<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">join=
</span> $dir button.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkButtonUp) [<span class=
=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span> [<=
span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">join</=
span> $dir button.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkButtonInvoke) [<span c=
lass=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span=
> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">jo=
in</span> $dir button.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkCheckRadioInvoke) [<sp=
an class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</=
span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword=
">join</span> $dir button.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tk_dialog) [<span class=
=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span> [<=
span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">join</=
span> $dir dialog.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkEntryClosestGap) [<spa=
n class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</s=
pan> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword"=
>join</span> $dir entry.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkEntryButton1) [<span c=
lass=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span=
> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">jo=
in</span> $dir entry.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkEntryMouseSelect) [<sp=
an class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</=
span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword=
">join</span> $dir entry.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkEntryPaste) [<span cla=
ss=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span> =
[<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">join=
</span> $dir entry.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkEntryAutoScan) [<span =
class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</spa=
n> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">j=
oin</span> $dir entry.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkEntryKeySelect) [<span=
 class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</sp=
an> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">=
join</span> $dir entry.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkEntryInsert) [<span cl=
ass=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span>=
 [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">joi=
n</span> $dir entry.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkEntryBackspace) [<span=
 class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</sp=
an> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">=
join</span> $dir entry.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkEntrySeeInsert) [<span=
 class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</sp=
an> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">=
join</span> $dir entry.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkEntrySetCursor) [<span=
 class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</sp=
an> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">=
join</span> $dir entry.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkEntryTranspose) [<span=
 class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</sp=
an> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">=
join</span> $dir entry.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkEntryPreviousWord) [<s=
pan class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source<=
/span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keywor=
d">join</span> $dir entry.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkListboxBeginSelect) [<=
span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source=
</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keywo=
rd">join</span> $dir listbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkListboxMotion) [<span =
class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</spa=
n> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">j=
oin</span> $dir listbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkListboxBeginExtend) [<=
span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source=
</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keywo=
rd">join</span> $dir listbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkListboxBeginToggle) [<=
span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source=
</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keywo=
rd">join</span> $dir listbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkListboxAutoScan) [<spa=
n class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</s=
pan> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword"=
>join</span> $dir listbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkListboxUpDown) [<span =
class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</spa=
n> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">j=
oin</span> $dir listbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkListboxExtendUpDown) [=
<span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">sourc=
e</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyw=
ord">join</span> $dir listbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkListboxDataExtend) [<s=
pan class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source<=
/span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keywor=
d">join</span> $dir listbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkListboxCancel) [<span =
class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</spa=
n> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">j=
oin</span> $dir listbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkListboxSelectAll) [<sp=
an class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</=
span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword=
">join</span> $dir listbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkMbEnter) [<span class=
=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span> [<=
span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">join</=
span> $dir menu.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkMbLeave) [<span class=
=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span> [<=
span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">join</=
span> $dir menu.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkMbPost) [<span class=
=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span> [<=
span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">join</=
span> $dir menu.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkMenuUnpost) [<span cla=
ss=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span> =
[<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">join=
</span> $dir menu.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkMbMotion) [<span class=
=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span> [<=
span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">join</=
span> $dir menu.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkMbButtonUp) [<span cla=
ss=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span> =
[<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">join=
</span> $dir menu.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkMenuMotion) [<span cla=
ss=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span> =
[<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">join=
</span> $dir menu.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkMenuButtonDown) [<span=
 class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</sp=
an> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">=
join</span> $dir menu.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkMenuLeave) [<span clas=
s=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span> [=
<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">join<=
/span> $dir menu.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkMenuInvoke) [<span cla=
ss=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span> =
[<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">join=
</span> $dir menu.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkMenuEscape) [<span cla=
ss=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span> =
[<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">join=
</span> $dir menu.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkMenuUpArrow) [<span cl=
ass=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span>=
 [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">joi=
n</span> $dir menu.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkMenuDownArrow) [<span =
class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</spa=
n> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">j=
oin</span> $dir menu.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkMenuLeftArrow) [<span =
class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</spa=
n> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">j=
oin</span> $dir menu.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkMenuRightArrow) [<span=
 class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</sp=
an> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">=
join</span> $dir menu.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkMenuNextMenu) [<span c=
lass=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span=
> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">jo=
in</span> $dir menu.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkMenuNextEntry) [<span =
class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</spa=
n> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">j=
oin</span> $dir menu.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkMenuFind) [<span class=
=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span> [<=
span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">join</=
span> $dir menu.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkTraverseToMenu) [<span=
 class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</sp=
an> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">=
join</span> $dir menu.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkFirstMenu) [<span clas=
s=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span> [=
<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">join<=
/span> $dir menu.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkTraverseWithinMenu) [<=
span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source=
</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keywo=
rd">join</span> $dir menu.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkMenuFirstEntry) [<span=
 class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</sp=
an> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">=
join</span> $dir menu.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkMenuFindName) [<span c=
lass=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span=
> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">jo=
in</span> $dir menu.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkPostOverPoint) [<span =
class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</spa=
n> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">j=
oin</span> $dir menu.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkSaveGrabInfo) [<span c=
lass=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span=
> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">jo=
in</span> $dir menu.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkRestoreOldGrab) [<span=
 class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</sp=
an> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">=
join</span> $dir menu.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tk_menuSetFocus) [<span =
class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</spa=
n> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">j=
oin</span> $dir menu.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkGenerateMenuSelect) [<=
span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source=
</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keywo=
rd">join</span> $dir menu.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tk_popup) [<span class=
=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span> [<=
span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">join</=
span> $dir menu.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkScrollButtonDown) [<sp=
an class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</=
span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword=
">join</span> $dir scrlbar.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkScrollButtonUp) [<span=
 class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</sp=
an> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">=
join</span> $dir scrlbar.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkScrollSelect) [<span c=
lass=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span=
> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">jo=
in</span> $dir scrlbar.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkScrollStartDrag) [<spa=
n class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</s=
pan> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword"=
>join</span> $dir scrlbar.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkScrollDrag) [<span cla=
ss=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span> =
[<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">join=
</span> $dir scrlbar.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkScrollEndDrag) [<span =
class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</spa=
n> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">j=
oin</span> $dir scrlbar.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkScrollByUnits) [<span =
class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</spa=
n> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">j=
oin</span> $dir scrlbar.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkScrollByPages) [<span =
class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</spa=
n> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">j=
oin</span> $dir scrlbar.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkScrollToPos) [<span cl=
ass=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span>=
 [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">joi=
n</span> $dir scrlbar.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkScrollTopBottom) [<spa=
n class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</s=
pan> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword"=
>join</span> $dir scrlbar.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkScrollButton2Down) [<s=
pan class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source<=
/span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keywor=
d">join</span> $dir scrlbar.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkTextClosestGap) [<span=
 class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</sp=
an> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">=
join</span> $dir text.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkTextButton1) [<span cl=
ass=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span>=
 [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">joi=
n</span> $dir text.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkTextSelectTo) [<span c=
lass=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span=
> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">jo=
in</span> $dir text.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkTextKeyExtend) [<span =
class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</spa=
n> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">j=
oin</span> $dir text.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkTextPaste) [<span clas=
s=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span> [=
<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">join<=
/span> $dir text.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkTextAutoScan) [<span c=
lass=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span=
> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">jo=
in</span> $dir text.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkTextSetCursor) [<span =
class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</spa=
n> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">j=
oin</span> $dir text.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkTextKeySelect) [<span =
class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</spa=
n> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">j=
oin</span> $dir text.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkTextResetAnchor) [<spa=
n class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</s=
pan> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword"=
>join</span> $dir text.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkTextInsert) [<span cla=
ss=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span> =
[<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">join=
</span> $dir text.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkTextUpDownLine) [<span=
 class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</sp=
an> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">=
join</span> $dir text.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkTextPrevPara) [<span c=
lass=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span=
> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">jo=
in</span> $dir text.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkTextNextPara) [<span c=
lass=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span=
> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">jo=
in</span> $dir text.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkTextScrollPages) [<spa=
n class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</s=
pan> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword"=
>join</span> $dir text.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkTextTranspose) [<span =
class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</spa=
n> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">j=
oin</span> $dir text.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tk_textCopy) [<span clas=
s=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span> [=
<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">join<=
/span> $dir text.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tk_textCut) [<span class=
=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span> [<=
span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">join</=
span> $dir text.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tk_textPaste) [<span cla=
ss=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span> =
[<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">join=
</span> $dir text.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkTextNextPos) [<span cl=
ass=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span>=
 [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">joi=
n</span> $dir text.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkTextPrevPos) [<span cl=
ass=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span>=
 [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">joi=
n</span> $dir text.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkScreenChanged) [<span =
class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</spa=
n> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">j=
oin</span> $dir tk.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkEventMotifBindings) [<=
span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source=
</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keywo=
rd">join</span> $dir tk.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkCancelRepeat) [<span c=
lass=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span=
> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">jo=
in</span> $dir tk.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkTabToWindow) [<span cl=
ass=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span>=
 [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">joi=
n</span> $dir tk.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(<span class=3D"hljs-keyw=
ord">bgerror</span>) [<span class=3D"hljs-keyword">list</span> <span class=
=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword">file</span> <=
span class=3D"hljs-keyword">join</span> $dir <span class=3D"hljs-keyword">b=
gerror</span>.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkScaleActivate) [<span =
class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</spa=
n> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">j=
oin</span> $dir scale.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkScaleButtonDown) [<spa=
n class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</s=
pan> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword"=
>join</span> $dir scale.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkScaleDrag) [<span clas=
s=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span> [=
<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">join<=
/span> $dir scale.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkScaleEndDrag) [<span c=
lass=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span=
> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">jo=
in</span> $dir scale.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkScaleIncrement) [<span=
 class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</sp=
an> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">=
join</span> $dir scale.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkScaleControlPress) [<s=
pan class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source<=
/span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keywor=
d">join</span> $dir scale.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkScaleButton2Down) [<sp=
an class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</=
span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword=
">join</span> $dir scale.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tk_optionMenu) [<span cl=
ass=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span>=
 [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">joi=
n</span> $dir optMenu.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkTearOffMenu) [<span cl=
ass=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span>=
 [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">joi=
n</span> $dir tearoff.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkMenuDup) [<span class=
=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span> [<=
span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">join</=
span> $dir tearoff.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tk_menuBar) [<span class=
=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span> [<=
span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">join</=
span> $dir obsolete.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tk_bindForTraversal) [<s=
pan class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source<=
/span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keywor=
d">join</span> $dir obsolete.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tk_focusNext) [<span cla=
ss=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span> =
[<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">join=
</span> $dir focus.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tk_focusPrev) [<span cla=
ss=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span> =
[<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">join=
</span> $dir focus.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkFocusOK) [<span class=
=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span> [<=
span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">join</=
span> $dir focus.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tk_focusFollowsMouse) [<=
span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source=
</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keywo=
rd">join</span> $dir focus.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkConsoleInit) [<span cl=
ass=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span>=
 [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">joi=
n</span> $dir console.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkConsoleSource) [<span =
class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</spa=
n> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">j=
oin</span> $dir console.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkConsoleInvoke) [<span =
class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</spa=
n> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">j=
oin</span> $dir console.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkConsoleHistory) [<span=
 class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</sp=
an> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">=
join</span> $dir console.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkConsolePrompt) [<span =
class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</spa=
n> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">j=
oin</span> $dir console.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkConsoleBind) [<span cl=
ass=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span>=
 [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">joi=
n</span> $dir console.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkConsoleInsert) [<span =
class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</spa=
n> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">j=
oin</span> $dir console.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkConsoleOutput) [<span =
class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</spa=
n> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">j=
oin</span> $dir console.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkConsoleExit) [<span cl=
ass=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span>=
 [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">joi=
n</span> $dir console.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkConsoleAbout) [<span c=
lass=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span=
> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">jo=
in</span> $dir console.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tk_setPalette) [<span cl=
ass=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span>=
 [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">joi=
n</span> $dir palette.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkRecolorTree) [<span cl=
ass=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span>=
 [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">joi=
n</span> $dir palette.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkDarken) [<span class=
=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span> [<=
span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">join</=
span> $dir palette.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tk_bisque) [<span class=
=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span> [<=
span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">join</=
span> $dir palette.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkColorDialog) [<span cl=
ass=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span>=
 [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">joi=
n</span> $dir clrpick.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkColorDialog_InitValues=
) [<span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">so=
urce</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-k=
eyword">join</span> $dir clrpick.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkColorDialog_Config) [<=
span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source=
</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keywo=
rd">join</span> $dir clrpick.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkColorDialog_BuildDialo=
g) [<span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">s=
ource</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-=
keyword">join</span> $dir clrpick.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkColorDialog_SetRGBValu=
e) [<span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">s=
ource</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-=
keyword">join</span> $dir clrpick.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkColorDialog_XToRgb) [<=
span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source=
</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keywo=
rd">join</span> $dir clrpick.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkColorDialog_RgbToX) [<=
span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source=
</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keywo=
rd">join</span> $dir clrpick.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkColorDialog_DrawColorS=
cale) [<span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword=
">source</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hl=
js-keyword">join</span> $dir clrpick.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkColorDialog_CreateSele=
ctor) [<span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword=
">source</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hl=
js-keyword">join</span> $dir clrpick.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkColorDialog_RedrawFina=
lColor) [<span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keywo=
rd">source</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"=
hljs-keyword">join</span> $dir clrpick.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkColorDialog_RedrawColo=
rBars) [<span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keywor=
d">source</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"h=
ljs-keyword">join</span> $dir clrpick.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkColorDialog_StartMove)=
 [<span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">sou=
rce</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-ke=
yword">join</span> $dir clrpick.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkColorDialog_MoveSelect=
or) [<span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">=
source</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs=
-keyword">join</span> $dir clrpick.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkColorDialog_ReleaseMou=
se) [<span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">=
source</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs=
-keyword">join</span> $dir clrpick.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkColorDialog_ResizeColo=
rBars) [<span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keywor=
d">source</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"h=
ljs-keyword">join</span> $dir clrpick.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkColorDialog_HandleSelE=
ntry) [<span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword=
">source</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hl=
js-keyword">join</span> $dir clrpick.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkColorDialog_HandleRGBE=
ntry) [<span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword=
">source</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hl=
js-keyword">join</span> $dir clrpick.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkColorDialog_EnterColor=
Bar) [<span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword"=
>source</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hlj=
s-keyword">join</span> $dir clrpick.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkColorDialog_LeaveColor=
Bar) [<span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword"=
>source</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hlj=
s-keyword">join</span> $dir clrpick.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkColorDialog_OkCmd) [<s=
pan class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source<=
/span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keywor=
d">join</span> $dir clrpick.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkColorDialog_CancelCmd)=
 [<span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">sou=
rce</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-ke=
yword">join</span> $dir clrpick.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tclParseConfigSpec) [<sp=
an class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</=
span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword=
">join</span> $dir comdlg.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tclListValidFlags) [<spa=
n class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</s=
pan> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword"=
>join</span> $dir comdlg.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tclSortNoCase) [<span cl=
ass=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span>=
 [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">joi=
n</span> $dir comdlg.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tclVerifyInteger) [<span=
 class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</sp=
an> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">=
join</span> $dir comdlg.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkFocusGroup_Create) [<s=
pan class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source<=
/span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keywor=
d">join</span> $dir comdlg.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkFocusGroup_BindIn) [<s=
pan class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source<=
/span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keywor=
d">join</span> $dir comdlg.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkFocusGroup_BindOut) [<=
span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source=
</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keywo=
rd">join</span> $dir comdlg.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkFocusGroup_Destroy) [<=
span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source=
</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keywo=
rd">join</span> $dir comdlg.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkFocusGroup_In) [<span =
class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</spa=
n> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">j=
oin</span> $dir comdlg.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkFocusGroup_Out) [<span=
 class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</sp=
an> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">=
join</span> $dir comdlg.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkFDGetFileTypes) [<span=
 class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</sp=
an> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">=
join</span> $dir comdlg.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::<span class=3D"hljs-ke=
yword">safe</span>::loadTk) [<span class=3D"hljs-keyword">list</span> <span=
 class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword">file</s=
pan> <span class=3D"hljs-keyword">join</span> $dir safetk.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::<span class=3D"hljs-ke=
yword">safe</span>::TkInit) [<span class=3D"hljs-keyword">list</span> <span=
 class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword">file</s=
pan> <span class=3D"hljs-keyword">join</span> $dir safetk.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::<span class=3D"hljs-ke=
yword">safe</span>::allowTk) [<span class=3D"hljs-keyword">list</span> <spa=
n class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword">file</=
span> <span class=3D"hljs-keyword">join</span> $dir safetk.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::<span class=3D"hljs-ke=
yword">safe</span>::tkTopLevel) [<span class=3D"hljs-keyword">list</span> <=
span class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword">fil=
e</span> <span class=3D"hljs-keyword">join</span> $dir safetk.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkMessageBox) [<span cla=
ss=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span> =
[<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">join=
</span> $dir msgbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkIconList) [<span class=
=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span> [<=
span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">join</=
span> $dir tkfbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkIconList_Config) [<spa=
n class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</s=
pan> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword"=
>join</span> $dir tkfbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkIconList_Create) [<spa=
n class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</s=
pan> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword"=
>join</span> $dir tkfbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkIconList_AutoScan) [<s=
pan class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source<=
/span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keywor=
d">join</span> $dir tkfbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkIconList_DeleteAll) [<=
span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source=
</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keywo=
rd">join</span> $dir tkfbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkIconList_Add) [<span c=
lass=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span=
> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">jo=
in</span> $dir tkfbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkIconList_Arrange) [<sp=
an class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</=
span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword=
">join</span> $dir tkfbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkIconList_Invoke) [<spa=
n class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</s=
pan> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword"=
>join</span> $dir tkfbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkIconList_See) [<span c=
lass=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span=
> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">jo=
in</span> $dir tkfbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkIconList_SelectAtXY) [=
<span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">sourc=
e</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyw=
ord">join</span> $dir tkfbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkIconList_Select) [<spa=
n class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</s=
pan> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword"=
>join</span> $dir tkfbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkIconList_Unselect) [<s=
pan class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source<=
/span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keywor=
d">join</span> $dir tkfbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkIconList_Get) [<span c=
lass=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span=
> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">jo=
in</span> $dir tkfbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkIconList_Btn1) [<span =
class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</spa=
n> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">j=
oin</span> $dir tkfbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkIconList_Motion1) [<sp=
an class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</=
span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword=
">join</span> $dir tkfbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkIconList_Double1) [<sp=
an class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</=
span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword=
">join</span> $dir tkfbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkIconList_ReturnKey) [<=
span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source=
</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keywo=
rd">join</span> $dir tkfbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkIconList_Leave1) [<spa=
n class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</s=
pan> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword"=
>join</span> $dir tkfbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkIconList_FocusIn) [<sp=
an class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</=
span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword=
">join</span> $dir tkfbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkIconList_UpDown) [<spa=
n class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</s=
pan> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword"=
>join</span> $dir tkfbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkIconList_LeftRight) [<=
span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source=
</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keywo=
rd">join</span> $dir tkfbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkIconList_KeyPress) [<s=
pan class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source<=
/span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keywor=
d">join</span> $dir tkfbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkIconList_Goto) [<span =
class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</spa=
n> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">j=
oin</span> $dir tkfbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkIconList_Reset) [<span=
 class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</sp=
an> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">=
join</span> $dir tkfbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::tk::dialog::<span clas=
s=3D"hljs-keyword">file</span>::tkFDialog) [<span class=3D"hljs-keyword">li=
st</span> <span class=3D"hljs-keyword">source</span> [<span class=3D"hljs-k=
eyword">file</span> <span class=3D"hljs-keyword">join</span> $dir tkfbox.tc=
l]]
<span class=3D"hljs-keyword">set</span> auto_index(::tk::dialog::<span clas=
s=3D"hljs-keyword">file</span>::Config) [<span class=3D"hljs-keyword">list<=
/span> <span class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyw=
ord">file</span> <span class=3D"hljs-keyword">join</span> $dir tkfbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::tk::dialog::<span clas=
s=3D"hljs-keyword">file</span>::Create) [<span class=3D"hljs-keyword">list<=
/span> <span class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyw=
ord">file</span> <span class=3D"hljs-keyword">join</span> $dir tkfbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::tk::dialog::<span clas=
s=3D"hljs-keyword">file</span>::UpdateWhenIdle) [<span class=3D"hljs-keywor=
d">list</span> <span class=3D"hljs-keyword">source</span> [<span class=3D"h=
ljs-keyword">file</span> <span class=3D"hljs-keyword">join</span> $dir tkfb=
ox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::tk::dialog::<span clas=
s=3D"hljs-keyword">file</span>::Update) [<span class=3D"hljs-keyword">list<=
/span> <span class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyw=
ord">file</span> <span class=3D"hljs-keyword">join</span> $dir tkfbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::tk::dialog::<span clas=
s=3D"hljs-keyword">file</span>::SetPathSilently) [<span class=3D"hljs-keywo=
rd">list</span> <span class=3D"hljs-keyword">source</span> [<span class=3D"=
hljs-keyword">file</span> <span class=3D"hljs-keyword">join</span> $dir tkf=
box.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::tk::dialog::<span clas=
s=3D"hljs-keyword">file</span>::SetPath) [<span class=3D"hljs-keyword">list=
</span> <span class=3D"hljs-keyword">source</span> [<span class=3D"hljs-key=
word">file</span> <span class=3D"hljs-keyword">join</span> $dir tkfbox.tcl]=
]
<span class=3D"hljs-keyword">set</span> auto_index(::tk::dialog::<span clas=
s=3D"hljs-keyword">file</span>::SetFilter) [<span class=3D"hljs-keyword">li=
st</span> <span class=3D"hljs-keyword">source</span> [<span class=3D"hljs-k=
eyword">file</span> <span class=3D"hljs-keyword">join</span> $dir tkfbox.tc=
l]]
<span class=3D"hljs-keyword">set</span> auto_index(tkFDialogResolveFile) [<=
span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source=
</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keywo=
rd">join</span> $dir tkfbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::tk::dialog::<span clas=
s=3D"hljs-keyword">file</span>::EntFocusIn) [<span class=3D"hljs-keyword">l=
ist</span> <span class=3D"hljs-keyword">source</span> [<span class=3D"hljs-=
keyword">file</span> <span class=3D"hljs-keyword">join</span> $dir tkfbox.t=
cl]]
<span class=3D"hljs-keyword">set</span> auto_index(::tk::dialog::<span clas=
s=3D"hljs-keyword">file</span>::EntFocusOut) [<span class=3D"hljs-keyword">=
list</span> <span class=3D"hljs-keyword">source</span> [<span class=3D"hljs=
-keyword">file</span> <span class=3D"hljs-keyword">join</span> $dir tkfbox.=
tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::tk::dialog::<span clas=
s=3D"hljs-keyword">file</span>::ActivateEnt) [<span class=3D"hljs-keyword">=
list</span> <span class=3D"hljs-keyword">source</span> [<span class=3D"hljs=
-keyword">file</span> <span class=3D"hljs-keyword">join</span> $dir tkfbox.=
tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::tk::dialog::<span clas=
s=3D"hljs-keyword">file</span>::InvokeBtn) [<span class=3D"hljs-keyword">li=
st</span> <span class=3D"hljs-keyword">source</span> [<span class=3D"hljs-k=
eyword">file</span> <span class=3D"hljs-keyword">join</span> $dir tkfbox.tc=
l]]
<span class=3D"hljs-keyword">set</span> auto_index(::tk::dialog::<span clas=
s=3D"hljs-keyword">file</span>::UpDirCmd) [<span class=3D"hljs-keyword">lis=
t</span> <span class=3D"hljs-keyword">source</span> [<span class=3D"hljs-ke=
yword">file</span> <span class=3D"hljs-keyword">join</span> $dir tkfbox.tcl=
]]
<span class=3D"hljs-keyword">set</span> auto_index(::tk::dialog::<span clas=
s=3D"hljs-keyword">file</span>::JoinFile) [<span class=3D"hljs-keyword">lis=
t</span> <span class=3D"hljs-keyword">source</span> [<span class=3D"hljs-ke=
yword">file</span> <span class=3D"hljs-keyword">join</span> $dir tkfbox.tcl=
]]
<span class=3D"hljs-keyword">set</span> auto_index(::tk::dialog::<span clas=
s=3D"hljs-keyword">file</span>::OkCmd) [<span class=3D"hljs-keyword">list</=
span> <span class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keywo=
rd">file</span> <span class=3D"hljs-keyword">join</span> $dir tkfbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::tk::dialog::<span clas=
s=3D"hljs-keyword">file</span>::CancelCmd) [<span class=3D"hljs-keyword">li=
st</span> <span class=3D"hljs-keyword">source</span> [<span class=3D"hljs-k=
eyword">file</span> <span class=3D"hljs-keyword">join</span> $dir tkfbox.tc=
l]]
<span class=3D"hljs-keyword">set</span> auto_index(::tk::dialog::<span clas=
s=3D"hljs-keyword">file</span>::ListBrowse) [<span class=3D"hljs-keyword">l=
ist</span> <span class=3D"hljs-keyword">source</span> [<span class=3D"hljs-=
keyword">file</span> <span class=3D"hljs-keyword">join</span> $dir tkfbox.t=
cl]]
<span class=3D"hljs-keyword">set</span> auto_index(::tk::dialog::<span clas=
s=3D"hljs-keyword">file</span>::ListInvoke) [<span class=3D"hljs-keyword">l=
ist</span> <span class=3D"hljs-keyword">source</span> [<span class=3D"hljs-=
keyword">file</span> <span class=3D"hljs-keyword">join</span> $dir tkfbox.t=
cl]]
<span class=3D"hljs-keyword">set</span> auto_index(::tk::dialog::<span clas=
s=3D"hljs-keyword">file</span>::Done) [<span class=3D"hljs-keyword">list</s=
pan> <span class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keywor=
d">file</span> <span class=3D"hljs-keyword">join</span> $dir tkfbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkMotifFDialog) [<span c=
lass=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span=
> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">jo=
in</span> $dir xmfbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkMotifFDialog_Config) [=
<span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">sourc=
e</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyw=
ord">join</span> $dir xmfbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkMotifFDialog_Create) [=
<span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">sourc=
e</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyw=
ord">join</span> $dir xmfbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkMotifFDialog_MakeSList=
) [<span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">so=
urce</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-k=
eyword">join</span> $dir xmfbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkMotifFDialog_BrowseDLi=
st) [<span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">=
source</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs=
-keyword">join</span> $dir xmfbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkMotifFDialog_ActivateD=
List) [<span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword=
">source</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hl=
js-keyword">join</span> $dir xmfbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkMotifFDialog_BrowseFLi=
st) [<span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">=
source</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs=
-keyword">join</span> $dir xmfbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkMotifFDialog_ActivateF=
List) [<span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword=
">source</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hl=
js-keyword">join</span> $dir xmfbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkMotifFDialog_ActivateF=
Ent) [<span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword"=
>source</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hlj=
s-keyword">join</span> $dir xmfbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkMotifFDialog_InterpFil=
ter) [<span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword"=
>source</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hlj=
s-keyword">join</span> $dir xmfbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkMotifFDialog_ActivateS=
Ent) [<span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword"=
>source</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hlj=
s-keyword">join</span> $dir xmfbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkMotifFDialog_OkCmd) [<=
span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source=
</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keywo=
rd">join</span> $dir xmfbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkMotifFDialog_FilterCmd=
) [<span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">so=
urce</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-k=
eyword">join</span> $dir xmfbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkMotifFDialog_CancelCmd=
) [<span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">so=
urce</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-k=
eyword">join</span> $dir xmfbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkMotifFDialog_Update) [=
<span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">sourc=
e</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyw=
ord">join</span> $dir xmfbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkMotifFDialog_LoadFiles=
) [<span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">so=
urce</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-k=
eyword">join</span> $dir xmfbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkListBoxKeyAccel_Set) [=
<span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">sourc=
e</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyw=
ord">join</span> $dir xmfbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkListBoxKeyAccel_Unset)=
 [<span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">sou=
rce</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-ke=
yword">join</span> $dir xmfbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkListBoxKeyAccel_Key) [=
<span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">sourc=
e</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyw=
ord">join</span> $dir xmfbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkListBoxKeyAccel_Goto) =
[<span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">sour=
ce</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-key=
word">join</span> $dir xmfbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(tkListBoxKeyAccel_Reset)=
 [<span class=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">sou=
rce</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-ke=
yword">join</span> $dir xmfbox.tcl]]
<span class=3D"hljs-keyword">set</span> auto_index(::tk::dialog::<span clas=
s=3D"hljs-keyword">file</span>::chooseDir::tkChooseDirectory) [<span class=
=3D"hljs-keyword">list</span> <span class=3D"hljs-keyword">source</span> [<=
span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">join</=
span> $dir choosedir.tcl]]
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkTearO=
ffMenu</span> {w {x <span class=3D"hljs-number">0</span>} {y <span class=3D=
"hljs-number">0</span>}} {
    <span class=3D"hljs-keyword">if</span> {$x =3D=3D <span class=3D"hljs-n=
umber">0</span>} then {
	<span class=3D"hljs-keyword">set</span> x [winfo rootx $w]
    }
    <span class=3D"hljs-keyword">if</span> {$y =3D=3D <span class=3D"hljs-n=
umber">0</span>} then {
	<span class=3D"hljs-keyword">set</span> y [winfo rooty $w]
    }
    <span class=3D"hljs-keyword">set</span> parent [winfo parent $w]
    <span class=3D"hljs-keyword">while</span> {[<span class=3D"hljs-keyword=
">string</span> compare [winfo toplevel $parent] $parent] || [<span class=
=3D"hljs-keyword">string</span> equal [winfo class $parent] <span class=3D"=
hljs-string">"Menu"</span>]} {
	<span class=3D"hljs-keyword">set</span> parent [winfo parent $parent]
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $parent <span class=3D"hljs-string">"."</span>]} then {
	<span class=3D"hljs-keyword">set</span> parent <span class=3D"hljs-string"=
>""</span>
    }
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">1</span>} <span class=3D"hljs-numbe=
r">1</span> {<span class=3D"hljs-keyword">incr</span> i} {
	<span class=3D"hljs-keyword">set</span> menu $parent.tearoff$i
	<span class=3D"hljs-keyword">if</span> {![winfo exists $menu]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
    }
    $w clone $menu tearoff
    <span class=3D"hljs-keyword">set</span> parent [winfo parent $w]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare [$menu cget -title] <span class=3D"hljs-string">""</sp=
an>]} then {
	wm title $menu [$menu cget -title]
    } else {
	<span class=3D"hljs-keyword">switch</span> [winfo class $parent] {
	Menubutton {
		wm title $menu [$parent cget -text]
	    }
	Menu {
		wm title $menu [$parent entrycget active -label]
	    }
	}
    }
    $menu post $x $y
    <span class=3D"hljs-keyword">if</span> {[winfo exists $menu] =3D=3D <sp=
an class=3D"hljs-number">0</span>} then {
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-string">""<=
/span>
    }
    bind $menu &lt;Enter&gt; {
	<span class=3D"hljs-keyword">set</span> tkPriv(focus) %W
    }
    <span class=3D"hljs-keyword">set</span> cmd [$w cget -tearoffcommand]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare $cmd <span class=3D"hljs-string">""</span>]} then {
	<span class=3D"hljs-keyword">uplevel</span> #<span class=3D"hljs-number">0=
</span> $cmd [<span class=3D"hljs-keyword">list</span> $w $menu]
    }
    <span class=3D"hljs-keyword">return</span> $menu
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkMenuD=
up</span> {src dst type} {
    <span class=3D"hljs-keyword">set</span> cmd [<span class=3D"hljs-keywor=
d">list</span> menu $dst -type $type]
    <span class=3D"hljs-keyword">foreach</span> option [$src configure] {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">llen=
gth</span> $option] =3D=3D <span class=3D"hljs-number">2</span>} then {
	    <span class=3D"hljs-keyword">continue</span>
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> equal [<span class=3D"hljs-keyword">lindex</span> $option <span c=
lass=3D"hljs-number">0</span>] <span class=3D"hljs-string">"-type"</span>]}=
 then {
	    <span class=3D"hljs-keyword">continue</span>
	}
	<span class=3D"hljs-keyword">lappend</span> cmd [<span class=3D"hljs-keywo=
rd">lindex</span> $option <span class=3D"hljs-number">0</span>] [<span clas=
s=3D"hljs-keyword">lindex</span> $option <span class=3D"hljs-number">4</spa=
n>]
    }
    <span class=3D"hljs-keyword">eval</span> $cmd
    <span class=3D"hljs-keyword">set</span> last [$src index last]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $last <span class=3D"hljs-string">"none"</span>]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i [$src cget -tearoff]} {$i &lt;=3D $last} {<span class=3D"hljs-k=
eyword">incr</span> i} {
	<span class=3D"hljs-keyword">set</span> cmd [<span class=3D"hljs-keyword">=
list</span> $dst add [$src type $i]]
	<span class=3D"hljs-keyword">foreach</span> option [$src entryconfigure $i=
] {
	    <span class=3D"hljs-keyword">lappend</span> cmd [<span class=3D"hljs-k=
eyword">lindex</span> $option <span class=3D"hljs-number">0</span>] [<span =
class=3D"hljs-keyword">lindex</span> $option <span class=3D"hljs-number">4<=
/span>]
	}
	<span class=3D"hljs-keyword">eval</span> $cmd
    }
    <span class=3D"hljs-keyword">set</span> tags [bindtags $src]
    <span class=3D"hljs-keyword">set</span> srcLen [<span class=3D"hljs-key=
word">string</span> length $src]
    <span class=3D"hljs-keyword">while</span> {[<span class=3D"hljs-keyword=
">set</span> index [<span class=3D"hljs-keyword">string</span> first $src $=
tags]] !=3D <span class=3D"hljs-number">-1</span>} {
	<span class=3D"hljs-keyword">append</span> x [<span class=3D"hljs-keyword"=
>string</span> range $tags <span class=3D"hljs-number">0</span> [<span clas=
s=3D"hljs-keyword">expr</span> {$index - <span class=3D"hljs-number">1</spa=
n>}]]$dst
	<span class=3D"hljs-keyword">set</span> tags [<span class=3D"hljs-keyword"=
>string</span> range $tags [<span class=3D"hljs-keyword">expr</span> {$inde=
x + $srcLen}] end]
    }
    <span class=3D"hljs-keyword">append</span> x $tags
    bindtags $dst $x
    <span class=3D"hljs-keyword">foreach</span> event [bind $src] {
	<span class=3D"hljs-keyword">unset</span> x
	<span class=3D"hljs-keyword">set</span> script [bind $src $event]
	<span class=3D"hljs-keyword">set</span> eventLen [<span class=3D"hljs-keyw=
ord">string</span> length $event]
	<span class=3D"hljs-keyword">while</span> {[<span class=3D"hljs-keyword">s=
et</span> index [<span class=3D"hljs-keyword">string</span> first $event $s=
cript]] !=3D <span class=3D"hljs-number">-1</span>} {
	    <span class=3D"hljs-keyword">append</span> x [<span class=3D"hljs-keyw=
ord">string</span> range $script <span class=3D"hljs-number">0</span> [<spa=
n class=3D"hljs-keyword">expr</span> {$index - <span class=3D"hljs-number">=
1</span>}]]
	    <span class=3D"hljs-keyword">append</span> x $dst
	    <span class=3D"hljs-keyword">set</span> script [<span class=3D"hljs-ke=
yword">string</span> range $script [<span class=3D"hljs-keyword">expr</span=
> {$index + $eventLen}] end]
	}
	<span class=3D"hljs-keyword">append</span> x $script
	bind $dst $event $x
    }
}
bind Text &lt;<span class=3D"hljs-number">1</span>&gt; {
    tkTextButton1 %W %x %y
    %W tag remove sel <span class=3D"hljs-number">0.0</span> end
}
bind Text &lt;B1-Motion&gt; {
    <span class=3D"hljs-keyword">set</span> tkPriv(x) %x
    <span class=3D"hljs-keyword">set</span> tkPriv(y) %y
    tkTextSelectTo %W %x %y
}
bind Text &lt;Double<span class=3D"hljs-number">-1</span>&gt; {
    <span class=3D"hljs-keyword">set</span> tkPriv(selectMode) word
    tkTextSelectTo %W %x %y
    <span class=3D"hljs-keyword">catch</span> {%W mark <span class=3D"hljs-=
keyword">set</span> insert sel.last}
    <span class=3D"hljs-keyword">catch</span> {%W mark <span class=3D"hljs-=
keyword">set</span> anchor sel.first}
}
bind Text &lt;Triple<span class=3D"hljs-number">-1</span>&gt; {
    <span class=3D"hljs-keyword">set</span> tkPriv(selectMode) line
    tkTextSelectTo %W %x %y
    <span class=3D"hljs-keyword">catch</span> {%W mark <span class=3D"hljs-=
keyword">set</span> insert sel.last}
    <span class=3D"hljs-keyword">catch</span> {%W mark <span class=3D"hljs-=
keyword">set</span> anchor sel.first}
}
bind Text &lt;Shift<span class=3D"hljs-number">-1</span>&gt; {
    tkTextResetAnchor %W @%x,%y
    <span class=3D"hljs-keyword">set</span> tkPriv(selectMode) char
    tkTextSelectTo %W %x %y
}
bind Text &lt;Double-Shift<span class=3D"hljs-number">-1</span>&gt; {
    <span class=3D"hljs-keyword">set</span> tkPriv(selectMode) word
    tkTextSelectTo %W %x %y <span class=3D"hljs-number">1</span>
}
bind Text &lt;Triple-Shift<span class=3D"hljs-number">-1</span>&gt; {
    <span class=3D"hljs-keyword">set</span> tkPriv(selectMode) line
    tkTextSelectTo %W %x %y
}
bind Text &lt;B1-Leave&gt; {
    <span class=3D"hljs-keyword">set</span> tkPriv(x) %x
    <span class=3D"hljs-keyword">set</span> tkPriv(y) %y
    tkTextAutoScan %W
}
bind Text &lt;B1-Enter&gt; {
    tkCancelRepeat
}
bind Text &lt;ButtonRelease<span class=3D"hljs-number">-1</span>&gt; {
    tkCancelRepeat
}
bind Text &lt;Control<span class=3D"hljs-number">-1</span>&gt; {
    %W mark <span class=3D"hljs-keyword">set</span> insert @%x,%y
}
bind Text &lt;Left&gt; {
    tkTextSetCursor %W insert<span class=3D"hljs-number">-1</span>c
}
bind Text &lt;Right&gt; {
    tkTextSetCursor %W insert+<span class=3D"hljs-number">1</span>c
}
bind Text &lt;Up&gt; {
    tkTextSetCursor %W [tkTextUpDownLine %W <span class=3D"hljs-number">-1<=
/span>]
}
bind Text &lt;Down&gt; {
    tkTextSetCursor %W [tkTextUpDownLine %W <span class=3D"hljs-number">1</=
span>]
}
bind Text &lt;Shift-Left&gt; {
    tkTextKeySelect %W [%W index {insert - <span class=3D"hljs-number">1</s=
pan>c}]
}
bind Text &lt;Shift-Right&gt; {
    tkTextKeySelect %W [%W index {insert + <span class=3D"hljs-number">1</s=
pan>c}]
}
bind Text &lt;Shift-Up&gt; {
    tkTextKeySelect %W [tkTextUpDownLine %W <span class=3D"hljs-number">-1<=
/span>]
}
bind Text &lt;Shift-Down&gt; {
    tkTextKeySelect %W [tkTextUpDownLine %W <span class=3D"hljs-number">1</=
span>]
}
bind Text &lt;Control-Left&gt; {
    tkTextSetCursor %W [tkTextPrevPos %W insert <span class=3D"hljs-keyword=
">tcl_startOfPreviousWord</span>]
}
bind Text &lt;Control-Right&gt; {
    tkTextSetCursor %W [tkTextNextWord %W insert]
}
bind Text &lt;Control-Up&gt; {
    tkTextSetCursor %W [tkTextPrevPara %W insert]
}
bind Text &lt;Control-Down&gt; {
    tkTextSetCursor %W [tkTextNextPara %W insert]
}
bind Text &lt;Shift-Control-Left&gt; {
    tkTextKeySelect %W [tkTextPrevPos %W insert <span class=3D"hljs-keyword=
">tcl_startOfPreviousWord</span>]
}
bind Text &lt;Shift-Control-Right&gt; {
    tkTextKeySelect %W [tkTextNextWord %W insert]
}
bind Text &lt;Shift-Control-Up&gt; {
    tkTextKeySelect %W [tkTextPrevPara %W insert]
}
bind Text &lt;Shift-Control-Down&gt; {
    tkTextKeySelect %W [tkTextNextPara %W insert]
}
bind Text &lt;Prior&gt; {
    tkTextSetCursor %W [tkTextScrollPages %W <span class=3D"hljs-number">-1=
</span>]
}
bind Text &lt;Shift-Prior&gt; {
    tkTextKeySelect %W [tkTextScrollPages %W <span class=3D"hljs-number">-1=
</span>]
}
bind Text &lt;Next&gt; {
    tkTextSetCursor %W [tkTextScrollPages %W <span class=3D"hljs-number">1<=
/span>]
}
bind Text &lt;Shift-Next&gt; {
    tkTextKeySelect %W [tkTextScrollPages %W <span class=3D"hljs-number">1<=
/span>]
}
bind Text &lt;Control-Prior&gt; {
    %W xview scroll <span class=3D"hljs-number">-1</span> page
}
bind Text &lt;Control-Next&gt; {
    %W xview scroll <span class=3D"hljs-number">1</span> page
}
bind Text &lt;Home&gt; {
    tkTextSetCursor %W {insert linestart}
}
bind Text &lt;Shift-Home&gt; {
    tkTextKeySelect %W {insert linestart}
}
bind Text &lt;End&gt; {
    tkTextSetCursor %W {insert lineend}
}
bind Text &lt;Shift-End&gt; {
    tkTextKeySelect %W {insert lineend}
}
bind Text &lt;Control-Home&gt; {
    tkTextSetCursor %W <span class=3D"hljs-number">1.0</span>
}
bind Text &lt;Control-Shift-Home&gt; {
    tkTextKeySelect %W <span class=3D"hljs-number">1.0</span>
}
bind Text &lt;Control-End&gt; {
    tkTextSetCursor %W {end - <span class=3D"hljs-number">1</span> char}
}
bind Text &lt;Control-Shift-End&gt; {
    tkTextKeySelect %W {end - <span class=3D"hljs-number">1</span> char}
}
bind Text &lt;Tab&gt; {
    tkTextInsert %W \t
    focus %W
    <span class=3D"hljs-keyword">break</span>
}
bind Text &lt;Shift-Tab&gt; {
    <span class=3D"hljs-keyword">break</span>
}
bind Text &lt;Control-Tab&gt; {
    focus [tk_focusNext %W]
}
bind Text &lt;Control-Shift-Tab&gt; {
    focus [tk_focusPrev %W]
}
bind Text &lt;Control-i&gt; {
    tkTextInsert %W \t
}
bind Text &lt;Return&gt; {
    tkTextInsert %W \n
}
bind Text &lt;Delete&gt; {
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare [%W tag nextrange sel <span class=3D"hljs-number">1.0<=
/span> end] <span class=3D"hljs-string">""</span>]} then {
	%W delete sel.first sel.last
    } else {
	%W delete insert
	%W see insert
    }
}
bind Text &lt;BackSpace&gt; {
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare [%W tag nextrange sel <span class=3D"hljs-number">1.0<=
/span> end] <span class=3D"hljs-string">""</span>]} then {
	%W delete sel.first sel.last
    } elseif {[%W compare insert !=3D <span class=3D"hljs-number">1.0</span=
>]} {
	%W delete insert<span class=3D"hljs-number">-1</span>c
	%W see insert
    }
}
bind Text &lt;Control-space&gt; {
    %W mark <span class=3D"hljs-keyword">set</span> anchor insert
}
bind Text &lt;Select&gt; {
    %W mark <span class=3D"hljs-keyword">set</span> anchor insert
}
bind Text &lt;Control-Shift-space&gt; {
    <span class=3D"hljs-keyword">set</span> tkPriv(selectMode) char
    tkTextKeyExtend %W insert
}
bind Text &lt;Shift-Select&gt; {
    <span class=3D"hljs-keyword">set</span> tkPriv(selectMode) char
    tkTextKeyExtend %W insert
}
bind Text &lt;Control-slash&gt; {
    %W tag add sel <span class=3D"hljs-number">1.0</span> end
}
bind Text &lt;Control-backslash&gt; {
    %W tag remove sel <span class=3D"hljs-number">1.0</span> end
}
bind Text &lt;&lt;Cut&gt;&gt; {
    tk_textCut %W
}
bind Text &lt;&lt;Copy&gt;&gt; {
    tk_textCopy %W
}
bind Text &lt;&lt;Paste&gt;&gt; {
    tk_textPaste %W
}
bind Text &lt;&lt;Clear&gt;&gt; {
    <span class=3D"hljs-keyword">catch</span> {%W delete sel.first sel.last=
}
}
bind Text &lt;&lt;PasteSelection&gt;&gt; {
    <span class=3D"hljs-keyword">if</span> {!$tkPriv(mouseMoved) || $tk_str=
ictMotif} then {
	tkTextPaste %W %x %y
    }
}
bind Text &lt;Insert&gt; {
    <span class=3D"hljs-keyword">catch</span> {tkTextInsert %W [selection g=
et -displayof %W]}
}
bind Text &lt;KeyPress&gt; {
    tkTextInsert %W %A
}
bind Text &lt;Alt-KeyPress&gt; {# nothing }
bind Text &lt;Meta-KeyPress&gt; {# nothing}
bind Text &lt;Control-KeyPress&gt; {# nothing}
bind Text &lt;Escape&gt; {# nothing}
bind Text &lt;KP_Enter&gt; {# nothing}
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">strin=
g</span> equal $tcl_platform(platform) <span class=3D"hljs-string">"macinto=
sh"</span>]} then {
    bind Text &lt;Command-KeyPress&gt; {# nothing}
}
bind Text &lt;Control-a&gt; {
    <span class=3D"hljs-keyword">if</span> {!$tk_strictMotif} then {
	tkTextSetCursor %W {insert linestart}
    }
}
bind Text &lt;Control-b&gt; {
    <span class=3D"hljs-keyword">if</span> {!$tk_strictMotif} then {
	tkTextSetCursor %W insert<span class=3D"hljs-number">-1</span>c
    }
}
bind Text &lt;Control-d&gt; {
    <span class=3D"hljs-keyword">if</span> {!$tk_strictMotif} then {
	%W delete insert
    }
}
bind Text &lt;Control-e&gt; {
    <span class=3D"hljs-keyword">if</span> {!$tk_strictMotif} then {
	tkTextSetCursor %W {insert lineend}
    }
}
bind Text &lt;Control-f&gt; {
    <span class=3D"hljs-keyword">if</span> {!$tk_strictMotif} then {
	tkTextSetCursor %W insert+<span class=3D"hljs-number">1</span>c
    }
}
bind Text &lt;Control-k&gt; {
    <span class=3D"hljs-keyword">if</span> {!$tk_strictMotif} then {
	<span class=3D"hljs-keyword">if</span> {[%W compare insert =3D=3D {insert =
lineend}]} then {
	    %W delete insert
	} else {
	    %W delete insert {insert lineend}
	}
    }
}
bind Text &lt;Control-n&gt; {
    <span class=3D"hljs-keyword">if</span> {!$tk_strictMotif} then {
	tkTextSetCursor %W [tkTextUpDownLine %W <span class=3D"hljs-number">1</spa=
n>]
    }
}
bind Text &lt;Control-o&gt; {
    <span class=3D"hljs-keyword">if</span> {!$tk_strictMotif} then {
	%W insert insert \n
	%W mark <span class=3D"hljs-keyword">set</span> insert insert<span class=
=3D"hljs-number">-1</span>c
    }
}
bind Text &lt;Control-p&gt; {
    <span class=3D"hljs-keyword">if</span> {!$tk_strictMotif} then {
	tkTextSetCursor %W [tkTextUpDownLine %W <span class=3D"hljs-number">-1</sp=
an>]
    }
}
bind Text &lt;Control-t&gt; {
    <span class=3D"hljs-keyword">if</span> {!$tk_strictMotif} then {
	tkTextTranspose %W
    }
}
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">strin=
g</span> compare $tcl_platform(platform) <span class=3D"hljs-string">"windo=
ws"</span>]} then {
    bind Text &lt;Control-v&gt; {
	<span class=3D"hljs-keyword">if</span> {!$tk_strictMotif} then {
	    tkTextScrollPages %W <span class=3D"hljs-number">1</span>
	}
    }
}
bind Text &lt;Meta-b&gt; {
    <span class=3D"hljs-keyword">if</span> {!$tk_strictMotif} then {
	tkTextSetCursor %W [tkTextPrevPos %W insert <span class=3D"hljs-keyword">t=
cl_startOfPreviousWord</span>]
    }
}
bind Text &lt;Meta-d&gt; {
    <span class=3D"hljs-keyword">if</span> {!$tk_strictMotif} then {
	%W delete insert [tkTextNextWord %W insert]
    }
}
bind Text &lt;Meta-f&gt; {
    <span class=3D"hljs-keyword">if</span> {!$tk_strictMotif} then {
	tkTextSetCursor %W [tkTextNextWord %W insert]
    }
}
bind Text &lt;Meta-less&gt; {
    <span class=3D"hljs-keyword">if</span> {!$tk_strictMotif} then {
	tkTextSetCursor %W <span class=3D"hljs-number">1.0</span>
    }
}
bind Text &lt;Meta-greater&gt; {
    <span class=3D"hljs-keyword">if</span> {!$tk_strictMotif} then {
	tkTextSetCursor %W end<span class=3D"hljs-number">-1</span>c
    }
}
bind Text &lt;Meta-BackSpace&gt; {
    <span class=3D"hljs-keyword">if</span> {!$tk_strictMotif} then {
	%W delete [tkTextPrevPos %W insert <span class=3D"hljs-keyword">tcl_startO=
fPreviousWord</span>] insert
    }
}
bind Text &lt;Meta-Delete&gt; {
    <span class=3D"hljs-keyword">if</span> {!$tk_strictMotif} then {
	%W delete [tkTextPrevPos %W insert <span class=3D"hljs-keyword">tcl_startO=
fPreviousWord</span>] insert
    }
}
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">strin=
g</span> equal $tcl_platform(platform) <span class=3D"hljs-string">"macinto=
sh"</span>]} then {
    bind Text &lt;FocusIn&gt; {
	%W tag configure sel -borderwidth <span class=3D"hljs-number">0</span>
	%W configure -selectbackground systemHighlight -selectforeground systemHig=
hlightText
    }
    bind Text &lt;FocusOut&gt; {
	%W tag configure sel -borderwidth <span class=3D"hljs-number">1</span>
	%W configure -selectbackground white -selectforeground black
    }
    bind Text &lt;Option-Left&gt; {
	tkTextSetCursor %W [tkTextPrevPos %W insert <span class=3D"hljs-keyword">t=
cl_startOfPreviousWord</span>]
    }
    bind Text &lt;Option-Right&gt; {
	tkTextSetCursor %W [tkTextNextWord %W insert]
    }
    bind Text &lt;Option-Up&gt; {
	tkTextSetCursor %W [tkTextPrevPara %W insert]
    }
    bind Text &lt;Option-Down&gt; {
	tkTextSetCursor %W [tkTextNextPara %W insert]
    }
    bind Text &lt;Shift-Option-Left&gt; {
	tkTextKeySelect %W [tkTextPrevPos %W insert <span class=3D"hljs-keyword">t=
cl_startOfPreviousWord</span>]
    }
    bind Text &lt;Shift-Option-Right&gt; {
	tkTextKeySelect %W [tkTextNextWord %W insert]
    }
    bind Text &lt;Shift-Option-Up&gt; {
	tkTextKeySelect %W [tkTextPrevPara %W insert]
    }
    bind Text &lt;Shift-Option-Down&gt; {
	tkTextKeySelect %W [tkTextNextPara %W insert]
    }
}
bind Text &lt;Control-h&gt; {
    <span class=3D"hljs-keyword">if</span> {!$tk_strictMotif} then {
	<span class=3D"hljs-keyword">if</span> {[%W compare insert !=3D <span clas=
s=3D"hljs-number">1.0</span>]} then {
	    %W delete insert<span class=3D"hljs-number">-1</span>c
	    %W see insert
	}
    }
}
bind Text &lt;<span class=3D"hljs-number">2</span>&gt; {
    <span class=3D"hljs-keyword">if</span> {!$tk_strictMotif} then {
	%W <span class=3D"hljs-keyword">scan</span> mark %x %y
	<span class=3D"hljs-keyword">set</span> tkPriv(x) %x
	<span class=3D"hljs-keyword">set</span> tkPriv(y) %y
	<span class=3D"hljs-keyword">set</span> tkPriv(mouseMoved) <span class=3D"=
hljs-number">0</span>
    }
}
bind Text &lt;B2-Motion&gt; {
    <span class=3D"hljs-keyword">if</span> {!$tk_strictMotif} then {
	<span class=3D"hljs-keyword">if</span> {(%x !=3D $tkPriv(x)) ||(%y !=3D $t=
kPriv(y))} then {
	    <span class=3D"hljs-keyword">set</span> tkPriv(mouseMoved) <span class=
=3D"hljs-number">1</span>
	}
	<span class=3D"hljs-keyword">if</span> {$tkPriv(mouseMoved)} then {
	    %W <span class=3D"hljs-keyword">scan</span> dragto %x %y
	}
    }
}
<span class=3D"hljs-keyword">set</span> tkPriv(prevPos) {}
bind Text &lt;MouseWheel&gt; {
    %W yview scroll [<span class=3D"hljs-keyword">expr</span> {-(%D / <span=
 class=3D"hljs-number">120</span>) * <span class=3D"hljs-number">4</span>}]=
 units
}
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">strin=
g</span> equal <span class=3D"hljs-string">"unix"</span> $tcl_platform(plat=
form)]} then {
    bind Text &lt;<span class=3D"hljs-number">4</span>&gt; {
	<span class=3D"hljs-keyword">if</span> {!$tk_strictMotif} then {
	    %W yview scroll <span class=3D"hljs-number">-5</span> units
	}
    }
    bind Text &lt;<span class=3D"hljs-number">5</span>&gt; {
	<span class=3D"hljs-keyword">if</span> {!$tk_strictMotif} then {
	    %W yview scroll <span class=3D"hljs-number">5</span> units
	}
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkTextC=
losestGap</span> {w x y} {
    <span class=3D"hljs-keyword">set</span> pos [$w index @$x,$y]
    <span class=3D"hljs-keyword">set</span> bbox [$w bbox $pos]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $bbox <span class=3D"hljs-string">""</span>]} then {
	<span class=3D"hljs-keyword">return</span> $pos
    }
    <span class=3D"hljs-keyword">if</span> {($x - [<span class=3D"hljs-keyw=
ord">lindex</span> $bbox <span class=3D"hljs-number">0</span>]) &lt;([<span=
 class=3D"hljs-keyword">lindex</span> $bbox <span class=3D"hljs-number">2</=
span>]/<span class=3D"hljs-number">2</span>)} then {
	<span class=3D"hljs-keyword">return</span> $pos
    }
    $w index <span class=3D"hljs-string">"$pos + 1 char"</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkTextB=
utton1</span> {w x y} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">set</span> tkPriv(selectMode) char
    <span class=3D"hljs-keyword">set</span> tkPriv(mouseMoved) <span class=
=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> tkPriv(pressX) $x
    $w mark <span class=3D"hljs-keyword">set</span> insert [tkTextClosestGa=
p $w $x $y]
    $w mark <span class=3D"hljs-keyword">set</span> anchor insert
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal [$w cget -state] <span class=3D"hljs-string">"normal"</s=
pan>]} then {
	focus $w
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkTextS=
electTo</span> {w x y {extend <span class=3D"hljs-number">0</span>}} {
    <span class=3D"hljs-keyword">global</span> tkPriv tcl_platform
    <span class=3D"hljs-keyword">set</span> cur [tkTextClosestGap $w $x $y]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">c=
atch</span> {$w index anchor}]} then {
	$w mark <span class=3D"hljs-keyword">set</span> anchor $cur
    }
    <span class=3D"hljs-keyword">set</span> anchor [$w index anchor]
    <span class=3D"hljs-keyword">if</span> {[$w compare $cur !=3D $anchor] =
||(abs($tkPriv(pressX) - $x) &gt;=3D <span class=3D"hljs-number">3</span>)}=
 then {
	<span class=3D"hljs-keyword">set</span> tkPriv(mouseMoved) <span class=3D"=
hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">switch</span> $tkPriv(selectMode) {
    char {
	    <span class=3D"hljs-keyword">if</span> {[$w compare $cur &lt; anchor]}=
 then {
		<span class=3D"hljs-keyword">set</span> first $cur
		<span class=3D"hljs-keyword">set</span> last anchor
	    } else {
		<span class=3D"hljs-keyword">set</span> first anchor
		<span class=3D"hljs-keyword">set</span> last $cur
	    }
	}
    word {
	    <span class=3D"hljs-keyword">if</span> {[$w compare $cur &lt; anchor]}=
 then {
		<span class=3D"hljs-keyword">set</span> first [tkTextPrevPos $w <span cla=
ss=3D"hljs-string">"$cur + 1c"</span> <span class=3D"hljs-keyword">tcl_word=
BreakBefore</span>]
		<span class=3D"hljs-keyword">if</span> {!$extend} then {
		    <span class=3D"hljs-keyword">set</span> last [tkTextNextPos $w <span =
class=3D"hljs-string">"anchor"</span> <span class=3D"hljs-keyword">tcl_word=
BreakAfter</span>]
		} else {
		    <span class=3D"hljs-keyword">set</span> last anchor
		}
	    } else {
		<span class=3D"hljs-keyword">set</span> last [tkTextNextPos $w <span clas=
s=3D"hljs-string">"$cur - 1c"</span> <span class=3D"hljs-keyword">tcl_wordB=
reakAfter</span>]
		<span class=3D"hljs-keyword">if</span> {!$extend} then {
		    <span class=3D"hljs-keyword">set</span> first [tkTextPrevPos $w ancho=
r <span class=3D"hljs-keyword">tcl_wordBreakBefore</span>]
		} else {
		    <span class=3D"hljs-keyword">set</span> first anchor
		}
	    }
	}
    line {
	    <span class=3D"hljs-keyword">if</span> {[$w compare $cur &lt; anchor]}=
 then {
		<span class=3D"hljs-keyword">set</span> first [$w index <span class=3D"hl=
js-string">"$cur linestart"</span>]
		<span class=3D"hljs-keyword">set</span> last [$w index <span class=3D"hlj=
s-string">"anchor - 1c lineend + 1c"</span>]
	    } else {
		<span class=3D"hljs-keyword">set</span> first [$w index <span class=3D"hl=
js-string">"anchor linestart"</span>]
		<span class=3D"hljs-keyword">set</span> last [$w index <span class=3D"hlj=
s-string">"$cur lineend + 1c"</span>]
	    }
	}
    }
    <span class=3D"hljs-keyword">if</span> {$tkPriv(mouseMoved) || [<span c=
lass=3D"hljs-keyword">string</span> compare $tkPriv(selectMode) <span class=
=3D"hljs-string">"char"</span>]} then {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> compare $tcl_platform(platform) <span class=3D"hljs-string">"unix=
"</span>] &amp;&amp; [$w compare $cur &lt; anchor]} then {
	    $w mark <span class=3D"hljs-keyword">set</span> insert $first
	} else {
	    $w mark <span class=3D"hljs-keyword">set</span> insert $last
	}
	$w tag remove sel <span class=3D"hljs-number">0.0</span> $first
	$w tag add sel $first $last
	$w tag remove sel $last end
	<span class=3D"hljs-keyword">update</span> idletasks
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkTextK=
eyExtend</span> {w index} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">set</span> cur [$w index $index]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">c=
atch</span> {$w index anchor}]} then {
	$w mark <span class=3D"hljs-keyword">set</span> anchor $cur
    }
    <span class=3D"hljs-keyword">set</span> anchor [$w index anchor]
    <span class=3D"hljs-keyword">if</span> {[$w compare $cur &lt; anchor]} =
then {
	<span class=3D"hljs-keyword">set</span> first $cur
	<span class=3D"hljs-keyword">set</span> last anchor
    } else {
	<span class=3D"hljs-keyword">set</span> first anchor
	<span class=3D"hljs-keyword">set</span> last $cur
    }
    $w tag remove sel <span class=3D"hljs-number">0.0</span> $first
    $w tag add sel $first $last
    $w tag remove sel $last end
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkTextP=
aste</span> {w x y} {
    $w mark <span class=3D"hljs-keyword">set</span> insert [tkTextClosestGa=
p $w $x $y]
    <span class=3D"hljs-keyword">catch</span> {$w insert insert [selection =
get -displayof $w]}
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal [$w cget -state] <span class=3D"hljs-string">"normal"</s=
pan>]} then {
	focus $w
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkTextA=
utoScan</span> {w} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">if</span> {![winfo exists $w]} then <span =
class=3D"hljs-keyword">return</span>
    <span class=3D"hljs-keyword">if</span> {$tkPriv(y) &gt;=3D [winfo heigh=
t $w]} then {
	$w yview scroll <span class=3D"hljs-number">2</span> units
    } elseif {$tkPriv(y) &lt; <span class=3D"hljs-number">0</span>} {
	$w yview scroll <span class=3D"hljs-number">-2</span> units
    } elseif {$tkPriv(x) &gt;=3D [winfo width $w]} {
	$w xview scroll <span class=3D"hljs-number">2</span> units
    } elseif {$tkPriv(x) &lt; <span class=3D"hljs-number">0</span>} {
	$w xview scroll <span class=3D"hljs-number">-2</span> units
    } else {
	<span class=3D"hljs-keyword">return</span>
    }
    tkTextSelectTo $w $tkPriv(x) $tkPriv(y)
    <span class=3D"hljs-keyword">set</span> tkPriv(afterId) [<span class=3D=
"hljs-keyword">after</span> <span class=3D"hljs-number">50</span> [<span cl=
ass=3D"hljs-keyword">list</span> tkTextAutoScan $w]]
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkTextS=
etCursor</span> {w pos} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">if</span> {[$w compare $pos =3D=3D end]} t=
hen {
	<span class=3D"hljs-keyword">set</span> pos {end - <span class=3D"hljs-num=
ber">1</span> chars}
    }
    $w mark <span class=3D"hljs-keyword">set</span> insert $pos
    $w tag remove sel <span class=3D"hljs-number">1.0</span> end
    $w see insert
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkTextK=
eySelect</span> {w new} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal [$w tag nextrange sel <span class=3D"hljs-number">1.0</s=
pan> end] <span class=3D"hljs-string">""</span>]} then {
	<span class=3D"hljs-keyword">if</span> {[$w compare $new &lt; insert]} the=
n {
	    $w tag add sel $new insert
	} else {
	    $w tag add sel insert $new
	}
	$w mark <span class=3D"hljs-keyword">set</span> anchor insert
    } else {
	<span class=3D"hljs-keyword">if</span> {[$w compare $new &lt; anchor]} the=
n {
	    <span class=3D"hljs-keyword">set</span> first $new
	    <span class=3D"hljs-keyword">set</span> last anchor
	} else {
	    <span class=3D"hljs-keyword">set</span> first anchor
	    <span class=3D"hljs-keyword">set</span> last $new
	}
	$w tag remove sel <span class=3D"hljs-number">1.0</span> $first
	$w tag add sel $first $last
	$w tag remove sel $last end
    }
    $w mark <span class=3D"hljs-keyword">set</span> insert $new
    $w see insert
    <span class=3D"hljs-keyword">update</span> idletasks
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkTextR=
esetAnchor</span> {w index} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal [$w tag ranges sel] <span class=3D"hljs-string">""</span=
>]} then {
	$w mark <span class=3D"hljs-keyword">set</span> anchor $index
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">set</span> a [$w index $index]
    <span class=3D"hljs-keyword">set</span> b [$w index sel.first]
    <span class=3D"hljs-keyword">set</span> c [$w index sel.last]
    <span class=3D"hljs-keyword">if</span> {[$w compare $a &lt; $b]} then {
	$w mark <span class=3D"hljs-keyword">set</span> anchor sel.last
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">if</span> {[$w compare $a &gt; $c]} then {
	$w mark <span class=3D"hljs-keyword">set</span> anchor sel.first
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">scan</span> $a <span class=3D"hljs-string"=
>"%d.%d"</span> lineA chA
    <span class=3D"hljs-keyword">scan</span> $b <span class=3D"hljs-string"=
>"%d.%d"</span> lineB chB
    <span class=3D"hljs-keyword">scan</span> $c <span class=3D"hljs-string"=
>"%d.%d"</span> lineC chC
    <span class=3D"hljs-keyword">if</span> {$lineB &lt; $lineC+<span class=
=3D"hljs-number">2</span>} then {
	<span class=3D"hljs-keyword">set</span> total [<span class=3D"hljs-keyword=
">string</span> length [$w get $b $c]]
	<span class=3D"hljs-keyword">if</span> {$total &lt;=3D <span class=3D"hljs=
-number">2</span>} then {
	    <span class=3D"hljs-keyword">return</span>
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> length [$w get $b $a]] &lt;($total/<span class=3D"hljs-number">2<=
/span>)} then {
	    $w mark <span class=3D"hljs-keyword">set</span> anchor sel.last
	} else {
	    $w mark <span class=3D"hljs-keyword">set</span> anchor sel.first
	}
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">if</span> {($lineA-$lineB) &lt;($lineC-$li=
neA)} then {
	$w mark <span class=3D"hljs-keyword">set</span> anchor sel.last
    } else {
	$w mark <span class=3D"hljs-keyword">set</span> anchor sel.first
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkTextI=
nsert</span> {w s} {
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $s <span class=3D"hljs-string">""</span>] || [<span clas=
s=3D"hljs-keyword">string</span> equal [$w cget -state] <span class=3D"hljs=
-string">"disabled"</span>]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">catch</span> {
	<span class=3D"hljs-keyword">if</span> {[$w compare sel.first &lt;=3D inse=
rt] &amp;&amp; [$w compare sel.last &gt;=3D insert]} then {
	    $w delete sel.first sel.last
	}
    }
    $w insert insert $s
    $w see insert
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkTextU=
pDownLine</span> {w n} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">set</span> i [$w index insert]
    <span class=3D"hljs-keyword">scan</span> $i <span class=3D"hljs-string"=
>"%d.%d"</span> line char
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare $tkPriv(prevPos) $i]} then {
	<span class=3D"hljs-keyword">set</span> tkPriv(char) $char
    }
    <span class=3D"hljs-keyword">set</span> new [$w index [<span class=3D"h=
ljs-keyword">expr</span> {$line + $n}].$tkPriv(char)]
    <span class=3D"hljs-keyword">if</span> {[$w compare $new =3D=3D end] ||=
 [$w compare $new =3D=3D <span class=3D"hljs-string">"insert linestart"</sp=
an>]} then {
	<span class=3D"hljs-keyword">set</span> new $i
    }
    <span class=3D"hljs-keyword">set</span> tkPriv(prevPos) $new
    <span class=3D"hljs-keyword">return</span> $new
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkTextP=
revPara</span> {w pos} {
    <span class=3D"hljs-keyword">set</span> pos [$w index <span class=3D"hl=
js-string">"$pos linestart"</span>]
    <span class=3D"hljs-keyword">while</span> {<span class=3D"hljs-number">=
1</span>} {
	<span class=3D"hljs-keyword">if</span> {([<span class=3D"hljs-keyword">str=
ing</span> equal [$w get <span class=3D"hljs-string">"$pos - 1 line"</span>=
] <span class=3D"hljs-string">"\n"</span>] &amp;&amp; [<span class=3D"hljs-=
keyword">string</span> compare [$w get $pos] <span class=3D"hljs-string">"\=
n"</span>]) || [<span class=3D"hljs-keyword">string</span> equal $pos <span=
 class=3D"hljs-string">"1.0"</span>]} then {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
regexp</span> -indices {^[ 	]+(.)} [$w get $pos <span class=3D"hljs-string"=
>"$pos lineend"</span>] dummy index]} then {
		<span class=3D"hljs-keyword">set</span> pos [$w index <span class=3D"hljs=
-string">"$pos + [lindex $index 0] chars"</span>]
	    }
	    <span class=3D"hljs-keyword">if</span> {[$w compare $pos !=3D insert] =
|| [<span class=3D"hljs-keyword">string</span> equal $pos <span class=3D"hl=
js-number">1.0</span>]} then {
		<span class=3D"hljs-keyword">return</span> $pos
	    }
	}
	<span class=3D"hljs-keyword">set</span> pos [$w index <span class=3D"hljs-=
string">"$pos - 1 line"</span>]
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkTextN=
extPara</span> {w start} {
    <span class=3D"hljs-keyword">set</span> pos [$w index <span class=3D"hl=
js-string">"$start linestart + 1 line"</span>]
    <span class=3D"hljs-keyword">while</span> {[<span class=3D"hljs-keyword=
">string</span> compare [$w get $pos] <span class=3D"hljs-string">"\n"</spa=
n>]} {
	<span class=3D"hljs-keyword">if</span> {[$w compare $pos =3D=3D end]} then=
 {
	    <span class=3D"hljs-keyword">return</span> [$w index <span class=3D"hl=
js-string">"end - 1c"</span>]
	}
	<span class=3D"hljs-keyword">set</span> pos [$w index <span class=3D"hljs-=
string">"$pos + 1 line"</span>]
    }
    <span class=3D"hljs-keyword">while</span> {[<span class=3D"hljs-keyword=
">string</span> equal [$w get $pos] <span class=3D"hljs-string">"\n"</span>=
]} {
	<span class=3D"hljs-keyword">set</span> pos [$w index <span class=3D"hljs-=
string">"$pos + 1 line"</span>]
	<span class=3D"hljs-keyword">if</span> {[$w compare $pos =3D=3D end]} then=
 {
	    <span class=3D"hljs-keyword">return</span> [$w index <span class=3D"hl=
js-string">"end - 1c"</span>]
	}
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">r=
egexp</span> -indices {^[ 	]+(.)} [$w get $pos <span class=3D"hljs-string">=
"$pos lineend"</span>] dummy index]} then {
	<span class=3D"hljs-keyword">return</span> [$w index <span class=3D"hljs-s=
tring">"$pos + [lindex $index 0] chars"</span>]
    }
    <span class=3D"hljs-keyword">return</span> $pos
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkTextS=
crollPages</span> {w count} {
    <span class=3D"hljs-keyword">set</span> bbox [$w bbox insert]
    $w yview scroll $count pages
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $bbox <span class=3D"hljs-string">""</span>]} then {
	<span class=3D"hljs-keyword">return</span> [$w index @[<span class=3D"hljs=
-keyword">expr</span> {[winfo height $w]/<span class=3D"hljs-number">2</spa=
n>}],<span class=3D"hljs-number">0</span>]
    }
    <span class=3D"hljs-keyword">return</span> [$w index @[<span class=3D"h=
ljs-keyword">lindex</span> $bbox <span class=3D"hljs-number">0</span>],[<sp=
an class=3D"hljs-keyword">lindex</span> $bbox <span class=3D"hljs-number">1=
</span>]]
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkTextT=
ranspose</span> w {
    <span class=3D"hljs-keyword">set</span> pos insert
    <span class=3D"hljs-keyword">if</span> {[$w compare $pos !=3D <span cla=
ss=3D"hljs-string">"$pos lineend"</span>]} then {
	<span class=3D"hljs-keyword">set</span> pos [$w index <span class=3D"hljs-=
string">"$pos + 1 char"</span>]
    }
    <span class=3D"hljs-keyword">set</span> new [$w get <span class=3D"hljs=
-string">"$pos - 1 char"</span>][$w get <span class=3D"hljs-string">"$pos -=
 2 char"</span>]
    <span class=3D"hljs-keyword">if</span> {[$w compare <span class=3D"hljs=
-string">"$pos - 1 char"</span> =3D=3D <span class=3D"hljs-number">1.0</spa=
n>]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    $w delete <span class=3D"hljs-string">"$pos - 2 char"</span> $pos
    $w insert insert $new
    $w see insert
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tk_text=
Copy</span> w {
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
catch</span> {<span class=3D"hljs-keyword">set</span> data [$w get sel.firs=
t sel.last]}]} then {
	clipboard clear -displayof $w
	clipboard <span class=3D"hljs-keyword">append</span> -displayof $w $data
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tk_text=
Cut</span> w {
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
catch</span> {<span class=3D"hljs-keyword">set</span> data [$w get sel.firs=
t sel.last]}]} then {
	clipboard clear -displayof $w
	clipboard <span class=3D"hljs-keyword">append</span> -displayof $w $data
	$w delete sel.first sel.last
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tk_text=
Paste</span> w {
    <span class=3D"hljs-keyword">global</span> tcl_platform
    <span class=3D"hljs-keyword">catch</span> {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> compare $tcl_platform(platform) <span class=3D"hljs-string">"unix=
"</span>]} then {
	    <span class=3D"hljs-keyword">catch</span> {
		$w delete sel.first sel.last
	    }
	}
	$w insert insert [selection get -displayof $w -selection CLIPBOARD]
    }
}
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">strin=
g</span> equal $tcl_platform(platform) <span class=3D"hljs-string">"windows=
"</span>]} then {
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkT=
extNextWord</span> {w start} {
	tkTextNextPos $w [tkTextNextPos $w $start <span class=3D"hljs-keyword">tcl=
_endOfWord</span>] <span class=3D"hljs-keyword">tcl_startOfNextWord</span>
    }
} else {
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkT=
extNextWord</span> {w start} {
	tkTextNextPos $w $start <span class=3D"hljs-keyword">tcl_endOfWord</span>
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkTextN=
extPos</span> {w start op} {
    <span class=3D"hljs-keyword">set</span> text <span class=3D"hljs-string=
">""</span>
    <span class=3D"hljs-keyword">set</span> cur $start
    <span class=3D"hljs-keyword">while</span> {[$w compare $cur &lt; end]} =
{
	<span class=3D"hljs-keyword">set</span> text $text[$w get $cur <span class=
=3D"hljs-string">"$cur lineend + 1c"</span>]
	<span class=3D"hljs-keyword">set</span> pos [$op $text <span class=3D"hljs=
-number">0</span>]
	<span class=3D"hljs-keyword">if</span> {$pos &gt;=3D <span class=3D"hljs-n=
umber">0</span>} then {
	    <span class=3D"hljs-keyword">set</span> dump [$w dump -image -window $=
start <span class=3D"hljs-string">"$start + $pos c"</span>]
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
llength</span> $dump]} then {
		<span class=3D"hljs-keyword">set</span> pos [<span class=3D"hljs-keyword"=
>expr</span> {$pos +([<span class=3D"hljs-keyword">llength</span> $dump]/<s=
pan class=3D"hljs-number">3</span>)}]
	    }
	    <span class=3D"hljs-keyword">return</span> [$w index <span class=3D"hl=
js-string">"$start + $pos c"</span>]
	}
	<span class=3D"hljs-keyword">set</span> cur [$w index <span class=3D"hljs-=
string">"$cur lineend +1c"</span>]
    }
    <span class=3D"hljs-keyword">return</span> end
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkTextP=
revPos</span> {w start op} {
    <span class=3D"hljs-keyword">set</span> text <span class=3D"hljs-string=
">""</span>
    <span class=3D"hljs-keyword">set</span> cur $start
    <span class=3D"hljs-keyword">while</span> {[$w compare $cur &gt; <span =
class=3D"hljs-number">0.0</span>]} {
	<span class=3D"hljs-keyword">set</span> text [$w get <span class=3D"hljs-s=
tring">"$cur linestart - 1c"</span> $cur]$text
	<span class=3D"hljs-keyword">set</span> pos [$op $text end]
	<span class=3D"hljs-keyword">if</span> {$pos &gt;=3D <span class=3D"hljs-n=
umber">0</span>} then {
	    <span class=3D"hljs-keyword">set</span> dump [$w dump -image -window <=
span class=3D"hljs-string">"$cur linestart"</span> <span class=3D"hljs-stri=
ng">"$start - 1c"</span>]
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
llength</span> $dump]} then {
		<span class=3D"hljs-keyword">if</span> {[$w compare [<span class=3D"hljs-=
keyword">lindex</span> $dump <span class=3D"hljs-number">2</span>] &gt; <sp=
an class=3D"hljs-string">"$cur linestart - 1c + $pos c"</span>]} then {
		    <span class=3D"hljs-keyword">incr</span> pos <span class=3D"hljs-numb=
er">-1</span>
		}
		<span class=3D"hljs-keyword">set</span> pos [<span class=3D"hljs-keyword"=
>expr</span> {$pos +([<span class=3D"hljs-keyword">llength</span> $dump]/<s=
pan class=3D"hljs-number">3</span>)}]
	    }
	    <span class=3D"hljs-keyword">return</span> [$w index <span class=3D"hl=
js-string">"$cur linestart - 1c + $pos c"</span>]
	}
	<span class=3D"hljs-keyword">set</span> cur [$w index <span class=3D"hljs-=
string">"$cur linestart - 1c"</span>]
    }
    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">=
0.0</span>
}
<span class=3D"hljs-keyword">package</span> require -exact Tk <span class=
=3D"hljs-number">8.3</span>
<span class=3D"hljs-keyword">package</span> require -exact Tcl <span class=
=3D"hljs-number">8.3</span>
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info<=
/span> exists auto_path] &amp;&amp; [<span class=3D"hljs-keyword">string</s=
pan> compare {} $tk_library] &amp;&amp; [<span class=3D"hljs-keyword">lsear=
ch</span> -exact $auto_path $tk_library] &lt; <span class=3D"hljs-number">0=
</span>} then {
    <span class=3D"hljs-keyword">lappend</span> auto_path $tk_library
}
<span class=3D"hljs-keyword">set</span> tk_strictMotif <span class=3D"hljs-=
number">0</span>
<span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keyword">=
eval</span> ::tk {
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::tk::P=
laceWindow</span> {w {place <span class=3D"hljs-string">""</span>} {anchor =
<span class=3D"hljs-string">""</span>}} {
    wm withdraw $w
    <span class=3D"hljs-keyword">update</span> idletasks
    <span class=3D"hljs-keyword">set</span> checkBounds <span class=3D"hljs=
-number">1</span>
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal -len [<span class=3D"hljs-keyword">string</span> length =
$place] $place <span class=3D"hljs-string">"pointer"</span>]} then {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> equal -len [<span class=3D"hljs-keyword">string</span> length $an=
chor] $anchor <span class=3D"hljs-string">"center"</span>]} then {
	    <span class=3D"hljs-keyword">set</span> x [<span class=3D"hljs-keyword=
">expr</span> {[winfo pointerx $w]-[winfo reqwidth $w]/<span class=3D"hljs-=
number">2</span>}]
	    <span class=3D"hljs-keyword">set</span> y [<span class=3D"hljs-keyword=
">expr</span> {[winfo pointery $w]-[winfo reqheight $w]/<span class=3D"hljs=
-number">2</span>}]
	} else {
	    <span class=3D"hljs-keyword">set</span> x [winfo pointerx $w]
	    <span class=3D"hljs-keyword">set</span> y [winfo pointery $w]
	}
    } elseif {[<span class=3D"hljs-keyword">string</span> equal -len [<span=
 class=3D"hljs-keyword">string</span> length $place] $place <span class=3D"=
hljs-string">"widget"</span>] &amp;&amp; [winfo exists $anchor] &amp;&amp; =
[winfo ismapped $anchor]} {
	<span class=3D"hljs-keyword">set</span> x [<span class=3D"hljs-keyword">ex=
pr</span> {[winfo rootx $anchor] +([winfo width $anchor]-[winfo reqwidth $w=
]) /<span class=3D"hljs-number">2</span>}]
	<span class=3D"hljs-keyword">set</span> y [<span class=3D"hljs-keyword">ex=
pr</span> {[winfo rooty $anchor] +([winfo height $anchor]-[winfo reqheight =
$w]) /<span class=3D"hljs-number">2</span>}]
    } else {
	<span class=3D"hljs-keyword">set</span> x [<span class=3D"hljs-keyword">ex=
pr</span> {([winfo screenwidth $w]-[winfo reqwidth $w]) /<span class=3D"hlj=
s-number">2</span>}]
	<span class=3D"hljs-keyword">set</span> y [<span class=3D"hljs-keyword">ex=
pr</span> {([winfo screenheight $w]-[winfo reqheight $w]) /<span class=3D"h=
ljs-number">2</span>}]
	<span class=3D"hljs-keyword">set</span> checkBounds <span class=3D"hljs-nu=
mber">0</span>
    }
    <span class=3D"hljs-keyword">if</span> {$checkBounds} then {
	<span class=3D"hljs-keyword">if</span> {$x &lt; <span class=3D"hljs-number=
">0</span>} then {
	    <span class=3D"hljs-keyword">set</span> x <span class=3D"hljs-number">=
0</span>
	} elseif {$x &gt;([winfo screenwidth $w]-[winfo reqwidth $w])} {
	    <span class=3D"hljs-keyword">set</span> x [<span class=3D"hljs-keyword=
">expr</span> {[winfo screenwidth $w]-[winfo reqwidth $w]}]
	}
	<span class=3D"hljs-keyword">if</span> {$y &lt; <span class=3D"hljs-number=
">0</span>} then {
	    <span class=3D"hljs-keyword">set</span> y <span class=3D"hljs-number">=
0</span>
	} elseif {$y &gt;([winfo screenheight $w]-[winfo reqheight $w])} {
	    <span class=3D"hljs-keyword">set</span> y [<span class=3D"hljs-keyword=
">expr</span> {[winfo screenheight $w]-[winfo reqheight $w]}]
	}
    }
    wm geometry $w +$x+$y
    wm deiconify $w
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::tk::S=
etFocusGrab</span> {grab {focus {}}} {
    <span class=3D"hljs-keyword">set</span> index <span class=3D"hljs-strin=
g">"$grab,$focus"</span>
    <span class=3D"hljs-keyword">upvar</span> ::tk::FocusGrab($index) data
    <span class=3D"hljs-keyword">lappend</span> data [focus]
    <span class=3D"hljs-keyword">set</span> oldGrab [grab current $grab]
    <span class=3D"hljs-keyword">lappend</span> data $oldGrab
    <span class=3D"hljs-keyword">if</span> {[winfo exists $oldGrab]} then {
	<span class=3D"hljs-keyword">lappend</span> data [grab status $oldGrab]
    }
    grab $grab
    <span class=3D"hljs-keyword">if</span> {[winfo exists $focus]} then {
	focus $focus
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::tk::R=
estoreFocusGrab</span> {grab focus {destroy destroy}} {
    <span class=3D"hljs-keyword">set</span> index <span class=3D"hljs-strin=
g">"$grab,$focus"</span>
    <span class=3D"hljs-keyword">foreach</span> {oldFocus oldGrab oldStatus=
} $::tk::FocusGrab($index) {
	<span class=3D"hljs-keyword">break</span>
    }
    <span class=3D"hljs-keyword">unset</span> ::tk::FocusGrab($index)
    <span class=3D"hljs-keyword">catch</span> {focus $oldFocus}
    grab release $grab
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $destroy <span class=3D"hljs-string">"withdraw"</span>]}=
 then {
	wm withdraw $grab
    } else {
	destroy $grab
    }
    <span class=3D"hljs-keyword">if</span> {[winfo exists $oldGrab] &amp;&a=
mp; [winfo ismapped $oldGrab]} then {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> equal $oldStatus <span class=3D"hljs-string">"global"</span>]} th=
en {
	    grab -<span class=3D"hljs-keyword">global</span> $oldGrab
	} else {
	    grab $oldGrab
	}
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkScree=
nChanged</span> screen {
    <span class=3D"hljs-keyword">set</span> x [<span class=3D"hljs-keyword"=
>string</span> last . $screen]
    <span class=3D"hljs-keyword">if</span> {$x &gt; <span class=3D"hljs-num=
ber">0</span>} then {
	<span class=3D"hljs-keyword">set</span> disp [<span class=3D"hljs-keyword"=
>string</span> range $screen <span class=3D"hljs-number">0</span> [<span cl=
ass=3D"hljs-keyword">expr</span> {$x - <span class=3D"hljs-number">1</span>=
}]]
    } else {
	<span class=3D"hljs-keyword">set</span> disp $screen
    }
    <span class=3D"hljs-keyword">uplevel</span> #<span class=3D"hljs-number=
">0</span> <span class=3D"hljs-keyword">upvar</span> #<span class=3D"hljs-n=
umber">0</span> tkPriv.$disp tkPriv
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">global</span> tcl_platform
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists tkPriv]} then {
	<span class=3D"hljs-keyword">set</span> tkPriv(screen) $screen
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">array</span> <span class=3D"hljs-keyword">=
set</span> tkPriv {
activeMenu	{}
activeItem	{}
afterId		{}
buttons		<span class=3D"hljs-number">0</span>
buttonWindow	{}
dragging	<span class=3D"hljs-number">0</span>
focus		{}
grab		{}
initPos		{}
inMenubutton	{}
listboxPrev	{}
menuBar		{}
mouseMoved	<span class=3D"hljs-number">0</span>
oldGrab		{}
popup		{}
postedMb	{}
pressX		<span class=3D"hljs-number">0</span>
pressY		<span class=3D"hljs-number">0</span>
prevPos		<span class=3D"hljs-number">0</span>
selectMode	char
}
    <span class=3D"hljs-keyword">set</span> tkPriv(screen) $screen
    <span class=3D"hljs-keyword">set</span> tkPriv(tearoff) [<span class=3D=
"hljs-keyword">string</span> equal $tcl_platform(platform) <span class=3D"h=
ljs-string">"unix"</span>]
    <span class=3D"hljs-keyword">set</span> tkPriv(window) {}
}
tkScreenChanged [winfo screen .]
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkEvent=
MotifBindings</span> {n1 dummy dummy} {
    <span class=3D"hljs-keyword">upvar</span> $n1 name
    <span class=3D"hljs-keyword">if</span> {$name} then {
	<span class=3D"hljs-keyword">set</span> op delete
    } else {
	<span class=3D"hljs-keyword">set</span> op add
    }
    event $op &lt;&lt;Cut&gt;&gt; &lt;Control-Key-w&gt;
    event $op &lt;&lt;Copy&gt;&gt; &lt;Meta-Key-w&gt;
    event $op &lt;&lt;Paste&gt;&gt; &lt;Control-Key-y&gt;
}
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">strin=
g</span> equal [<span class=3D"hljs-keyword">info</span> commands tk_choose=
Color] <span class=3D"hljs-string">""</span>]} then {
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tk_=
chooseColor</span> {args} {
	<span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keyword">e=
val</span> tkColorDialog $args]
    }
}
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">strin=
g</span> equal [<span class=3D"hljs-keyword">info</span> commands tk_getOpe=
nFile] <span class=3D"hljs-string">""</span>]} then {
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tk_=
getOpenFile</span> {args} {
	<span class=3D"hljs-keyword">if</span> {$::tk_strictMotif} then {
	    <span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keywor=
d">eval</span> tkMotifFDialog <span class=3D"hljs-keyword">open</span> $arg=
s]
	} else {
	    <span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keywor=
d">eval</span> ::tk::dialog::<span class=3D"hljs-keyword">file</span>::tkFD=
ialog <span class=3D"hljs-keyword">open</span> $args]
	}
    }
}
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">strin=
g</span> equal [<span class=3D"hljs-keyword">info</span> commands tk_getSav=
eFile] <span class=3D"hljs-string">""</span>]} then {
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tk_=
getSaveFile</span> {args} {
	<span class=3D"hljs-keyword">if</span> {$::tk_strictMotif} then {
	    <span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keywor=
d">eval</span> tkMotifFDialog save $args]
	} else {
	    <span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keywor=
d">eval</span> ::tk::dialog::<span class=3D"hljs-keyword">file</span>::tkFD=
ialog save $args]
	}
    }
}
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">strin=
g</span> equal [<span class=3D"hljs-keyword">info</span> commands tk_messag=
eBox] <span class=3D"hljs-string">""</span>]} then {
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tk_=
messageBox</span> {args} {
	<span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keyword">e=
val</span> tkMessageBox $args]
    }
}
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">strin=
g</span> equal [<span class=3D"hljs-keyword">info</span> command tk_chooseD=
irectory] <span class=3D"hljs-string">""</span>]} then {
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tk_=
chooseDirectory</span> {args} {
	<span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keyword">e=
val</span> ::tk::dialog::<span class=3D"hljs-keyword">file</span>::chooseDi=
r::tkChooseDirectory $args]
    }
}
<span class=3D"hljs-keyword">switch</span> $tcl_platform(platform) {
<span class=3D"hljs-string">"unix"</span> {
	event add &lt;&lt;Cut&gt;&gt; &lt;Control-Key-x&gt; &lt;Key-F20&gt;
	event add &lt;&lt;Copy&gt;&gt; &lt;Control-Key-c&gt; &lt;Key-F16&gt;
	event add &lt;&lt;Paste&gt;&gt; &lt;Control-Key-v&gt; &lt;Key-F18&gt;
	event add &lt;&lt;PasteSelection&gt;&gt; &lt;ButtonRelease<span class=3D"h=
ljs-number">-2</span>&gt;
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info=
</span> exists tcl_platform(os)]} then {
	    <span class=3D"hljs-keyword">switch</span> $tcl_platform(os) {
	    <span class=3D"hljs-string">"IRIX"</span> -
	    <span class=3D"hljs-string">"Linux"</span> {
		    event add &lt;&lt;PrevWindow&gt;&gt; &lt;ISO_Left_Tab&gt;
		}
	    <span class=3D"hljs-string">"HP-UX"</span> {
		    event add &lt;&lt;PrevWindow&gt;&gt; &lt;hpBackTab&gt;
		}
	    }
	}
	<span class=3D"hljs-keyword">trace</span> <span class=3D"hljs-keyword">var=
iable</span> tk_strictMotif w tkEventMotifBindings
	<span class=3D"hljs-keyword">set</span> tk_strictMotif $tk_strictMotif
    }
<span class=3D"hljs-string">"windows"</span> {
	event add &lt;&lt;Cut&gt;&gt; &lt;Control-Key-x&gt; &lt;Shift-Key-Delete&g=
t;
	event add &lt;&lt;Copy&gt;&gt; &lt;Control-Key-c&gt; &lt;Control-Key-Inser=
t&gt;
	event add &lt;&lt;Paste&gt;&gt; &lt;Control-Key-v&gt; &lt;Shift-Key-Insert=
&gt;
	event add &lt;&lt;PasteSelection&gt;&gt; &lt;ButtonRelease<span class=3D"h=
ljs-number">-2</span>&gt;
    }
<span class=3D"hljs-string">"macintosh"</span> {
	event add &lt;&lt;Cut&gt;&gt; &lt;Control-Key-x&gt; &lt;Key-F2&gt;
	event add &lt;&lt;Copy&gt;&gt; &lt;Control-Key-c&gt; &lt;Key-F3&gt;
	event add &lt;&lt;Paste&gt;&gt; &lt;Control-Key-v&gt; &lt;Key-F4&gt;
	event add &lt;&lt;PasteSelection&gt;&gt; &lt;ButtonRelease<span class=3D"h=
ljs-number">-2</span>&gt;
	event add &lt;&lt;Clear&gt;&gt; &lt;Clear&gt;
    }
}
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">strin=
g</span> compare $tcl_platform(platform) <span class=3D"hljs-string">"macin=
tosh"</span>] &amp;&amp; [<span class=3D"hljs-keyword">string</span> compar=
e {} $tk_library]} then {
    <span class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword=
">file</span> <span class=3D"hljs-keyword">join</span> $tk_library button.t=
cl]
    <span class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword=
">file</span> <span class=3D"hljs-keyword">join</span> $tk_library entry.tc=
l]
    <span class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword=
">file</span> <span class=3D"hljs-keyword">join</span> $tk_library listbox.=
tcl]
    <span class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword=
">file</span> <span class=3D"hljs-keyword">join</span> $tk_library menu.tcl=
]
    <span class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword=
">file</span> <span class=3D"hljs-keyword">join</span> $tk_library scale.tc=
l]
    <span class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword=
">file</span> <span class=3D"hljs-keyword">join</span> $tk_library scrlbar.=
tcl]
    <span class=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword=
">file</span> <span class=3D"hljs-keyword">join</span> $tk_library text.tcl=
]
}
event add &lt;&lt;PrevWindow&gt;&gt; &lt;Shift-Tab&gt;
bind all &lt;Tab&gt; {tkTabToWindow [tk_focusNext %W]}
bind all &lt;&lt;PrevWindow&gt;&gt; {tkTabToWindow [tk_focusPrev %W]}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkCance=
lRepeat</span> {} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">after</span> cancel $tkPriv(afterId)
    <span class=3D"hljs-keyword">set</span> tkPriv(afterId) {}
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkTabTo=
Window</span> {w} {
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal [winfo class $w] Entry]} then {
	$w selection range <span class=3D"hljs-number">0</span> end
	$w icursor end
    }
    focus $w
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkIconL=
ist</span> {w args} {
    <span class=3D"hljs-keyword">upvar</span> #<span class=3D"hljs-number">=
0</span> $w data
    tkIconList_Config $w $args
    tkIconList_Create $w
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkIconL=
ist_Config</span> {w argList} {
    <span class=3D"hljs-keyword">upvar</span> #<span class=3D"hljs-number">=
0</span> $w data
    <span class=3D"hljs-keyword">set</span> specs {
{-browsecmd <span class=3D"hljs-string">""</span> <span class=3D"hljs-strin=
g">""</span> <span class=3D"hljs-string">""</span>}
{-command <span class=3D"hljs-string">""</span> <span class=3D"hljs-string"=
>""</span> <span class=3D"hljs-string">""</span>}
}
    tclParseConfigSpec $w $specs <span class=3D"hljs-string">""</span> $arg=
List
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkIconL=
ist_Create</span> {w} {
    <span class=3D"hljs-keyword">upvar</span> #<span class=3D"hljs-number">=
0</span> $w data
    frame $w
    <span class=3D"hljs-keyword">set</span> data(sbar) [scrollbar $w.sbar -=
orient horizontal -highlightthickness <span class=3D"hljs-number">0</span> =
-takefocus <span class=3D"hljs-number">0</span>]
    <span class=3D"hljs-keyword">set</span> data(canvas) [canvas $w.canvas =
-bd <span class=3D"hljs-number">2</span> -relief sunken -width <span class=
=3D"hljs-number">400</span> -height <span class=3D"hljs-number">120</span> =
-takefocus <span class=3D"hljs-number">1</span>]
    pack $data(sbar) -side bottom -fill x -padx <span class=3D"hljs-number"=
>2</span>
    pack $data(canvas) -expand yes -fill both
    $data(sbar) config -command [<span class=3D"hljs-keyword">list</span> $=
data(canvas) xview]
    $data(canvas) config -xscrollcommand [<span class=3D"hljs-keyword">list=
</span> $data(sbar) <span class=3D"hljs-keyword">set</span>]
    <span class=3D"hljs-keyword">set</span> data(maxIW) <span class=3D"hljs=
-number">1</span>
    <span class=3D"hljs-keyword">set</span> data(maxIH) <span class=3D"hljs=
-number">1</span>
    <span class=3D"hljs-keyword">set</span> data(maxTW) <span class=3D"hljs=
-number">1</span>
    <span class=3D"hljs-keyword">set</span> data(maxTH) <span class=3D"hljs=
-number">1</span>
    <span class=3D"hljs-keyword">set</span> data(numItems) <span class=3D"h=
ljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> data(curItem) {}
    <span class=3D"hljs-keyword">set</span> data(noScroll) <span class=3D"h=
ljs-number">1</span>
    bind $data(canvas) &lt;Configure&gt; [<span class=3D"hljs-keyword">list=
</span> tkIconList_Arrange $w]
    bind $data(canvas) &lt;<span class=3D"hljs-number">1</span>&gt; [<span =
class=3D"hljs-keyword">list</span> tkIconList_Btn1 $w %x %y]
    bind $data(canvas) &lt;B1-Motion&gt; [<span class=3D"hljs-keyword">list=
</span> tkIconList_Motion1 $w %x %y]
    bind $data(canvas) &lt;B1-Leave&gt; [<span class=3D"hljs-keyword">list<=
/span> tkIconList_Leave1 $w %x %y]
    bind $data(canvas) &lt;B1-Enter&gt; [<span class=3D"hljs-keyword">list<=
/span> tkCancelRepeat]
    bind $data(canvas) &lt;ButtonRelease<span class=3D"hljs-number">-1</spa=
n>&gt; [<span class=3D"hljs-keyword">list</span> tkCancelRepeat]
    bind $data(canvas) &lt;Double-ButtonRelease<span class=3D"hljs-number">=
-1</span>&gt; [<span class=3D"hljs-keyword">list</span> tkIconList_Double1 =
$w %x %y]
    bind $data(canvas) &lt;Up&gt; [<span class=3D"hljs-keyword">list</span>=
 tkIconList_UpDown $w <span class=3D"hljs-number">-1</span>]
    bind $data(canvas) &lt;Down&gt; [<span class=3D"hljs-keyword">list</spa=
n> tkIconList_UpDown $w <span class=3D"hljs-number">1</span>]
    bind $data(canvas) &lt;Left&gt; [<span class=3D"hljs-keyword">list</spa=
n> tkIconList_LeftRight $w <span class=3D"hljs-number">-1</span>]
    bind $data(canvas) &lt;Right&gt; [<span class=3D"hljs-keyword">list</sp=
an> tkIconList_LeftRight $w <span class=3D"hljs-number">1</span>]
    bind $data(canvas) &lt;Return&gt; [<span class=3D"hljs-keyword">list</s=
pan> tkIconList_ReturnKey $w]
    bind $data(canvas) &lt;KeyPress&gt; [<span class=3D"hljs-keyword">list<=
/span> tkIconList_KeyPress $w %A]
    bind $data(canvas) &lt;Control-KeyPress&gt; <span class=3D"hljs-string"=
>";"</span>
    bind $data(canvas) &lt;Alt-KeyPress&gt; <span class=3D"hljs-string">";"=
</span>
    bind $data(canvas) &lt;FocusIn&gt; [<span class=3D"hljs-keyword">list</=
span> tkIconList_FocusIn $w]
    <span class=3D"hljs-keyword">return</span> $w
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkIconL=
ist_AutoScan</span> {w} {
    <span class=3D"hljs-keyword">upvar</span> #<span class=3D"hljs-number">=
0</span> $w data
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">if</span> {![winfo exists $w]} then <span =
class=3D"hljs-keyword">return</span>
    <span class=3D"hljs-keyword">set</span> x $tkPriv(x)
    <span class=3D"hljs-keyword">set</span> y $tkPriv(y)
    <span class=3D"hljs-keyword">if</span> {$data(noScroll)} then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">if</span> {$x &gt;=3D [winfo width $data(c=
anvas)]} then {
	$data(canvas) xview scroll <span class=3D"hljs-number">1</span> units
    } elseif {$x &lt; <span class=3D"hljs-number">0</span>} {
	$data(canvas) xview scroll <span class=3D"hljs-number">-1</span> units
    } elseif {$y &gt;=3D [winfo height $data(canvas)]} {
    } elseif {$y &lt; <span class=3D"hljs-number">0</span>} {
    } else {
	<span class=3D"hljs-keyword">return</span>
    }
    tkIconList_Motion1 $w $x $y
    <span class=3D"hljs-keyword">set</span> tkPriv(afterId) [<span class=3D=
"hljs-keyword">after</span> <span class=3D"hljs-number">50</span> [<span cl=
ass=3D"hljs-keyword">list</span> tkIconList_AutoScan $w]]
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkIconL=
ist_DeleteAll</span> {w} {
    <span class=3D"hljs-keyword">upvar</span> #<span class=3D"hljs-number">=
0</span> $w data
    <span class=3D"hljs-keyword">upvar</span> #<span class=3D"hljs-number">=
0</span> $w:itemList itemList
    $data(canvas) delete all
    <span class=3D"hljs-keyword">catch</span> {<span class=3D"hljs-keyword"=
>unset</span> data(selected)}
    <span class=3D"hljs-keyword">catch</span> {<span class=3D"hljs-keyword"=
>unset</span> data(rect)}
    <span class=3D"hljs-keyword">catch</span> {<span class=3D"hljs-keyword"=
>unset</span> data(<span class=3D"hljs-keyword">list</span>)}
    <span class=3D"hljs-keyword">catch</span> {<span class=3D"hljs-keyword"=
>unset</span> itemList}
    <span class=3D"hljs-keyword">set</span> data(maxIW) <span class=3D"hljs=
-number">1</span>
    <span class=3D"hljs-keyword">set</span> data(maxIH) <span class=3D"hljs=
-number">1</span>
    <span class=3D"hljs-keyword">set</span> data(maxTW) <span class=3D"hljs=
-number">1</span>
    <span class=3D"hljs-keyword">set</span> data(maxTH) <span class=3D"hljs=
-number">1</span>
    <span class=3D"hljs-keyword">set</span> data(numItems) <span class=3D"h=
ljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> data(curItem) {}
    <span class=3D"hljs-keyword">set</span> data(noScroll) <span class=3D"h=
ljs-number">1</span>
    $data(sbar) <span class=3D"hljs-keyword">set</span> <span class=3D"hljs=
-number">0.0</span> <span class=3D"hljs-number">1.0</span>
    $data(canvas) xview moveto <span class=3D"hljs-number">0</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkIconL=
ist_Add</span> {w image text} {
    <span class=3D"hljs-keyword">upvar</span> #<span class=3D"hljs-number">=
0</span> $w data
    <span class=3D"hljs-keyword">upvar</span> #<span class=3D"hljs-number">=
0</span> $w:itemList itemList
    <span class=3D"hljs-keyword">upvar</span> #<span class=3D"hljs-number">=
0</span> $w:textList textList
    <span class=3D"hljs-keyword">set</span> iTag [$data(canvas) create imag=
e <span class=3D"hljs-number">0</span> <span class=3D"hljs-number">0</span>=
 -image $image -anchor nw]
    <span class=3D"hljs-keyword">set</span> tTag [$data(canvas) create text=
 <span class=3D"hljs-number">0</span> <span class=3D"hljs-number">0</span> =
-text $text -anchor nw -font $data(font)]
    <span class=3D"hljs-keyword">set</span> rTag [$data(canvas) create rect=
 <span class=3D"hljs-number">0</span> <span class=3D"hljs-number">0</span> =
<span class=3D"hljs-number">0</span> <span class=3D"hljs-number">0</span> -=
fill <span class=3D"hljs-string">""</span> -outline <span class=3D"hljs-str=
ing">""</span>]
    <span class=3D"hljs-keyword">set</span> b [$data(canvas) bbox $iTag]
    <span class=3D"hljs-keyword">set</span> iW [<span class=3D"hljs-keyword=
">expr</span> {[<span class=3D"hljs-keyword">lindex</span> $b <span class=
=3D"hljs-number">2</span>]-[<span class=3D"hljs-keyword">lindex</span> $b <=
span class=3D"hljs-number">0</span>]}]
    <span class=3D"hljs-keyword">set</span> iH [<span class=3D"hljs-keyword=
">expr</span> {[<span class=3D"hljs-keyword">lindex</span> $b <span class=
=3D"hljs-number">3</span>]-[<span class=3D"hljs-keyword">lindex</span> $b <=
span class=3D"hljs-number">1</span>]}]
    <span class=3D"hljs-keyword">if</span> {$data(maxIW) &lt; $iW} then {
	<span class=3D"hljs-keyword">set</span> data(maxIW) $iW
    }
    <span class=3D"hljs-keyword">if</span> {$data(maxIH) &lt; $iH} then {
	<span class=3D"hljs-keyword">set</span> data(maxIH) $iH
    }
    <span class=3D"hljs-keyword">set</span> b [$data(canvas) bbox $tTag]
    <span class=3D"hljs-keyword">set</span> tW [<span class=3D"hljs-keyword=
">expr</span> {[<span class=3D"hljs-keyword">lindex</span> $b <span class=
=3D"hljs-number">2</span>]-[<span class=3D"hljs-keyword">lindex</span> $b <=
span class=3D"hljs-number">0</span>]}]
    <span class=3D"hljs-keyword">set</span> tH [<span class=3D"hljs-keyword=
">expr</span> {[<span class=3D"hljs-keyword">lindex</span> $b <span class=
=3D"hljs-number">3</span>]-[<span class=3D"hljs-keyword">lindex</span> $b <=
span class=3D"hljs-number">1</span>]}]
    <span class=3D"hljs-keyword">if</span> {$data(maxTW) &lt; $tW} then {
	<span class=3D"hljs-keyword">set</span> data(maxTW) $tW
    }
    <span class=3D"hljs-keyword">if</span> {$data(maxTH) &lt; $tH} then {
	<span class=3D"hljs-keyword">set</span> data(maxTH) $tH
    }
    <span class=3D"hljs-keyword">lappend</span> data(<span class=3D"hljs-ke=
yword">list</span>) [<span class=3D"hljs-keyword">list</span> $iTag $tTag $=
rTag $iW $iH $tW $tH $data(numItems)]
    <span class=3D"hljs-keyword">set</span> itemList($rTag) [<span class=3D=
"hljs-keyword">list</span> $iTag $tTag $text $data(numItems)]
    <span class=3D"hljs-keyword">set</span> textList($data(numItems)) [<spa=
n class=3D"hljs-keyword">string</span> tolower $text]
    <span class=3D"hljs-keyword">incr</span> data(numItems)
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkIconL=
ist_Arrange</span> {w} {
    <span class=3D"hljs-keyword">upvar</span> #<span class=3D"hljs-number">=
0</span> $w data
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists data(<span class=3D"hljs-keyword">list</span>)]} then {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info=
</span> exists data(canvas)] &amp;&amp; [winfo exists $data(canvas)]} then =
{
	    <span class=3D"hljs-keyword">set</span> data(noScroll) <span class=3D"=
hljs-number">1</span>
	    $data(sbar) config -command <span class=3D"hljs-string">""</span>
	}
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">set</span> W [winfo width $data(canvas)]
    <span class=3D"hljs-keyword">set</span> H [winfo height $data(canvas)]
    <span class=3D"hljs-keyword">set</span> pad [<span class=3D"hljs-keywor=
d">expr</span> {[$data(canvas) cget -highlightthickness] + [$data(canvas) c=
get -bd]}]
    <span class=3D"hljs-keyword">if</span> {$pad &lt; <span class=3D"hljs-n=
umber">2</span>} then {
	<span class=3D"hljs-keyword">set</span> pad <span class=3D"hljs-number">2<=
/span>
    }
    <span class=3D"hljs-keyword">incr</span> W -[<span class=3D"hljs-keywor=
d">expr</span> {$pad*<span class=3D"hljs-number">2</span>}]
    <span class=3D"hljs-keyword">incr</span> H -[<span class=3D"hljs-keywor=
d">expr</span> {$pad*<span class=3D"hljs-number">2</span>}]
    <span class=3D"hljs-keyword">set</span> dx [<span class=3D"hljs-keyword=
">expr</span> {$data(maxIW) + $data(maxTW) + <span class=3D"hljs-number">8<=
/span>}]
    <span class=3D"hljs-keyword">if</span> {$data(maxTH) &gt; $data(maxIH)}=
 then {
	<span class=3D"hljs-keyword">set</span> dy $data(maxTH)
    } else {
	<span class=3D"hljs-keyword">set</span> dy $data(maxIH)
    }
    <span class=3D"hljs-keyword">incr</span> dy <span class=3D"hljs-number"=
>2</span>
    <span class=3D"hljs-keyword">set</span> shift [<span class=3D"hljs-keyw=
ord">expr</span> {$data(maxIW) + <span class=3D"hljs-number">4</span>}]
    <span class=3D"hljs-keyword">set</span> x [<span class=3D"hljs-keyword"=
>expr</span> {$pad * <span class=3D"hljs-number">2</span>}]
    <span class=3D"hljs-keyword">set</span> y [<span class=3D"hljs-keyword"=
>expr</span> {$pad * <span class=3D"hljs-number">1</span>}]
<span class=3D"hljs-comment">    # Why * 1 ?</span>
    <span class=3D"hljs-keyword">set</span> usedColumn <span class=3D"hljs-=
number">0</span>
    <span class=3D"hljs-keyword">foreach</span> sublist $data(list) {
	<span class=3D"hljs-keyword">set</span> usedColumn <span class=3D"hljs-num=
ber">1</span>
	<span class=3D"hljs-keyword">set</span> iTag [<span class=3D"hljs-keyword"=
>lindex</span> $sublist <span class=3D"hljs-number">0</span>]
	<span class=3D"hljs-keyword">set</span> tTag [<span class=3D"hljs-keyword"=
>lindex</span> $sublist <span class=3D"hljs-number">1</span>]
	<span class=3D"hljs-keyword">set</span> rTag [<span class=3D"hljs-keyword"=
>lindex</span> $sublist <span class=3D"hljs-number">2</span>]
	<span class=3D"hljs-keyword">set</span> iW [<span class=3D"hljs-keyword">l=
index</span> $sublist <span class=3D"hljs-number">3</span>]
	<span class=3D"hljs-keyword">set</span> iH [<span class=3D"hljs-keyword">l=
index</span> $sublist <span class=3D"hljs-number">4</span>]
	<span class=3D"hljs-keyword">set</span> tW [<span class=3D"hljs-keyword">l=
index</span> $sublist <span class=3D"hljs-number">5</span>]
	<span class=3D"hljs-keyword">set</span> tH [<span class=3D"hljs-keyword">l=
index</span> $sublist <span class=3D"hljs-number">6</span>]
	<span class=3D"hljs-keyword">set</span> i_dy [<span class=3D"hljs-keyword"=
>expr</span> {($dy - $iH) /<span class=3D"hljs-number">2</span>}]
	<span class=3D"hljs-keyword">set</span> t_dy [<span class=3D"hljs-keyword"=
>expr</span> {($dy - $tH) /<span class=3D"hljs-number">2</span>}]
	$data(canvas) coords $iTag $x [<span class=3D"hljs-keyword">expr</span> {$=
y + $i_dy}]
	$data(canvas) coords $tTag [<span class=3D"hljs-keyword">expr</span> {$x +=
 $shift}] [<span class=3D"hljs-keyword">expr</span> {$y + $t_dy}]
	$data(canvas) coords $tTag [<span class=3D"hljs-keyword">expr</span> {$x +=
 $shift}] [<span class=3D"hljs-keyword">expr</span> {$y + $t_dy}]
	$data(canvas) coords $rTag $x $y [<span class=3D"hljs-keyword">expr</span>=
 {$x+$dx}] [<span class=3D"hljs-keyword">expr</span> {$y+$dy}]
	<span class=3D"hljs-keyword">incr</span> y $dy
	<span class=3D"hljs-keyword">if</span> {($y + $dy) &gt; $H} then {
	    <span class=3D"hljs-keyword">set</span> y [<span class=3D"hljs-keyword=
">expr</span> {$pad * <span class=3D"hljs-number">1</span>}]
<span class=3D"hljs-comment">	    # *1 ?</span>
	    <span class=3D"hljs-keyword">incr</span> x $dx
	    <span class=3D"hljs-keyword">set</span> usedColumn <span class=3D"hljs=
-number">0</span>
	}
    }
    <span class=3D"hljs-keyword">if</span> {$usedColumn} then {
	<span class=3D"hljs-keyword">set</span> sW [<span class=3D"hljs-keyword">e=
xpr</span> {$x + $dx}]
    } else {
	<span class=3D"hljs-keyword">set</span> sW $x
    }
    <span class=3D"hljs-keyword">if</span> {$sW &lt; $W} then {
	$data(canvas) config -scrollregion [<span class=3D"hljs-keyword">list</spa=
n> $pad $pad $sW $H]
	$data(sbar) config -command <span class=3D"hljs-string">""</span>
	$data(canvas) xview moveto <span class=3D"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> data(noScroll) <span class=3D"hljs=
-number">1</span>
    } else {
	$data(canvas) config -scrollregion [<span class=3D"hljs-keyword">list</spa=
n> $pad $pad $sW $H]
	$data(sbar) config -command [<span class=3D"hljs-keyword">list</span> $dat=
a(canvas) xview]
	<span class=3D"hljs-keyword">set</span> data(noScroll) <span class=3D"hljs=
-number">0</span>
    }
    <span class=3D"hljs-keyword">set</span> data(itemsPerColumn) [<span cla=
ss=3D"hljs-keyword">expr</span> {($H-$pad) /$dy}]
    <span class=3D"hljs-keyword">if</span> {$data(itemsPerColumn) &lt; <spa=
n class=3D"hljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> data(itemsPerColumn) <span class=
=3D"hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">if</span> {$data(curItem) !=3D <span class=
=3D"hljs-string">""</span>} then {
	tkIconList_Select $w [<span class=3D"hljs-keyword">lindex</span> [<span cl=
ass=3D"hljs-keyword">lindex</span> $data(list) $data(curItem)] <span class=
=3D"hljs-number">2</span>] <span class=3D"hljs-number">0</span>
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkIconL=
ist_Invoke</span> {w} {
    <span class=3D"hljs-keyword">upvar</span> #<span class=3D"hljs-number">=
0</span> $w data
    <span class=3D"hljs-keyword">if</span> {$data(-command) !=3D <span clas=
s=3D"hljs-string">""</span> &amp;&amp; [<span class=3D"hljs-keyword">info</=
span> exists data(selected)]} then {
	<span class=3D"hljs-keyword">uplevel</span> #<span class=3D"hljs-number">0=
</span> $data(-command)
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkIconL=
ist_See</span> {w rTag} {
    <span class=3D"hljs-keyword">upvar</span> #<span class=3D"hljs-number">=
0</span> $w data
    <span class=3D"hljs-keyword">upvar</span> #<span class=3D"hljs-number">=
0</span> $w:itemList itemList
    <span class=3D"hljs-keyword">if</span> {$data(noScroll)} then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">set</span> sRegion [$data(canvas) cget -sc=
rollregion]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $sRegion {}]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists itemList($rTag)]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">set</span> bbox [$data(canvas) bbox $rTag]
    <span class=3D"hljs-keyword">set</span> pad [<span class=3D"hljs-keywor=
d">expr</span> {[$data(canvas) cget -highlightthickness] + [$data(canvas) c=
get -bd]}]
    <span class=3D"hljs-keyword">set</span> x1 [<span class=3D"hljs-keyword=
">lindex</span> $bbox <span class=3D"hljs-number">0</span>]
    <span class=3D"hljs-keyword">set</span> x2 [<span class=3D"hljs-keyword=
">lindex</span> $bbox <span class=3D"hljs-number">2</span>]
    <span class=3D"hljs-keyword">incr</span> x1 -[<span class=3D"hljs-keywo=
rd">expr</span> {$pad * <span class=3D"hljs-number">2</span>}]
    <span class=3D"hljs-keyword">incr</span> x2 -[<span class=3D"hljs-keywo=
rd">expr</span> {$pad * <span class=3D"hljs-number">1</span>}]
<span class=3D"hljs-comment">    # *1 ?</span>
    <span class=3D"hljs-keyword">set</span> cW [<span class=3D"hljs-keyword=
">expr</span> {[winfo width $data(canvas)] - $pad*<span class=3D"hljs-numbe=
r">2</span>}]
    <span class=3D"hljs-keyword">set</span> scrollW [<span class=3D"hljs-ke=
yword">expr</span> {[<span class=3D"hljs-keyword">lindex</span> $sRegion <s=
pan class=3D"hljs-number">2</span>]-[<span class=3D"hljs-keyword">lindex</s=
pan> $sRegion <span class=3D"hljs-number">0</span>]+<span class=3D"hljs-num=
ber">1</span>}]
    <span class=3D"hljs-keyword">set</span> dispX [<span class=3D"hljs-keyw=
ord">expr</span> {int([<span class=3D"hljs-keyword">lindex</span> [$data(ca=
nvas) xview] <span class=3D"hljs-number">0</span>]*$scrollW)}]
    <span class=3D"hljs-keyword">set</span> oldDispX $dispX
    <span class=3D"hljs-keyword">if</span> {($x2 - $dispX) &gt;=3D $cW} the=
n {
	<span class=3D"hljs-keyword">set</span> dispX [<span class=3D"hljs-keyword=
">expr</span> {$x2 - $cW}]
    }
    <span class=3D"hljs-keyword">if</span> {($x1 - $dispX) &lt; <span class=
=3D"hljs-number">0</span>} then {
	<span class=3D"hljs-keyword">set</span> dispX $x1
    }
    <span class=3D"hljs-keyword">if</span> {$oldDispX !=3D $dispX} then {
	<span class=3D"hljs-keyword">set</span> fraction [<span class=3D"hljs-keyw=
ord">expr</span> {double($dispX) /double($scrollW)}]
	$data(canvas) xview moveto $fraction
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkIconL=
ist_SelectAtXY</span> {w x y} {
    <span class=3D"hljs-keyword">upvar</span> #<span class=3D"hljs-number">=
0</span> $w data
    tkIconList_Select $w [$data(canvas) find closest [$data(canvas) canvasx=
 $x] [$data(canvas) canvasy $y]]
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkIconL=
ist_Select</span> {w rTag {callBrowse <span class=3D"hljs-number">1</span>}=
} {
    <span class=3D"hljs-keyword">upvar</span> #<span class=3D"hljs-number">=
0</span> $w data
    <span class=3D"hljs-keyword">upvar</span> #<span class=3D"hljs-number">=
0</span> $w:itemList itemList
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists itemList($rTag)]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">set</span> iTag [<span class=3D"hljs-keywo=
rd">lindex</span> $itemList($rTag) <span class=3D"hljs-number">0</span>]
    <span class=3D"hljs-keyword">set</span> tTag [<span class=3D"hljs-keywo=
rd">lindex</span> $itemList($rTag) <span class=3D"hljs-number">1</span>]
    <span class=3D"hljs-keyword">set</span> text [<span class=3D"hljs-keywo=
rd">lindex</span> $itemList($rTag) <span class=3D"hljs-number">2</span>]
    <span class=3D"hljs-keyword">set</span> serial [<span class=3D"hljs-key=
word">lindex</span> $itemList($rTag) <span class=3D"hljs-number">3</span>]
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists data(rect)]} then {
	<span class=3D"hljs-keyword">set</span> data(rect) [$data(canvas) create r=
ect <span class=3D"hljs-number">0</span> <span class=3D"hljs-number">0</spa=
n> <span class=3D"hljs-number">0</span> <span class=3D"hljs-number">0</span=
> -fill #a0a0ff -outline #a0a0ff]
    }
    $data(canvas) lower $data(rect)
    <span class=3D"hljs-keyword">set</span> bbox [$data(canvas) bbox $tTag]
    <span class=3D"hljs-keyword">eval</span> [<span class=3D"hljs-keyword">=
list</span> $data(canvas) coords $data(rect)] $bbox
    <span class=3D"hljs-keyword">set</span> data(curItem) $serial
    <span class=3D"hljs-keyword">set</span> data(selected) $text
    <span class=3D"hljs-keyword">if</span> {$callBrowse &amp;&amp; $data(-b=
rowsecmd) !=3D <span class=3D"hljs-string">""</span>} then {
	<span class=3D"hljs-keyword">eval</span> $data(-browsecmd) [<span class=3D=
"hljs-keyword">list</span> $text]
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkIconL=
ist_Unselect</span> {w} {
    <span class=3D"hljs-keyword">upvar</span> #<span class=3D"hljs-number">=
0</span> $w data
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists data(rect)]} then {
	$data(canvas) delete $data(rect)
	<span class=3D"hljs-keyword">unset</span> data(rect)
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists data(selected)]} then {
	<span class=3D"hljs-keyword">unset</span> data(selected)
    }
<span class=3D"hljs-comment">    #set data(curItem)  {}</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkIconL=
ist_Get</span> {w} {
    <span class=3D"hljs-keyword">upvar</span> #<span class=3D"hljs-number">=
0</span> $w data
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists data(selected)]} then {
	<span class=3D"hljs-keyword">return</span> $data(selected)
    } else {
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-string">""<=
/span>
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkIconL=
ist_Btn1</span> {w x y} {
    <span class=3D"hljs-keyword">upvar</span> #<span class=3D"hljs-number">=
0</span> $w data
    focus $data(canvas)
    tkIconList_SelectAtXY $w $x $y
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkIconL=
ist_Motion1</span> {w x y} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">set</span> tkPriv(x) $x
    <span class=3D"hljs-keyword">set</span> tkPriv(y) $y
    tkIconList_SelectAtXY $w $x $y
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkIconL=
ist_Double1</span> {w x y} {
    <span class=3D"hljs-keyword">upvar</span> #<span class=3D"hljs-number">=
0</span> $w data
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare $data(curItem) {}]} then {
	tkIconList_Invoke $w
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkIconL=
ist_ReturnKey</span> {w} {
    tkIconList_Invoke $w
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkIconL=
ist_Leave1</span> {w x y} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">set</span> tkPriv(x) $x
    <span class=3D"hljs-keyword">set</span> tkPriv(y) $y
    tkIconList_AutoScan $w
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkIconL=
ist_FocusIn</span> {w} {
    <span class=3D"hljs-keyword">upvar</span> #<span class=3D"hljs-number">=
0</span> $w data
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists data(<span class=3D"hljs-keyword">list</span>)]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare $data(curItem) {}]} then {
	tkIconList_Select $w [<span class=3D"hljs-keyword">lindex</span> [<span cl=
ass=3D"hljs-keyword">lindex</span> $data(list) $data(curItem)] <span class=
=3D"hljs-number">2</span>] <span class=3D"hljs-number">1</span>
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkIconL=
ist_UpDown</span> {w amount} {
    <span class=3D"hljs-keyword">upvar</span> #<span class=3D"hljs-number">=
0</span> $w data
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists data(<span class=3D"hljs-keyword">list</span>)]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $data(curItem) {}]} then {
	<span class=3D"hljs-keyword">set</span> rTag [<span class=3D"hljs-keyword"=
>lindex</span> [<span class=3D"hljs-keyword">lindex</span> $data(list) <spa=
n class=3D"hljs-number">0</span>] <span class=3D"hljs-number">2</span>]
    } else {
	<span class=3D"hljs-keyword">set</span> oldRTag [<span class=3D"hljs-keywo=
rd">lindex</span> [<span class=3D"hljs-keyword">lindex</span> $data(list) $=
data(curItem)] <span class=3D"hljs-number">2</span>]
	<span class=3D"hljs-keyword">set</span> rTag [<span class=3D"hljs-keyword"=
>lindex</span> [<span class=3D"hljs-keyword">lindex</span> $data(list) [<sp=
an class=3D"hljs-keyword">expr</span> {$data(curItem)+$amount}]] <span clas=
s=3D"hljs-number">2</span>]
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> equal $rTag <span class=3D"hljs-string">""</span>]} then {
	    <span class=3D"hljs-keyword">set</span> rTag $oldRTag
	}
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare $rTag <span class=3D"hljs-string">""</span>]} then {
	tkIconList_Select $w $rTag
	tkIconList_See $w $rTag
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkIconL=
ist_LeftRight</span> {w amount} {
    <span class=3D"hljs-keyword">upvar</span> #<span class=3D"hljs-number">=
0</span> $w data
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists data(<span class=3D"hljs-keyword">list</span>)]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $data(curItem) {}]} then {
	<span class=3D"hljs-keyword">set</span> rTag [<span class=3D"hljs-keyword"=
>lindex</span> [<span class=3D"hljs-keyword">lindex</span> $data(list) <spa=
n class=3D"hljs-number">0</span>] <span class=3D"hljs-number">2</span>]
    } else {
	<span class=3D"hljs-keyword">set</span> oldRTag [<span class=3D"hljs-keywo=
rd">lindex</span> [<span class=3D"hljs-keyword">lindex</span> $data(list) $=
data(curItem)] <span class=3D"hljs-number">2</span>]
	<span class=3D"hljs-keyword">set</span> newItem [<span class=3D"hljs-keywo=
rd">expr</span> {$data(curItem)+($amount*$data(itemsPerColumn))}]
	<span class=3D"hljs-keyword">set</span> rTag [<span class=3D"hljs-keyword"=
>lindex</span> [<span class=3D"hljs-keyword">lindex</span> $data(list) $new=
Item] <span class=3D"hljs-number">2</span>]
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> equal $rTag <span class=3D"hljs-string">""</span>]} then {
	    <span class=3D"hljs-keyword">set</span> rTag $oldRTag
	}
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare $rTag <span class=3D"hljs-string">""</span>]} then {
	tkIconList_Select $w $rTag
	tkIconList_See $w $rTag
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkIconL=
ist_KeyPress</span> {w key} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">append</span> tkPriv(ILAccel,$w) $key
    tkIconList_Goto $w $tkPriv(ILAccel,$w)
    <span class=3D"hljs-keyword">catch</span> {
	<span class=3D"hljs-keyword">after</span> cancel $tkPriv(ILAccel,$w,afterI=
d)
    }
    <span class=3D"hljs-keyword">set</span> tkPriv(ILAccel,$w,afterId) [<sp=
an class=3D"hljs-keyword">after</span> <span class=3D"hljs-number">500</spa=
n> [<span class=3D"hljs-keyword">list</span> tkIconList_Reset $w]]
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkIconL=
ist_Goto</span> {w text} {
    <span class=3D"hljs-keyword">upvar</span> #<span class=3D"hljs-number">=
0</span> $w data
    <span class=3D"hljs-keyword">upvar</span> #<span class=3D"hljs-number">=
0</span> $w:textList textList
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists data(<span class=3D"hljs-keyword">list</span>)]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal {} $text]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">if</span> {$data(curItem) =3D=3D <span cla=
ss=3D"hljs-string">""</span> || $data(curItem) =3D=3D <span class=3D"hljs-n=
umber">0</span>} then {
	<span class=3D"hljs-keyword">set</span> start <span class=3D"hljs-number">=
0</span>
    } else {
	<span class=3D"hljs-keyword">set</span> start $data(curItem)
    }
    <span class=3D"hljs-keyword">set</span> text [<span class=3D"hljs-keywo=
rd">string</span> tolower $text]
    <span class=3D"hljs-keyword">set</span> theIndex <span class=3D"hljs-nu=
mber">-1</span>
    <span class=3D"hljs-keyword">set</span> less <span class=3D"hljs-number=
">0</span>
    <span class=3D"hljs-keyword">set</span> len [<span class=3D"hljs-keywor=
d">string</span> length $text]
    <span class=3D"hljs-keyword">set</span> len0 [<span class=3D"hljs-keywo=
rd">expr</span> {$len-<span class=3D"hljs-number">1</span>}]
    <span class=3D"hljs-keyword">set</span> i $start
    <span class=3D"hljs-keyword">while</span> {<span class=3D"hljs-number">=
1</span>} {
	<span class=3D"hljs-keyword">set</span> sub [<span class=3D"hljs-keyword">=
string</span> range $textList($i) <span class=3D"hljs-number">0</span> $len=
0]
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> equal $text $sub]} then {
	    <span class=3D"hljs-keyword">set</span> theIndex $i
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">incr</span> i
	<span class=3D"hljs-keyword">if</span> {$i =3D=3D $data(numItems)} then {
	    <span class=3D"hljs-keyword">set</span> i <span class=3D"hljs-number">=
0</span>
	}
	<span class=3D"hljs-keyword">if</span> {$i =3D=3D $start} then {
	    <span class=3D"hljs-keyword">break</span>
	}
    }
    <span class=3D"hljs-keyword">if</span> {$theIndex &gt; <span class=3D"h=
ljs-number">-1</span>} then {
	<span class=3D"hljs-keyword">set</span> rTag [<span class=3D"hljs-keyword"=
>lindex</span> [<span class=3D"hljs-keyword">lindex</span> $data(list) $the=
Index] <span class=3D"hljs-number">2</span>]
	tkIconList_Select $w $rTag
	tkIconList_See $w $rTag
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkIconL=
ist_Reset</span> {w} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">catch</span> {<span class=3D"hljs-keyword"=
>unset</span> tkPriv(ILAccel,$w)}
}
<span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keyword">=
eval</span> ::tk::dialog {}
<span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keyword">=
eval</span> ::tk::dialog::<span class=3D"hljs-keyword">file</span> {}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::tk::d=
ialog::file::tkFDialog</span> {type args} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">set</span> dataName __tk_filedialog
    <span class=3D"hljs-keyword">upvar</span> ::tk::dialog::<span class=3D"=
hljs-keyword">file</span>::$dataName data
    ::tk::dialog::<span class=3D"hljs-keyword">file</span>::Config $dataNam=
e $type $args
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $data(-parent) .]} then {
	<span class=3D"hljs-keyword">set</span> w .$dataName
    } else {
	<span class=3D"hljs-keyword">set</span> w $data(-parent).$dataName
    }
    <span class=3D"hljs-keyword">if</span> {![winfo exists $w]} then {
	::tk::dialog::<span class=3D"hljs-keyword">file</span>::Create $w TkFDialo=
g
    } elseif {[<span class=3D"hljs-keyword">string</span> compare [winfo cl=
ass $w] TkFDialog]} {
	destroy $w
	::tk::dialog::<span class=3D"hljs-keyword">file</span>::Create $w TkFDialo=
g
    } else {
	<span class=3D"hljs-keyword">set</span> data(dirMenuBtn) $w.f1.menu
	<span class=3D"hljs-keyword">set</span> data(dirMenu) $w.f1.menu.menu
	<span class=3D"hljs-keyword">set</span> data(upBtn) $w.f1.up
	<span class=3D"hljs-keyword">set</span> data(icons) $w.icons
	<span class=3D"hljs-keyword">set</span> data(ent) $w.f2.ent
	<span class=3D"hljs-keyword">set</span> data(typeMenuLab) $w.f3.lab
	<span class=3D"hljs-keyword">set</span> data(typeMenuBtn) $w.f3.menu
	<span class=3D"hljs-keyword">set</span> data(typeMenu) $data(typeMenuBtn).=
m
	<span class=3D"hljs-keyword">set</span> data(okBtn) $w.f2.ok
	<span class=3D"hljs-keyword">set</span> data(cancelBtn) $w.f3.cancel
    }
    wm transient $w $data(-parent)
    <span class=3D"hljs-keyword">trace</span> <span class=3D"hljs-keyword">=
variable</span> data(selectPath) w <span class=3D"hljs-string">"::tk::dialo=
g::file::SetPath $w"</span>
    $data(dirMenuBtn) configure -textvariable ::tk::dialog::<span class=3D"=
hljs-keyword">file</span>::${dataName}(selectPath)
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">l=
length</span> $data(-filetypes)]} then {
	$data(typeMenu) delete <span class=3D"hljs-number">0</span> end
	<span class=3D"hljs-keyword">foreach</span> type $data(-filetypes) {
	    <span class=3D"hljs-keyword">set</span> title [<span class=3D"hljs-key=
word">lindex</span> $type <span class=3D"hljs-number">0</span>]
	    <span class=3D"hljs-keyword">set</span> filter [<span class=3D"hljs-ke=
yword">lindex</span> $type <span class=3D"hljs-number">1</span>]
	    $data(typeMenu) add command -label $title -command [<span class=3D"hlj=
s-keyword">list</span> ::tk::dialog::<span class=3D"hljs-keyword">file</spa=
n>::SetFilter $w $type]
	}
	::tk::dialog::<span class=3D"hljs-keyword">file</span>::SetFilter $w [<spa=
n class=3D"hljs-keyword">lindex</span> $data(-filetypes) <span class=3D"hlj=
s-number">0</span>]
	$data(typeMenuBtn) config -state normal
	$data(typeMenuLab) config -state normal
    } else {
	<span class=3D"hljs-keyword">set</span> data(filter) <span class=3D"hljs-s=
tring">"*"</span>
	$data(typeMenuBtn) config -state disabled -takefocus <span class=3D"hljs-n=
umber">0</span>
	$data(typeMenuLab) config -state disabled
    }
    ::tk::dialog::<span class=3D"hljs-keyword">file</span>::UpdateWhenIdle =
$w
    ::tk::PlaceWindow $w widget $data(-parent)
    wm title $w $data(-title)
    ::tk::SetFocusGrab $w $data(ent)
    $data(ent) delete <span class=3D"hljs-number">0</span> end
    $data(ent) insert <span class=3D"hljs-number">0</span> $data(selectFile=
)
    $data(ent) selection range <span class=3D"hljs-number">0</span> end
    $data(ent) icursor end
    tkwait <span class=3D"hljs-keyword">variable</span> tkPriv(selectFilePa=
th)
    ::tk::RestoreFocusGrab $w $data(ent) withdraw
    <span class=3D"hljs-keyword">foreach</span> <span class=3D"hljs-keyword=
">trace</span> [<span class=3D"hljs-keyword">trace</span> vinfo data(select=
Path)] {
	<span class=3D"hljs-keyword">trace</span> vdelete data(selectPath) [<span =
class=3D"hljs-keyword">lindex</span> $trace <span class=3D"hljs-number">0</=
span>] [<span class=3D"hljs-keyword">lindex</span> $trace <span class=3D"hl=
js-number">1</span>]
    }
    $data(dirMenuBtn) configure -textvariable {}
    <span class=3D"hljs-keyword">return</span> $tkPriv(selectFilePath)
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::tk::d=
ialog::file::Config</span> {dataName type argList} {
    <span class=3D"hljs-keyword">upvar</span> ::tk::dialog::<span class=3D"=
hljs-keyword">file</span>::$dataName data
    <span class=3D"hljs-keyword">set</span> data(type) $type
    <span class=3D"hljs-keyword">foreach</span> <span class=3D"hljs-keyword=
">trace</span> [<span class=3D"hljs-keyword">trace</span> vinfo data(select=
Path)] {
	<span class=3D"hljs-keyword">trace</span> vdelete data(selectPath) [<span =
class=3D"hljs-keyword">lindex</span> $trace <span class=3D"hljs-number">0</=
span>] [<span class=3D"hljs-keyword">lindex</span> $trace <span class=3D"hl=
js-number">1</span>]
    }
    <span class=3D"hljs-keyword">set</span> specs {
{-defaultextension <span class=3D"hljs-string">""</span> <span class=3D"hlj=
s-string">""</span> <span class=3D"hljs-string">""</span>}
{-filetypes <span class=3D"hljs-string">""</span> <span class=3D"hljs-strin=
g">""</span> <span class=3D"hljs-string">""</span>}
{-initialdir <span class=3D"hljs-string">""</span> <span class=3D"hljs-stri=
ng">""</span> <span class=3D"hljs-string">""</span>}
{-initialfile <span class=3D"hljs-string">""</span> <span class=3D"hljs-str=
ing">""</span> <span class=3D"hljs-string">""</span>}
{-parent <span class=3D"hljs-string">""</span> <span class=3D"hljs-string">=
""</span> <span class=3D"hljs-string">"."</span>}
{-title <span class=3D"hljs-string">""</span> <span class=3D"hljs-string">"=
"</span> <span class=3D"hljs-string">""</span>}
}
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists data(selectPath)]} then {
	<span class=3D"hljs-keyword">set</span> data(selectPath) [<span class=3D"h=
ljs-keyword">pwd</span>]
	<span class=3D"hljs-keyword">set</span> data(selectFile) <span class=3D"hl=
js-string">""</span>
    }
    tclParseConfigSpec ::tk::dialog::<span class=3D"hljs-keyword">file</spa=
n>::$dataName $specs <span class=3D"hljs-string">""</span> $argList
    <span class=3D"hljs-keyword">if</span> {$data(-title) =3D=3D <span clas=
s=3D"hljs-string">""</span>} then {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> equal $type <span class=3D"hljs-string">"open"</span>]} then {
	    <span class=3D"hljs-keyword">set</span> data(-title) <span class=3D"hl=
js-string">"Open"</span>
	} else {
	    <span class=3D"hljs-keyword">set</span> data(-title) <span class=3D"hl=
js-string">"Save As"</span>
	}
    }
    <span class=3D"hljs-keyword">if</span> {$data(-initialdir) !=3D <span c=
lass=3D"hljs-string">""</span>} then {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">file=
</span> isdirectory $data(-initialdir)]} then {
	    <span class=3D"hljs-keyword">set</span> old [<span class=3D"hljs-keywo=
rd">pwd</span>]
	    <span class=3D"hljs-keyword">cd</span> $data(-initialdir)
	    <span class=3D"hljs-keyword">set</span> data(selectPath) [<span class=
=3D"hljs-keyword">pwd</span>]
	    <span class=3D"hljs-keyword">cd</span> $old
	} else {
	    <span class=3D"hljs-keyword">set</span> data(selectPath) [<span class=
=3D"hljs-keyword">pwd</span>]
	}
    }
    <span class=3D"hljs-keyword">set</span> data(selectFile) $data(-initial=
file)
    <span class=3D"hljs-keyword">set</span> data(-filetypes) [tkFDGetFileTy=
pes $data(-filetypes)]
    <span class=3D"hljs-keyword">if</span> {![winfo exists $data(-parent)]}=
 then {
	<span class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">"bad=
 window path name \"$data(-parent)\""</span>
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::tk::d=
ialog::file::Create</span> {w class} {
    <span class=3D"hljs-keyword">set</span> dataName [<span class=3D"hljs-k=
eyword">lindex</span> [<span class=3D"hljs-keyword">split</span> $w .] end]
    <span class=3D"hljs-keyword">upvar</span> ::tk::dialog::<span class=3D"=
hljs-keyword">file</span>::$dataName data
    <span class=3D"hljs-keyword">global</span> tk_library tkPriv
    toplevel $w -class $class
    <span class=3D"hljs-keyword">set</span> f1 [frame $w.f1]
    label $f1.lab -text <span class=3D"hljs-string">"Directory:"</span> -un=
der <span class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> data(dirMenuBtn) $f1.menu
    <span class=3D"hljs-keyword">set</span> data(dirMenu) [tk_optionMenu $f=
1.menu [<span class=3D"hljs-keyword">format</span> %s(selectPath) ::tk::dia=
log::<span class=3D"hljs-keyword">file</span>::$dataName] <span class=3D"hl=
js-string">""</span>]
    <span class=3D"hljs-keyword">set</span> data(upBtn) [button $f1.up]
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists tkPriv(updirImage)]} then {
	<span class=3D"hljs-keyword">set</span> tkPriv(updirImage) [image create b=
itmap -data {
<span class=3D"hljs-comment">#define updir_width 28</span>
<span class=3D"hljs-comment">#define updir_height 16</span>
static char updir_bits[] =3D {
<span class=3D"hljs-number">0x00</span>, <span class=3D"hljs-number">0x00</=
span>, <span class=3D"hljs-number">0x00</span>, <span class=3D"hljs-number"=
>0x00</span>, <span class=3D"hljs-number">0x80</span>, <span class=3D"hljs-=
number">0x1f</span>, <span class=3D"hljs-number">0x00</span>, <span class=
=3D"hljs-number">0x00</span>, <span class=3D"hljs-number">0x40</span>, <spa=
n class=3D"hljs-number">0x20</span>, <span class=3D"hljs-number">0x00</span=
>, <span class=3D"hljs-number">0x00</span>,
<span class=3D"hljs-number">0x20</span>, <span class=3D"hljs-number">0x40</=
span>, <span class=3D"hljs-number">0x00</span>, <span class=3D"hljs-number"=
>0x00</span>, <span class=3D"hljs-number">0xf0</span>, <span class=3D"hljs-=
number">0xff</span>, <span class=3D"hljs-number">0xff</span>, <span class=
=3D"hljs-number">0x01</span>, <span class=3D"hljs-number">0x10</span>, <spa=
n class=3D"hljs-number">0x00</span>, <span class=3D"hljs-number">0x00</span=
>, <span class=3D"hljs-number">0x01</span>,
<span class=3D"hljs-number">0x10</span>, <span class=3D"hljs-number">0x02</=
span>, <span class=3D"hljs-number">0x00</span>, <span class=3D"hljs-number"=
>0x01</span>, <span class=3D"hljs-number">0x10</span>, <span class=3D"hljs-=
number">0x07</span>, <span class=3D"hljs-number">0x00</span>, <span class=
=3D"hljs-number">0x01</span>, <span class=3D"hljs-number">0x90</span>, <spa=
n class=3D"hljs-number">0x0f</span>, <span class=3D"hljs-number">0x00</span=
>, <span class=3D"hljs-number">0x01</span>,
<span class=3D"hljs-number">0x10</span>, <span class=3D"hljs-number">0x02</=
span>, <span class=3D"hljs-number">0x00</span>, <span class=3D"hljs-number"=
>0x01</span>, <span class=3D"hljs-number">0x10</span>, <span class=3D"hljs-=
number">0x02</span>, <span class=3D"hljs-number">0x00</span>, <span class=
=3D"hljs-number">0x01</span>, <span class=3D"hljs-number">0x10</span>, <spa=
n class=3D"hljs-number">0x02</span>, <span class=3D"hljs-number">0x00</span=
>, <span class=3D"hljs-number">0x01</span>,
<span class=3D"hljs-number">0x10</span>, <span class=3D"hljs-number">0xfe</=
span>, <span class=3D"hljs-number">0x07</span>, <span class=3D"hljs-number"=
>0x01</span>, <span class=3D"hljs-number">0x10</span>, <span class=3D"hljs-=
number">0x00</span>, <span class=3D"hljs-number">0x00</span>, <span class=
=3D"hljs-number">0x01</span>, <span class=3D"hljs-number">0x10</span>, <spa=
n class=3D"hljs-number">0x00</span>, <span class=3D"hljs-number">0x00</span=
>, <span class=3D"hljs-number">0x01</span>,
<span class=3D"hljs-number">0xf0</span>, <span class=3D"hljs-number">0xff</=
span>, <span class=3D"hljs-number">0xff</span>, <span class=3D"hljs-number"=
>0x01</span>};}]
    }
    $data(upBtn) config -image $tkPriv(updirImage)
    $f1.menu config -takefocus <span class=3D"hljs-number">1</span> -highli=
ghtthickness <span class=3D"hljs-number">2</span>
    pack $data(upBtn) -side right -padx <span class=3D"hljs-number">4</span=
> -fill both
    pack $f1.lab -side left -padx <span class=3D"hljs-number">4</span> -fil=
l both
    pack $f1.menu -expand yes -fill both -padx <span class=3D"hljs-number">=
4</span>
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $class TkFDialog]} then {
	<span class=3D"hljs-keyword">set</span> fNameCaption <span class=3D"hljs-s=
tring">"File name:"</span>
	<span class=3D"hljs-keyword">set</span> fNameUnder <span class=3D"hljs-num=
ber">5</span>
	<span class=3D"hljs-keyword">set</span> iconListCommand [<span class=3D"hl=
js-keyword">list</span> ::tk::dialog::<span class=3D"hljs-keyword">file</sp=
an>::OkCmd $w]
    } else {
	<span class=3D"hljs-keyword">set</span> fNameCaption <span class=3D"hljs-s=
tring">"Selection:"</span>
	<span class=3D"hljs-keyword">set</span> fNameUnder <span class=3D"hljs-num=
ber">0</span>
	<span class=3D"hljs-keyword">set</span> iconListCommand [<span class=3D"hl=
js-keyword">list</span> ::tk::dialog::<span class=3D"hljs-keyword">file</sp=
an>::chooseDir::DblClick $w]
    }
    <span class=3D"hljs-keyword">set</span> data(icons) [tkIconList $w.icon=
s -browsecmd [<span class=3D"hljs-keyword">list</span> ::tk::dialog::<span =
class=3D"hljs-keyword">file</span>::ListBrowse $w] -command $iconListComman=
d]
    <span class=3D"hljs-keyword">set</span> f2 [frame $w.f2 -bd <span class=
=3D"hljs-number">0</span>]
    label $f2.lab -text $fNameCaption -anchor e -width <span class=3D"hljs-=
number">14</span> -under $fNameUnder -pady <span class=3D"hljs-number">0</s=
pan>
    <span class=3D"hljs-keyword">set</span> data(ent) [entry $f2.ent]
    <span class=3D"hljs-keyword">global</span> $w.icons
    <span class=3D"hljs-keyword">set</span> $w.icons(font) [$data(ent) cget=
 -font]
    <span class=3D"hljs-keyword">set</span> f3 [frame $w.f3 -bd <span class=
=3D"hljs-number">0</span>]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $class TkFDialog]} then {
	<span class=3D"hljs-keyword">set</span> data(typeMenuLab) [button $f3.lab =
-text <span class=3D"hljs-string">"Files of type:"</span> -anchor e -width =
<span class=3D"hljs-number">14</span> -under <span class=3D"hljs-number">9<=
/span> -bd [$f2.lab cget -bd] -highlightthickness [$f2.lab cget -highlightt=
hickness] -relief [$f2.lab cget -relief] -padx [$f2.lab cget -padx] -pady [=
$f2.lab cget -pady]]
	bindtags $data(typeMenuLab) [<span class=3D"hljs-keyword">list</span> $dat=
a(typeMenuLab) Label [winfo toplevel $data(typeMenuLab)] all]
	<span class=3D"hljs-keyword">set</span> data(typeMenuBtn) [menubutton $f3.=
menu -indicatoron <span class=3D"hljs-number">1</span> -menu $f3.menu.m]
	<span class=3D"hljs-keyword">set</span> data(typeMenu) [menu $data(typeMen=
uBtn).m -tearoff <span class=3D"hljs-number">0</span>]
	$data(typeMenuBtn) config -takefocus <span class=3D"hljs-number">1</span> =
-highlightthickness <span class=3D"hljs-number">2</span> -relief raised -bd=
 <span class=3D"hljs-number">2</span> -anchor w
    }
    <span class=3D"hljs-keyword">set</span> data(okBtn) [button $f2.ok -tex=
t OK -under <span class=3D"hljs-number">0</span> -width <span class=3D"hljs=
-number">6</span> -default active -pady <span class=3D"hljs-number">3</span=
>]
    <span class=3D"hljs-keyword">set</span> data(cancelBtn) [button $f3.can=
cel -text Cancel -under <span class=3D"hljs-number">0</span> -width <span c=
lass=3D"hljs-number">6</span> -default normal -pady <span class=3D"hljs-num=
ber">3</span>]
    pack $data(okBtn) -side right -padx <span class=3D"hljs-number">4</span=
> -anchor e
    pack $f2.lab -side left -padx <span class=3D"hljs-number">4</span>
    pack $f2.ent -expand yes -fill x -padx <span class=3D"hljs-number">2</s=
pan> -pady <span class=3D"hljs-number">0</span>
    pack $data(cancelBtn) -side right -padx <span class=3D"hljs-number">4</=
span> -anchor w
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $class TkFDialog]} then {
	pack $data(typeMenuLab) -side left -padx <span class=3D"hljs-number">4</sp=
an>
	pack $data(typeMenuBtn) -expand yes -fill x -side right
    }
    pack $f1 -side top -fill x -pady <span class=3D"hljs-number">4</span>
    pack $f3 -side bottom -fill x
    pack $f2 -side bottom -fill x
    pack $data(icons) -expand yes -fill both -padx <span class=3D"hljs-numb=
er">4</span> -pady <span class=3D"hljs-number">1</span>
    wm protocol $w WM_DELETE_WINDOW [<span class=3D"hljs-keyword">list</spa=
n> ::tk::dialog::<span class=3D"hljs-keyword">file</span>::CancelCmd $w]
    $data(upBtn) config -command [<span class=3D"hljs-keyword">list</span> =
::tk::dialog::<span class=3D"hljs-keyword">file</span>::UpDirCmd $w]
    $data(cancelBtn) config -command [<span class=3D"hljs-keyword">list</sp=
an> ::tk::dialog::<span class=3D"hljs-keyword">file</span>::CancelCmd $w]
    bind $w &lt;KeyPress-Escape&gt; [<span class=3D"hljs-keyword">list</spa=
n> tkButtonInvoke $data(cancelBtn)]
    bind $w &lt;Alt-c&gt; [<span class=3D"hljs-keyword">list</span> tkButto=
nInvoke $data(cancelBtn)]
    bind $w &lt;Alt-d&gt; [<span class=3D"hljs-keyword">list</span> focus $=
data(dirMenuBtn)]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $class TkFDialog]} then {
	bind $data(ent) &lt;Return&gt; [<span class=3D"hljs-keyword">list</span> :=
:tk::dialog::<span class=3D"hljs-keyword">file</span>::ActivateEnt $w]
	$data(okBtn) config -command [<span class=3D"hljs-keyword">list</span> ::t=
k::dialog::<span class=3D"hljs-keyword">file</span>::OkCmd $w]
	bind $w &lt;Alt-t&gt; [<span class=3D"hljs-keyword">format</span> {
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">strin=
g</span> equal [%s cget -state] <span class=3D"hljs-string">"normal"</span>=
]} {
focus %s
}
} $data(typeMenuBtn) $data(typeMenuBtn)]
	bind $w &lt;Alt-n&gt; [<span class=3D"hljs-keyword">list</span> focus $dat=
a(ent)]
	bind $w &lt;Alt-o&gt; [<span class=3D"hljs-keyword">list</span> ::tk::dial=
og::<span class=3D"hljs-keyword">file</span>::InvokeBtn $w Open]
	bind $w &lt;Alt-s&gt; [<span class=3D"hljs-keyword">list</span> ::tk::dial=
og::<span class=3D"hljs-keyword">file</span>::InvokeBtn $w Save]
    } else {
	<span class=3D"hljs-keyword">set</span> okCmd [<span class=3D"hljs-keyword=
">list</span> ::tk::dialog::<span class=3D"hljs-keyword">file</span>::choos=
eDir::OkCmd $w]
	bind $data(ent) &lt;Return&gt; $okCmd
	$data(okBtn) config -command $okCmd
	bind $w &lt;Alt-s&gt; [<span class=3D"hljs-keyword">list</span> focus $dat=
a(ent)]
	bind $w &lt;Alt-o&gt; [<span class=3D"hljs-keyword">list</span> tkButtonIn=
voke $data(okBtn)]
    }
    tkFocusGroup_Create $w
    tkFocusGroup_BindIn $w $data(ent) [<span class=3D"hljs-keyword">list</s=
pan> ::tk::dialog::<span class=3D"hljs-keyword">file</span>::EntFocusIn $w]
    tkFocusGroup_BindOut $w $data(ent) [<span class=3D"hljs-keyword">list</=
span> ::tk::dialog::<span class=3D"hljs-keyword">file</span>::EntFocusOut $=
w]
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::tk::d=
ialog::file::UpdateWhenIdle</span> {w} {
    <span class=3D"hljs-keyword">upvar</span> ::tk::dialog::<span class=3D"=
hljs-keyword">file</span>::[winfo name $w] data
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists data(updateId)]} then {
	<span class=3D"hljs-keyword">return</span>
    } else {
	<span class=3D"hljs-keyword">set</span> data(updateId) [<span class=3D"hlj=
s-keyword">after</span> idle [<span class=3D"hljs-keyword">list</span> ::tk=
::dialog::<span class=3D"hljs-keyword">file</span>::Update $w]]
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::tk::d=
ialog::file::Update</span> {w} {
    <span class=3D"hljs-keyword">if</span> {![winfo exists $w]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">set</span> class [winfo class $w]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare $class TkFDialog] &amp;&amp; [<span class=3D"hljs-keyw=
ord">string</span> compare $class TkChooseDir]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">set</span> dataName [winfo name $w]
    <span class=3D"hljs-keyword">upvar</span> ::tk::dialog::<span class=3D"=
hljs-keyword">file</span>::$dataName data
    <span class=3D"hljs-keyword">global</span> tk_library tkPriv
    <span class=3D"hljs-keyword">catch</span> {<span class=3D"hljs-keyword"=
>unset</span> data(updateId)}
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists tkPriv(folderImage)]} then {
	<span class=3D"hljs-keyword">set</span> tkPriv(folderImage) [image create =
photo -data {
R0lGODlhEAAMAKEAAAD//wAAAPD/gAAAACH5BAEAAAAALAAAAAAQAAwAAAIghINhyycvVFsB
QtmS3rjaH1Hg141WaT5ouprt2HHcUgAAOw=3D=3D}]
	<span class=3D"hljs-keyword">set</span> tkPriv(fileImage) [image create ph=
oto -data {
R0lGODlhDAAMAKEAALLA3AAAAP//<span class=3D"hljs-number">8</span>wAAACH5BAEA=
AAAALAAAAAAMAAwAAAIgRI4Ha+IfWHsO
rSASvJTGhnhcV3EJlo3kh53ltF5nAhQAOw=3D=3D}]
    }
    <span class=3D"hljs-keyword">set</span> folder $tkPriv(folderImage)
    <span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">fi=
le</span> $tkPriv(fileImage)
    <span class=3D"hljs-keyword">set</span> appPWD [<span class=3D"hljs-key=
word">pwd</span>]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">c=
atch</span> {
	<span class=3D"hljs-keyword">cd</span> $data(selectPath)
    }]} then {
	tk_messageBox -type ok -parent $w -message <span class=3D"hljs-string">"Ca=
nnot change to the directory \"$data(selectPath)\".\nPermission denied."</s=
pan> -icon warning
	<span class=3D"hljs-keyword">cd</span> $appPWD
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">set</span> entCursor [$data(ent) cget -cur=
sor]
    <span class=3D"hljs-keyword">set</span> dlgCursor [$w cget -cursor]
    $data(ent) config -cursor watch
    $w config -cursor watch
    <span class=3D"hljs-keyword">update</span> idletasks
    tkIconList_DeleteAll $data(icons)
    <span class=3D"hljs-keyword">foreach</span> f [<span class=3D"hljs-keyw=
ord">lsort</span> -dictionary [<span class=3D"hljs-keyword">glob</span> -no=
complain .* *]] {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> equal $f .]} then {
	    <span class=3D"hljs-keyword">continue</span>
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> equal $f ..]} then {
	    <span class=3D"hljs-keyword">continue</span>
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">file=
</span> isdir ./$f]} then {
	    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword"=
>info</span> exists hasDoneDir($f)]} then {
		tkIconList_Add $data(icons) $folder $f
		<span class=3D"hljs-keyword">set</span> hasDoneDir($f) <span class=3D"hlj=
s-number">1</span>
	    }
	}
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $class TkFDialog]} then {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> equal $data(filter) *]} then {
	    <span class=3D"hljs-keyword">set</span> files [<span class=3D"hljs-key=
word">lsort</span> -dictionary [<span class=3D"hljs-keyword">glob</span> -n=
ocomplain .* *]]
	} else {
	    <span class=3D"hljs-keyword">set</span> files [<span class=3D"hljs-key=
word">lsort</span> -dictionary [<span class=3D"hljs-keyword">eval</span> <s=
pan class=3D"hljs-keyword">glob</span> -nocomplain $data(filter)]]
	}
	<span class=3D"hljs-keyword">foreach</span> f $files {
	    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword"=
>file</span> isdir ./$f]} then {
		<span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">in=
fo</span> exists hasDoneFile($f)]} then {
		    tkIconList_Add $data(icons) $file $f
		    <span class=3D"hljs-keyword">set</span> hasDoneFile($f) <span class=
=3D"hljs-number">1</span>
		}
	    }
	}
    }
    tkIconList_Arrange $data(icons)
    <span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">li=
st</span> <span class=3D"hljs-string">""</span>
    <span class=3D"hljs-keyword">set</span> dir <span class=3D"hljs-string"=
>""</span>
    <span class=3D"hljs-keyword">foreach</span> subdir [<span class=3D"hljs=
-keyword">file</span> <span class=3D"hljs-keyword">split</span> $data(selec=
tPath)] {
	<span class=3D"hljs-keyword">set</span> dir [<span class=3D"hljs-keyword">=
file</span> <span class=3D"hljs-keyword">join</span> $dir $subdir]
	<span class=3D"hljs-keyword">lappend</span> <span class=3D"hljs-keyword">l=
ist</span> $dir
    }
    $data(dirMenu) delete <span class=3D"hljs-number">0</span> end
    <span class=3D"hljs-keyword">set</span> var [<span class=3D"hljs-keywor=
d">format</span> %s(selectPath) ::tk::dialog::<span class=3D"hljs-keyword">=
file</span>::$dataName]
    <span class=3D"hljs-keyword">foreach</span> path $list {
	$data(dirMenu) add command -label $path -command [<span class=3D"hljs-keyw=
ord">list</span> <span class=3D"hljs-keyword">set</span> $var $path]
    }
    <span class=3D"hljs-keyword">cd</span> $appPWD
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $class TkFDialog]} then {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> equal $data(type) <span class=3D"hljs-keyword">open</span>]} then=
 {
	    $data(okBtn) config -text <span class=3D"hljs-string">"Open"</span>
	} else {
	    $data(okBtn) config -text <span class=3D"hljs-string">"Save"</span>
	}
    }
    $data(ent) config -cursor $entCursor
    $w config -cursor $dlgCursor
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::tk::d=
ialog::file::SetPathSilently</span> {w path} {
    <span class=3D"hljs-keyword">upvar</span> ::tk::dialog::<span class=3D"=
hljs-keyword">file</span>::[winfo name $w] data
    <span class=3D"hljs-keyword">trace</span> vdelete data(selectPath) w [<=
span class=3D"hljs-keyword">list</span> ::tk::dialog::<span class=3D"hljs-k=
eyword">file</span>::SetPath $w]
    <span class=3D"hljs-keyword">set</span> data(selectPath) $path
    <span class=3D"hljs-keyword">trace</span> <span class=3D"hljs-keyword">=
variable</span> data(selectPath) w [<span class=3D"hljs-keyword">list</span=
> ::tk::dialog::<span class=3D"hljs-keyword">file</span>::SetPath $w]
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::tk::d=
ialog::file::SetPath</span> {w name1 name2 op} {
    <span class=3D"hljs-keyword">if</span> {[winfo exists $w]} then {
	<span class=3D"hljs-keyword">upvar</span> ::tk::dialog::<span class=3D"hlj=
s-keyword">file</span>::[winfo name $w] data
	::tk::dialog::<span class=3D"hljs-keyword">file</span>::UpdateWhenIdle $w
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> equal [winfo class $w] TkChooseDir]} then {
	    $data(ent) delete <span class=3D"hljs-number">0</span> end
	    $data(ent) insert end $data(selectPath)
	}
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::tk::d=
ialog::file::SetFilter</span> {w type} {
    <span class=3D"hljs-keyword">upvar</span> ::tk::dialog::<span class=3D"=
hljs-keyword">file</span>::[winfo name $w] data
    <span class=3D"hljs-keyword">upvar</span> \#<span class=3D"hljs-number"=
>0</span> $data(icons) icons
    <span class=3D"hljs-keyword">set</span> data(filter) [<span class=3D"hl=
js-keyword">lindex</span> $type <span class=3D"hljs-number">1</span>]
    $data(typeMenuBtn) config -text [<span class=3D"hljs-keyword">lindex</s=
pan> $type <span class=3D"hljs-number">0</span>] -indicatoron <span class=
=3D"hljs-number">1</span>
    $icons(sbar) <span class=3D"hljs-keyword">set</span> <span class=3D"hlj=
s-number">0.0</span> <span class=3D"hljs-number">0.0</span>
    ::tk::dialog::<span class=3D"hljs-keyword">file</span>::UpdateWhenIdle =
$w
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::tk::d=
ialog::file::ResolveFile</span> {context text defaultext} {
    <span class=3D"hljs-keyword">set</span> appPWD [<span class=3D"hljs-key=
word">pwd</span>]
    <span class=3D"hljs-keyword">set</span> path [::tk::dialog::<span class=
=3D"hljs-keyword">file</span>::JoinFile $context $text]
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
file</span> isdirectory $path] &amp;&amp; [<span class=3D"hljs-keyword">str=
ing</span> equal [<span class=3D"hljs-keyword">file</span> ext $path] <span=
 class=3D"hljs-string">""</span>]} then {
	<span class=3D"hljs-keyword">set</span> path <span class=3D"hljs-string">"=
$path$defaultext"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">c=
atch</span> {<span class=3D"hljs-keyword">file</span> exists $path}]} then =
{
	<span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keyword">l=
ist</span> ERROR $path <span class=3D"hljs-string">""</span>]
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">f=
ile</span> exists $path]} then {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">file=
</span> isdirectory $path]} then {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
catch</span> {<span class=3D"hljs-keyword">cd</span> $path}]} then {
		<span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keyword">=
list</span> CHDIR $path <span class=3D"hljs-string">""</span>]
	    }
	    <span class=3D"hljs-keyword">set</span> directory [<span class=3D"hljs=
-keyword">pwd</span>]
	    <span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">f=
ile</span> <span class=3D"hljs-string">""</span>
	    <span class=3D"hljs-keyword">set</span> flag OK
	    <span class=3D"hljs-keyword">cd</span> $appPWD
	} else {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
catch</span> {<span class=3D"hljs-keyword">cd</span> [<span class=3D"hljs-k=
eyword">file</span> dirname $path]}]} then {
		<span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keyword">=
list</span> CHDIR [<span class=3D"hljs-keyword">file</span> dirname $path] =
<span class=3D"hljs-string">""</span>]
	    }
	    <span class=3D"hljs-keyword">set</span> directory [<span class=3D"hljs=
-keyword">pwd</span>]
	    <span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">f=
ile</span> [<span class=3D"hljs-keyword">file</span> tail $path]
	    <span class=3D"hljs-keyword">set</span> flag OK
	    <span class=3D"hljs-keyword">cd</span> $appPWD
	}
    } else {
	<span class=3D"hljs-keyword">set</span> dirname [<span class=3D"hljs-keywo=
rd">file</span> dirname $path]
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">file=
</span> exists $dirname]} then {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
catch</span> {<span class=3D"hljs-keyword">cd</span> $dirname}]} then {
		<span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keyword">=
list</span> CHDIR $dirname <span class=3D"hljs-string">""</span>]
	    }
	    <span class=3D"hljs-keyword">set</span> directory [<span class=3D"hljs=
-keyword">pwd</span>]
	    <span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">f=
ile</span> [<span class=3D"hljs-keyword">file</span> tail $path]
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
regexp</span> {[*]|[?]} $file]} then {
		<span class=3D"hljs-keyword">set</span> flag PATTERN
	    } else {
		<span class=3D"hljs-keyword">set</span> flag FILE
	    }
	    <span class=3D"hljs-keyword">cd</span> $appPWD
	} else {
	    <span class=3D"hljs-keyword">set</span> directory $dirname
	    <span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">f=
ile</span> [<span class=3D"hljs-keyword">file</span> tail $path]
	    <span class=3D"hljs-keyword">set</span> flag PATH
	}
    }
    <span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keyword=
">list</span> $flag $directory $file]
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::tk::d=
ialog::file::EntFocusIn</span> {w} {
    <span class=3D"hljs-keyword">upvar</span> ::tk::dialog::<span class=3D"=
hljs-keyword">file</span>::[winfo name $w] data
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare [$data(ent) get] <span class=3D"hljs-string">""</span>=
]} then {
	$data(ent) selection range <span class=3D"hljs-number">0</span> end
	$data(ent) icursor end
    } else {
	$data(ent) selection clear
    }
    tkIconList_Unselect $data(icons)
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal [winfo class $w] TkFDialog]} then {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> equal $data(type) <span class=3D"hljs-keyword">open</span>]} then=
 {
	    $data(okBtn) config -text <span class=3D"hljs-string">"Open"</span>
	} else {
	    $data(okBtn) config -text <span class=3D"hljs-string">"Save"</span>
	}
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::tk::d=
ialog::file::EntFocusOut</span> {w} {
    <span class=3D"hljs-keyword">upvar</span> ::tk::dialog::<span class=3D"=
hljs-keyword">file</span>::[winfo name $w] data
    $data(ent) selection clear
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::tk::d=
ialog::file::ActivateEnt</span> {w} {
    <span class=3D"hljs-keyword">upvar</span> ::tk::dialog::<span class=3D"=
hljs-keyword">file</span>::[winfo name $w] data
    <span class=3D"hljs-keyword">set</span> text [<span class=3D"hljs-keywo=
rd">string</span> trim [$data(ent) get]]
    <span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">li=
st</span> [::tk::dialog::<span class=3D"hljs-keyword">file</span>::ResolveF=
ile $data(selectPath) $text $data(-defaultextension)]
    <span class=3D"hljs-keyword">set</span> flag [<span class=3D"hljs-keywo=
rd">lindex</span> $list <span class=3D"hljs-number">0</span>]
    <span class=3D"hljs-keyword">set</span> path [<span class=3D"hljs-keywo=
rd">lindex</span> $list <span class=3D"hljs-number">1</span>]
    <span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">fi=
le</span> [<span class=3D"hljs-keyword">lindex</span> $list <span class=3D"=
hljs-number">2</span>]
    <span class=3D"hljs-keyword">switch</span> -- $flag {
    OK {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
string</span> equal $file <span class=3D"hljs-string">""</span>]} then {
		<span class=3D"hljs-keyword">set</span> data(selectPath) $path
		$data(ent) delete <span class=3D"hljs-number">0</span> end
	    } else {
		::tk::dialog::<span class=3D"hljs-keyword">file</span>::SetPathSilently $=
w $path
		<span class=3D"hljs-keyword">set</span> data(selectFile) $file
		::tk::dialog::<span class=3D"hljs-keyword">file</span>::Done $w
	    }
	}
    PATTERN {
	    <span class=3D"hljs-keyword">set</span> data(selectPath) $path
	    <span class=3D"hljs-keyword">set</span> data(filter) $file
	}
    FILE {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
string</span> equal $data(type) <span class=3D"hljs-keyword">open</span>]} =
then {
		tk_messageBox -icon warning -type ok -parent $w -message <span class=3D"h=
ljs-string">"File \"[file join $path $file]\" does not exist."</span>
		$data(ent) selection range <span class=3D"hljs-number">0</span> end
		$data(ent) icursor end
	    } else {
		::tk::dialog::<span class=3D"hljs-keyword">file</span>::SetPathSilently $=
w $path
		<span class=3D"hljs-keyword">set</span> data(selectFile) $file
		::tk::dialog::<span class=3D"hljs-keyword">file</span>::Done $w
	    }
	}
    PATH {
	    tk_messageBox -icon warning -type ok -parent $w -message <span class=
=3D"hljs-string">"Directory \"$path\" does not exist."</span>
	    $data(ent) selection range <span class=3D"hljs-number">0</span> end
	    $data(ent) icursor end
	}
    CHDIR {
	    tk_messageBox -type ok -parent $w -message <span class=3D"hljs-string"=
>"Cannot change to the directory \"$path\".\nPermission denied."</span> -ic=
on warning
	    $data(ent) selection range <span class=3D"hljs-number">0</span> end
	    $data(ent) icursor end
	}
    ERROR {
	    tk_messageBox -type ok -parent $w -message <span class=3D"hljs-string"=
>"Invalid file name \"$path\"."</span> -icon warning
	    $data(ent) selection range <span class=3D"hljs-number">0</span> end
	    $data(ent) icursor end
	}
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::tk::d=
ialog::file::InvokeBtn</span> {w key} {
    <span class=3D"hljs-keyword">upvar</span> ::tk::dialog::<span class=3D"=
hljs-keyword">file</span>::[winfo name $w] data
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal [$data(okBtn) cget -text] $key]} then {
	tkButtonInvoke $data(okBtn)
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::tk::d=
ialog::file::UpDirCmd</span> {w} {
    <span class=3D"hljs-keyword">upvar</span> ::tk::dialog::<span class=3D"=
hljs-keyword">file</span>::[winfo name $w] data
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare $data(selectPath) <span class=3D"hljs-string">"/"</spa=
n>]} then {
	<span class=3D"hljs-keyword">set</span> data(selectPath) [<span class=3D"h=
ljs-keyword">file</span> dirname $data(selectPath)]
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::tk::d=
ialog::file::JoinFile</span> {path <span class=3D"hljs-keyword">file</span>=
} {
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> match {~*} $file] &amp;&amp; [<span class=3D"hljs-keyword">fil=
e</span> exists $path/$file]} then {
	<span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keyword">f=
ile</span> <span class=3D"hljs-keyword">join</span> $path ./$file]
    } else {
	<span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keyword">f=
ile</span> <span class=3D"hljs-keyword">join</span> $path $file]
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::tk::d=
ialog::file::OkCmd</span> {w} {
    <span class=3D"hljs-keyword">upvar</span> ::tk::dialog::<span class=3D"=
hljs-keyword">file</span>::[winfo name $w] data
    <span class=3D"hljs-keyword">set</span> text [tkIconList_Get $data(icon=
s)]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare $text <span class=3D"hljs-string">""</span>]} then {
	<span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">file<=
/span> [::tk::dialog::<span class=3D"hljs-keyword">file</span>::JoinFile $d=
ata(selectPath) $text]
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">file=
</span> isdirectory $file]} then {
	    ::tk::dialog::<span class=3D"hljs-keyword">file</span>::ListInvoke $w =
$text
	    <span class=3D"hljs-keyword">return</span>
	}
    }
    ::tk::dialog::<span class=3D"hljs-keyword">file</span>::ActivateEnt $w
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::tk::d=
ialog::file::CancelCmd</span> {w} {
    <span class=3D"hljs-keyword">upvar</span> ::tk::dialog::<span class=3D"=
hljs-keyword">file</span>::[winfo name $w] data
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">set</span> tkPriv(selectFilePath) <span cl=
ass=3D"hljs-string">""</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::tk::d=
ialog::file::ListBrowse</span> {w text} {
    <span class=3D"hljs-keyword">upvar</span> ::tk::dialog::<span class=3D"=
hljs-keyword">file</span>::[winfo name $w] data
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $text <span class=3D"hljs-string">""</span>]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">fi=
le</span> [::tk::dialog::<span class=3D"hljs-keyword">file</span>::JoinFile=
 $data(selectPath) $text]
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
file</span> isdirectory $file]} then {
	$data(ent) delete <span class=3D"hljs-number">0</span> end
	$data(ent) insert <span class=3D"hljs-number">0</span> $text
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> equal [winfo class $w] TkFDialog]} then {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
string</span> equal $data(type) <span class=3D"hljs-keyword">open</span>]} =
then {
		$data(okBtn) config -text <span class=3D"hljs-string">"Open"</span>
	    } else {
		$data(okBtn) config -text <span class=3D"hljs-string">"Save"</span>
	    }
	}
    } else {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> equal [winfo class $w] TkFDialog]} then {
	    $data(okBtn) config -text <span class=3D"hljs-string">"Open"</span>
	}
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::tk::d=
ialog::file::ListInvoke</span> {w text} {
    <span class=3D"hljs-keyword">upvar</span> ::tk::dialog::<span class=3D"=
hljs-keyword">file</span>::[winfo name $w] data
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $text <span class=3D"hljs-string">""</span>]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">fi=
le</span> [::tk::dialog::<span class=3D"hljs-keyword">file</span>::JoinFile=
 $data(selectPath) $text]
    <span class=3D"hljs-keyword">set</span> class [winfo class $w]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $class TkChooseDir] || [<span class=3D"hljs-keyword">fil=
e</span> isdirectory $file]} then {
	<span class=3D"hljs-keyword">set</span> appPWD [<span class=3D"hljs-keywor=
d">pwd</span>]
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">catc=
h</span> {<span class=3D"hljs-keyword">cd</span> $file}]} then {
	    tk_messageBox -type ok -parent $w -message <span class=3D"hljs-string"=
>"Cannot change to the directory \"$file\".\nPermission denied."</span> -ic=
on warning
	} else {
	    <span class=3D"hljs-keyword">cd</span> $appPWD
	    <span class=3D"hljs-keyword">set</span> data(selectPath) $file
	}
    } else {
	<span class=3D"hljs-keyword">set</span> data(selectFile) $file
	::tk::dialog::<span class=3D"hljs-keyword">file</span>::Done $w
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::tk::d=
ialog::file::Done</span> {w {selectFilePath <span class=3D"hljs-string">""<=
/span>}} {
    <span class=3D"hljs-keyword">upvar</span> ::tk::dialog::<span class=3D"=
hljs-keyword">file</span>::[winfo name $w] data
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $selectFilePath <span class=3D"hljs-string">""</span>]} =
then {
	<span class=3D"hljs-keyword">set</span> selectFilePath [::tk::dialog::<spa=
n class=3D"hljs-keyword">file</span>::JoinFile $data(selectPath) $data(sele=
ctFile)]
	<span class=3D"hljs-keyword">set</span> tkPriv(selectFile) $data(selectFil=
e)
	<span class=3D"hljs-keyword">set</span> tkPriv(selectPath) $data(selectPat=
h)
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">file=
</span> exists $selectFilePath] &amp;&amp; [<span class=3D"hljs-keyword">st=
ring</span> equal $data(type) save]} then {
	    <span class=3D"hljs-keyword">set</span> reply [tk_messageBox -icon war=
ning -type yesno -parent $w -message <span class=3D"hljs-string">"File \"$s=
electFilePath\" already exists.\nDo you want to overwrite it?"</span>]
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
string</span> equal $reply <span class=3D"hljs-string">"no"</span>]} then {
		<span class=3D"hljs-keyword">return</span>
	    }
	}
    }
    <span class=3D"hljs-keyword">set</span> tkPriv(selectFilePath) $selectF=
ilePath
}
<span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keyword">=
eval</span> ::tk::dialog {}
<span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keyword">=
eval</span> ::tk::dialog::<span class=3D"hljs-keyword">file</span> {}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkMotif=
FDialog</span> {type args} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">set</span> dataName __tk_filedialog
    <span class=3D"hljs-keyword">upvar</span> ::tk::dialog::<span class=3D"=
hljs-keyword">file</span>::$dataName data
    <span class=3D"hljs-keyword">set</span> w [tkMotifFDialog_Create $dataN=
ame $type $args]
    ::tk::SetFocusGrab $w $data(sEnt)
    $data(sEnt) selection range <span class=3D"hljs-number">0</span> end
    tkwait <span class=3D"hljs-keyword">variable</span> tkPriv(selectFilePa=
th)
    ::tk::RestoreFocusGrab $w $data(sEnt) withdraw
    <span class=3D"hljs-keyword">return</span> $tkPriv(selectFilePath)
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkMotif=
FDialog_Create</span> {dataName type argList} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">upvar</span> ::tk::dialog::<span class=3D"=
hljs-keyword">file</span>::$dataName data
    tkMotifFDialog_Config $dataName $type $argList
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $data(-parent) .]} then {
	<span class=3D"hljs-keyword">set</span> w .$dataName
    } else {
	<span class=3D"hljs-keyword">set</span> w $data(-parent).$dataName
    }
    <span class=3D"hljs-keyword">if</span> {![winfo exists $w]} then {
	tkMotifFDialog_BuildUI $w
    } elseif {[<span class=3D"hljs-keyword">string</span> compare [winfo cl=
ass $w] TkMotifFDialog]} {
	destroy $w
	tkMotifFDialog_BuildUI $w
    } else {
	<span class=3D"hljs-keyword">set</span> data(fEnt) $w.top.f1.ent
	<span class=3D"hljs-keyword">set</span> data(dList) $w.top.f2.a.l
	<span class=3D"hljs-keyword">set</span> data(fList) $w.top.f2.b.l
	<span class=3D"hljs-keyword">set</span> data(sEnt) $w.top.f3.ent
	<span class=3D"hljs-keyword">set</span> data(okBtn) $w.bot.ok
	<span class=3D"hljs-keyword">set</span> data(filterBtn) $w.bot.filter
	<span class=3D"hljs-keyword">set</span> data(cancelBtn) $w.bot.cancel
    }
    wm transient $w $data(-parent)
    tkMotifFDialog_Update $w
    ::tk::PlaceWindow $w
    wm title $w $data(-title)
    <span class=3D"hljs-keyword">return</span> $w
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkMotif=
FDialog_Config</span> {dataName type argList} {
    <span class=3D"hljs-keyword">upvar</span> ::tk::dialog::<span class=3D"=
hljs-keyword">file</span>::$dataName data
    <span class=3D"hljs-keyword">set</span> data(type) $type
    <span class=3D"hljs-keyword">set</span> specs {
{-defaultextension <span class=3D"hljs-string">""</span> <span class=3D"hlj=
s-string">""</span> <span class=3D"hljs-string">""</span>}
{-filetypes <span class=3D"hljs-string">""</span> <span class=3D"hljs-strin=
g">""</span> <span class=3D"hljs-string">""</span>}
{-initialdir <span class=3D"hljs-string">""</span> <span class=3D"hljs-stri=
ng">""</span> <span class=3D"hljs-string">""</span>}
{-initialfile <span class=3D"hljs-string">""</span> <span class=3D"hljs-str=
ing">""</span> <span class=3D"hljs-string">""</span>}
{-parent <span class=3D"hljs-string">""</span> <span class=3D"hljs-string">=
""</span> <span class=3D"hljs-string">"."</span>}
{-title <span class=3D"hljs-string">""</span> <span class=3D"hljs-string">"=
"</span> <span class=3D"hljs-string">""</span>}
}
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists data(selectPath)]} then {
	<span class=3D"hljs-keyword">set</span> data(selectPath) [<span class=3D"h=
ljs-keyword">pwd</span>]
	<span class=3D"hljs-keyword">set</span> data(selectFile) <span class=3D"hl=
js-string">""</span>
    }
    tclParseConfigSpec ::tk::dialog::<span class=3D"hljs-keyword">file</spa=
n>::$dataName $specs <span class=3D"hljs-string">""</span> $argList
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $data(-title) <span class=3D"hljs-string">""</span>]} th=
en {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> equal $type <span class=3D"hljs-string">"open"</span>]} then {
	    <span class=3D"hljs-keyword">set</span> data(-title) <span class=3D"hl=
js-string">"Open"</span>
	} else {
	    <span class=3D"hljs-keyword">set</span> data(-title) <span class=3D"hl=
js-string">"Save As"</span>
	}
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare $data(-initialdir) <span class=3D"hljs-string">""</spa=
n>]} then {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">file=
</span> isdirectory $data(-initialdir)]} then {
	    <span class=3D"hljs-keyword">set</span> data(selectPath) [<span class=
=3D"hljs-keyword">glob</span> $data(-initialdir)]
	} else {
	    <span class=3D"hljs-keyword">set</span> data(selectPath) [<span class=
=3D"hljs-keyword">pwd</span>]
	}
	<span class=3D"hljs-keyword">set</span> old [<span class=3D"hljs-keyword">=
pwd</span>]
	<span class=3D"hljs-keyword">cd</span> $data(selectPath)
	<span class=3D"hljs-keyword">set</span> data(selectPath) [<span class=3D"h=
ljs-keyword">pwd</span>]
	<span class=3D"hljs-keyword">cd</span> $old
    }
    <span class=3D"hljs-keyword">set</span> data(selectFile) $data(-initial=
file)
    <span class=3D"hljs-keyword">set</span> data(-filetypes) [tkFDGetFileTy=
pes $data(-filetypes)]
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists data(filter)]} then {
	<span class=3D"hljs-keyword">set</span> data(filter) *
    }
    <span class=3D"hljs-keyword">if</span> {![winfo exists $data(-parent)]}=
 then {
	<span class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">"bad=
 window path name \"$data(-parent)\""</span>
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkMotif=
FDialog_BuildUI</span> {w} {
    <span class=3D"hljs-keyword">set</span> dataName [<span class=3D"hljs-k=
eyword">lindex</span> [<span class=3D"hljs-keyword">split</span> $w .] end]
    <span class=3D"hljs-keyword">upvar</span> ::tk::dialog::<span class=3D"=
hljs-keyword">file</span>::$dataName data
    toplevel $w -class TkMotifFDialog
    <span class=3D"hljs-keyword">set</span> top [frame $w.top -relief raise=
d -bd <span class=3D"hljs-number">1</span>]
    <span class=3D"hljs-keyword">set</span> bot [frame $w.bot -relief raise=
d -bd <span class=3D"hljs-number">1</span>]
    pack $w.bot -side bottom -fill x
    pack $w.top -side top -expand yes -fill both
    <span class=3D"hljs-keyword">set</span> f1 [frame $top.f1]
    <span class=3D"hljs-keyword">set</span> f2 [frame $top.f2]
    <span class=3D"hljs-keyword">set</span> f3 [frame $top.f3]
    pack $f1 -side top -fill x
    pack $f3 -side bottom -fill x
    pack $f2 -expand yes -fill both
    <span class=3D"hljs-keyword">set</span> f2a [frame $f2.a]
    <span class=3D"hljs-keyword">set</span> f2b [frame $f2.b]
    grid $f2a -row <span class=3D"hljs-number">0</span> -column <span class=
=3D"hljs-number">0</span> -rowspan <span class=3D"hljs-number">1</span> -co=
lumnspan <span class=3D"hljs-number">1</span> -padx <span class=3D"hljs-num=
ber">4</span> -pady <span class=3D"hljs-number">4</span> -sticky news
    grid $f2b -row <span class=3D"hljs-number">0</span> -column <span class=
=3D"hljs-number">1</span> -rowspan <span class=3D"hljs-number">1</span> -co=
lumnspan <span class=3D"hljs-number">1</span> -padx <span class=3D"hljs-num=
ber">4</span> -pady <span class=3D"hljs-number">4</span> -sticky news
    grid rowconfig $f2 <span class=3D"hljs-number">0</span> -minsize <span =
class=3D"hljs-number">0</span> -weight <span class=3D"hljs-number">1</span>
    grid columnconfig $f2 <span class=3D"hljs-number">0</span> -minsize <sp=
an class=3D"hljs-number">0</span> -weight <span class=3D"hljs-number">1</sp=
an>
    grid columnconfig $f2 <span class=3D"hljs-number">1</span> -minsize <sp=
an class=3D"hljs-number">150</span> -weight <span class=3D"hljs-number">2</=
span>
    label $f1.lab -text <span class=3D"hljs-string">"Filter:"</span> -under=
 <span class=3D"hljs-number">3</span> -anchor w
    entry $f1.ent
    pack $f1.lab -side top -fill x -padx <span class=3D"hljs-number">6</spa=
n> -pady <span class=3D"hljs-number">4</span>
    pack $f1.ent -side top -fill x -padx <span class=3D"hljs-number">4</spa=
n> -pady <span class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> data(fEnt) $f1.ent
    <span class=3D"hljs-keyword">set</span> data(dList) [tkMotifFDialog_Mak=
eSList $w $f2a Directory: <span class=3D"hljs-number">0</span> DList]
    <span class=3D"hljs-keyword">set</span> data(fList) [tkMotifFDialog_Mak=
eSList $w $f2b Files: <span class=3D"hljs-number">2</span> FList]
    label $f3.lab -text <span class=3D"hljs-string">"Selection:"</span> -un=
der <span class=3D"hljs-number">0</span> -anchor w
    entry $f3.ent
    pack $f3.lab -side top -fill x -padx <span class=3D"hljs-number">6</spa=
n> -pady <span class=3D"hljs-number">0</span>
    pack $f3.ent -side top -fill x -padx <span class=3D"hljs-number">4</spa=
n> -pady <span class=3D"hljs-number">4</span>
    <span class=3D"hljs-keyword">set</span> data(sEnt) $f3.ent
    <span class=3D"hljs-keyword">set</span> data(okBtn) [button $bot.ok -te=
xt OK -width <span class=3D"hljs-number">6</span> -under <span class=3D"hlj=
s-number">0</span> -command [<span class=3D"hljs-keyword">list</span> tkMot=
ifFDialog_OkCmd $w]]
    <span class=3D"hljs-keyword">set</span> data(filterBtn) [button $bot.fi=
lter -text Filter -width <span class=3D"hljs-number">6</span> -under <span =
class=3D"hljs-number">0</span> -command [<span class=3D"hljs-keyword">list<=
/span> tkMotifFDialog_FilterCmd $w]]
    <span class=3D"hljs-keyword">set</span> data(cancelBtn) [button $bot.ca=
ncel -text Cancel -width <span class=3D"hljs-number">6</span> -under <span =
class=3D"hljs-number">0</span> -command [<span class=3D"hljs-keyword">list<=
/span> tkMotifFDialog_CancelCmd $w]]
    pack $bot.ok $bot.filter $bot.cancel -padx <span class=3D"hljs-number">=
10</span> -pady <span class=3D"hljs-number">10</span> -expand yes -side lef=
t
    bind $w &lt;Alt-t&gt; [<span class=3D"hljs-keyword">list</span> focus $=
data(fEnt)]
    bind $w &lt;Alt-d&gt; [<span class=3D"hljs-keyword">list</span> focus $=
data(dList)]
    bind $w &lt;Alt-l&gt; [<span class=3D"hljs-keyword">list</span> focus $=
data(fList)]
    bind $w &lt;Alt-s&gt; [<span class=3D"hljs-keyword">list</span> focus $=
data(sEnt)]
    bind $w &lt;Alt-o&gt; [<span class=3D"hljs-keyword">list</span> tkButto=
nInvoke $bot.ok]
    bind $w &lt;Alt-f&gt; [<span class=3D"hljs-keyword">list</span> tkButto=
nInvoke $bot.filter]
    bind $w &lt;Alt-c&gt; [<span class=3D"hljs-keyword">list</span> tkButto=
nInvoke $bot.cancel]
    bind $data(fEnt) &lt;Return&gt; [<span class=3D"hljs-keyword">list</spa=
n> tkMotifFDialog_ActivateFEnt $w]
    bind $data(sEnt) &lt;Return&gt; [<span class=3D"hljs-keyword">list</spa=
n> tkMotifFDialog_ActivateSEnt $w]
    wm protocol $w WM_DELETE_WINDOW [<span class=3D"hljs-keyword">list</spa=
n> tkMotifFDialog_CancelCmd $w]
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkMotif=
FDialog_MakeSList</span> {w f label under cmdPrefix} {
    label $f.lab -text $label -under $under -anchor w
    listbox $f.l -width <span class=3D"hljs-number">12</span> -height <span=
 class=3D"hljs-number">5</span> -selectmode browse -exportselection <span c=
lass=3D"hljs-number">0</span> -xscrollcommand [<span class=3D"hljs-keyword"=
>list</span> $f.h <span class=3D"hljs-keyword">set</span>] -yscrollcommand =
[<span class=3D"hljs-keyword">list</span> $f.v <span class=3D"hljs-keyword"=
>set</span>]
    scrollbar $f.v -orient vertical -takefocus <span class=3D"hljs-number">=
0</span> -command [<span class=3D"hljs-keyword">list</span> $f.l yview]
    scrollbar $f.h -orient horizontal -takefocus <span class=3D"hljs-number=
">0</span> -command [<span class=3D"hljs-keyword">list</span> $f.l xview]
    grid $f.lab -row <span class=3D"hljs-number">0</span> -column <span cla=
ss=3D"hljs-number">0</span> -sticky news -rowspan <span class=3D"hljs-numbe=
r">1</span> -columnspan <span class=3D"hljs-number">2</span> -padx <span cl=
ass=3D"hljs-number">2</span> -pady <span class=3D"hljs-number">2</span>
    grid $f.l -row <span class=3D"hljs-number">1</span> -column <span class=
=3D"hljs-number">0</span> -rowspan <span class=3D"hljs-number">1</span> -co=
lumnspan <span class=3D"hljs-number">1</span> -sticky news
    grid $f.v -row <span class=3D"hljs-number">1</span> -column <span class=
=3D"hljs-number">1</span> -rowspan <span class=3D"hljs-number">1</span> -co=
lumnspan <span class=3D"hljs-number">1</span> -sticky news
    grid $f.h -row <span class=3D"hljs-number">2</span> -column <span class=
=3D"hljs-number">0</span> -rowspan <span class=3D"hljs-number">1</span> -co=
lumnspan <span class=3D"hljs-number">1</span> -sticky news
    grid rowconfig $f <span class=3D"hljs-number">0</span> -weight <span cl=
ass=3D"hljs-number">0</span> -minsize <span class=3D"hljs-number">0</span>
    grid rowconfig $f <span class=3D"hljs-number">1</span> -weight <span cl=
ass=3D"hljs-number">1</span> -minsize <span class=3D"hljs-number">0</span>
    grid columnconfig $f <span class=3D"hljs-number">0</span> -weight <span=
 class=3D"hljs-number">1</span> -minsize <span class=3D"hljs-number">0</spa=
n>
    <span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">li=
st</span> $f.l
    bind $list &lt;Up&gt; [<span class=3D"hljs-keyword">list</span> tkMotif=
FDialog_Browse$cmdPrefix $w]
    bind $list &lt;Down&gt; [<span class=3D"hljs-keyword">list</span> tkMot=
ifFDialog_Browse$cmdPrefix $w]
    bind $list &lt;space&gt; [<span class=3D"hljs-keyword">list</span> tkMo=
tifFDialog_Browse$cmdPrefix $w]
    bind $list &lt;<span class=3D"hljs-number">1</span>&gt; [<span class=3D=
"hljs-keyword">list</span> tkMotifFDialog_Browse$cmdPrefix $w]
    bind $list &lt;B1-Motion&gt; [<span class=3D"hljs-keyword">list</span> =
tkMotifFDialog_Browse$cmdPrefix $w]
    bind $list &lt;Double-ButtonRelease<span class=3D"hljs-number">-1</span=
>&gt; [<span class=3D"hljs-keyword">list</span> tkMotifFDialog_Activate$cmd=
Prefix $w]
    bind $list &lt;Return&gt; <span class=3D"hljs-string">"tkMotifFDialog_B=
rowse$cmdPrefix [list $w];  tkMotifFDialog_Activate$cmdPrefix [list $w]"</s=
pan>
    bindtags $list [<span class=3D"hljs-keyword">list</span> Listbox $list =
[winfo toplevel $list] all]
    tkListBoxKeyAccel_Set $list
    <span class=3D"hljs-keyword">return</span> $f.l
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkMotif=
FDialog_InterpFilter</span> {w} {
    <span class=3D"hljs-keyword">upvar</span> ::tk::dialog::<span class=3D"=
hljs-keyword">file</span>::[winfo name $w] data
    <span class=3D"hljs-keyword">set</span> text [<span class=3D"hljs-keywo=
rd">string</span> trim [$data(fEnt) get]]
    <span class=3D"hljs-keyword">set</span> badTilde <span class=3D"hljs-nu=
mber">0</span>
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal [<span class=3D"hljs-keyword">string</span> index $text =
<span class=3D"hljs-number">0</span>] ~]} then {
	<span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">list<=
/span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keywor=
d">split</span> $text]
	<span class=3D"hljs-keyword">set</span> tilde [<span class=3D"hljs-keyword=
">lindex</span> $list <span class=3D"hljs-number">0</span>]
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">catc=
h</span> {<span class=3D"hljs-keyword">set</span> tilde [<span class=3D"hlj=
s-keyword">glob</span> $tilde]}]} then {
	    <span class=3D"hljs-keyword">set</span> badTilde <span class=3D"hljs-n=
umber">1</span>
	} else {
	    <span class=3D"hljs-keyword">set</span> text [<span class=3D"hljs-keyw=
ord">eval</span> <span class=3D"hljs-keyword">file</span> <span class=3D"hl=
js-keyword">join</span> [<span class=3D"hljs-keyword">concat</span> $tilde =
[<span class=3D"hljs-keyword">lrange</span> $list <span class=3D"hljs-numbe=
r">1</span> end]]]
	}
    }
    <span class=3D"hljs-keyword">set</span> relative <span class=3D"hljs-nu=
mber">0</span>
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal [<span class=3D"hljs-keyword">file</span> pathtype $text=
] <span class=3D"hljs-string">"relative"</span>]} then {
	<span class=3D"hljs-keyword">set</span> relative <span class=3D"hljs-numbe=
r">1</span>
    } elseif {$badTilde} {
	<span class=3D"hljs-keyword">set</span> relative <span class=3D"hljs-numbe=
r">1</span>
    }
    <span class=3D"hljs-keyword">if</span> {$relative} then {
	tk_messageBox -icon warning -type ok -message <span class=3D"hljs-string">=
"\"$text\" must be an absolute pathname"</span>
	$data(fEnt) delete <span class=3D"hljs-number">0</span> end
	$data(fEnt) insert <span class=3D"hljs-number">0</span> [::tk::dialog::<sp=
an class=3D"hljs-keyword">file</span>::JoinFile $data(selectPath) $data(fil=
ter)]
	<span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keyword">l=
ist</span> $data(selectPath) $data(filter)]
    }
    <span class=3D"hljs-keyword">set</span> resolved [::tk::dialog::<span c=
lass=3D"hljs-keyword">file</span>::JoinFile [<span class=3D"hljs-keyword">f=
ile</span> dirname $text] [<span class=3D"hljs-keyword">file</span> tail $t=
ext]]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">f=
ile</span> isdirectory $resolved]} then {
	<span class=3D"hljs-keyword">set</span> dir $resolved
	<span class=3D"hljs-keyword">set</span> fil $data(filter)
    } else {
	<span class=3D"hljs-keyword">set</span> dir [<span class=3D"hljs-keyword">=
file</span> dirname $resolved]
	<span class=3D"hljs-keyword">set</span> fil [<span class=3D"hljs-keyword">=
file</span> tail $resolved]
    }
    <span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keyword=
">list</span> $dir $fil]
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkMotif=
FDialog_Update</span> {w} {
    <span class=3D"hljs-keyword">upvar</span> ::tk::dialog::<span class=3D"=
hljs-keyword">file</span>::[winfo name $w] data
    $data(fEnt) delete <span class=3D"hljs-number">0</span> end
    $data(fEnt) insert <span class=3D"hljs-number">0</span> [::tk::dialog::=
<span class=3D"hljs-keyword">file</span>::JoinFile $data(selectPath) $data(=
filter)]
    $data(sEnt) delete <span class=3D"hljs-number">0</span> end
    $data(sEnt) insert <span class=3D"hljs-number">0</span> [::tk::dialog::=
<span class=3D"hljs-keyword">file</span>::JoinFile $data(selectPath) $data(=
selectFile)]
    tkMotifFDialog_LoadFiles $w
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkMotif=
FDialog_LoadFiles</span> {w} {
    <span class=3D"hljs-keyword">upvar</span> ::tk::dialog::<span class=3D"=
hljs-keyword">file</span>::[winfo name $w] data
    $data(dList) delete <span class=3D"hljs-number">0</span> end
    $data(fList) delete <span class=3D"hljs-number">0</span> end
    <span class=3D"hljs-keyword">set</span> appPWD [<span class=3D"hljs-key=
word">pwd</span>]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">c=
atch</span> {<span class=3D"hljs-keyword">cd</span> $data(selectPath)}]} th=
en {
	<span class=3D"hljs-keyword">cd</span> $appPWD
	$data(dList) insert end <span class=3D"hljs-string">".."</span>
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">foreach</span> f [<span class=3D"hljs-keyw=
ord">lsort</span> -dictionary [<span class=3D"hljs-keyword">glob</span> -no=
complain .* *]] {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">file=
</span> isdir ./$f]} then {
	    $data(dList) insert end $f
	}
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $data(filter) *]} then {
	<span class=3D"hljs-keyword">set</span> files [<span class=3D"hljs-keyword=
">lsort</span> -dictionary [<span class=3D"hljs-keyword">glob</span> -nocom=
plain .* *]]
    } else {
	<span class=3D"hljs-keyword">set</span> files [<span class=3D"hljs-keyword=
">lsort</span> -dictionary [<span class=3D"hljs-keyword">glob</span> -nocom=
plain $data(filter)]]
    }
    <span class=3D"hljs-keyword">set</span> top <span class=3D"hljs-number"=
>0</span>
    <span class=3D"hljs-keyword">foreach</span> f $files {
	<span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">fil=
e</span> isdir ./$f]} then {
	    <span class=3D"hljs-keyword">regsub</span> {^[.]/} $f <span class=3D"h=
ljs-string">""</span> f
	    $data(fList) insert end $f
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
string</span> match .* $f]} then {
		<span class=3D"hljs-keyword">incr</span> top
	    }
	}
    }
    $data(fList) yview $top
    <span class=3D"hljs-keyword">cd</span> $appPWD
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkMotif=
FDialog_BrowseDList</span> {w} {
    <span class=3D"hljs-keyword">upvar</span> ::tk::dialog::<span class=3D"=
hljs-keyword">file</span>::[winfo name $w] data
    focus $data(dList)
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal [$data(dList) curselection] <span class=3D"hljs-string">=
""</span>]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">set</span> subdir [$data(dList) get [$data=
(dList) curselection]]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $subdir <span class=3D"hljs-string">""</span>]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    $data(fList) selection clear <span class=3D"hljs-number">0</span> end
    <span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">li=
st</span> [tkMotifFDialog_InterpFilter $w]
    <span class=3D"hljs-keyword">set</span> data(filter) [<span class=3D"hl=
js-keyword">lindex</span> $list <span class=3D"hljs-number">1</span>]
    <span class=3D"hljs-keyword">switch</span> -- $subdir {
    . {
	    <span class=3D"hljs-keyword">set</span> newSpec [::tk::dialog::<span c=
lass=3D"hljs-keyword">file</span>::JoinFile $data(selectPath) $data(filter)=
]
	}
    .. {
	    <span class=3D"hljs-keyword">set</span> newSpec [::tk::dialog::<span c=
lass=3D"hljs-keyword">file</span>::JoinFile [<span class=3D"hljs-keyword">f=
ile</span> dirname $data(selectPath)] $data(filter)]
	}
    default {
	    <span class=3D"hljs-keyword">set</span> newSpec [::tk::dialog::<span c=
lass=3D"hljs-keyword">file</span>::JoinFile [::tk::dialog::<span class=3D"h=
ljs-keyword">file</span>::JoinFile $data(selectPath) $subdir] $data(filter)=
]
	}
    }
    $data(fEnt) delete <span class=3D"hljs-number">0</span> end
    $data(fEnt) insert <span class=3D"hljs-number">0</span> $newSpec
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkMotif=
FDialog_ActivateDList</span> {w} {
    <span class=3D"hljs-keyword">upvar</span> ::tk::dialog::<span class=3D"=
hljs-keyword">file</span>::[winfo name $w] data
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal [$data(dList) curselection] <span class=3D"hljs-string">=
""</span>]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">set</span> subdir [$data(dList) get [$data=
(dList) curselection]]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $subdir <span class=3D"hljs-string">""</span>]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    $data(fList) selection clear <span class=3D"hljs-number">0</span> end
    <span class=3D"hljs-keyword">switch</span> -- $subdir {
    . {
	    <span class=3D"hljs-keyword">set</span> newDir $data(selectPath)
	}
    .. {
	    <span class=3D"hljs-keyword">set</span> newDir [<span class=3D"hljs-ke=
yword">file</span> dirname $data(selectPath)]
	}
    default {
	    <span class=3D"hljs-keyword">set</span> newDir [::tk::dialog::<span cl=
ass=3D"hljs-keyword">file</span>::JoinFile $data(selectPath) $subdir]
	}
    }
    <span class=3D"hljs-keyword">set</span> data(selectPath) $newDir
    tkMotifFDialog_Update $w
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare $subdir ..]} then {
	$data(dList) selection <span class=3D"hljs-keyword">set</span> <span class=
=3D"hljs-number">0</span>
	$data(dList) activate <span class=3D"hljs-number">0</span>
    } else {
	$data(dList) selection <span class=3D"hljs-keyword">set</span> <span class=
=3D"hljs-number">1</span>
	$data(dList) activate <span class=3D"hljs-number">1</span>
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkMotif=
FDialog_BrowseFList</span> {w} {
    <span class=3D"hljs-keyword">upvar</span> ::tk::dialog::<span class=3D"=
hljs-keyword">file</span>::[winfo name $w] data
    focus $data(fList)
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal [$data(fList) curselection] <span class=3D"hljs-string">=
""</span>]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">set</span> data(selectFile) [$data(fList) =
get [$data(fList) curselection]]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $data(selectFile) <span class=3D"hljs-string">""</span>]=
} then {
	<span class=3D"hljs-keyword">return</span>
    }
    $data(dList) selection clear <span class=3D"hljs-number">0</span> end
    $data(fEnt) delete <span class=3D"hljs-number">0</span> end
    $data(fEnt) insert <span class=3D"hljs-number">0</span> [::tk::dialog::=
<span class=3D"hljs-keyword">file</span>::JoinFile $data(selectPath) $data(=
filter)]
    $data(fEnt) xview end
    $data(sEnt) delete <span class=3D"hljs-number">0</span> end
    $data(sEnt) insert <span class=3D"hljs-number">0</span> [::tk::dialog::=
<span class=3D"hljs-keyword">file</span>::JoinFile $data(selectPath) $data(=
selectFile)]
    $data(sEnt) xview end
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkMotif=
FDialog_ActivateFList</span> {w} {
    <span class=3D"hljs-keyword">upvar</span> ::tk::dialog::<span class=3D"=
hljs-keyword">file</span>::[winfo name $w] data
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal [$data(fList) curselection] <span class=3D"hljs-string">=
""</span>]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">set</span> data(selectFile) [$data(fList) =
get [$data(fList) curselection]]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $data(selectFile) <span class=3D"hljs-string">""</span>]=
} then {
	<span class=3D"hljs-keyword">return</span>
    } else {
	tkMotifFDialog_ActivateSEnt $w
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkMotif=
FDialog_ActivateFEnt</span> {w} {
    <span class=3D"hljs-keyword">upvar</span> ::tk::dialog::<span class=3D"=
hljs-keyword">file</span>::[winfo name $w] data
    <span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">li=
st</span> [tkMotifFDialog_InterpFilter $w]
    <span class=3D"hljs-keyword">set</span> data(selectPath) [<span class=
=3D"hljs-keyword">lindex</span> $list <span class=3D"hljs-number">0</span>]
    <span class=3D"hljs-keyword">set</span> data(filter) [<span class=3D"hl=
js-keyword">lindex</span> $list <span class=3D"hljs-number">1</span>]
    tkMotifFDialog_Update $w
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkMotif=
FDialog_ActivateSEnt</span> {w} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">upvar</span> ::tk::dialog::<span class=3D"=
hljs-keyword">file</span>::[winfo name $w] data
    <span class=3D"hljs-keyword">set</span> selectFilePath [<span class=3D"=
hljs-keyword">string</span> trim [$data(sEnt) get]]
    <span class=3D"hljs-keyword">set</span> selectFile [<span class=3D"hljs=
-keyword">file</span> tail $selectFilePath]
    <span class=3D"hljs-keyword">set</span> selectPath [<span class=3D"hljs=
-keyword">file</span> dirname $selectFilePath]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $selectFilePath <span class=3D"hljs-string">""</span>]} =
then {
	tkMotifFDialog_FilterCmd $w
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">f=
ile</span> isdirectory $selectFilePath]} then {
	<span class=3D"hljs-keyword">set</span> data(selectPath) [<span class=3D"h=
ljs-keyword">glob</span> $selectFilePath]
	<span class=3D"hljs-keyword">set</span> data(selectFile) <span class=3D"hl=
js-string">""</span>
	tkMotifFDialog_Update $w
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare [<span class=3D"hljs-keyword">file</span> pathtype $se=
lectFilePath] <span class=3D"hljs-string">"absolute"</span>]} then {
	tk_messageBox -icon warning -type ok -message <span class=3D"hljs-string">=
"\"$selectFilePath\" must be an absolute pathname"</span>
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
file</span> exists $selectPath]} then {
	tk_messageBox -icon warning -type ok -message <span class=3D"hljs-string">=
"Directory \"$selectPath\" does not exist."</span>
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
file</span> exists $selectFilePath]} then {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> equal $data(type) <span class=3D"hljs-keyword">open</span>]} then=
 {
	    tk_messageBox -icon warning -type ok -message <span class=3D"hljs-stri=
ng">"File \"$selectFilePath\" does not exist."</span>
	    <span class=3D"hljs-keyword">return</span>
	}
    } else {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> equal $data(type) save]} then {
	    <span class=3D"hljs-keyword">set</span> message [<span class=3D"hljs-k=
eyword">format</span> %s%s <span class=3D"hljs-string">"File \"$selectFileP=
ath\" already exists.\n\n"</span> <span class=3D"hljs-string">"Replace exis=
ting file?"</span>]
	    <span class=3D"hljs-keyword">set</span> answer [tk_messageBox -icon wa=
rning -type yesno -message $message]
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
string</span> equal $answer <span class=3D"hljs-string">"no"</span>]} then =
{
		<span class=3D"hljs-keyword">return</span>
	    }
	}
    }
    <span class=3D"hljs-keyword">set</span> tkPriv(selectFilePath) $selectF=
ilePath
    <span class=3D"hljs-keyword">set</span> tkPriv(selectFile) $selectFile
    <span class=3D"hljs-keyword">set</span> tkPriv(selectPath) $selectPath
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkMotif=
FDialog_OkCmd</span> {w} {
    <span class=3D"hljs-keyword">upvar</span> ::tk::dialog::<span class=3D"=
hljs-keyword">file</span>::[winfo name $w] data
    tkMotifFDialog_ActivateSEnt $w
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkMotif=
FDialog_FilterCmd</span> {w} {
    <span class=3D"hljs-keyword">upvar</span> ::tk::dialog::<span class=3D"=
hljs-keyword">file</span>::[winfo name $w] data
    tkMotifFDialog_ActivateFEnt $w
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkMotif=
FDialog_CancelCmd</span> {w} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">set</span> tkPriv(selectFilePath) <span cl=
ass=3D"hljs-string">""</span>
    <span class=3D"hljs-keyword">set</span> tkPriv(selectFile) <span class=
=3D"hljs-string">""</span>
    <span class=3D"hljs-keyword">set</span> tkPriv(selectPath) <span class=
=3D"hljs-string">""</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkListB=
oxKeyAccel_Set</span> {w} {
    bind Listbox &lt;Any-KeyPress&gt; <span class=3D"hljs-string">""</span>
    bind $w &lt;Destroy&gt; [<span class=3D"hljs-keyword">list</span> tkLis=
tBoxKeyAccel_Unset $w]
    bind $w &lt;Any-KeyPress&gt; [<span class=3D"hljs-keyword">list</span> =
tkListBoxKeyAccel_Key $w %A]
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkListB=
oxKeyAccel_Unset</span> {w} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">catch</span> {<span class=3D"hljs-keyword"=
>after</span> cancel $tkPriv(lbAccel,$w,afterId)}
    <span class=3D"hljs-keyword">catch</span> {<span class=3D"hljs-keyword"=
>unset</span> tkPriv(lbAccel,$w)}
    <span class=3D"hljs-keyword">catch</span> {<span class=3D"hljs-keyword"=
>unset</span> tkPriv(lbAccel,$w,afterId)}
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkListB=
oxKeyAccel_Key</span> {w key} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">append</span> tkPriv(lbAccel,$w) $key
    tkListBoxKeyAccel_Goto $w $tkPriv(lbAccel,$w)
    <span class=3D"hljs-keyword">catch</span> {
	<span class=3D"hljs-keyword">after</span> cancel $tkPriv(lbAccel,$w,afterI=
d)
    }
    <span class=3D"hljs-keyword">set</span> tkPriv(lbAccel,$w,afterId) [<sp=
an class=3D"hljs-keyword">after</span> <span class=3D"hljs-number">500</spa=
n> [<span class=3D"hljs-keyword">list</span> tkListBoxKeyAccel_Reset $w]]
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkListB=
oxKeyAccel_Goto</span> {w <span class=3D"hljs-keyword">string</span>} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">st=
ring</span> [<span class=3D"hljs-keyword">string</span> tolower $string]
    <span class=3D"hljs-keyword">set</span> end [$w index end]
    <span class=3D"hljs-keyword">set</span> theIndex <span class=3D"hljs-nu=
mber">-1</span>
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">0</span>} {$i &lt; $end} {<span cla=
ss=3D"hljs-keyword">incr</span> i} {
	<span class=3D"hljs-keyword">set</span> item [<span class=3D"hljs-keyword"=
>string</span> tolower [$w get $i]]
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> compare $string $item] &gt;=3D <span class=3D"hljs-number">0</spa=
n>} then {
	    <span class=3D"hljs-keyword">set</span> theIndex $i
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> compare $string $item] &lt;=3D <span class=3D"hljs-number">0</spa=
n>} then {
	    <span class=3D"hljs-keyword">set</span> theIndex $i
	    <span class=3D"hljs-keyword">break</span>
	}
    }
    <span class=3D"hljs-keyword">if</span> {$theIndex &gt;=3D <span class=
=3D"hljs-number">0</span>} then {
	$w selection clear <span class=3D"hljs-number">0</span> end
	$w selection <span class=3D"hljs-keyword">set</span> $theIndex $theIndex
	$w activate $theIndex
	$w see $theIndex
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tkListB=
oxKeyAccel_Reset</span> {w} {
    <span class=3D"hljs-keyword">global</span> tkPriv
    <span class=3D"hljs-keyword">catch</span> {<span class=3D"hljs-keyword"=
>unset</span> tkPriv(lbAccel,$w)}
}
<span class=3D"hljs-keyword">package</span> provide <span class=3D"hljs-key=
word">tcltest</span> <span class=3D"hljs-number">1.0</span>
<span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keyword">=
eval</span> <span class=3D"hljs-keyword">tcltest</span> {
    <span class=3D"hljs-keyword">set</span> procList [<span class=3D"hljs-k=
eyword">list</span> test cleanupTests saveState restoreState normalizeMsg m=
akeFile removeFile makeDirectory removeDirectory viewFile bytestring safeFe=
tch threadReap getMatchingFiles loadTestedCommands normalizePath]
    <span class=3D"hljs-keyword">foreach</span> <span class=3D"hljs-keyword=
">proc</span> $procList {
	<span class=3D"hljs-keyword">namespace</span> export $proc
    }
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists verbose]} then {
	<span class=3D"hljs-keyword">variable</span> verbose <span class=3D"hljs-s=
tring">"b"</span>
    }
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists match]} then {
	<span class=3D"hljs-keyword">variable</span> match {}
    }
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists skip]} then {
	<span class=3D"hljs-keyword">variable</span> skip {}
    }
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists matchFiles]} then {
	<span class=3D"hljs-keyword">variable</span> matchFiles {*.test}
    }
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists skipFiles]} then {
	<span class=3D"hljs-keyword">variable</span> skipFiles {}
    }
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists preserveCore]} then {
	<span class=3D"hljs-keyword">variable</span> preserveCore <span class=3D"h=
ljs-number">0</span>
    }
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists outputChannel]} then {
	<span class=3D"hljs-keyword">variable</span> outputChannel stdout
    }
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists errorChannel]} then {
	<span class=3D"hljs-keyword">variable</span> errorChannel stderr
    }
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists debug]} then {
	<span class=3D"hljs-keyword">variable</span> debug <span class=3D"hljs-num=
ber">0</span>
    }
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists parameters]} then {
	<span class=3D"hljs-keyword">variable</span> parameters {}
    }
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists numTestFiles]} then {
	<span class=3D"hljs-keyword">variable</span> numTestFiles <span class=3D"h=
ljs-number">0</span>
    }
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists testSingleFile]} then {
	<span class=3D"hljs-keyword">variable</span> testSingleFile true
    }
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists currentFailure]} then {
	<span class=3D"hljs-keyword">variable</span> currentFailure false
    }
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists failFiles]} then {
	<span class=3D"hljs-keyword">variable</span> failFiles {}
    }
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists filesMade]} then {
	<span class=3D"hljs-keyword">variable</span> filesMade {}
    }
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists filesExisted]} then {
	<span class=3D"hljs-keyword">variable</span> filesExisted {}
    }
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists createdNewFiles]} then {
	<span class=3D"hljs-keyword">variable</span> createdNewFiles
	<span class=3D"hljs-keyword">array</span> <span class=3D"hljs-keyword">set=
</span> ::<span class=3D"hljs-keyword">tcltest</span>::createdNewFiles {}
    }
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists numTests]} then {
	<span class=3D"hljs-keyword">variable</span> numTests
	<span class=3D"hljs-keyword">array</span> <span class=3D"hljs-keyword">set=
</span> ::<span class=3D"hljs-keyword">tcltest</span>::numTests [<span clas=
s=3D"hljs-keyword">list</span> Total <span class=3D"hljs-number">0</span> P=
assed <span class=3D"hljs-number">0</span> Skipped <span class=3D"hljs-numb=
er">0</span> Failed <span class=3D"hljs-number">0</span>]
    }
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists skippedBecause]} then {
	<span class=3D"hljs-keyword">variable</span> skippedBecause
	<span class=3D"hljs-keyword">array</span> <span class=3D"hljs-keyword">set=
</span> ::<span class=3D"hljs-keyword">tcltest</span>::skippedBecause {}
    }
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists testConstraints]} then {
	<span class=3D"hljs-keyword">variable</span> testConstraints
	<span class=3D"hljs-keyword">array</span> <span class=3D"hljs-keyword">set=
</span> ::<span class=3D"hljs-keyword">tcltest</span>::testConstraints {}
    }
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists limitConstraints]} then {
	<span class=3D"hljs-keyword">variable</span> limitConstraints false
    }
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists loadScript]} then {
	<span class=3D"hljs-keyword">variable</span> loadScript {}
    }
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists mainThread]} then {
	<span class=3D"hljs-keyword">variable</span> mainThread <span class=3D"hlj=
s-number">1</span>
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info=
</span> commands thread::id] !=3D {}} then {
	    <span class=3D"hljs-keyword">set</span> mainThread [thread::id]
	} elseif {[<span class=3D"hljs-keyword">info</span> commands testthread] !=
=3D {}} {
	    <span class=3D"hljs-keyword">set</span> mainThread [testthread id]
	}
    }
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists originalEnv]} then {
	<span class=3D"hljs-keyword">variable</span> originalEnv
	<span class=3D"hljs-keyword">array</span> <span class=3D"hljs-keyword">set=
</span> ::<span class=3D"hljs-keyword">tcltest</span>::originalEnv [<span c=
lass=3D"hljs-keyword">array</span> get ::env]
    }
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists workingDirectory]} then {
	<span class=3D"hljs-keyword">variable</span> workingDirectory [<span class=
=3D"hljs-keyword">pwd</span>]
    }
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists temporaryDirectory]} then {
	<span class=3D"hljs-keyword">variable</span> temporaryDirectory $workingDi=
rectory
    }
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists testsDirectory]} then {
	<span class=3D"hljs-keyword">set</span> oldpwd [<span class=3D"hljs-keywor=
d">pwd</span>]
	<span class=3D"hljs-keyword">catch</span> {<span class=3D"hljs-keyword">cd=
</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-keywo=
rd">join</span> [<span class=3D"hljs-keyword">file</span> dirname [<span cl=
ass=3D"hljs-keyword">info</span> script]] .. .. tests]}
	<span class=3D"hljs-keyword">variable</span> testsDirectory [<span class=
=3D"hljs-keyword">pwd</span>]
	<span class=3D"hljs-keyword">cd</span> $oldpwd
	<span class=3D"hljs-keyword">unset</span> oldpwd
    }
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists saveState]} then {
	<span class=3D"hljs-keyword">variable</span> saveState {}
    }
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists isoLocale]} then {
	<span class=3D"hljs-keyword">variable</span> isoLocale fr
	<span class=3D"hljs-keyword">switch</span> $tcl_platform(platform) {
	<span class=3D"hljs-string">"unix"</span> {
		<span class=3D"hljs-keyword">switch</span> -exact -- $tcl_platform(os) {
		<span class=3D"hljs-string">"FreeBSD"</span> {
			<span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">t=
cltest</span>::isoLocale fr_FR.ISO_8859<span class=3D"hljs-number">-1</span=
>
		    }
		HP-UX {
			<span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">t=
cltest</span>::isoLocale fr_FR.iso88591
		    }
		Linux -
		IRIX {
			<span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">t=
cltest</span>::isoLocale fr
		    }
		default {
<span class=3D"hljs-comment">			#if you want to test those.</span>
			<span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">t=
cltest</span>::isoLocale iso_8859_1
		    }
		}
	    }
	<span class=3D"hljs-string">"windows"</span> {
		<span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">tc=
ltest</span>::isoLocale French
	    }
	}
    }
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists <span class=3D"hljs-keyword">tcltest</span>]} then {
	<span class=3D"hljs-keyword">variable</span> <span class=3D"hljs-keyword">=
tcltest</span> [<span class=3D"hljs-keyword">info</span> nameofexecutable]
    }
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists originalTclPlatform]} then {
	<span class=3D"hljs-keyword">variable</span> originalTclPlatform [<span cl=
ass=3D"hljs-keyword">array</span> get tcl_platform]
    }
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists coreModificationTime]} then {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">file=
</span> exists [<span class=3D"hljs-keyword">file</span> <span class=3D"hlj=
s-keyword">join</span> $::tcltest::workingDirectory core]]} then {
	    <span class=3D"hljs-keyword">variable</span> coreModificationTime [<sp=
an class=3D"hljs-keyword">file</span> mtime [<span class=3D"hljs-keyword">f=
ile</span> <span class=3D"hljs-keyword">join</span> $::tcltest::workingDire=
ctory core]]
	}
    }
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists version]} then {
	<span class=3D"hljs-keyword">variable</span> version <span class=3D"hljs-n=
umber">8.3</span>
    }
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists patchLevel]} then {
	<span class=3D"hljs-keyword">variable</span> patchLevel <span class=3D"hlj=
s-number">8.3</span><span class=3D"hljs-number">.0</span>
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::tclte=
st::DebugPuts</span> {level <span class=3D"hljs-keyword">string</span>} {
    <span class=3D"hljs-keyword">variable</span> debug
    <span class=3D"hljs-keyword">if</span> {$debug &gt;=3D $level} then {
	<span class=3D"hljs-keyword">puts</span> $string
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::tclte=
st::DebugPArray</span> {level arrayvar} {
    <span class=3D"hljs-keyword">variable</span> debug
    <span class=3D"hljs-keyword">if</span> {$debug &gt;=3D $level} then {
	<span class=3D"hljs-keyword">catch</span> {<span class=3D"hljs-keyword">up=
var</span> $arrayvar $arrayvar}
	<span class=3D"hljs-keyword">parray</span> $arrayvar
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::tclte=
st::DebugDo</span> {level script} {
    <span class=3D"hljs-keyword">variable</span> debug
    <span class=3D"hljs-keyword">if</span> {$debug &gt;=3D $level} then {
	<span class=3D"hljs-keyword">uplevel</span> $script
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::tclte=
st::AddToSkippedBecause</span> {constraint} {
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::<span class=3D"hljs-keyword">tcltest</span>::skippedBec=
ause($constraint)]} then {
	<span class=3D"hljs-keyword">incr</span> ::<span class=3D"hljs-keyword">tc=
ltest</span>::skippedBecause($constraint)
    } else {
	<span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">tcl=
test</span>::skippedBecause($constraint) <span class=3D"hljs-number">1</spa=
n>
    }
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::tclte=
st::PrintError</span> {errorMsg} {
    <span class=3D"hljs-keyword">set</span> InitialMessage <span class=3D"h=
ljs-string">"Error:  "</span>
    <span class=3D"hljs-keyword">set</span> InitialMsgLen [<span class=3D"h=
ljs-keyword">string</span> length $InitialMessage]
    <span class=3D"hljs-keyword">puts</span> -nonewline $::tcltest::errorCh=
annel $InitialMessage
    <span class=3D"hljs-keyword">set</span> endingIndex [<span class=3D"hlj=
s-keyword">string</span> length $errorMsg]
    <span class=3D"hljs-keyword">if</span> {$endingIndex &lt; <span class=
=3D"hljs-number">80</span>} then {
	<span class=3D"hljs-keyword">puts</span> $::tcltest::errorChannel $errorMs=
g
    } else {
	<span class=3D"hljs-keyword">set</span> beginningIndex [<span class=3D"hlj=
s-keyword">string</span> last <span class=3D"hljs-string">" "</span> [<span=
 class=3D"hljs-keyword">string</span> range $errorMsg <span class=3D"hljs-n=
umber">0</span> [<span class=3D"hljs-keyword">expr</span> {<span class=3D"h=
ljs-number">80</span> - $InitialMsgLen}]]]
	<span class=3D"hljs-keyword">puts</span> $::tcltest::errorChannel [<span c=
lass=3D"hljs-keyword">string</span> range $errorMsg <span class=3D"hljs-num=
ber">0</span> $beginningIndex]
	<span class=3D"hljs-keyword">while</span> {$beginningIndex !=3D <span clas=
s=3D"hljs-string">"end"</span>} {
	    <span class=3D"hljs-keyword">puts</span> -nonewline $::tcltest::errorC=
hannel [<span class=3D"hljs-keyword">string</span> repeat <span class=3D"hl=
js-string">" "</span> $InitialMsgLen]
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
expr</span> {$endingIndex - $beginningIndex}] &lt; <span class=3D"hljs-numb=
er">72</span>} then {
		<span class=3D"hljs-keyword">puts</span> $::tcltest::errorChannel [<span =
class=3D"hljs-keyword">string</span> trim [<span class=3D"hljs-keyword">str=
ing</span> range $errorMsg $beginningIndex end]]
		<span class=3D"hljs-keyword">set</span> beginningIndex end
	    } else {
		<span class=3D"hljs-keyword">set</span> newEndingIndex [<span class=3D"hl=
js-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> last <s=
pan class=3D"hljs-string">" "</span> [<span class=3D"hljs-keyword">string</=
span> range $errorMsg $beginningIndex [<span class=3D"hljs-keyword">expr</s=
pan> {$beginningIndex + <span class=3D"hljs-number">72</span>}]]] + $beginn=
ingIndex]
		<span class=3D"hljs-keyword">if</span> {($newEndingIndex &lt;=3D <span cl=
ass=3D"hljs-number">0</span>) ||($newEndingIndex &lt;=3D $beginningIndex)} =
then {
		    <span class=3D"hljs-keyword">set</span> newEndingIndex end
		}
		<span class=3D"hljs-keyword">puts</span> $::tcltest::errorChannel [<span =
class=3D"hljs-keyword">string</span> trim [<span class=3D"hljs-keyword">str=
ing</span> range $errorMsg $beginningIndex $newEndingIndex]]
		<span class=3D"hljs-keyword">set</span> beginningIndex $newEndingIndex
	    }
	}
    }
    <span class=3D"hljs-keyword">flush</span> $::tcltest::errorChannel
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">names=
pace</span> inscope ::<span class=3D"hljs-keyword">tcltest</span> <span cla=
ss=3D"hljs-keyword">info</span> procs initConstraintsHook] =3D=3D {}} then =
{
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::t=
cltest::initConstraintsHook</span> {} { }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::tclte=
st::initConstraints</span> {} {
    <span class=3D"hljs-keyword">global</span> tcl_platform tcl_interactive=
 tk_version
    <span class=3D"hljs-keyword">trace</span> <span class=3D"hljs-keyword">=
variable</span> ::<span class=3D"hljs-keyword">tcltest</span>::testConstrai=
nts r ::<span class=3D"hljs-keyword">tcltest</span>::safeFetch
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::t=
cltest::safeFetch</span> {n1 n2 op} {
	<span class=3D"hljs-keyword">if</span> {($n2 !=3D {}) &amp;&amp;([<span cl=
ass=3D"hljs-keyword">info</span> exists ::<span class=3D"hljs-keyword">tclt=
est</span>::testConstraints($n2)] =3D=3D <span class=3D"hljs-number">0</spa=
n>)} then {
	    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword"=
>tcltest</span>::testConstraints($n2) <span class=3D"hljs-number">0</span>
	}
    }
    ::<span class=3D"hljs-keyword">tcltest</span>::initConstraintsHook
    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">=
tcltest</span>::testConstraints(unixOnly) [<span class=3D"hljs-keyword">str=
ing</span> equal $tcl_platform(platform) <span class=3D"hljs-string">"unix"=
</span>]
    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">=
tcltest</span>::testConstraints(macOnly) [<span class=3D"hljs-keyword">stri=
ng</span> equal $tcl_platform(platform) <span class=3D"hljs-string">"macint=
osh"</span>]
    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">=
tcltest</span>::testConstraints(pcOnly) [<span class=3D"hljs-keyword">strin=
g</span> equal $tcl_platform(platform) <span class=3D"hljs-string">"windows=
"</span>]
    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">=
tcltest</span>::testConstraints(unix) $::tcltest::testConstraints(unixOnly)
    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">=
tcltest</span>::testConstraints(mac) $::tcltest::testConstraints(macOnly)
    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">=
tcltest</span>::testConstraints(pc) $::tcltest::testConstraints(pcOnly)
    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">=
tcltest</span>::testConstraints(unixOrPc) [<span class=3D"hljs-keyword">exp=
r</span> {$::tcltest::testConstraints(unix) || $::tcltest::testConstraints(=
pc)}]
    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">=
tcltest</span>::testConstraints(macOrPc) [<span class=3D"hljs-keyword">expr=
</span> {$::tcltest::testConstraints(mac) || $::tcltest::testConstraints(pc=
)}]
    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">=
tcltest</span>::testConstraints(macOrUnix) [<span class=3D"hljs-keyword">ex=
pr</span> {$::tcltest::testConstraints(mac) || $::tcltest::testConstraints(=
unix)}]
    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">=
tcltest</span>::testConstraints(nt) [<span class=3D"hljs-keyword">string</s=
pan> equal $tcl_platform(os) <span class=3D"hljs-string">"Windows NT"</span=
>]
    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">=
tcltest</span>::testConstraints(<span class=3D"hljs-number">95</span>) [<sp=
an class=3D"hljs-keyword">string</span> equal $tcl_platform(os) <span class=
=3D"hljs-string">"Windows 95"</span>]
    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">=
tcltest</span>::testConstraints(<span class=3D"hljs-number">98</span>) [<sp=
an class=3D"hljs-keyword">string</span> equal $tcl_platform(os) <span class=
=3D"hljs-string">"Windows 98"</span>]
    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">=
tcltest</span>::testConstraints(tempNotPc) [<span class=3D"hljs-keyword">ex=
pr</span> {!$::tcltest::testConstraints(pc)}]
    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">=
tcltest</span>::testConstraints(tempNotMac) [<span class=3D"hljs-keyword">e=
xpr</span> {!$::tcltest::testConstraints(mac)}]
    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">=
tcltest</span>::testConstraints(tempNotUnix) [<span class=3D"hljs-keyword">=
expr</span> {!$::tcltest::testConstraints(unix)}]
    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">=
tcltest</span>::testConstraints(pcCrash) [<span class=3D"hljs-keyword">expr=
</span> {!$::tcltest::testConstraints(pc)}]
    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">=
tcltest</span>::testConstraints(macCrash) [<span class=3D"hljs-keyword">exp=
r</span> {!$::tcltest::testConstraints(mac)}]
    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">=
tcltest</span>::testConstraints(unixCrash) [<span class=3D"hljs-keyword">ex=
pr</span> {!$::tcltest::testConstraints(unix)}]
    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">=
tcltest</span>::testConstraints(emptyTest) <span class=3D"hljs-number">0</s=
pan>
    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">=
tcltest</span>::testConstraints(knownBug) <span class=3D"hljs-number">0</sp=
an>
    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">=
tcltest</span>::testConstraints(nonPortable) <span class=3D"hljs-number">0<=
/span>
    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">=
tcltest</span>::testConstraints(userInteraction) <span class=3D"hljs-number=
">0</span>
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists tcl_interactive]} then {
	<span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">tcl=
test</span>::testConstraints(interactive) $::tcl_interactive
    } else {
	<span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">tcl=
test</span>::testConstraints(interactive) <span class=3D"hljs-number">0</sp=
an>
    }
    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">=
tcltest</span>::testConstraints(root) <span class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">=
tcltest</span>::testConstraints(notRoot) <span class=3D"hljs-number">1</spa=
n>
    <span class=3D"hljs-keyword">set</span> user {}
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $tcl_platform(platform) <span class=3D"hljs-string">"uni=
x"</span>]} then {
	<span class=3D"hljs-keyword">catch</span> {<span class=3D"hljs-keyword">se=
t</span> user [<span class=3D"hljs-keyword">exec</span> whoami]}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> equal $user <span class=3D"hljs-string">""</span>]} then {
	    <span class=3D"hljs-keyword">catch</span> {<span class=3D"hljs-keyword=
">regexp</span> {^[^(]*\(([^)]*)\)} [<span class=3D"hljs-keyword">exec</spa=
n> id] dummy user}
	}
	<span class=3D"hljs-keyword">if</span> {([<span class=3D"hljs-keyword">str=
ing</span> equal $user <span class=3D"hljs-string">"root"</span>]) ||([<spa=
n class=3D"hljs-keyword">string</span> equal $user <span class=3D"hljs-stri=
ng">""</span>])} then {
	    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword"=
>tcltest</span>::testConstraints(root) <span class=3D"hljs-number">1</span>
	    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword"=
>tcltest</span>::testConstraints(notRoot) <span class=3D"hljs-number">0</sp=
an>
	}
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">c=
atch</span> {<span class=3D"hljs-keyword">set</span> f [<span class=3D"hljs=
-keyword">open</span> defs r]}]} then {
	<span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">tcl=
test</span>::testConstraints(nonBlockFiles) <span class=3D"hljs-number">1</=
span>
    } else {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">catc=
h</span> {<span class=3D"hljs-keyword">fconfigure</span> $f -blocking off}]=
 =3D=3D <span class=3D"hljs-number">0</span>} then {
	    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword"=
>tcltest</span>::testConstraints(nonBlockFiles) <span class=3D"hljs-number"=
>1</span>
	} else {
	    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword"=
>tcltest</span>::testConstraints(nonBlockFiles) <span class=3D"hljs-number"=
>0</span>
	}
	<span class=3D"hljs-keyword">close</span> $f
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $tcl_platform(platform) <span class=3D"hljs-string">"uni=
x"</span>]} then {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">catc=
h</span> {<span class=3D"hljs-keyword">exec</span> uname -X | fgrep {Releas=
e =3D <span class=3D"hljs-number">3.2</span>v}}] =3D=3D <span class=3D"hljs=
-number">0</span>} then {
	    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword"=
>tcltest</span>::testConstraints(asyncPipeClose) <span class=3D"hljs-number=
">0</span>
	} else {
	    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword"=
>tcltest</span>::testConstraints(asyncPipeClose) <span class=3D"hljs-number=
">1</span>
	}
    } else {
	<span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">tcl=
test</span>::testConstraints(asyncPipeClose) <span class=3D"hljs-number">1<=
/span>
    }
    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">=
tcltest</span>::testConstraints(eformat) <span class=3D"hljs-number">1</spa=
n>
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
string</span> equal <span class=3D"hljs-string">"[format %g 5e-5]"</span> <=
span class=3D"hljs-string">"5e-05"</span>]} then {
	<span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">tcl=
test</span>::testConstraints(eformat) <span class=3D"hljs-number">0</span>
    }
    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">=
tcltest</span>::testConstraints(unixExecs) <span class=3D"hljs-number">1</s=
pan>
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $tcl_platform(platform) <span class=3D"hljs-string">"mac=
intosh"</span>]} then {
	<span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">tcl=
test</span>::testConstraints(unixExecs) <span class=3D"hljs-number">0</span=
>
    }
    <span class=3D"hljs-keyword">if</span> {($::tcltest::testConstraints(un=
ixExecs) =3D=3D <span class=3D"hljs-number">1</span>) &amp;&amp;([<span cla=
ss=3D"hljs-keyword">string</span> equal $tcl_platform(platform) <span class=
=3D"hljs-string">"windows"</span>])} then {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">catc=
h</span> {<span class=3D"hljs-keyword">exec</span> cat defs}] =3D=3D <span =
class=3D"hljs-number">1</span>} then {
	    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword"=
>tcltest</span>::testConstraints(unixExecs) <span class=3D"hljs-number">0</=
span>
	}
	<span class=3D"hljs-keyword">if</span> {($::tcltest::testConstraints(unixE=
xecs) =3D=3D <span class=3D"hljs-number">1</span>) &amp;&amp;([<span class=
=3D"hljs-keyword">catch</span> {<span class=3D"hljs-keyword">exec</span> ec=
ho hello}] =3D=3D <span class=3D"hljs-number">1</span>)} then {
	    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword"=
>tcltest</span>::testConstraints(unixExecs) <span class=3D"hljs-number">0</=
span>
	}
	<span class=3D"hljs-keyword">if</span> {($::tcltest::testConstraints(unixE=
xecs) =3D=3D <span class=3D"hljs-number">1</span>) &amp;&amp;([<span class=
=3D"hljs-keyword">catch</span> {<span class=3D"hljs-keyword">exec</span> sh=
 -c echo hello}] =3D=3D <span class=3D"hljs-number">1</span>)} then {
	    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword"=
>tcltest</span>::testConstraints(unixExecs) <span class=3D"hljs-number">0</=
span>
	}
	<span class=3D"hljs-keyword">if</span> {($::tcltest::testConstraints(unixE=
xecs) =3D=3D <span class=3D"hljs-number">1</span>) &amp;&amp;([<span class=
=3D"hljs-keyword">catch</span> {<span class=3D"hljs-keyword">exec</span> wc=
 defs}] =3D=3D <span class=3D"hljs-number">1</span>)} then {
	    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword"=
>tcltest</span>::testConstraints(unixExecs) <span class=3D"hljs-number">0</=
span>
	}
	<span class=3D"hljs-keyword">if</span> {$::tcltest::testConstraints(unixEx=
ecs) =3D=3D <span class=3D"hljs-number">1</span>} then {
	    <span class=3D"hljs-keyword">exec</span> echo hello &gt; removeMe
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
catch</span> {<span class=3D"hljs-keyword">exec</span> rm removeMe}] =3D=3D=
 <span class=3D"hljs-number">1</span>} then {
		<span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">tc=
ltest</span>::testConstraints(unixExecs) <span class=3D"hljs-number">0</spa=
n>
	    }
	}
	<span class=3D"hljs-keyword">if</span> {($::tcltest::testConstraints(unixE=
xecs) =3D=3D <span class=3D"hljs-number">1</span>) &amp;&amp;([<span class=
=3D"hljs-keyword">catch</span> {<span class=3D"hljs-keyword">exec</span> sl=
eep <span class=3D"hljs-number">1</span>}] =3D=3D <span class=3D"hljs-numbe=
r">1</span>)} then {
	    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword"=
>tcltest</span>::testConstraints(unixExecs) <span class=3D"hljs-number">0</=
span>
	}
	<span class=3D"hljs-keyword">if</span> {($::tcltest::testConstraints(unixE=
xecs) =3D=3D <span class=3D"hljs-number">1</span>) &amp;&amp;([<span class=
=3D"hljs-keyword">catch</span> {<span class=3D"hljs-keyword">exec</span> fg=
rep unixExecs defs}] =3D=3D <span class=3D"hljs-number">1</span>)} then {
	    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword"=
>tcltest</span>::testConstraints(unixExecs) <span class=3D"hljs-number">0</=
span>
	}
	<span class=3D"hljs-keyword">if</span> {($::tcltest::testConstraints(unixE=
xecs) =3D=3D <span class=3D"hljs-number">1</span>) &amp;&amp;([<span class=
=3D"hljs-keyword">catch</span> {<span class=3D"hljs-keyword">exec</span> ps=
}] =3D=3D <span class=3D"hljs-number">1</span>)} then {
	    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword"=
>tcltest</span>::testConstraints(unixExecs) <span class=3D"hljs-number">0</=
span>
	}
	<span class=3D"hljs-keyword">if</span> {($::tcltest::testConstraints(unixE=
xecs) =3D=3D <span class=3D"hljs-number">1</span>) &amp;&amp;([<span class=
=3D"hljs-keyword">catch</span> {<span class=3D"hljs-keyword">exec</span> ec=
ho abc &gt; removeMe}] =3D=3D <span class=3D"hljs-number">0</span>) &amp;&a=
mp;([<span class=3D"hljs-keyword">catch</span> {<span class=3D"hljs-keyword=
">exec</span> chmod <span class=3D"hljs-number">644</span> removeMe}] =3D=
=3D <span class=3D"hljs-number">1</span>) &amp;&amp;([<span class=3D"hljs-k=
eyword">catch</span> {<span class=3D"hljs-keyword">exec</span> rm removeMe}=
] =3D=3D <span class=3D"hljs-number">0</span>)} then {
	    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword"=
>tcltest</span>::testConstraints(unixExecs) <span class=3D"hljs-number">0</=
span>
	} else {
	    <span class=3D"hljs-keyword">catch</span> {<span class=3D"hljs-keyword=
">exec</span> rm -f removeMe}
	}
	<span class=3D"hljs-keyword">if</span> {($::tcltest::testConstraints(unixE=
xecs) =3D=3D <span class=3D"hljs-number">1</span>) &amp;&amp;([<span class=
=3D"hljs-keyword">catch</span> {<span class=3D"hljs-keyword">exec</span> mk=
dir removeMe}] =3D=3D <span class=3D"hljs-number">1</span>)} then {
	    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword"=
>tcltest</span>::testConstraints(unixExecs) <span class=3D"hljs-number">0</=
span>
	} else {
	    <span class=3D"hljs-keyword">catch</span> {<span class=3D"hljs-keyword=
">exec</span> rm -r removeMe}
	}
    }
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists tk_version]} then {
	<span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">tclte=
st</span> [<span class=3D"hljs-keyword">info</span> nameofexecutable]
	<span class=3D"hljs-keyword">if</span> {$tcltest =3D=3D <span class=3D"hlj=
s-string">"{}"</span>} then {
	    <span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">t=
cltest</span> {}
	}
    }
    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">=
tcltest</span>::testConstraints(stdio) <span class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">catch</span> {
	<span class=3D"hljs-keyword">catch</span> {<span class=3D"hljs-keyword">fi=
le</span> delete -force tmp}
	<span class=3D"hljs-keyword">set</span> f [<span class=3D"hljs-keyword">op=
en</span> tmp w]
	<span class=3D"hljs-keyword">puts</span> $f {
<span class=3D"hljs-keyword">exit</span>
}
	<span class=3D"hljs-keyword">close</span> $f
	<span class=3D"hljs-keyword">set</span> f [<span class=3D"hljs-keyword">op=
en</span> <span class=3D"hljs-string">"|[list $tcltest tmp]"</span> r]
	<span class=3D"hljs-keyword">close</span> $f
	<span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">tcl=
test</span>::testConstraints(stdio) <span class=3D"hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">catch</span> {<span class=3D"hljs-keyword"=
>file</span> delete -force tmp}
    <span class=3D"hljs-keyword">catch</span> {<span class=3D"hljs-keyword"=
>socket</span>} msg
    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">=
tcltest</span>::testConstraints(<span class=3D"hljs-keyword">socket</span>)=
 [<span class=3D"hljs-keyword">expr</span> {$msg !=3D <span class=3D"hljs-s=
tring">"sockets are not available on this system"</span>}]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> commands testlocale] =3D=3D <span class=3D"hljs-string">""</span=
>} then {
	<span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">tcl=
test</span>::testConstraints(hasIsoLocale) <span class=3D"hljs-number">0</s=
pan>
    } else {
	<span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">tcl=
test</span>::testConstraints(hasIsoLocale) [<span class=3D"hljs-keyword">st=
ring</span> length [::<span class=3D"hljs-keyword">tcltest</span>::set_iso8=
859_1_locale]]
	::<span class=3D"hljs-keyword">tcltest</span>::restore_locale
    }
}
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">names=
pace</span> inscope ::<span class=3D"hljs-keyword">tcltest</span> <span cla=
ss=3D"hljs-keyword">info</span> procs PrintUsageInfoHook] =3D=3D {}} then {
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::t=
cltest::PrintUsageInfoHook</span> {} { }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::tclte=
st::PrintUsageInfo</span> {} {
    <span class=3D"hljs-keyword">puts</span> [<span class=3D"hljs-keyword">=
format</span> <span class=3D"hljs-string">"Usage: [file tail [info nameofex=
ecutable]]  script ?-help? ?flag value? ... \n Available flags (and valid i=
nput values) are: \n -help          \t Display this usage information. \n -=
verbose level \t Takes any combination of the values \n \t                 =
'p', 's' and 'b'.  Test suite will \n \t                 display all passed=
 tests if 'p' is \n \t                 specified, all skipped tests if 's' =
\n \t                 is specified, and the bodies of \n \t              \
        failed tests if 'b' is specified. \n \t                 The default=
 value is 'b'. \n -constraints list\t Do not skip the listed constraints\n =
-limitconstraints bool\t Only run tests with the constraints\n \t          =
       listed in -constraints.\n -match pattern \t Run all tests within the=
 specified \n \t                 files that match the glob pattern \n \t   =
              given. \n -skip pattern  \t Skip all tests within the set of =
\n \t                 specified tests (via\
      -match) and \n \t                 files that match the glob pattern \=
n \t                 given. \n -file pattern  \t Run tests in all test file=
s that \n \t                 match the glob pattern given. \n -notfile patt=
ern\t Skip all test files that match the \n \t                 glob pattern=
 given. \n -preservecore level \t If 2, save any core files produced \n \t =
                during testing in the directory \n \t                 speci=
fied by -tmpdir. If 1, notify the\n \t          \
            user if core files are created. The default \n \t              =
   is $::tcltest::preserveCore. \n -tmpdir directory\t Save temporary files=
 in the specified\n \t                 directory.  The default value is \n =
\t                 $::tcltest::temporaryDirectory. \n -testdir directories\=
t Search tests in the specified\n \t                 directories.  The defa=
ult value is \n \t                 $::tcltest::testsDirectory. \n -outfile =
file    \t Send output from test runs to the \n\
      \t                 specified file.  The default is \n \t             =
    stdout. \n -errfile file    \t Send errors from test runs to the \n \t =
                specified file.  The default is \n \t                 stder=
r. \n -loadfile file   \t Read the script to load the tested \n \t         =
        commands from the specified file. \n -load script     \t Specifies =
the script to load the tested \n \t                 commands. \n -debug lev=
el     \t Internal debug flag."</span>]
    ::<span class=3D"hljs-keyword">tcltest</span>::PrintUsageInfoHook
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::tclte=
st::CheckDirectory</span> {rw dir errMsg} {
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
file</span> isdir $dir]} then {
	::<span class=3D"hljs-keyword">tcltest</span>::PrintError <span class=3D"h=
ljs-string">"$errMsg \"$dir\" is not a directory"</span>
	<span class=3D"hljs-keyword">exit</span> <span class=3D"hljs-number">1</sp=
an>
    } elseif {([<span class=3D"hljs-keyword">string</span> first w $rw] &gt=
;=3D <span class=3D"hljs-number">0</span>) &amp;&amp; ![<span class=3D"hljs=
-keyword">file</span> writable $dir]} {
	::<span class=3D"hljs-keyword">tcltest</span>::PrintError <span class=3D"h=
ljs-string">"$errMsg \"$dir\" is not writeable"</span>
	<span class=3D"hljs-keyword">exit</span> <span class=3D"hljs-number">1</sp=
an>
    } elseif {([<span class=3D"hljs-keyword">string</span> first r $rw] &gt=
;=3D <span class=3D"hljs-number">0</span>) &amp;&amp; ![<span class=3D"hljs=
-keyword">file</span> readable $dir]} {
	::<span class=3D"hljs-keyword">tcltest</span>::PrintError <span class=3D"h=
ljs-string">"$errMsg \"$dir\" is not readable"</span>
	<span class=3D"hljs-keyword">exit</span> <span class=3D"hljs-number">1</sp=
an>
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::tclte=
st::normalizePath</span> {pathVar} {
    <span class=3D"hljs-keyword">upvar</span> $pathVar path
    <span class=3D"hljs-keyword">set</span> oldpwd [<span class=3D"hljs-key=
word">pwd</span>]
    <span class=3D"hljs-keyword">catch</span> {<span class=3D"hljs-keyword"=
>cd</span> $path}
    <span class=3D"hljs-keyword">set</span> path [<span class=3D"hljs-keywo=
rd">pwd</span>]
    <span class=3D"hljs-keyword">cd</span> $oldpwd
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::tclte=
st::MakeAbsolutePath</span> {pathVar {prefix {}}} {
    <span class=3D"hljs-keyword">upvar</span> $pathVar path
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
string</span> equal [<span class=3D"hljs-keyword">file</span> pathtype $pat=
h] <span class=3D"hljs-string">"absolute"</span>]} then {
	<span class=3D"hljs-keyword">if</span> {$prefix =3D=3D {}} then {
	    <span class=3D"hljs-keyword">set</span> prefix [<span class=3D"hljs-ke=
yword">pwd</span>]
	}
	<span class=3D"hljs-keyword">set</span> path [<span class=3D"hljs-keyword"=
>file</span> <span class=3D"hljs-keyword">join</span> $prefix $path]
    }
}
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">names=
pace</span> inscope ::<span class=3D"hljs-keyword">tcltest</span> <span cla=
ss=3D"hljs-keyword">info</span> procs processCmdLineArgsAddFlagsHook] =3D=
=3D {}} then {
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::t=
cltest::processCmdLineArgsAddFlagsHook</span> {} { }
}
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">names=
pace</span> inscope ::<span class=3D"hljs-keyword">tcltest</span> <span cla=
ss=3D"hljs-keyword">info</span> procs processCmdLineArgsHook] =3D=3D {}} th=
en {
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::t=
cltest::processCmdLineArgsHook</span> {flag} { }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::tclte=
st::processCmdLineArgs</span> {} {
    <span class=3D"hljs-keyword">global</span> argv
    <span class=3D"hljs-keyword">if</span> {(![<span class=3D"hljs-keyword"=
>info</span> exists argv]) ||([<span class=3D"hljs-keyword">llength</span> =
$argv] &lt; <span class=3D"hljs-number">1</span>)} then {
	<span class=3D"hljs-keyword">set</span> flagArray {}
    } else {
	<span class=3D"hljs-keyword">set</span> flagArray $argv
    }
    <span class=3D"hljs-keyword">if</span> {([<span class=3D"hljs-keyword">=
lsearch</span> -exact $flagArray {-help}] !=3D <span class=3D"hljs-number">=
-1</span>) ||([<span class=3D"hljs-keyword">lsearch</span> -exact $flagArra=
y {-h}] !=3D <span class=3D"hljs-number">-1</span>)} then {
	::<span class=3D"hljs-keyword">tcltest</span>::PrintUsageInfo
	<span class=3D"hljs-keyword">exit</span> <span class=3D"hljs-number">1</sp=
an>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">c=
atch</span> {<span class=3D"hljs-keyword">array</span> <span class=3D"hljs-=
keyword">set</span> flag $flagArray}]} then {
	::<span class=3D"hljs-keyword">tcltest</span>::PrintError <span class=3D"h=
ljs-string">"odd number of arguments specified on command line: \=20
$argv"</span>
	::<span class=3D"hljs-keyword">tcltest</span>::PrintUsageInfo
	<span class=3D"hljs-keyword">exit</span> <span class=3D"hljs-number">1</sp=
an>
    }
    <span class=3D"hljs-keyword">lappend</span> defaultFlags -verbose -matc=
h -skip -constraints -outfile -errfile -debug -tmpdir -<span class=3D"hljs-=
keyword">file</span> -notfile -preservecore -limitconstraints -args -testdi=
r -<span class=3D"hljs-keyword">load</span> -loadfile
    <span class=3D"hljs-keyword">set</span> defaultFlags [<span class=3D"hl=
js-keyword">concat</span> $defaultFlags [::<span class=3D"hljs-keyword">tcl=
test</span>::processCmdLineArgsAddFlagsHook]]
    <span class=3D"hljs-keyword">foreach</span> arg $defaultFlags {
	<span class=3D"hljs-keyword">set</span> abbrev [<span class=3D"hljs-keywor=
d">string</span> range $arg <span class=3D"hljs-number">0</span> <span clas=
s=3D"hljs-number">1</span>]
	<span class=3D"hljs-keyword">if</span> {([<span class=3D"hljs-keyword">inf=
o</span> exists flag($abbrev)]) &amp;&amp;([<span class=3D"hljs-keyword">ls=
earch</span> -exact $flagArray $arg] &lt; [<span class=3D"hljs-keyword">lse=
arch</span> -exact $flagArray $abbrev])} then {
	    <span class=3D"hljs-keyword">set</span> flag($arg) $flag($abbrev)
	}
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists flag(-args)]} then {
	<span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">tcl=
test</span>::parameters $flag(-args)
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists flag(-verbose)]} then {
	<span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">tcl=
test</span>::verbose $flag(-verbose)
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists flag(-match)]} then {
	<span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">tcl=
test</span>::match $flag(-match)
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists flag(-skip)]} then {
	<span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">tcl=
test</span>::skip $flag(-skip)
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists flag(-<span class=3D"hljs-keyword">file</span>)]} then {
	<span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">tcl=
test</span>::matchFiles $flag(-<span class=3D"hljs-keyword">file</span>)
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists flag(-notfile)]} then {
	<span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">tcl=
test</span>::skipFiles $flag(-notfile)
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists flag(-constraints)]} then {
	<span class=3D"hljs-keyword">foreach</span> elt $flag(-constraints) {
	    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword"=
>tcltest</span>::testConstraints($elt) <span class=3D"hljs-number">1</span>
	}
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists flag(-limitconstraints)]} then {
	<span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">inf=
o</span> exists flag(-constraints)]} then {
	    <span class=3D"hljs-keyword">puts</span> <span class=3D"hljs-string">"=
You can only use the -limitconstraints flag with  -constraints"</span>
	    <span class=3D"hljs-keyword">exit</span> <span class=3D"hljs-number">1=
</span>
	}
	<span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">tcl=
test</span>::limitConstraints $flag(-limitconstraints)
	<span class=3D"hljs-keyword">foreach</span> elt [<span class=3D"hljs-keywo=
rd">array</span> names ::<span class=3D"hljs-keyword">tcltest</span>::testC=
onstraints] {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
lsearch</span> -exact $flag(-constraints) $elt] =3D=3D <span class=3D"hljs-=
number">-1</span>} then {
		<span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">tc=
ltest</span>::testConstraints($elt) <span class=3D"hljs-number">0</span>
	    }
	}
    }
    <span class=3D"hljs-keyword">set</span> tmpDirError <span class=3D"hljs=
-string">""</span>
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists flag(-tmpdir)]} then {
	<span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">tcl=
test</span>::temporaryDirectory $flag(-tmpdir)
	MakeAbsolutePath ::<span class=3D"hljs-keyword">tcltest</span>::temporaryD=
irectory
	<span class=3D"hljs-keyword">set</span> tmpDirError <span class=3D"hljs-st=
ring">"bad argument \"$flag(-tmpdir)\" to -tmpdir: "</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">f=
ile</span> exists $::tcltest::temporaryDirectory]} then {
	::<span class=3D"hljs-keyword">tcltest</span>::CheckDirectory rw $::tcltes=
t::temporaryDirectory $tmpDirError
    } else {
	<span class=3D"hljs-keyword">file</span> mkdir $::tcltest::temporaryDirect=
ory
    }
    normalizePath ::<span class=3D"hljs-keyword">tcltest</span>::temporaryD=
irectory
    <span class=3D"hljs-keyword">set</span> testDirError <span class=3D"hlj=
s-string">""</span>
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists flag(-testdir)]} then {
	<span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">tcl=
test</span>::testsDirectory $flag(-testdir)
	MakeAbsolutePath ::<span class=3D"hljs-keyword">tcltest</span>::testsDirec=
tory
	<span class=3D"hljs-keyword">set</span> testDirError <span class=3D"hljs-s=
tring">"bad argument \"$flag(-testdir)\" to -testdir: "</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">f=
ile</span> exists $::tcltest::testsDirectory]} then {
	::<span class=3D"hljs-keyword">tcltest</span>::CheckDirectory r $::tcltest=
::testsDirectory $testDirError
    } else {
	::<span class=3D"hljs-keyword">tcltest</span>::PrintError <span class=3D"h=
ljs-string">"$testDirError \"$::tcltest::testsDirectory\"  does not exist"<=
/span>
	<span class=3D"hljs-keyword">exit</span> <span class=3D"hljs-number">1</sp=
an>
    }
    normalizePath ::<span class=3D"hljs-keyword">tcltest</span>::testsDirec=
tory
    <span class=3D"hljs-keyword">foreach</span> <span class=3D"hljs-keyword=
">file</span> [<span class=3D"hljs-keyword">glob</span> -nocomplain [<span =
class=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">join</span>=
 $::tcltest::temporaryDirectory *]] {
	<span class=3D"hljs-keyword">lappend</span> ::<span class=3D"hljs-keyword"=
>tcltest</span>::filesExisted [<span class=3D"hljs-keyword">file</span> tai=
l $file]
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists flag(-outfile)]} then {
	<span class=3D"hljs-keyword">set</span> tmp $flag(-outfile)
	MakeAbsolutePath tmp $::tcltest::temporaryDirectory
	<span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">tcl=
test</span>::outputChannel [<span class=3D"hljs-keyword">open</span> $tmp w=
]
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists flag(-errfile)]} then {
	<span class=3D"hljs-keyword">set</span> tmp $flag(-errfile)
	MakeAbsolutePath tmp $::tcltest::temporaryDirectory
	<span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">tcl=
test</span>::errorChannel [<span class=3D"hljs-keyword">open</span> $tmp w]
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists flag(-<span class=3D"hljs-keyword">load</span>)] &amp;&am=
p;([<span class=3D"hljs-keyword">lsearch</span> -exact $flagArray -<span cl=
ass=3D"hljs-keyword">load</span>] &gt; [<span class=3D"hljs-keyword">lsearc=
h</span> -exact $flagArray -loadfile])} then {
	<span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">tcl=
test</span>::loadScript $flag(-<span class=3D"hljs-keyword">load</span>)
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists flag(-loadfile)] &amp;&amp;([<span class=3D"hljs-keyword"=
>lsearch</span> -exact $flagArray -loadfile] &gt; [<span class=3D"hljs-keyw=
ord">lsearch</span> -exact $flagArray -<span class=3D"hljs-keyword">load</s=
pan>])} then {
	<span class=3D"hljs-keyword">set</span> tmp $flag(-loadfile)
	MakeAbsolutePath tmp $::tcltest::temporaryDirectory
	<span class=3D"hljs-keyword">set</span> tmp [<span class=3D"hljs-keyword">=
open</span> $tmp r]
	<span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">tcl=
test</span>::loadScript [<span class=3D"hljs-keyword">read</span> $tmp]
	<span class=3D"hljs-keyword">close</span> $tmp
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists flag(-debug)]} then {
	<span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">tcl=
test</span>::debug $flag(-debug)
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists flag(-preservecore)]} then {
	<span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">tcl=
test</span>::preserveCore $flag(-preservecore)
    }
    ::<span class=3D"hljs-keyword">tcltest</span>::processCmdLineArgsHook [=
<span class=3D"hljs-keyword">array</span> get flag]
    DebugPuts <span class=3D"hljs-number">2</span> <span class=3D"hljs-stri=
ng">"Flags passed into tcltest:"</span>
    DebugPArray <span class=3D"hljs-number">2</span> flag
    DebugPuts <span class=3D"hljs-number">2</span> <span class=3D"hljs-stri=
ng">"::tcltest::debug              =3D $::tcltest::debug"</span>
    DebugPuts <span class=3D"hljs-number">2</span> <span class=3D"hljs-stri=
ng">"::tcltest::testsDirectory     =3D $::tcltest::testsDirectory"</span>
    DebugPuts <span class=3D"hljs-number">2</span> <span class=3D"hljs-stri=
ng">"::tcltest::workingDirectory   =3D $::tcltest::workingDirectory"</span>
    DebugPuts <span class=3D"hljs-number">2</span> <span class=3D"hljs-stri=
ng">"::tcltest::temporaryDirectory =3D $::tcltest::temporaryDirectory"</spa=
n>
    DebugPuts <span class=3D"hljs-number">2</span> <span class=3D"hljs-stri=
ng">"::tcltest::outputChannel      =3D $::tcltest::outputChannel"</span>
    DebugPuts <span class=3D"hljs-number">2</span> <span class=3D"hljs-stri=
ng">"::tcltest::errorChannel       =3D $::tcltest::errorChannel"</span>
    DebugPuts <span class=3D"hljs-number">2</span> <span class=3D"hljs-stri=
ng">"Original environment (::tcltest::originalEnv):"</span>
    DebugPArray <span class=3D"hljs-number">2</span> ::<span class=3D"hljs-=
keyword">tcltest</span>::originalEnv
    DebugPuts <span class=3D"hljs-number">2</span> <span class=3D"hljs-stri=
ng">"Constraints:"</span>
    DebugPArray <span class=3D"hljs-number">2</span> ::<span class=3D"hljs-=
keyword">tcltest</span>::testConstraints
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::tclte=
st::loadTestedCommands</span> {} {
    <span class=3D"hljs-keyword">if</span> {$::tcltest::loadScript =3D=3D {=
}} then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">uplevel</span> #<span class=3D"hljs-number=
">0</span> $::tcltest::loadScript
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::tclte=
st::cleanupTests</span> {{calledFromAllFile <span class=3D"hljs-number">0</=
span>}} {
    <span class=3D"hljs-keyword">set</span> testFileName [<span class=3D"hl=
js-keyword">file</span> tail [<span class=3D"hljs-keyword">info</span> scri=
pt]]
    ::<span class=3D"hljs-keyword">tcltest</span>::cleanupTestsHook
    <span class=3D"hljs-keyword">if</span> {!$calledFromAllFile} then {
	<span class=3D"hljs-keyword">foreach</span> <span class=3D"hljs-keyword">f=
ile</span> $::tcltest::filesMade {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
file</span> exists $file]} then {
		<span class=3D"hljs-keyword">catch</span> {<span class=3D"hljs-keyword">f=
ile</span> delete -force $file}
	    }
	}
	<span class=3D"hljs-keyword">set</span> currentFiles {}
	<span class=3D"hljs-keyword">foreach</span> <span class=3D"hljs-keyword">f=
ile</span> [<span class=3D"hljs-keyword">glob</span> -nocomplain [<span cla=
ss=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">join</span> $:=
:tcltest::temporaryDirectory *]] {
	    <span class=3D"hljs-keyword">lappend</span> currentFiles [<span class=
=3D"hljs-keyword">file</span> tail $file]
	}
	<span class=3D"hljs-keyword">set</span> newFiles {}
	<span class=3D"hljs-keyword">foreach</span> <span class=3D"hljs-keyword">f=
ile</span> $currentFiles {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
lsearch</span> -exact $::tcltest::filesExisted $file] =3D=3D <span class=3D=
"hljs-number">-1</span>} then {
		<span class=3D"hljs-keyword">lappend</span> newFiles $file
	    }
	}
	<span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">tcl=
test</span>::filesExisted $currentFiles
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">llen=
gth</span> $newFiles] &gt; <span class=3D"hljs-number">0</span>} then {
	    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword"=
>tcltest</span>::createdNewFiles($testFileName) $newFiles
	}
    }
    <span class=3D"hljs-keyword">if</span> {$calledFromAllFile || $::tcltes=
t::testSingleFile} then {
	<span class=3D"hljs-keyword">puts</span> -nonewline $::tcltest::outputChan=
nel <span class=3D"hljs-string">"$testFileName:"</span>
	<span class=3D"hljs-keyword">foreach</span> index [<span class=3D"hljs-key=
word">list</span> <span class=3D"hljs-string">"Total"</span> <span class=3D=
"hljs-string">"Passed"</span> <span class=3D"hljs-string">"Skipped"</span> =
<span class=3D"hljs-string">"Failed"</span>] {
	    <span class=3D"hljs-keyword">puts</span> -nonewline $::tcltest::output=
Channel <span class=3D"hljs-string">"\t$index\t$::tcltest::numTests($index)=
"</span>
	}
	<span class=3D"hljs-keyword">puts</span> $::tcltest::outputChannel <span c=
lass=3D"hljs-string">""</span>
	<span class=3D"hljs-keyword">if</span> {$calledFromAllFile} then {
	    <span class=3D"hljs-keyword">puts</span> $::tcltest::outputChannel <sp=
an class=3D"hljs-string">"Sourced $::tcltest::numTestFiles Test Files."</sp=
an>
	    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword"=
>tcltest</span>::numTestFiles <span class=3D"hljs-number">0</span>
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
llength</span> $::tcltest::failFiles] &gt; <span class=3D"hljs-number">0</s=
pan>} then {
		<span class=3D"hljs-keyword">puts</span> $::tcltest::outputChannel <span =
class=3D"hljs-string">"Files with failing tests: $::tcltest::failFiles"</sp=
an>
		<span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">tc=
ltest</span>::failFiles {}
	    }
	}
	<span class=3D"hljs-keyword">set</span> constraintList [<span class=3D"hlj=
s-keyword">array</span> names ::<span class=3D"hljs-keyword">tcltest</span>=
::skippedBecause]
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">llen=
gth</span> $constraintList] &gt; <span class=3D"hljs-number">0</span>} then=
 {
	    <span class=3D"hljs-keyword">puts</span> $::tcltest::outputChannel <sp=
an class=3D"hljs-string">"Number of tests skipped for each constraint:"</sp=
an>
	    <span class=3D"hljs-keyword">foreach</span> constraint [<span class=3D=
"hljs-keyword">lsort</span> $constraintList] {
		<span class=3D"hljs-keyword">puts</span> $::tcltest::outputChannel <span =
class=3D"hljs-string">"\t$::tcltest::skippedBecause($constraint)\t$constrai=
nt"</span>
		<span class=3D"hljs-keyword">unset</span> ::<span class=3D"hljs-keyword">=
tcltest</span>::skippedBecause($constraint)
	    }
	}
	<span class=3D"hljs-keyword">set</span> testFilesThatTurded [<span class=
=3D"hljs-keyword">lsort</span> [<span class=3D"hljs-keyword">array</span> n=
ames ::<span class=3D"hljs-keyword">tcltest</span>::createdNewFiles]]
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">llen=
gth</span> $testFilesThatTurded] &gt; <span class=3D"hljs-number">0</span>}=
 then {
	    <span class=3D"hljs-keyword">puts</span> $::tcltest::outputChannel <sp=
an class=3D"hljs-string">"Warning: files left behind:"</span>
	    <span class=3D"hljs-keyword">foreach</span> testFile $testFilesThatTur=
ded {
		<span class=3D"hljs-keyword">puts</span> $::tcltest::outputChannel <span =
class=3D"hljs-string">"\t$testFile:\t$::tcltest::createdNewFiles($testFile)=
"</span>
		<span class=3D"hljs-keyword">unset</span> ::<span class=3D"hljs-keyword">=
tcltest</span>::createdNewFiles($testFile)
	    }
	}
	<span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">tcl=
test</span>::filesMade {}
	<span class=3D"hljs-keyword">foreach</span> index [<span class=3D"hljs-key=
word">list</span> <span class=3D"hljs-string">"Total"</span> <span class=3D=
"hljs-string">"Passed"</span> <span class=3D"hljs-string">"Skipped"</span> =
<span class=3D"hljs-string">"Failed"</span>] {
	    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword"=
>tcltest</span>::numTests($index) <span class=3D"hljs-number">0</span>
	}
	<span class=3D"hljs-keyword">global</span> tk_version tcl_interactive
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info=
</span> exists tk_version] &amp;&amp; ![<span class=3D"hljs-keyword">info</=
span> exists tcl_interactive]} then {
	    <span class=3D"hljs-keyword">exit</span>
	}
    } else {
	<span class=3D"hljs-keyword">incr</span> ::<span class=3D"hljs-keyword">tc=
ltest</span>::numTestFiles
	<span class=3D"hljs-keyword">if</span> {($::tcltest::currentFailure) &amp;=
&amp;([<span class=3D"hljs-keyword">lsearch</span> -exact $::tcltest::failF=
iles $testFileName] =3D=3D <span class=3D"hljs-number">-1</span>)} then {
	    <span class=3D"hljs-keyword">lappend</span> ::<span class=3D"hljs-keyw=
ord">tcltest</span>::failFiles $testFileName
	}
	<span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">tcl=
test</span>::currentFailure false
	<span class=3D"hljs-keyword">set</span> newEnv {}
	<span class=3D"hljs-keyword">set</span> changedEnv {}
	<span class=3D"hljs-keyword">set</span> removedEnv {}
	<span class=3D"hljs-keyword">foreach</span> index [<span class=3D"hljs-key=
word">array</span> names ::env] {
	    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword"=
>info</span> exists ::<span class=3D"hljs-keyword">tcltest</span>::original=
Env($index)]} then {
		<span class=3D"hljs-keyword">lappend</span> newEnv $index
		<span class=3D"hljs-keyword">unset</span> ::env($index)
	    } else {
		<span class=3D"hljs-keyword">if</span> {$::env($index) !=3D $::tcltest::o=
riginalEnv($index)} then {
		    <span class=3D"hljs-keyword">lappend</span> changedEnv $index
		    <span class=3D"hljs-keyword">set</span> ::env($index) $::tcltest::ori=
ginalEnv($index)
		}
	    }
	}
	<span class=3D"hljs-keyword">foreach</span> index [<span class=3D"hljs-key=
word">array</span> names ::<span class=3D"hljs-keyword">tcltest</span>::ori=
ginalEnv] {
	    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword"=
>info</span> exists ::env($index)]} then {
		<span class=3D"hljs-keyword">lappend</span> removedEnv $index
		<span class=3D"hljs-keyword">set</span> ::env($index) $::tcltest::origina=
lEnv($index)
	    }
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">llen=
gth</span> $newEnv] &gt; <span class=3D"hljs-number">0</span>} then {
	    <span class=3D"hljs-keyword">puts</span> $::tcltest::outputChannel <sp=
an class=3D"hljs-string">"env array elements created:\t$newEnv"</span>
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">llen=
gth</span> $changedEnv] &gt; <span class=3D"hljs-number">0</span>} then {
	    <span class=3D"hljs-keyword">puts</span> $::tcltest::outputChannel <sp=
an class=3D"hljs-string">"env array elements changed:\t$changedEnv"</span>
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">llen=
gth</span> $removedEnv] &gt; <span class=3D"hljs-number">0</span>} then {
	    <span class=3D"hljs-keyword">puts</span> $::tcltest::outputChannel <sp=
an class=3D"hljs-string">"env array elements removed:\t$removedEnv"</span>
	}
	<span class=3D"hljs-keyword">set</span> changedTclPlatform {}
	<span class=3D"hljs-keyword">foreach</span> index [<span class=3D"hljs-key=
word">array</span> names ::<span class=3D"hljs-keyword">tcltest</span>::ori=
ginalTclPlatform] {
	    <span class=3D"hljs-keyword">if</span> {$::tcl_platform($index) !=3D $=
::tcltest::originalTclPlatform($index)} then {
		<span class=3D"hljs-keyword">lappend</span> changedTclPlatform $index
		<span class=3D"hljs-keyword">set</span> ::tcl_platform($index) $::tcltest=
::originalTclPlatform($index)
	    }
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">llen=
gth</span> $changedTclPlatform] &gt; <span class=3D"hljs-number">0</span>} =
then {
	    <span class=3D"hljs-keyword">puts</span> $::tcltest::outputChannel <sp=
an class=3D"hljs-string">"tcl_platform array elements changed:\t$changedTcl=
Platform"</span>
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">file=
</span> exists [<span class=3D"hljs-keyword">file</span> <span class=3D"hlj=
s-keyword">join</span> $::tcltest::workingDirectory core]]} then {
	    <span class=3D"hljs-keyword">if</span> {$::tcltest::preserveCore &gt; =
<span class=3D"hljs-number">1</span>} then {
		<span class=3D"hljs-keyword">puts</span> $::tcltest::outputChannel <span =
class=3D"hljs-string">"produced core file!  Moving file to:  [file join $::=
tcltest::temporaryDirectory core-$name]"</span>
		<span class=3D"hljs-keyword">flush</span> $::tcltest::outputChannel
		<span class=3D"hljs-keyword">catch</span> {<span class=3D"hljs-keyword">f=
ile</span> <span class=3D"hljs-keyword">rename</span> -force [<span class=
=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">join</span> $::t=
cltest::workingDirectory core] [<span class=3D"hljs-keyword">file</span> <s=
pan class=3D"hljs-keyword">join</span> $::tcltest::temporaryDirectory core-=
$name]} msg
		<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">str=
ing</span> length $msg] &gt; <span class=3D"hljs-number">0</span>} then {
		    ::<span class=3D"hljs-keyword">tcltest</span>::PrintError <span class=
=3D"hljs-string">"Problem renaming file: $msg"</span>
		}
	    } else {
		<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">inf=
o</span> exists ::<span class=3D"hljs-keyword">tcltest</span>::coreModifica=
tionTime]} then {
		    <span class=3D"hljs-keyword">if</span> {$::tcltest::coreModificationT=
ime !=3D [<span class=3D"hljs-keyword">file</span> mtime [<span class=3D"hl=
js-keyword">file</span> <span class=3D"hljs-keyword">join</span> $::tcltest=
::workingDirectory core]]} then {
			<span class=3D"hljs-keyword">puts</span> $::tcltest::outputChannel <span=
 class=3D"hljs-string">"A core file was created!"</span>
		    }
		} else {
		    <span class=3D"hljs-keyword">puts</span> $::tcltest::outputChannel <s=
pan class=3D"hljs-string">"A core file was created!"</span>
		}
	    }
	}
    }
}
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">names=
pace</span> inscope ::<span class=3D"hljs-keyword">tcltest</span> <span cla=
ss=3D"hljs-keyword">info</span> procs cleanupTestsHook] =3D=3D {}} then {
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::t=
cltest::cleanupTestsHook</span> {} { }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::tclte=
st::test</span> {name description script expectedAnswer args} {
    DebugPuts <span class=3D"hljs-number">3</span> <span class=3D"hljs-stri=
ng">"Running $name ($description)"</span>
    <span class=3D"hljs-keyword">incr</span> ::<span class=3D"hljs-keyword"=
>tcltest</span>::numTests(Total)
    <span class=3D"hljs-keyword">foreach</span> pattern $::tcltest::skip {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> match $pattern $name]} then {
	    <span class=3D"hljs-keyword">incr</span> ::<span class=3D"hljs-keyword=
">tcltest</span>::numTests(Skipped)
	    DebugDo <span class=3D"hljs-number">1</span> {::<span class=3D"hljs-ke=
yword">tcltest</span>::AddToSkippedBecause userSpecifiedSkip}
	    <span class=3D"hljs-keyword">return</span>
	}
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">l=
length</span> $::tcltest::match] &gt; <span class=3D"hljs-number">0</span>}=
 then {
	<span class=3D"hljs-keyword">set</span> ok <span class=3D"hljs-number">0</=
span>
	<span class=3D"hljs-keyword">foreach</span> pattern $::tcltest::match {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
string</span> match $pattern $name]} then {
		<span class=3D"hljs-keyword">set</span> ok <span class=3D"hljs-number">1<=
/span>
		<span class=3D"hljs-keyword">break</span>
	    }
	}
	<span class=3D"hljs-keyword">if</span> {!$ok} then {
	    <span class=3D"hljs-keyword">incr</span> ::<span class=3D"hljs-keyword=
">tcltest</span>::numTests(Skipped)
	    DebugDo <span class=3D"hljs-number">1</span> {::<span class=3D"hljs-ke=
yword">tcltest</span>::AddToSkippedBecause userSpecifiedNonMatch}
	    <span class=3D"hljs-keyword">return</span>
	}
    }
    <span class=3D"hljs-keyword">set</span> i [<span class=3D"hljs-keyword"=
>llength</span> $args]
    <span class=3D"hljs-keyword">if</span> {$i =3D=3D <span class=3D"hljs-n=
umber">0</span>} then {
	<span class=3D"hljs-keyword">set</span> constraints {}
	<span class=3D"hljs-keyword">if</span> {$::tcltest::limitConstraints} then=
 {
	    ::<span class=3D"hljs-keyword">tcltest</span>::AddToSkippedBecause use=
rSpecifiedLimitConstraint
	    <span class=3D"hljs-keyword">incr</span> ::<span class=3D"hljs-keyword=
">tcltest</span>::numTests(Skipped)
	    <span class=3D"hljs-keyword">return</span>
	}
    } elseif {$i =3D=3D <span class=3D"hljs-number">1</span>} {
	<span class=3D"hljs-keyword">set</span> constraints $script
	<span class=3D"hljs-keyword">set</span> script $expectedAnswer
	<span class=3D"hljs-keyword">set</span> expectedAnswer [<span class=3D"hlj=
s-keyword">lindex</span> $args <span class=3D"hljs-number">0</span>]
	<span class=3D"hljs-keyword">set</span> doTest <span class=3D"hljs-number"=
>0</span>
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> match {*[$\[]*} $constraints] !=3D <span class=3D"hljs-number">0<=
/span>} then {
	    <span class=3D"hljs-keyword">catch</span> {<span class=3D"hljs-keyword=
">set</span> doTest [<span class=3D"hljs-keyword">uplevel</span> #<span cla=
ss=3D"hljs-number">0</span> <span class=3D"hljs-keyword">expr</span> $const=
raints]}
	} elseif {[<span class=3D"hljs-keyword">regexp</span> {[^.a-zA-Z0<span cla=
ss=3D"hljs-number">-9</span> ]+} $constraints] !=3D <span class=3D"hljs-num=
ber">0</span>} {
	    <span class=3D"hljs-keyword">regsub</span> -all {[.\w]+} $constraints =
{$::tcltest::testConstraints(&amp;)} c
	    <span class=3D"hljs-keyword">catch</span> {<span class=3D"hljs-keyword=
">set</span> doTest [<span class=3D"hljs-keyword">eval</span> <span class=
=3D"hljs-keyword">expr</span> $c]}
	} else {
	    <span class=3D"hljs-keyword">set</span> doTest <span class=3D"hljs-num=
ber">1</span>
	    <span class=3D"hljs-keyword">foreach</span> constraint $constraints {
		<span class=3D"hljs-keyword">if</span> {(![<span class=3D"hljs-keyword">i=
nfo</span> exists ::<span class=3D"hljs-keyword">tcltest</span>::testConstr=
aints($constraint)]) ||(!$::tcltest::testConstraints($constraint))} then {
		    <span class=3D"hljs-keyword">set</span> doTest <span class=3D"hljs-nu=
mber">0</span>
		    <span class=3D"hljs-keyword">set</span> constraints $constraint
		    <span class=3D"hljs-keyword">break</span>
		}
	    }
	}
	<span class=3D"hljs-keyword">if</span> {$doTest =3D=3D <span class=3D"hljs=
-number">0</span>} then {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
string</span> first s $::tcltest::verbose] !=3D <span class=3D"hljs-number"=
>-1</span>} then {
		<span class=3D"hljs-keyword">puts</span> $::tcltest::outputChannel <span =
class=3D"hljs-string">"++++ $name SKIPPED: $constraints"</span>
	    }
	    <span class=3D"hljs-keyword">incr</span> ::<span class=3D"hljs-keyword=
">tcltest</span>::numTests(Skipped)
	    ::<span class=3D"hljs-keyword">tcltest</span>::AddToSkippedBecause $co=
nstraints
	    <span class=3D"hljs-keyword">return</span>
	}
    } else {
	<span class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">"wro=
ng # args: must be \"test name description ?constraints? script expectedAns=
wer\""</span>
    }
    <span class=3D"hljs-keyword">if</span> {$::tcltest::preserveCore} then =
{
	<span class=3D"hljs-keyword">set</span> currentTclPlatform [<span class=3D=
"hljs-keyword">array</span> get tcl_platform]
	<span class=3D"hljs-keyword">array</span> <span class=3D"hljs-keyword">set=
</span> tcl_platform $::tcltest::originalTclPlatform
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">file=
</span> exists [<span class=3D"hljs-keyword">file</span> <span class=3D"hlj=
s-keyword">join</span> $::tcltest::workingDirectory core]]} then {
	    <span class=3D"hljs-keyword">set</span> coreModTime [<span class=3D"hl=
js-keyword">file</span> mtime [<span class=3D"hljs-keyword">file</span> <sp=
an class=3D"hljs-keyword">join</span> $::tcltest::workingDirectory core]]
	}
	<span class=3D"hljs-keyword">array</span> <span class=3D"hljs-keyword">set=
</span> tcl_platform $currentTclPlatform
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> commands <span class=3D"hljs-keyword">memory</span>] !=3D {}} th=
en {
	<span class=3D"hljs-keyword">memory</span> tag $name
    }
    <span class=3D"hljs-keyword">set</span> code [<span class=3D"hljs-keywo=
rd">catch</span> {<span class=3D"hljs-keyword">uplevel</span> $script} actu=
alAnswer]
    <span class=3D"hljs-keyword">if</span> {([<span class=3D"hljs-keyword">=
string</span> equal $actualAnswer $expectedAnswer]) &amp;&amp;($code =3D=3D=
 <span class=3D"hljs-number">0</span>)} then {
	<span class=3D"hljs-keyword">incr</span> ::<span class=3D"hljs-keyword">tc=
ltest</span>::numTests(Passed)
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> first p $::tcltest::verbose] !=3D <span class=3D"hljs-number">-1<=
/span>} then {
	    <span class=3D"hljs-keyword">puts</span> $::tcltest::outputChannel <sp=
an class=3D"hljs-string">"++++ $name PASSED"</span>
	}
    } else {
	<span class=3D"hljs-keyword">incr</span> ::<span class=3D"hljs-keyword">tc=
ltest</span>::numTests(Failed)
	<span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">tcl=
test</span>::currentFailure true
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> first b $::tcltest::verbose] =3D=3D <span class=3D"hljs-number">-=
1</span>} then {
	    <span class=3D"hljs-keyword">set</span> script <span class=3D"hljs-str=
ing">""</span>
	}
	<span class=3D"hljs-keyword">puts</span> $::tcltest::outputChannel <span c=
lass=3D"hljs-string">"\n=3D=3D=3D=3D $name $description FAILED"</span>
	<span class=3D"hljs-keyword">if</span> {$script !=3D <span class=3D"hljs-s=
tring">""</span>} then {
	    <span class=3D"hljs-keyword">puts</span> $::tcltest::outputChannel <sp=
an class=3D"hljs-string">"=3D=3D=3D=3D Contents of test case:"</span>
	    <span class=3D"hljs-keyword">puts</span> $::tcltest::outputChannel $sc=
ript
	}
	<span class=3D"hljs-keyword">if</span> {$code !=3D <span class=3D"hljs-num=
ber">0</span>} then {
	    <span class=3D"hljs-keyword">if</span> {$code =3D=3D <span class=3D"hl=
js-number">1</span>} then {
		<span class=3D"hljs-keyword">puts</span> $::tcltest::outputChannel <span =
class=3D"hljs-string">"=3D=3D=3D=3D Test generated error:"</span>
		<span class=3D"hljs-keyword">puts</span> $::tcltest::outputChannel $actua=
lAnswer
	    } elseif {$code =3D=3D <span class=3D"hljs-number">2</span>} {
		<span class=3D"hljs-keyword">puts</span> $::tcltest::outputChannel <span =
class=3D"hljs-string">"=3D=3D=3D=3D Test generated return exception;  resul=
t was:"</span>
		<span class=3D"hljs-keyword">puts</span> $::tcltest::outputChannel $actua=
lAnswer
	    } elseif {$code =3D=3D <span class=3D"hljs-number">3</span>} {
		<span class=3D"hljs-keyword">puts</span> $::tcltest::outputChannel <span =
class=3D"hljs-string">"=3D=3D=3D=3D Test generated break exception"</span>
	    } elseif {$code =3D=3D <span class=3D"hljs-number">4</span>} {
		<span class=3D"hljs-keyword">puts</span> $::tcltest::outputChannel <span =
class=3D"hljs-string">"=3D=3D=3D=3D Test generated continue exception"</spa=
n>
	    } else {
		<span class=3D"hljs-keyword">puts</span> $::tcltest::outputChannel <span =
class=3D"hljs-string">"=3D=3D=3D=3D Test generated exception $code;  messag=
e was:"</span>
		<span class=3D"hljs-keyword">puts</span> $::tcltest::outputChannel $actua=
lAnswer
	    }
	} else {
	    <span class=3D"hljs-keyword">puts</span> $::tcltest::outputChannel <sp=
an class=3D"hljs-string">"---- Result was:\n$actualAnswer"</span>
	}
	<span class=3D"hljs-keyword">puts</span> $::tcltest::outputChannel <span c=
lass=3D"hljs-string">"---- Result should have been:\n$expectedAnswer"</span=
>
	<span class=3D"hljs-keyword">puts</span> $::tcltest::outputChannel <span c=
lass=3D"hljs-string">"=3D=3D=3D=3D $name FAILED\n"</span>
    }
    <span class=3D"hljs-keyword">if</span> {$::tcltest::preserveCore} then =
{
	<span class=3D"hljs-keyword">set</span> currentTclPlatform [<span class=3D=
"hljs-keyword">array</span> get tcl_platform]
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">file=
</span> exists [<span class=3D"hljs-keyword">file</span> <span class=3D"hlj=
s-keyword">join</span> $::tcltest::workingDirectory core]]} then {
	    <span class=3D"hljs-keyword">if</span> {$::tcltest::preserveCore &gt; =
<span class=3D"hljs-number">1</span>} then {
		<span class=3D"hljs-keyword">puts</span> $::tcltest::outputChannel <span =
class=3D"hljs-string">"=3D=3D=3D=3D $name produced core file!  Moving file =
to:  [file join $::tcltest::temporaryDirectory core-$name]"</span>
		<span class=3D"hljs-keyword">catch</span> {<span class=3D"hljs-keyword">f=
ile</span> <span class=3D"hljs-keyword">rename</span> -force [<span class=
=3D"hljs-keyword">file</span> <span class=3D"hljs-keyword">join</span> $::t=
cltest::workingDirectory core] [<span class=3D"hljs-keyword">file</span> <s=
pan class=3D"hljs-keyword">join</span> $::tcltest::temporaryDirectory core-=
$name]} msg
		<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">str=
ing</span> length $msg] &gt; <span class=3D"hljs-number">0</span>} then {
		    ::<span class=3D"hljs-keyword">tcltest</span>::PrintError <span class=
=3D"hljs-string">"Problem renaming file: $msg"</span>
		}
	    } else {
		<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">inf=
o</span> exists coreModTime]} then {
		    <span class=3D"hljs-keyword">if</span> {$coreModTime !=3D [<span clas=
s=3D"hljs-keyword">file</span> mtime [<span class=3D"hljs-keyword">file</sp=
an> <span class=3D"hljs-keyword">join</span> $::tcltest::workingDirectory c=
ore]]} then {
			<span class=3D"hljs-keyword">puts</span> $::tcltest::outputChannel <span=
 class=3D"hljs-string">"=3D=3D=3D=3D $name produced core file!"</span>
		    }
		} else {
		    <span class=3D"hljs-keyword">puts</span> $::tcltest::outputChannel <s=
pan class=3D"hljs-string">"=3D=3D=3D=3D $name produced core file!"</span>
		}
	    }
	}
	<span class=3D"hljs-keyword">array</span> <span class=3D"hljs-keyword">set=
</span> tcl_platform $currentTclPlatform
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::tclte=
st::getMatchingFiles</span> {args} {
    <span class=3D"hljs-keyword">set</span> matchingFiles {}
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">l=
length</span> $args]} then {
	<span class=3D"hljs-keyword">set</span> searchDirectory $args
    } else {
	<span class=3D"hljs-keyword">set</span> searchDirectory [<span class=3D"hl=
js-keyword">list</span> $::tcltest::testsDirectory]
    }
    <span class=3D"hljs-keyword">foreach</span> directory $searchDirectory =
{
	<span class=3D"hljs-keyword">set</span> matchFileList {}
	<span class=3D"hljs-keyword">foreach</span> match $::tcltest::matchFiles {
	    <span class=3D"hljs-keyword">set</span> matchFileList [<span class=3D"=
hljs-keyword">concat</span> $matchFileList [<span class=3D"hljs-keyword">gl=
ob</span> -nocomplain [<span class=3D"hljs-keyword">file</span> <span class=
=3D"hljs-keyword">join</span> $directory $match]]]
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> compare {} $::tcltest::skipFiles]} then {
	    <span class=3D"hljs-keyword">set</span> skipFileList {}
	    <span class=3D"hljs-keyword">foreach</span> skip $::tcltest::skipFiles=
 {
		<span class=3D"hljs-keyword">set</span> skipFileList [<span class=3D"hljs=
-keyword">concat</span> $skipFileList [<span class=3D"hljs-keyword">glob</s=
pan> -nocomplain [<span class=3D"hljs-keyword">file</span> <span class=3D"h=
ljs-keyword">join</span> $directory $skip]]]
	    }
	    <span class=3D"hljs-keyword">foreach</span> <span class=3D"hljs-keywor=
d">file</span> $matchFileList {
		<span class=3D"hljs-keyword">if</span> {([<span class=3D"hljs-keyword">ls=
earch</span> -exact $skipFileList $file] =3D=3D <span class=3D"hljs-number"=
>-1</span>) &amp;&amp;(![<span class=3D"hljs-keyword">string</span> match l=
.*.test [<span class=3D"hljs-keyword">file</span> tail $file]])} then {
		    <span class=3D"hljs-keyword">lappend</span> matchingFiles $file
		}
	    }
	} else {
	    <span class=3D"hljs-keyword">set</span> matchingFiles [<span class=3D"=
hljs-keyword">concat</span> $matchingFiles $matchFileList]
	}
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal $matchingFiles {}]} then {
	::<span class=3D"hljs-keyword">tcltest</span>::PrintError <span class=3D"h=
ljs-string">"No test files remain after applying  your match and skip patte=
rns!"</span>
    }
    <span class=3D"hljs-keyword">return</span> $matchingFiles
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::tclte=
st::openfiles</span> {} {
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">c=
atch</span> {testchannel <span class=3D"hljs-keyword">open</span>} result]}=
 then {
	<span class=3D"hljs-keyword">return</span> {}
    }
    <span class=3D"hljs-keyword">return</span> $result
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::tclte=
st::leakfiles</span> {old} {
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">c=
atch</span> {testchannel <span class=3D"hljs-keyword">open</span>} new]} th=
en {
	<span class=3D"hljs-keyword">return</span> {}
    }
    <span class=3D"hljs-keyword">set</span> leak {}
    <span class=3D"hljs-keyword">foreach</span> p $new {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">lsea=
rch</span> $old $p] &lt; <span class=3D"hljs-number">0</span>} then {
	    <span class=3D"hljs-keyword">lappend</span> leak $p
	}
    }
    <span class=3D"hljs-keyword">return</span> $leak
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::tclte=
st::saveState</span> {} {
    <span class=3D"hljs-keyword">uplevel</span> #<span class=3D"hljs-number=
">0</span> {<span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-k=
eyword">tcltest</span>::saveState [<span class=3D"hljs-keyword">list</span>=
 [<span class=3D"hljs-keyword">info</span> procs] [<span class=3D"hljs-keyw=
ord">info</span> vars]]}
    DebugPuts <span class=3D"hljs-number">2</span> <span class=3D"hljs-stri=
ng">"::tcltest::saveState: $::tcltest::saveState"</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::tclte=
st::restoreState</span> {} {
    <span class=3D"hljs-keyword">foreach</span> p [<span class=3D"hljs-keyw=
ord">info</span> procs] {
	<span class=3D"hljs-keyword">if</span> {([<span class=3D"hljs-keyword">lse=
arch</span> [<span class=3D"hljs-keyword">lindex</span> $::tcltest::saveSta=
te <span class=3D"hljs-number">0</span>] $p] &lt; <span class=3D"hljs-numbe=
r">0</span>) &amp;&amp;(![<span class=3D"hljs-keyword">string</span> equal =
::<span class=3D"hljs-keyword">tcltest</span>::$p [<span class=3D"hljs-keyw=
ord">namespace</span> origin $p]])} then {
	    DebugPuts <span class=3D"hljs-number">3</span> <span class=3D"hljs-str=
ing">"::tcltest::restoreState: Removing proc $p"</span>
	    <span class=3D"hljs-keyword">rename</span> $p {}
	}
    }
    <span class=3D"hljs-keyword">foreach</span> p [<span class=3D"hljs-keyw=
ord">uplevel</span> #<span class=3D"hljs-number">0</span> {<span class=3D"h=
ljs-keyword">info</span> vars}] {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">lsea=
rch</span> [<span class=3D"hljs-keyword">lindex</span> $::tcltest::saveStat=
e <span class=3D"hljs-number">1</span>] $p] &lt; <span class=3D"hljs-number=
">0</span>} then {
	    DebugPuts <span class=3D"hljs-number">3</span> <span class=3D"hljs-str=
ing">"::tcltest::restoreState: Removing variable $p"</span>
	    <span class=3D"hljs-keyword">uplevel</span> #<span class=3D"hljs-numbe=
r">0</span> <span class=3D"hljs-string">"catch {unset $p}"</span>
	}
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::tclte=
st::normalizeMsg</span> {msg} {
    <span class=3D"hljs-keyword">regsub</span> <span class=3D"hljs-string">=
"\n$"</span> [<span class=3D"hljs-keyword">string</span> tolower $msg] <spa=
n class=3D"hljs-string">""</span> msg
    <span class=3D"hljs-keyword">regsub</span> -all <span class=3D"hljs-str=
ing">"\n\n"</span> $msg <span class=3D"hljs-string">"\n"</span> msg
    <span class=3D"hljs-keyword">regsub</span> -all <span class=3D"hljs-str=
ing">"\n\}"</span> $msg <span class=3D"hljs-string">"\}"</span> msg
    <span class=3D"hljs-keyword">return</span> $msg
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::tclte=
st::makeFile</span> {contents name} {
    <span class=3D"hljs-keyword">global</span> tcl_platform
    DebugPuts <span class=3D"hljs-number">3</span> <span class=3D"hljs-stri=
ng">"::tcltest::makeFile: putting $contents into $name"</span>
    <span class=3D"hljs-keyword">set</span> fullName [<span class=3D"hljs-k=
eyword">file</span> <span class=3D"hljs-keyword">join</span> $::tcltest::te=
mporaryDirectory $name]
    <span class=3D"hljs-keyword">set</span> fd [<span class=3D"hljs-keyword=
">open</span> $fullName w]
    <span class=3D"hljs-keyword">fconfigure</span> $fd -translation lf
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> equal [<span class=3D"hljs-keyword">string</span> index $conte=
nts end] <span class=3D"hljs-string">"\n"</span>]} then {
	<span class=3D"hljs-keyword">puts</span> -nonewline $fd $contents
    } else {
	<span class=3D"hljs-keyword">puts</span> $fd $contents
    }
    <span class=3D"hljs-keyword">close</span> $fd
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">l=
search</span> -exact $::tcltest::filesMade $fullName] =3D=3D <span class=3D=
"hljs-number">-1</span>} then {
	<span class=3D"hljs-keyword">lappend</span> ::<span class=3D"hljs-keyword"=
>tcltest</span>::filesMade $fullName
    }
    <span class=3D"hljs-keyword">return</span> $fullName
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::tclte=
st::removeFile</span> {name} {
    DebugPuts <span class=3D"hljs-number">3</span> <span class=3D"hljs-stri=
ng">"::tcltest::removeFile: removing $name"</span>
    <span class=3D"hljs-keyword">file</span> delete [<span class=3D"hljs-ke=
yword">file</span> <span class=3D"hljs-keyword">join</span> $::tcltest::tem=
poraryDirectory $name]
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::tclte=
st::makeDirectory</span> {name} {
    <span class=3D"hljs-keyword">file</span> mkdir $name
    <span class=3D"hljs-keyword">set</span> fullName [<span class=3D"hljs-k=
eyword">file</span> <span class=3D"hljs-keyword">join</span> [<span class=
=3D"hljs-keyword">pwd</span>] $name]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">l=
search</span> -exact $::tcltest::filesMade $fullName] =3D=3D <span class=3D=
"hljs-number">-1</span>} then {
	<span class=3D"hljs-keyword">lappend</span> ::<span class=3D"hljs-keyword"=
>tcltest</span>::filesMade $fullName
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::tclte=
st::removeDirectory</span> {name} {
    <span class=3D"hljs-keyword">file</span> delete -force $name
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::tclte=
st::viewFile</span> {name} {
    <span class=3D"hljs-keyword">global</span> tcl_platform
    <span class=3D"hljs-keyword">if</span> {([<span class=3D"hljs-keyword">=
string</span> equal $tcl_platform(platform) <span class=3D"hljs-string">"ma=
cintosh"</span>]) ||($::tcltest::testConstraints(unixExecs) =3D=3D <span cl=
ass=3D"hljs-number">0</span>)} then {
	<span class=3D"hljs-keyword">set</span> f [<span class=3D"hljs-keyword">op=
en</span> [<span class=3D"hljs-keyword">file</span> <span class=3D"hljs-key=
word">join</span> $::tcltest::temporaryDirectory $name]]
	<span class=3D"hljs-keyword">set</span> data [<span class=3D"hljs-keyword"=
>read</span> -nonewline $f]
	<span class=3D"hljs-keyword">close</span> $f
	<span class=3D"hljs-keyword">return</span> $data
    } else {
	<span class=3D"hljs-keyword">exec</span> cat [<span class=3D"hljs-keyword"=
>file</span> <span class=3D"hljs-keyword">join</span> $::tcltest::temporary=
Directory $name]
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::tclte=
st::grep</span> {expression searchList} {
    <span class=3D"hljs-keyword">foreach</span> element $searchList {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">regs=
ub</span> -all CURRENT_ELEMENT $expression $element newExpression] =3D=3D <=
span class=3D"hljs-number">0</span>} then {
	    <span class=3D"hljs-keyword">set</span> newExpression <span class=3D"h=
ljs-string">"$expression {$element}"</span>
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">eval=
</span> $newExpression] =3D=3D <span class=3D"hljs-number">1</span>} then {
	    <span class=3D"hljs-keyword">lappend</span> returnList $element
	}
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists returnList]} then {
	<span class=3D"hljs-keyword">return</span> $returnList
    }
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::tclte=
st::bytestring</span> {<span class=3D"hljs-keyword">string</span>} {
    <span class=3D"hljs-keyword">encoding</span> convertfrom identity $stri=
ng
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::tclte=
st::set_iso8859_1_locale</span> {} {
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> commands testlocale] !=3D <span class=3D"hljs-string">""</span>}=
 then {
	<span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">tcl=
test</span>::previousLocale [testlocale ctype]
	testlocale ctype $::tcltest::isoLocale
    }
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::tclte=
st::restore_locale</span> {} {
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> commands testlocale] !=3D <span class=3D"hljs-string">""</span>}=
 then {
	testlocale ctype $::tcltest::previousLocale
    }
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::tclte=
st::threadReap</span> {} {
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> commands testthread] !=3D {}} then {
	testthread errorproc ThreadNullError
	<span class=3D"hljs-keyword">while</span> {[<span class=3D"hljs-keyword">l=
length</span> [testthread names]] &gt; <span class=3D"hljs-number">1</span>=
} {
	    <span class=3D"hljs-keyword">foreach</span> tid [testthread names] {
		<span class=3D"hljs-keyword">if</span> {$tid !=3D $::tcltest::mainThread}=
 then {
		    <span class=3D"hljs-keyword">catch</span> {testthread send -async $ti=
d {testthread <span class=3D"hljs-keyword">exit</span>}}
		}
	    }
	    <span class=3D"hljs-keyword">after</span> <span class=3D"hljs-number">=
1</span>
	}
	testthread errorproc ThreadError
	<span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keyword">l=
length</span> [testthread names]]
    } elseif {[<span class=3D"hljs-keyword">info</span> commands thread::id=
] !=3D {}} {
	thread::errorproc ThreadNullError
	<span class=3D"hljs-keyword">while</span> {[<span class=3D"hljs-keyword">l=
length</span> [thread::names]] &gt; <span class=3D"hljs-number">1</span>} {
	    <span class=3D"hljs-keyword">foreach</span> tid [thread::names] {
		<span class=3D"hljs-keyword">if</span> {$tid !=3D $::tcltest::mainThread}=
 then {
		    <span class=3D"hljs-keyword">catch</span> {thread::send -async $tid {=
thread::<span class=3D"hljs-keyword">exit</span>}}
		}
	    }
	    <span class=3D"hljs-keyword">after</span> <span class=3D"hljs-number">=
1</span>
	}
	thread::errorproc ThreadError
	<span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keyword">l=
length</span> [thread::names]]
    } else {
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">1</=
span>
    }
}
<span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keyword">=
eval</span> <span class=3D"hljs-keyword">tcltest</span> {
    <span class=3D"hljs-keyword">set</span> ::auto_path [<span class=3D"hlj=
s-keyword">list</span> [<span class=3D"hljs-keyword">info</span> library]]
    ::<span class=3D"hljs-keyword">tcltest</span>::initConstraints
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">n=
amespace</span> children ::<span class=3D"hljs-keyword">tcltest</span>] =3D=
=3D {}} then {
	::<span class=3D"hljs-keyword">tcltest</span>::processCmdLineArgs
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> cbOnOkS=
earchBuffer</span> {data <span class=3D"hljs-keyword">format</span>} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> length $data] =3D=3D <span class=3D"hljs-number">0</span>} the=
n {
	.bufferSearchDbox.f_fr3.l_result configure -text <span class=3D"hljs-strin=
g">"Invalid entry."</span> -anchor w
    } elseif {$format =3D=3D <span class=3D"hljs-string">"ascii"</span>} {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> length $data] &gt; <span class=3D"hljs-number">16</span>} then {
	    .bufferSearchDbox.f_fr3.l_result configure -text <span class=3D"hljs-s=
tring">"Entry too long."</span> -anchor w
	} else {
	    .bufferSearchDbox.f_fr3.l_result configure -text <span class=3D"hljs-s=
tring">"Searching..."</span> -anchor w
	    <span class=3D"hljs-keyword">update</span> idletasks
	    <span class=3D"hljs-keyword">set</span> stringMatch <span class=3D"hlj=
s-number">1</span>
	    <span class=3D"hljs-keyword">set</span> addrMax [<span class=3D"hljs-k=
eyword">expr</span> [readDeviceArray memorySize] * <span class=3D"hljs-numb=
er">1024</span> - <span class=3D"hljs-number">1</span>]
	    <span class=3D"hljs-keyword">set</span> bufStartLoc $::bufMatchLoc
	    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">=
set</span> bufIdx $bufStartLoc} {$bufIdx &lt;=3D [<span class=3D"hljs-keywo=
rd">expr</span> $addrMax - [<span class=3D"hljs-keyword">string</span> leng=
th $data] + <span class=3D"hljs-number">1</span>]} {<span class=3D"hljs-key=
word">incr</span> bufIdx} {
		<span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">set=
</span> dataIdx <span class=3D"hljs-number">0</span>} {$dataIdx &lt; [<span=
 class=3D"hljs-keyword">string</span> length $data]} {<span class=3D"hljs-k=
eyword">incr</span> dataIdx} {
		    <span class=3D"hljs-keyword">scan</span> [<span class=3D"hljs-keyword=
">string</span> index $data $dataIdx] %c V
		    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword"=
>expr</span> $V !=3D <span class=3D"hljs-number">0</span>x[readBuffer [<spa=
n class=3D"hljs-keyword">format</span> %<span class=3D"hljs-number">06</spa=
n>X $bufIdx]]]} then {
			<span class=3D"hljs-keyword">set</span> stringMatch <span class=3D"hljs-=
number">0</span>
			<span class=3D"hljs-keyword">break</span>
		    } else {
			<span class=3D"hljs-keyword">set</span> stringMatch <span class=3D"hljs-=
number">1</span>
			<span class=3D"hljs-keyword">incr</span> bufIdx
		    }
		}
		<span class=3D"hljs-keyword">if</span> {$stringMatch} then {
		    <span class=3D"hljs-keyword">set</span> addr [<span class=3D"hljs-key=
word">format</span> <span class=3D"hljs-string">"%#08X"</span> [<span class=
=3D"hljs-keyword">expr</span> $bufIdx - [<span class=3D"hljs-keyword">strin=
g</span> length $data]]]
		    <span class=3D"hljs-keyword">set</span> ::bufMatchLoc [<span class=3D=
"hljs-keyword">expr</span> $addr + <span class=3D"hljs-number">1</span>]
		    .bufferSearchDbox.f_fr3.l_result configure -text $addr -anchor w
		    gotoAddress [<span class=3D"hljs-keyword">format</span> %<span class=
=3D"hljs-number">06</span>X $addr] <span class=3D"hljs-number">0</span>
		    <span class=3D"hljs-keyword">break</span>
		} else {
		    <span class=3D"hljs-keyword">set</span> ::bufMatchLoc <span class=3D"=
hljs-number">0</span>
		    .bufferSearchDbox.f_fr3.l_result configure -text <span class=3D"hljs-=
string">"No match"</span> -anchor w
		}
	    }
	}
    } else {
	<span class=3D"hljs-keyword">if</span> {! [<span class=3D"hljs-keyword">st=
ring</span> is xdigit $data]} then {
	    .bufferSearchDbox.f_fr3.l_result configure -text <span class=3D"hljs-s=
tring">"Invalid entry."</span> -anchor w
	} elseif {[<span class=3D"hljs-keyword">string</span> length $data] &gt; <=
span class=3D"hljs-number">32</span>} {
	    .bufferSearchDbox.f_fr3.l_result configure -text <span class=3D"hljs-s=
tring">"Entry too long."</span> -anchor w
	} elseif {[<span class=3D"hljs-keyword">expr</span> [<span class=3D"hljs-k=
eyword">string</span> length $data] % <span class=3D"hljs-number">2</span>]=
 !=3D <span class=3D"hljs-number">0</span>} {
	    .bufferSearchDbox.f_fr3.l_result configure -text <span class=3D"hljs-s=
tring">"Odd number of chars in entry."</span> -anchor w
	} else {
	    .bufferSearchDbox.f_fr3.l_result configure -text <span class=3D"hljs-s=
tring">"Searching..."</span> -anchor w
	    <span class=3D"hljs-keyword">update</span> idletasks
	    <span class=3D"hljs-keyword">set</span> data [<span class=3D"hljs-keyw=
ord">string</span> toupper $data]
	    <span class=3D"hljs-keyword">set</span> stringMatch <span class=3D"hlj=
s-number">1</span>
	    <span class=3D"hljs-keyword">set</span> addrMax [<span class=3D"hljs-k=
eyword">expr</span> [readDeviceArray memorySize] * <span class=3D"hljs-numb=
er">1024</span> - <span class=3D"hljs-number">1</span>]
	    <span class=3D"hljs-keyword">set</span> bufStartLoc $::bufMatchLoc
	    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">=
set</span> bufIdx $bufStartLoc} {$bufIdx &lt;=3D [<span class=3D"hljs-keywo=
rd">expr</span> $addrMax - ( [<span class=3D"hljs-keyword">string</span> le=
ngth $data] / <span class=3D"hljs-number">2</span> ) + <span class=3D"hljs-=
number">1</span>]} {<span class=3D"hljs-keyword">incr</span> bufIdx} {
		<span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">set=
</span> dataIdx <span class=3D"hljs-number">0</span>} {$dataIdx &lt; [<span=
 class=3D"hljs-keyword">string</span> length $data]} {<span class=3D"hljs-k=
eyword">incr</span> dataIdx <span class=3D"hljs-number">2</span>} {
		    <span class=3D"hljs-keyword">set</span> V [<span class=3D"hljs-keywor=
d">string</span> range $data $dataIdx [<span class=3D"hljs-keyword">expr</s=
pan> $dataIdx + <span class=3D"hljs-number">1</span>]]
		    <span class=3D"hljs-keyword">if</span> {$V !=3D [readBuffer [<span cl=
ass=3D"hljs-keyword">format</span> %<span class=3D"hljs-number">06</span>X =
$bufIdx]]} then {
			<span class=3D"hljs-keyword">set</span> stringMatch <span class=3D"hljs-=
number">0</span>
			<span class=3D"hljs-keyword">break</span>
		    } else {
			<span class=3D"hljs-keyword">set</span> stringMatch <span class=3D"hljs-=
number">1</span>
			<span class=3D"hljs-keyword">incr</span> bufIdx
		    }
		}
		<span class=3D"hljs-keyword">if</span> {$stringMatch} then {
		    <span class=3D"hljs-keyword">set</span> addr [<span class=3D"hljs-key=
word">format</span> <span class=3D"hljs-string">"%#08X"</span> [<span class=
=3D"hljs-keyword">expr</span> $bufIdx - ( [<span class=3D"hljs-keyword">str=
ing</span> length $data] / <span class=3D"hljs-number">2</span> )]]
		    <span class=3D"hljs-keyword">set</span> ::bufMatchLoc [<span class=3D=
"hljs-keyword">expr</span> $addr + <span class=3D"hljs-number">1</span>]
		    .bufferSearchDbox.f_fr3.l_result configure -text $addr -anchor w
		    gotoAddress [<span class=3D"hljs-keyword">format</span> %<span class=
=3D"hljs-number">06</span>X $addr] <span class=3D"hljs-number">0</span>
		    <span class=3D"hljs-keyword">break</span>
		} else {
		    <span class=3D"hljs-keyword">set</span> ::bufMatchLoc <span class=3D"=
hljs-number">0</span>
		    .bufferSearchDbox.f_fr3.l_result configure -text <span class=3D"hljs-=
string">"No match"</span> -anchor w
		}
	    }
	}
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> updateB=
ufferChecksum</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">if</span> {[winfo exists .main.f_buffer.f_=
checkSum.l_cksum]} then {
	.main.f_buffer.f_checkSum.l_cksum configure -text [<span class=3D"hljs-key=
word">format</span> %<span class=3D"hljs-number">06</span>X [bufferChecksum=
]]
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> deleteB=
ufferText</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    .bufferEditWindow.f_editBuffer.f_txt.text configure -state normal
    .bufferEditWindow.f_editBuffer.f_txt.text delete <span class=3D"hljs-nu=
mber">1.0</span> end
    .bufferEditWindow.f_editBuffer.f_txt.text configure -state disabled
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">=
1</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> buildOn=
eBufferLine</span> {address} {
    <span class=3D"hljs-keyword">global</span> gui
    <span class=3D"hljs-keyword">set</span> txtLine [<span class=3D"hljs-ke=
yword">format</span> %<span class=3D"hljs-number">06</span>X $address]
    <span class=3D"hljs-keyword">append</span> txtLine <span class=3D"hljs-=
string">": "</span>
    <span class=3D"hljs-keyword">set</span> asciiLine <span class=3D"hljs-s=
tring">" "</span>
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> j <span class=3D"hljs-number">0</span>} {$j &lt;=3D <span class=
=3D"hljs-number">15</span>} {<span class=3D"hljs-keyword">incr</span> j} {
	<span class=3D"hljs-keyword">set</span> addr [<span class=3D"hljs-keyword"=
>format</span> %<span class=3D"hljs-number">06</span>X [<span class=3D"hljs=
-keyword">expr</span> ($address + $j)]]
	<span class=3D"hljs-keyword">set</span> hexaValue [readBuffer $addr]
	<span class=3D"hljs-keyword">append</span> txtLine $hexaValue
	<span class=3D"hljs-keyword">append</span> txtLine <span class=3D"hljs-str=
ing">" "</span>
	<span class=3D"hljs-keyword">set</span> char [<span class=3D"hljs-keyword"=
>format</span> %c <span class=3D"hljs-number">0</span>x$hexaValue]
	<span class=3D"hljs-keyword">if</span> {(<span class=3D"hljs-string">"0x$h=
exaValue"</span> &gt;=3D <span class=3D"hljs-number">0x20</span>) &amp;&amp=
;(<span class=3D"hljs-string">"0x$hexaValue"</span> &lt;=3D <span class=3D"=
hljs-number">0x7F</span>)} then {
	    <span class=3D"hljs-keyword">append</span> asciiLine $char
	} else {
	    <span class=3D"hljs-keyword">append</span> asciiLine <span class=3D"hl=
js-string">"."</span>
	}
    }
    .bufferEditWindow.f_editBuffer.f_txt.text configure -state normal
    <span class=3D"hljs-keyword">append</span> txtLine <span class=3D"hljs-=
string">"$asciiLine\n"</span>
    .bufferEditWindow.f_editBuffer.f_txt.text insert [<span class=3D"hljs-k=
eyword">expr</span> $gui(bottomDisplayedLine) + <span class=3D"hljs-number"=
>1</span>]<span class=3D"hljs-number">.0</span> $txtLine
    .bufferEditWindow.f_editBuffer.f_txt.text configure -state disabled
    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">=
1</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> updateB=
ufferSingleAddress</span> {address data} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> gui flipStates
    <span class=3D"hljs-keyword">if</span> {[isValidHexaInput $address]} th=
en {
	<span class=3D"hljs-keyword">set</span> address [<span class=3D"hljs-keywo=
rd">format</span> <span class=3D"hljs-string">"%06X"</span> <span class=3D"=
hljs-number">0</span>x$address]
    } else {
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-string">"0x=
$address"</span> &gt; <span class=3D"hljs-string">"0x$gui(maxAddr)"</span>}=
 then {
	<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-string=
">"Address is out of range."</span>
	messageBox <span class=3D"hljs-string">"Edit Buffer"</span> warning $messa=
ge
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">if</span> {[isValidHexaInput $data]} then =
{
	<span class=3D"hljs-keyword">set</span> data [<span class=3D"hljs-keyword"=
>format</span> <span class=3D"hljs-string">"%02X"</span> <span class=3D"hlj=
s-number">0</span>x$data]
    } else {
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-string">"0x=
$data"</span> &gt; <span class=3D"hljs-number">0xFF</span>} then {
	<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-string=
">"Input is not valid."</span>
	messageBox <span class=3D"hljs-string">"Entry Check"</span> warning $messa=
ge
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    writeBuffer $address [<span class=3D"hljs-keyword">format</span> <span =
class=3D"hljs-string">"%02X"</span> <span class=3D"hljs-number">0</span>x$d=
ata]
    updateBufferChecksum
    <span class=3D"hljs-keyword">set</span> row [<span class=3D"hljs-keywor=
d">lindex</span> [addrToPos $address] <span class=3D"hljs-number">0</span>]
    <span class=3D"hljs-keyword">set</span> col [<span class=3D"hljs-keywor=
d">lindex</span> [addrToPos $address] <span class=3D"hljs-number">1</span>]
    <span class=3D"hljs-keyword">if</span> {($row &gt;=3D $gui(topDisplayed=
Line)) &amp;&amp;($row &lt;=3D [<span class=3D"hljs-keyword">expr</span> $g=
ui(bottomDisplayedLine)+<span class=3D"hljs-number">1</span>])} then {
	<span class=3D"hljs-keyword">set</span> topRow $gui(topDisplayedLine)
	<span class=3D"hljs-keyword">if</span> {$row =3D=3D $gui(topDisplayedLine)=
} then {
	    <span class=3D"hljs-keyword">incr</span> topRow <span class=3D"hljs-nu=
mber">-1</span>
	}
	<span class=3D"hljs-keyword">if</span> {$gui(topDisplayedLine) =3D=3D <spa=
n class=3D"hljs-number">1</span>} then {
	    <span class=3D"hljs-keyword">set</span> topRow <span class=3D"hljs-num=
ber">0</span>
	}
	updateBufferWidget [<span class=3D"hljs-keyword">expr</span> $topRow.<span=
 class=3D"hljs-number">0</span> / $gui(numberOfLines)]
	highlightLocation .bufferEditWindow.f_editBuffer.f_txt.text $row.$col
    } else {
	<span class=3D"hljs-keyword">set</span> topRow [<span class=3D"hljs-keywor=
d">expr</span> $row - <span class=3D"hljs-number">1</span>]
	updateBufferWidget [<span class=3D"hljs-keyword">expr</span> $topRow.<span=
 class=3D"hljs-number">0</span> / $gui(numberOfLines)]
	highlightLocation .bufferEditWindow.f_editBuffer.f_txt.text $row.$col
    }
    <span class=3D"hljs-keyword">set</span> flipStates(bufferInInitialState=
) <span class=3D"hljs-number">0</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">=
1</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> copyMov=
eBuffer</span> {} {
    <span class=3D"hljs-keyword">global</span> buffer gui
    <span class=3D"hljs-keyword">set</span> addrMax [<span class=3D"hljs-ke=
yword">expr</span> [readDeviceArray memorySize] * <span class=3D"hljs-numbe=
r">1024</span> - <span class=3D"hljs-number">1</span>]
    <span class=3D"hljs-keyword">if</span> {[isValidHexaInput $buffer(srcSt=
artAddr)]} then {
	<span class=3D"hljs-keyword">set</span> srcStartAddress [<span class=3D"hl=
js-keyword">format</span> <span class=3D"hljs-string">"%06X"</span> <span c=
lass=3D"hljs-number">0</span>x$buffer(srcStartAddr)]
    } else {
	<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-string=
">"Input is not valid."</span>
	messageBox <span class=3D"hljs-string">"Entry Check"</span> warning $messa=
ge
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">if</span> {[isValidHexaInput $buffer(srcEn=
dAddr)]} then {
	<span class=3D"hljs-keyword">set</span> srcEndAddress [<span class=3D"hljs=
-keyword">format</span> <span class=3D"hljs-string">"%06X"</span> <span cla=
ss=3D"hljs-number">0</span>x$buffer(srcEndAddr)]
    } else {
	<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-string=
">"Input is not valid."</span>
	messageBox <span class=3D"hljs-string">"Entry Check"</span> warning $messa=
ge
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">if</span> {[isValidHexaInput $buffer(dstSt=
artAddr)]} then {
	<span class=3D"hljs-keyword">set</span> dstStartAddress [<span class=3D"hl=
js-keyword">format</span> <span class=3D"hljs-string">"%06X"</span> <span c=
lass=3D"hljs-number">0</span>x$buffer(dstStartAddr)]
    } else {
	<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-string=
">"Input is not valid."</span>
	messageBox <span class=3D"hljs-string">"Entry Check"</span> warning $messa=
ge
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">e=
xpr</span> <span class=3D"hljs-number">0</span>x$srcStartAddress &gt; $addr=
Max]} then {
	<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-string=
">"Input is not valid."</span>
	messageBox <span class=3D"hljs-string">"Entry Check"</span> warning $messa=
ge
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">e=
xpr</span> <span class=3D"hljs-number">0</span>x$srcEndAddress &gt; $addrMa=
x]} then {
	<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-string=
">"Input is not valid."</span>
	messageBox <span class=3D"hljs-string">"Entry Check"</span> warning $messa=
ge
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">e=
xpr</span> <span class=3D"hljs-number">0</span>x$dstStartAddress &gt; $addr=
Max]} then {
	<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-string=
">"Input is not valid."</span>
	messageBox <span class=3D"hljs-string">"Entry Check"</span> warning $messa=
ge
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">e=
xpr</span> <span class=3D"hljs-number">0</span>x$srcEndAddress &lt; <span c=
lass=3D"hljs-number">0</span>x$srcStartAddress]} then {
	<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-string=
">"Invalid source address range."</span>
	messageBox <span class=3D"hljs-string">"Entry Check"</span> warning $messa=
ge
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">set</span> srcRange [<span class=3D"hljs-k=
eyword">expr</span> <span class=3D"hljs-number">0</span>x$srcEndAddress - <=
span class=3D"hljs-number">0</span>x$srcStartAddress + <span class=3D"hljs-=
number">1</span>]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">e=
xpr</span> <span class=3D"hljs-number">0</span>x$dstStartAddress &gt; ($add=
rMax - $srcRange + <span class=3D"hljs-number">1</span>)]} then {
	<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-string=
">"Cannot perform the operation."</span>
	messageBox <span class=3D"hljs-string">"Entry Check"</span> warning $messa=
ge
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">0</span>x$buffer(srcStartAddr)} {[<=
span class=3D"hljs-keyword">expr</span> $i &lt;=3D <span class=3D"hljs-numb=
er">0</span>x$buffer(srcEndAddr)]} {<span class=3D"hljs-keyword">incr</span=
> i} {
	<span class=3D"hljs-keyword">set</span> data [readBuffer [<span class=3D"h=
ljs-keyword">format</span> %<span class=3D"hljs-number">06</span>X $i]]
	<span class=3D"hljs-keyword">set</span> temp([<span class=3D"hljs-keyword"=
>format</span> %<span class=3D"hljs-number">06</span>X $i]) $data
	<span class=3D"hljs-keyword">if</span> {$buffer(movecopy) =3D=3D <span cla=
ss=3D"hljs-string">"move"</span>} then {
	    writeBuffer [<span class=3D"hljs-keyword">format</span> %<span class=
=3D"hljs-number">06</span>X $i] $gui(blankValue)
	}
    }
    <span class=3D"hljs-keyword">set</span> j <span class=3D"hljs-number">0=
</span>
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">0</span>x$buffer(srcStartAddr)} {[<=
span class=3D"hljs-keyword">expr</span> $i &lt;=3D <span class=3D"hljs-numb=
er">0</span>x$buffer(srcEndAddr)]} {<span class=3D"hljs-keyword">incr</span=
> i} {
	writeBuffer [<span class=3D"hljs-keyword">format</span> %<span class=3D"hl=
js-number">06</span>X [<span class=3D"hljs-keyword">expr</span> <span class=
=3D"hljs-number">0</span>x$dstStartAddress + $j]] $temp([<span class=3D"hlj=
s-keyword">format</span> %<span class=3D"hljs-number">06</span>X $i])
	<span class=3D"hljs-keyword">incr</span> j
    }
    gotoAddress [<span class=3D"hljs-keyword">format</span> %<span class=3D=
"hljs-number">06</span>X <span class=3D"hljs-number">0</span>x$dstStartAddr=
ess] <span class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> gotoAdd=
ress</span> {address {check <span class=3D"hljs-number">1</span>}} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> gui
    <span class=3D"hljs-keyword">if</span> {$check} then {
	<span class=3D"hljs-keyword">if</span> {[isValidHexaInput $address]} then =
{
	    <span class=3D"hljs-keyword">set</span> address [<span class=3D"hljs-k=
eyword">format</span> <span class=3D"hljs-string">"%06X"</span> <span class=
=3D"hljs-number">0</span>x$address]
	} else {
	    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number"=
>0</span>
	}
	<span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-string">"0x$ad=
dress"</span> &gt; <span class=3D"hljs-string">"0x$gui(maxAddr)"</span>} th=
en {
	    <span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-st=
ring">"Address is out of range."</span>
	    messageBox <span class=3D"hljs-string">"Edit Buffer"</span> warning $m=
essage
	    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number"=
>0</span>
	}
    }
    <span class=3D"hljs-keyword">set</span> formatAddress [<span class=3D"h=
ljs-keyword">format</span> <span class=3D"hljs-string">"%#08X"</span> <span=
 class=3D"hljs-number">0</span>x$address]
    <span class=3D"hljs-keyword">set</span> row [<span class=3D"hljs-keywor=
d">lindex</span> [addrToPos $formatAddress] <span class=3D"hljs-number">0</=
span>]
    <span class=3D"hljs-keyword">set</span> rowSave $row
    <span class=3D"hljs-keyword">set</span> col [<span class=3D"hljs-keywor=
d">lindex</span> [addrToPos $formatAddress] <span class=3D"hljs-number">1</=
span>]
    <span class=3D"hljs-keyword">if</span> {$row &gt; [<span class=3D"hljs-=
keyword">expr</span> $gui(numberOfLines) - $gui(numberOfVisibleLines)]} the=
n {
	<span class=3D"hljs-keyword">set</span> row [<span class=3D"hljs-keyword">=
expr</span> $gui(numberOfLines) - $gui(numberOfVisibleLines)]
    } else {
	<span class=3D"hljs-keyword">incr</span> row <span class=3D"hljs-number">-=
1</span>
    }
    updateBufferWidget [<span class=3D"hljs-keyword">expr</span> $row.<span=
 class=3D"hljs-number">0</span> / $gui(numberOfLines)]
    highlightLocation .bufferEditWindow.f_editBuffer.f_txt.text $rowSave.$c=
ol
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">=
1</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> bufferD=
ata</span> {lo hi} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i $lo} {$i &lt;=3D $hi} {<span class=3D"hljs-keyword">incr</span>=
 i} {
	<span class=3D"hljs-keyword">set</span> j [<span class=3D"hljs-keyword">fo=
rmat</span> %<span class=3D"hljs-number">06</span>X $i]
<span class=3D"hljs-comment">	#dbgShowVar "buffer($j) =3D [readBuffer $j]"<=
/span>
	<span class=3D"hljs-keyword">update</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> guiOpti=
ons</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> gui
<span class=3D"hljs-comment">    #dbgShowVar "gui(sizeType) =3D \t\t$gui(si=
zeType)"</span>
<span class=3D"hljs-comment">    #dbgShowVar "gui(uDefSizeValue) =3D \t$gui=
(uDefSizeValue)"</span>
<span class=3D"hljs-comment">    #dbgShowVar "gui(dDepSizeValue) =3D \t$gui=
(dDepSizeValue)"</span>
<span class=3D"hljs-comment">    #dbgShowVar "gui(sizeValue) =3D \t\t$gui(s=
izeValue)"</span>
<span class=3D"hljs-comment">    #dbgShowVar "gui(maxAddr) =3D \t\t$gui(max=
Addr)"</span>
<span class=3D"hljs-comment">    #dbgShowVar "gui(blankValueType) =3D \t$gu=
i(blankValueType)"</span>
<span class=3D"hljs-comment">    #dbgShowVar "gui(uDefBlankValue) =3D \t$gu=
i(uDefBlankValue)"</span>
<span class=3D"hljs-comment">    #dbgShowVar "gui(dDepBlankValue) =3D \t$gu=
i(dDepBlankValue)"</span>
<span class=3D"hljs-comment">    #dbgShowVar "gui(blankValue) =3D \t\t$gui(=
blankValue)"</span>
<span class=3D"hljs-comment">    #dbgShowVar "gui(resetBufferOnLoading) =3D=
 \t$gui(resetBufferOnLoading)"</span>
<span class=3D"hljs-comment">    #dbgShowVar "gui(rangeOnDeviceProg) =3D \t=
$gui(rangeOnDeviceProg)"</span>
<span class=3D"hljs-comment">    #dbgShowVar "gui(uDefMinProgAddr) =3D \t$g=
ui(uDefMinProgAddr)"</span>
<span class=3D"hljs-comment">    #dbgShowVar "gui(uDefMaxProgAddr) =3D \t$g=
ui(uDefMaxProgAddr)"</span>
<span class=3D"hljs-comment">    #dbgShowVar "gui(lastLoadMinProgAddr) =3D =
\t$gui(lastLoadMinProgAddr)"</span>
<span class=3D"hljs-comment">    #dbgShowVar "gui(lastLoadMaxProgAddr) =3D =
\t$gui(lastLoadMaxProgAddr)"</span>
<span class=3D"hljs-comment">    #dbgShowVar "gui(minProgAddr) =3D \t$gui(m=
inProgAddr)"</span>
<span class=3D"hljs-comment">    #dbgShowVar "gui(maxProgAddr) =3D \t$gui(m=
axProgAddr)"</span>
<span class=3D"hljs-comment">    #dbgShowVar "gui(maxSize) =3D \t\t$gui(max=
Size)"</span>
<span class=3D"hljs-comment">    #dbgShowVar "gui(loadingOffset) =3D \t$gui=
(loadingOffset)"</span>
<span class=3D"hljs-comment">    #dbgShowVar "gui(erase) =3D \t$gui(erase)"=
</span>
<span class=3D"hljs-comment">    #dbgShowVar "gui(blankCheck) =3D \t$gui(bl=
ankCheck)"</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> bufferO=
ptions</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> gui
<span class=3D"hljs-comment">    #dbgShowInfo "Current memory is $::deviceA=
rray(currentMemory)"</span>
<span class=3D"hljs-comment">    #dbgShowVar "buffer(sizeType) =3D \t\t[rea=
dBuffer sizeType]"</span>
<span class=3D"hljs-comment">    #dbgShowVar "buffer(uDefSizeValue) =3D \t\=
t[readBuffer uDefSizeValue]"</span>
<span class=3D"hljs-comment">    #dbgShowVar "buffer(dDepSizeValue) =3D \t\=
t[readBuffer dDepSizeValue]"</span>
<span class=3D"hljs-comment">    #dbgShowVar "buffer(sizeValue) =3D \t\t[re=
adBuffer sizeValue]"</span>
<span class=3D"hljs-comment">    #dbgShowVar "buffer(maxAddr) =3D \t\t[read=
Buffer maxAddr]"</span>
<span class=3D"hljs-comment">    #dbgShowVar "buffer(blankValueType) =3D \t=
\t[readBuffer blankValueType]"</span>
<span class=3D"hljs-comment">    #dbgShowVar "buffer(uDefBlankValue) =3D \t=
\t[readBuffer uDefBlankValue]"</span>
<span class=3D"hljs-comment">    #dbgShowVar "buffer(dDepBlankValue) =3D \t=
\t[readBuffer dDepBlankValue]"</span>
<span class=3D"hljs-comment">    #dbgShowVar "buffer(blankValue) =3D \t\t[r=
eadBuffer blankValue]"</span>
<span class=3D"hljs-comment">    #dbgShowVar "buffer(resetBufferOnLoading) =
=3D \t[readBuffer resetBufferOnLoading]"</span>
<span class=3D"hljs-comment">    #dbgShowVar "buffer(rangeOnDeviceProg) =3D=
 \t[readBuffer rangeOnDeviceProg]"</span>
<span class=3D"hljs-comment">    #dbgShowVar "buffer(uDefMinProgAddr) =3D \=
t\t[readBuffer uDefMinProgAddr]"</span>
<span class=3D"hljs-comment">    #dbgShowVar "buffer(uDefMaxProgAddr) =3D \=
t\t[readBuffer uDefMaxProgAddr]"</span>
<span class=3D"hljs-comment">    #dbgShowVar "buffer(lastLoadMinProgAddr) =
=3D \t[readBuffer lastLoadMinProgAddr]"</span>
<span class=3D"hljs-comment">    #dbgShowVar "buffer(lastLoadMaxProgAddr) =
=3D \t[readBuffer lastLoadMaxProgAddr]"</span>
<span class=3D"hljs-comment">    #dbgShowVar "buffer(minProgAddr) =3D \t\t[=
readBuffer minProgAddr]"</span>
<span class=3D"hljs-comment">    #dbgShowVar "buffer(maxProgAddr) =3D \t\t[=
readBuffer maxProgAddr]"</span>
<span class=3D"hljs-comment">    #dbgShowVar "buffer(maxSize) =3D \t\t\t[re=
adBuffer maxSize]"</span>
<span class=3D"hljs-comment">    #dbgShowVar "buffer(loadingOffset) =3D \t\=
t[readBuffer loadingOffset]"</span>
<span class=3D"hljs-comment">    #dbgShowVar "buffer(erase) =3D \t$buffer(e=
rase)"</span>
<span class=3D"hljs-comment">    #dbgShowVar "buffer(blankCheck) =3D \t$buf=
fer(blankCheck)"</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> addrToP=
os</span> {addr} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">if</span> {[existLeading0x $addr]} then {
	<span class=3D"hljs-keyword">set</span> row [<span class=3D"hljs-keyword">=
expr</span> ($addr + <span class=3D"hljs-number">16</span>) / <span class=
=3D"hljs-number">16</span>]
	<span class=3D"hljs-keyword">set</span> col [<span class=3D"hljs-keyword">=
expr</span> <span class=3D"hljs-number">3</span> * ($addr - <span class=3D"=
hljs-number">16</span> * ($row - <span class=3D"hljs-number">1</span>)) + <=
span class=3D"hljs-number">8</span>]
    } else {
	<span class=3D"hljs-keyword">set</span> row [<span class=3D"hljs-keyword">=
expr</span> (<span class=3D"hljs-number">0</span>x$addr + <span class=3D"hl=
js-number">16</span>) / <span class=3D"hljs-number">16</span>]
	<span class=3D"hljs-keyword">set</span> col [<span class=3D"hljs-keyword">=
expr</span> <span class=3D"hljs-number">3</span> * (<span class=3D"hljs-num=
ber">0</span>x$addr - <span class=3D"hljs-number">16</span> * ($row - <span=
 class=3D"hljs-number">1</span>)) + <span class=3D"hljs-number">8</span>]
    }
    <span class=3D"hljs-keyword">switch</span> $col {
    <span class=3D"hljs-number">8</span> {
	    <span class=3D"hljs-keyword">set</span> asciiCol <span class=3D"hljs-n=
umber">57</span>
	}
    <span class=3D"hljs-number">11</span> {
	    <span class=3D"hljs-keyword">set</span> asciiCol <span class=3D"hljs-n=
umber">58</span>
	}
    <span class=3D"hljs-number">14</span> {
	    <span class=3D"hljs-keyword">set</span> asciiCol <span class=3D"hljs-n=
umber">59</span>
	}
    <span class=3D"hljs-number">17</span> {
	    <span class=3D"hljs-keyword">set</span> asciiCol <span class=3D"hljs-n=
umber">60</span>
	}
    <span class=3D"hljs-number">20</span> {
	    <span class=3D"hljs-keyword">set</span> asciiCol <span class=3D"hljs-n=
umber">61</span>
	}
    <span class=3D"hljs-number">23</span> {
	    <span class=3D"hljs-keyword">set</span> asciiCol <span class=3D"hljs-n=
umber">62</span>
	}
    <span class=3D"hljs-number">26</span> {
	    <span class=3D"hljs-keyword">set</span> asciiCol <span class=3D"hljs-n=
umber">63</span>
	}
    <span class=3D"hljs-number">29</span> {
	    <span class=3D"hljs-keyword">set</span> asciiCol <span class=3D"hljs-n=
umber">64</span>
	}
    <span class=3D"hljs-number">32</span> {
	    <span class=3D"hljs-keyword">set</span> asciiCol <span class=3D"hljs-n=
umber">65</span>
	}
    <span class=3D"hljs-number">35</span> {
	    <span class=3D"hljs-keyword">set</span> asciiCol <span class=3D"hljs-n=
umber">66</span>
	}
    <span class=3D"hljs-number">38</span> {
	    <span class=3D"hljs-keyword">set</span> asciiCol <span class=3D"hljs-n=
umber">67</span>
	}
    <span class=3D"hljs-number">41</span> {
	    <span class=3D"hljs-keyword">set</span> asciiCol <span class=3D"hljs-n=
umber">68</span>
	}
    <span class=3D"hljs-number">44</span> {
	    <span class=3D"hljs-keyword">set</span> asciiCol <span class=3D"hljs-n=
umber">69</span>
	}
    <span class=3D"hljs-number">47</span> {
	    <span class=3D"hljs-keyword">set</span> asciiCol <span class=3D"hljs-n=
umber">70</span>
	}
    <span class=3D"hljs-number">50</span> {
	    <span class=3D"hljs-keyword">set</span> asciiCol <span class=3D"hljs-n=
umber">71</span>
	}
    <span class=3D"hljs-number">53</span> {
	    <span class=3D"hljs-keyword">set</span> asciiCol <span class=3D"hljs-n=
umber">72</span>
	}
    default {
	    log_message <span class=3D"hljs-string">"col value: $col unknown"</spa=
n>
	    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number"=
>0</span>
	}
    }
    <span class=3D"hljs-keyword">set</span> rowCol [<span class=3D"hljs-key=
word">list</span> $row $col $asciiCol]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $rowCol
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> posToAd=
dr</span> {rcPos} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> dotPos [<span class=3D"hljs-key=
word">string</span> first <span class=3D"hljs-string">"."</span> $rcPos]
    <span class=3D"hljs-keyword">set</span> row [<span class=3D"hljs-keywor=
d">string</span> range $rcPos <span class=3D"hljs-number">0</span> [<span c=
lass=3D"hljs-keyword">expr</span> $dotPos - <span class=3D"hljs-number">1</=
span>]]
    <span class=3D"hljs-keyword">set</span> col [<span class=3D"hljs-keywor=
d">string</span> range $rcPos [<span class=3D"hljs-keyword">expr</span> $do=
tPos + <span class=3D"hljs-number">1</span>] end]
    <span class=3D"hljs-keyword">switch</span> $col {
    <span class=3D"hljs-number">8</span> -
    <span class=3D"hljs-number">11</span> -
    <span class=3D"hljs-number">14</span> -
    <span class=3D"hljs-number">17</span> -
    <span class=3D"hljs-number">20</span> -
    <span class=3D"hljs-number">23</span> -
    <span class=3D"hljs-number">26</span> -
    <span class=3D"hljs-number">29</span> -
    <span class=3D"hljs-number">32</span> -
    <span class=3D"hljs-number">35</span> -
    <span class=3D"hljs-number">38</span> -
    <span class=3D"hljs-number">41</span> -
    <span class=3D"hljs-number">44</span> -
    <span class=3D"hljs-number">47</span> -
    <span class=3D"hljs-number">50</span> -
    <span class=3D"hljs-number">53</span> {
	    <span class=3D"hljs-keyword">set</span> addr [<span class=3D"hljs-keyw=
ord">format</span> %<span class=3D"hljs-number">06</span>X [<span class=3D"=
hljs-keyword">expr</span> ($col - <span class=3D"hljs-number">8</span>)/<sp=
an class=3D"hljs-number">3</span> + <span class=3D"hljs-number">16</span>*(=
$row - <span class=3D"hljs-number">1</span>)]]
	}
    default {
	    <span class=3D"hljs-keyword">set</span> addr <span class=3D"hljs-numbe=
r">-1</span>
	}
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $addr
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> resetBu=
ffer</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> gui flipStates
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">0</span>} {$i &lt;=3D <span class=
=3D"hljs-string">"0x$gui(maxAddr)"</span>} {<span class=3D"hljs-keyword">in=
cr</span> i} {
	writeBuffer [<span class=3D"hljs-keyword">format</span> %<span class=3D"hl=
js-number">06</span>X $i] $gui(blankValue)
    }
    <span class=3D"hljs-keyword">if</span> {[winfo exists .bufferEditWindow=
]} then {
	updateBufferWidget <span class=3D"hljs-number">0.0</span>
    }
    updateBufferChecksum
    <span class=3D"hljs-keyword">set</span> flipStates(bufferInInitialState=
) <span class=3D"hljs-number">1</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">=
0</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> checkBu=
ffer</span> {addrLo addrHi data} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">if</span> {[winfo exists .bufferFillDBox]}=
 then {
	focus .bufferFillDBox
    } else {
	focus .
    }
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> addr <span class=3D"hljs-string">"0x$addrLo"</span>} {$addr &lt;=
=3D <span class=3D"hljs-string">"0x$addrHi"</span>} {<span class=3D"hljs-ke=
yword">incr</span> addr} {
	<span class=3D"hljs-keyword">if</span> {[readBuffer [<span class=3D"hljs-k=
eyword">format</span> %<span class=3D"hljs-number">06</span>X $addr]] !=3D =
$data} then {
	    <span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keywor=
d">format</span> %<span class=3D"hljs-number">06</span>X $addr]
	}
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">=
1</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> fillBuf=
fer</span> {addrLo addrHi data} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">if</span> {[winfo exists .bufferFillDBox]}=
 then {
	focus .bufferFillDBox
    } else {
	focus .
    }
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> addr <span class=3D"hljs-string">"0x$addrLo"</span>} {$addr &lt;=
=3D <span class=3D"hljs-string">"0x$addrHi"</span>} {<span class=3D"hljs-ke=
yword">incr</span> addr} {
	writeBuffer [<span class=3D"hljs-keyword">format</span> %<span class=3D"hl=
js-number">06</span>X $addr] $data
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $data
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> cbOnOkG=
otoAddress</span> {gotoAddress} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">if</span> {[gotoAddress $gotoAddress]} the=
n {
	wm withdraw .bufferGotoDbox
	<span class=3D"hljs-keyword">update</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> cbOnOkM=
odifyBuffer</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> gui
    <span class=3D"hljs-keyword">if</span> {[updateBufferSingleAddress $gui=
(modifyAddress) $gui(modifyData)]} then {
	wm withdraw .bufferModifyDbox
	focus .bufferEditWindow
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> cbOnBuf=
ferOptions</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> gui
    cbDboxWakeUp .bufferOptionsWindow
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> cbOnCan=
celBufferOptions</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> gui
    wm withdraw .bufferOptionsWindow
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> cbOnApp=
lyBufferOptions</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> gui
    <span class=3D"hljs-keyword">if</span> {$gui(sizeType) =3D=3D <span cla=
ss=3D"hljs-string">"userDefined"</span>} then {
	<span class=3D"hljs-keyword">if</span> {![isValidIntegerInput $gui(uDefSiz=
eValue)]} then {
	    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number"=
>0</span>
	}
	<span class=3D"hljs-keyword">if</span> {($gui(uDefSizeValue) &lt;=3D <span=
 class=3D"hljs-number">0</span>) ||($gui(uDefSizeValue) &gt; $gui(dDepSizeV=
alue))} then {
	    <span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-st=
ring">"Size is out of range."</span>
	    messageBox <span class=3D"hljs-string">"Entry Check"</span> warning $m=
essage
	    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number"=
>0</span>
	}
	<span class=3D"hljs-keyword">if</span> {$gui(rangeOnDeviceProg) !=3D <span=
 class=3D"hljs-string">"userDefined"</span>} then {
	    <span class=3D"hljs-keyword">set</span> gui(uDefMinProgAddr) [<span cl=
ass=3D"hljs-keyword">format</span> %<span class=3D"hljs-number">04</span>X =
<span class=3D"hljs-number">0</span>]
	    <span class=3D"hljs-keyword">set</span> gui(uDefMaxProgAddr) [<span cl=
ass=3D"hljs-keyword">format</span> %<span class=3D"hljs-number">04</span>X =
[<span class=3D"hljs-keyword">expr</span> $gui(uDefSizeValue) * <span class=
=3D"hljs-number">1024</span> - <span class=3D"hljs-number">1</span>]]
	}
	writeBuffer uDefSizeValue $gui(uDefSizeValue)
	writeBuffer sizeValue $gui(uDefSizeValue)
	writeBuffer maxSize $gui(uDefSizeValue)
	<span class=3D"hljs-keyword">set</span> gui(sizeValue) $gui(uDefSizeValue)
	<span class=3D"hljs-keyword">set</span> gui(maxSize) $gui(uDefSizeValue)
    } else {
	<span class=3D"hljs-keyword">if</span> {$gui(rangeOnDeviceProg) !=3D <span=
 class=3D"hljs-string">"userDefined"</span>} then {
	    <span class=3D"hljs-keyword">set</span> gui(uDefMinProgAddr) [<span cl=
ass=3D"hljs-keyword">format</span> %<span class=3D"hljs-number">04</span>X =
<span class=3D"hljs-number">0</span>]
	    <span class=3D"hljs-keyword">set</span> gui(uDefMaxProgAddr) [<span cl=
ass=3D"hljs-keyword">format</span> %<span class=3D"hljs-number">04</span>X =
[<span class=3D"hljs-keyword">expr</span> $gui(dDepSizeValue) * <span class=
=3D"hljs-number">1024</span> - <span class=3D"hljs-number">1</span>]]
	}
	writeBuffer sizeValue [readDeviceArray memorySize]
    }
    <span class=3D"hljs-keyword">if</span> {$gui(blankValueType) =3D=3D <sp=
an class=3D"hljs-string">"userDefined"</span>} then {
	<span class=3D"hljs-keyword">if</span> {![isValidHexaInput $gui(uDefBlankV=
alue)]} then {
	    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number"=
>0</span>
	}
	<span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-string">"0x$gu=
i(uDefBlankValue)"</span> &gt; <span class=3D"hljs-number">0xFF</span>} the=
n {
	    <span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-st=
ring">"Input is not valid."</span>
	    messageBox <span class=3D"hljs-string">"Entry Check"</span> warning $m=
essage
	    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number"=
>0</span>
	}
	writeBuffer uDefBlankValue $gui(uDefBlankValue)
	writeBuffer blankValue $gui(uDefBlankValue)
	<span class=3D"hljs-keyword">set</span> gui(blankValue) [<span class=3D"hl=
js-keyword">format</span> %<span class=3D"hljs-number">02</span>X <span cla=
ss=3D"hljs-number">0</span>x$gui(uDefBlankValue)]
    } else {
	writeBuffer blankValue $gui(dDepBlankValue)
    }
    <span class=3D"hljs-keyword">if</span> {$gui(rangeOnDeviceProg) =3D=3D =
<span class=3D"hljs-string">"userDefined"</span>} then {
	writeBuffer rangeOnDeviceProg <span class=3D"hljs-string">"userDefined"</s=
pan>
	<span class=3D"hljs-keyword">if</span> {![isValidHexaInput $gui(uDefMinPro=
gAddr)]} then {
	    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number"=
>0</span>
	}
	<span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-string">"0x$gu=
i(uDefMinProgAddr)"</span> &gt; <span class=3D"hljs-string">"0x$gui(uDefMax=
ProgAddr)"</span>} then {
	    <span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-st=
ring">"Address is out of range."</span>
	    messageBox <span class=3D"hljs-string">"Edit Buffer"</span> warning $m=
essage
	    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number"=
>0</span>
	}
	<span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-string">"0x$gu=
i(uDefMinProgAddr)"</span> &gt; <span class=3D"hljs-string">"0x$gui(maxAddr=
)"</span>} then {
	    <span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-st=
ring">"Address is out of range."</span>
	    messageBox <span class=3D"hljs-string">"Edit Buffer"</span> warning $m=
essage
	    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number"=
>0</span>
	}
	<span class=3D"hljs-keyword">set</span> gui(uDefMinProgAddr) [<span class=
=3D"hljs-keyword">format</span> $gui(infoFormat) <span class=3D"hljs-number=
">0</span>x$gui(uDefMinProgAddr)]
	<span class=3D"hljs-keyword">set</span> gui(minProgAddr) $gui(uDefMinProgA=
ddr)
	<span class=3D"hljs-keyword">if</span> {![isValidHexaInput $gui(uDefMaxPro=
gAddr)]} then {
	    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number"=
>0</span>
	}
	<span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-string">"0x$gu=
i(uDefMaxProgAddr)"</span> &gt; <span class=3D"hljs-string">"0x$gui(maxAddr=
)"</span>} then {
	    <span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-st=
ring">"Address is out of range."</span>
	    messageBox <span class=3D"hljs-string">"Edit Buffer"</span> warning $m=
essage
	    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number"=
>0</span>
	}
	<span class=3D"hljs-keyword">set</span> gui(uDefMaxProgAddr) [<span class=
=3D"hljs-keyword">format</span> $gui(infoFormat) <span class=3D"hljs-number=
">0</span>x$gui(uDefMaxProgAddr)]
	<span class=3D"hljs-keyword">set</span> gui(maxProgAddr) $gui(uDefMaxProgA=
ddr)
	writeBuffer uDefMinProgAddr $gui(uDefMinProgAddr)
	writeBuffer uDefMaxProgAddr $gui(uDefMaxProgAddr)
    } elseif {$gui(rangeOnDeviceProg) =3D=3D <span class=3D"hljs-string">"w=
hole"</span>} {
	writeBuffer rangeOnDeviceProg <span class=3D"hljs-string">"whole"</span>
	writeBuffer maxAddr $gui(maxAddr)
	<span class=3D"hljs-keyword">set</span> gui(minProgAddr) <span class=3D"hl=
js-number">0</span>
	<span class=3D"hljs-keyword">set</span> gui(maxProgAddr) [<span class=3D"h=
ljs-keyword">format</span> $gui(infoFormat) [<span class=3D"hljs-keyword">e=
xpr</span> $gui(sizeValue) * <span class=3D"hljs-number">1024</span> - <spa=
n class=3D"hljs-number">1</span>]]
	writeBuffer maxProgAddr $gui(maxProgAddr)
    } else {
	<span class=3D"hljs-keyword">set</span> gui(minProgAddr) $gui(lastLoadMinP=
rogAddr)
	<span class=3D"hljs-keyword">set</span> gui(maxProgAddr) $gui(lastLoadMaxP=
rogAddr)
	writeBuffer rangeOnDeviceProg <span class=3D"hljs-string">"lastLoad"</span=
>
    }
    writeBuffer minProgAddr $gui(minProgAddr)
    writeBuffer maxProgAddr $gui(maxProgAddr)
    <span class=3D"hljs-keyword">if</span> {![isValidHexaInput $gui(loading=
Offset)]} then {
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-string">"0x=
$gui(loadingOffset)"</span> &gt; <span class=3D"hljs-string">"0x$gui(maxAdd=
r)"</span>} then {
	<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-string=
">"Address is out of range."</span>
	messageBox <span class=3D"hljs-string">"Edit Buffer"</span> warning $messa=
ge
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">set</span> gui(loadingOffset) [<span class=
=3D"hljs-keyword">format</span> $gui(infoFormat) <span class=3D"hljs-number=
">0</span>x$gui(loadingOffset)]
    focus .bufferOptionsWindow
    writeBuffer sizeType $gui(sizeType)
    writeBuffer blankValueType $gui(blankValueType)
    writeBuffer resetBufferOnLoading $gui(resetBufferOnLoading)
    writeBuffer loadingOffset $gui(loadingOffset)
    .main.f_buffer.l_bufferSize configure -text <span class=3D"hljs-string"=
>"Size:\t$gui(sizeValue) Kbytes"</span>
    .main.f_buffer.l_bufferBlank configure -text <span class=3D"hljs-string=
">"Blank:\t$gui(blankValue)"</span>
    .main.f_buffer.l_range configure -text <span class=3D"hljs-string">"Ran=
ge:\t[format $gui(infoFormat) 0x$gui(minProgAddr)] - [format $gui(infoForma=
t) 0x$gui(maxProgAddr)]"</span>
    <span class=3D"hljs-keyword">if</span> {$gui(resetBufferOnLoading) =3D=
=3D <span class=3D"hljs-string">"yes"</span>} then {
	.main.f_buffer.l_bufferReset configure -text <span class=3D"hljs-string">"=
Reset Before Loading"</span>
    } else {
	.main.f_buffer.l_bufferReset configure -text <span class=3D"hljs-string">"=
No Reset Before Loading"</span>
    }
    .main.f_buffer.l_offset configure -text <span class=3D"hljs-string">"Of=
fset:\t[format $gui(infoFormat) 0x$gui(loadingOffset)]"</span>
    updateBufferChecksum
    <span class=3D"hljs-keyword">update</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">=
1</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> cbOnOkB=
ufferOptions</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">if</span> {! [cbOnApplyBufferOptions]} the=
n {
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    wm withdraw .bufferOptionsWindow
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">=
1</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> cbFillB=
uffer</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> gui flipStates
    <span class=3D"hljs-keyword">set</span> buttonList [<span class=3D"hljs=
-keyword">split</span> [winfo children .bufferFillDBox.f_buttons]]
    <span class=3D"hljs-keyword">if</span> {![isValidHexaInput $gui(startFi=
llAddr)]} then {
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-string">"0x=
$gui(startFillAddr)"</span> &gt; <span class=3D"hljs-string">"0x$gui(endFil=
lAddr)"</span>} then {
	<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-string=
">"Input is not valid."</span>
	messageBox <span class=3D"hljs-string">"Entry Check"</span> warning $messa=
ge
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-string">"0x=
$gui(startFillAddr)"</span> &gt; <span class=3D"hljs-string">"0x$gui(maxAdd=
r)"</span>} then {
	<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-string=
">"Address is out of range."</span>
	messageBox <span class=3D"hljs-string">"Edit Buffer"</span> warning $messa=
ge
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">set</span> gui(startFillAddr) [<span class=
=3D"hljs-keyword">format</span> %<span class=3D"hljs-number">06</span>X <sp=
an class=3D"hljs-number">0</span>x$gui(startFillAddr)]
    <span class=3D"hljs-keyword">if</span> {![isValidHexaInput $gui(endFill=
Addr)]} then {
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-string">"0x=
$gui(endFillAddr)"</span> &gt; <span class=3D"hljs-string">"0x$gui(maxAddr)=
"</span>} then {
	<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-string=
">"Address is out of range."</span>
	messageBox <span class=3D"hljs-string">"Edit Buffer"</span> warning $messa=
ge
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">set</span> gui(endFillAddr) [<span class=
=3D"hljs-keyword">format</span> %<span class=3D"hljs-number">06</span>X <sp=
an class=3D"hljs-number">0</span>x$gui(endFillAddr)]
    <span class=3D"hljs-keyword">if</span> {![isValidHexaInput $gui(fillVal=
ue)]} then {
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-string">"0x=
$gui(fillValue)"</span> &gt; <span class=3D"hljs-number">0xFF</span>} then =
{
	<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-string=
">"Input is not valid."</span>
	messageBox <span class=3D"hljs-string">"Entry Check"</span> warning $messa=
ge
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">set</span> gui(fillValue) [<span class=3D"=
hljs-keyword">format</span> %<span class=3D"hljs-number">02</span>X <span c=
lass=3D"hljs-number">0</span>x$gui(fillValue)]
    <span class=3D"hljs-keyword">foreach</span> button $buttonList {
	$button configure -state disabled
    }
    <span class=3D"hljs-keyword">update</span>
    fillBuffer $gui(startFillAddr) $gui(endFillAddr) $gui(fillValue)
    <span class=3D"hljs-keyword">set</span> lResults .bufferFillDBox.f_resu=
lts.l_results
    $lResults configure -text <span class=3D"hljs-string">"no check"</span>
    <span class=3D"hljs-keyword">set</span> row [<span class=3D"hljs-keywor=
d">lindex</span> [addrToPos $gui(startFillAddr)] <span class=3D"hljs-number=
">0</span>]
    <span class=3D"hljs-keyword">incr</span> row <span class=3D"hljs-number=
">-1</span>
    updateBufferWidget [<span class=3D"hljs-keyword">expr</span> $row.<span=
 class=3D"hljs-number">0</span> / $gui(numberOfLines)]
    updateBufferChecksum
    <span class=3D"hljs-keyword">foreach</span> button $buttonList {
	$button configure -state normal
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">set</span> flipStates(bufferInInitialState=
) <span class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> cbCheck=
Buffer</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> gui
    <span class=3D"hljs-keyword">if</span> {![isValidHexaInput $gui(startFi=
llAddr)]} then {
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-string">"0x=
$gui(startFillAddr)"</span> &gt; <span class=3D"hljs-string">"0x$gui(endFil=
lAddr)"</span>} then {
	<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-string=
">"Input is not valid."</span>
	messageBox <span class=3D"hljs-string">"Entry Check"</span> warning $messa=
ge
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-string">"0x=
$gui(startFillAddr)"</span> &gt; <span class=3D"hljs-string">"0x$gui(maxAdd=
r)"</span>} then {
	<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-string=
">"Address is out of range."</span>
	messageBox <span class=3D"hljs-string">"Edit Buffer"</span> warning $messa=
ge
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">set</span> gui(startFillAddr) [<span class=
=3D"hljs-keyword">format</span> %<span class=3D"hljs-number">06</span>X <sp=
an class=3D"hljs-number">0</span>x$gui(startFillAddr)]
    <span class=3D"hljs-keyword">if</span> {![isValidHexaInput $gui(endFill=
Addr)]} then {
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-string">"0x=
$gui(endFillAddr)"</span> &gt; <span class=3D"hljs-string">"0x$gui(maxAddr)=
"</span>} then {
	<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-string=
">"Address is out of range."</span>
	messageBox <span class=3D"hljs-string">"Edit Buffer"</span> warning $messa=
ge
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">set</span> gui(endFillAddr) [<span class=
=3D"hljs-keyword">format</span> %<span class=3D"hljs-number">06</span>X <sp=
an class=3D"hljs-number">0</span>x$gui(endFillAddr)]
    <span class=3D"hljs-keyword">if</span> {![isValidHexaInput $gui(fillVal=
ue)]} then {
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-string">"0x=
$gui(fillValue)"</span> &gt; <span class=3D"hljs-number">0xFF</span>} then =
{
	<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-string=
">"Input is not valid."</span>
	messageBox <span class=3D"hljs-string">"Entry Check"</span> warning $messa=
ge
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">set</span> gui(fillValue) [<span class=3D"=
hljs-keyword">format</span> %<span class=3D"hljs-number">02</span>X <span c=
lass=3D"hljs-number">0</span>x$gui(fillValue)]
    <span class=3D"hljs-keyword">set</span> buttonList [<span class=3D"hljs=
-keyword">split</span> [winfo children .bufferFillDBox.f_buttons]]
    <span class=3D"hljs-keyword">foreach</span> button $buttonList {
	$button configure -state disabled
    }
    <span class=3D"hljs-keyword">update</span>
    <span class=3D"hljs-keyword">set</span> state [checkBuffer $gui(startFi=
llAddr) $gui(endFillAddr) $gui(fillValue)]
    <span class=3D"hljs-keyword">set</span> lResults .bufferFillDBox.f_resu=
lts.l_results
    <span class=3D"hljs-keyword">if</span> {$state =3D=3D <span class=3D"hl=
js-number">1</span>} then {
	$lResults configure -text <span class=3D"hljs-string">"Pass"</span>
    } else {
	$lResults configure -text <span class=3D"hljs-string">"Fail at address $st=
ate"</span>
    }
    <span class=3D"hljs-keyword">foreach</span> button $buttonList {
	$button configure -state normal
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> randomi=
zeBuffer</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> flipStates
    <span class=3D"hljs-keyword">set</span> maxAddr [<span class=3D"hljs-ke=
yword">expr</span> [readDeviceArray memorySize] * <span class=3D"hljs-numbe=
r">1024</span>]
    randomizeBuffer_C $maxAddr
    updateBufferWidget <span class=3D"hljs-number">0.0</span>
    updateBufferChecksum
    <span class=3D"hljs-keyword">set</span> flipStates(bufferInInitialState=
) <span class=3D"hljs-number">0</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> display=
HexFileSize</span> {addMin addMax} {
    <span class=3D"hljs-keyword">set</span> S [<span class=3D"hljs-keyword"=
>expr</span> <span class=3D"hljs-number">0</span>x$addMax - <span class=3D"=
hljs-number">0</span>x$addMin + <span class=3D"hljs-number">1</span>]
    <span class=3D"hljs-keyword">if</span> {$S &lt; <span class=3D"hljs-num=
ber">1024</span>} then {
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-string">"$S=
 bytes"</span>
    } else {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">expr=
</span> $S % <span class=3D"hljs-number">1024</span>] =3D=3D <span class=3D=
"hljs-number">0</span>} then {
	    <span class=3D"hljs-keyword">set</span> fSize [<span class=3D"hljs-key=
word">expr</span> $S / <span class=3D"hljs-number">1024</span>]
	    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-string"=
>"$fSize Kbytes"</span>
	} else {
	    <span class=3D"hljs-keyword">set</span> fSize [<span class=3D"hljs-key=
word">expr</span> $S / <span class=3D"hljs-number">1024.0</span>]
	    <span class=3D"hljs-keyword">set</span> S [<span class=3D"hljs-keyword=
">string</span> range $fSize <span class=3D"hljs-number">0</span> [<span cl=
ass=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span=
> first <span class=3D"hljs-string">"."</span> $fSize] + <span class=3D"hlj=
s-number">1</span>]]
	    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-string"=
>"$S Kbytes"</span>
	}
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> highlig=
htLocation</span> {w rcPos} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> addr [posToAddr $rcPos]
    <span class=3D"hljs-keyword">if</span> {$addr !=3D <span class=3D"hljs-=
number">-1</span>} then {
	$w tag delete hlght
	$w tag add hlght <span class=3D"hljs-string">"$rcPos wordstart"</span> <sp=
an class=3D"hljs-string">"$rcPos wordend"</span>
	$w tag configure hlght -background yellow
    } else {
	$w tag delete hlght
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> drawSea=
rchBufferDbox</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> flipFont flipStates
    <span class=3D"hljs-keyword">set</span> ::bufMatchLoc <span class=3D"hl=
js-number">0</span>
    <span class=3D"hljs-keyword">set</span> w .bufferSearchDbox
    <span class=3D"hljs-keyword">if</span> {[winfo exists $w]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    toplevel $w -class Dialog
    wm title $w <span class=3D"hljs-string">"Buffer Search"</span>
    wm resizable $w <span class=3D"hljs-number">0</span> <span class=3D"hlj=
s-number">0</span>
    wm protocol $w WM_DELETE_WINDOW <span class=3D"hljs-string">"wm withdra=
w $w"</span>
    wm withdraw $w
    <span class=3D"hljs-keyword">set</span> fr1 $w.f_fr1
    frame $fr1 -relief groove -bd <span class=3D"hljs-number">2</span> -wid=
th <span class=3D"hljs-number">400</span>
    <span class=3D"hljs-keyword">set</span> fr2 $w.f_fr2
    frame $fr2 -relief groove -bd <span class=3D"hljs-number">2</span> -wid=
th <span class=3D"hljs-number">400</span>
    <span class=3D"hljs-keyword">set</span> fr3 $w.f_fr3
    frame $fr3 -width <span class=3D"hljs-number">400</span>
    <span class=3D"hljs-keyword">set</span> fr4 $w.f_fr4
    frame $fr4 -width <span class=3D"hljs-number">400</span>
    radiobutton $fr1.b_ascii -text <span class=3D"hljs-string">"ASCII"</spa=
n> -<span class=3D"hljs-keyword">variable</span> flipStates(searchFormat) -=
value ascii -anchor w -font $flipFont
    radiobutton $fr1.b_hexa -text <span class=3D"hljs-string">"HEXA"</span>=
 -<span class=3D"hljs-keyword">variable</span> flipStates(searchFormat) -va=
lue hexa -anchor w -font $flipFont
    label $fr2.l_data -text <span class=3D"hljs-string">"Searched Data:"</s=
pan> -font $flipFont -anchor e -width <span class=3D"hljs-number">16</span>
    entry $fr2.e_data -textvariable flipStates(searchedData) -width <span c=
lass=3D"hljs-number">32</span> -font $flipFont -justify left
    setBalloon $fr2.e_data <span class=3D"hljs-string">"Example: ABCD (16 c=
haracters max.) or\n41424344 (32 characters max.)"</span>
    label $fr3.l_title -text <span class=3D"hljs-string">"Search Result: "<=
/span> -font $flipFont -anchor e -width <span class=3D"hljs-number">16</spa=
n>
    label $fr3.l_result -text <span class=3D"hljs-string">""</span> -font $=
flipFont -anchor e -width <span class=3D"hljs-number">32</span>
    button $fr4.b_ok -text <span class=3D"hljs-string">"Search"</span> -fon=
t $flipFont -bd <span class=3D"hljs-number">3</span> -command {cbOnOkSearch=
Buffer $flipStates(searchedData) $flipStates(searchFormat)}
    setBalloon $fr4.b_ok <span class=3D"hljs-string">"Click Search again to=
 find next match."</span>
    button $fr4.b_cancel -text <span class=3D"hljs-string">"Close"</span> -=
font $flipFont -bd <span class=3D"hljs-number">2</span> -command {wm withdr=
aw .bufferSearchDbox}
    pack $fr1.b_ascii $fr1.b_hexa -side top
    pack $fr2.l_data $fr2.e_data -side left -pady <span class=3D"hljs-numbe=
r">10</span> -padx <span class=3D"hljs-number">10</span>
    pack $fr3.l_title $fr3.l_result -side left -padx <span class=3D"hljs-nu=
mber">10</span>
    pack $fr4.b_ok $fr4.b_cancel -side left -padx <span class=3D"hljs-numbe=
r">30</span>
    pack $fr1 $fr2 $fr3 $fr4 -side top -pady <span class=3D"hljs-number">10=
</span> -padx <span class=3D"hljs-number">10</span>
    focus $fr2.e_data
    bind $fr2.e_data &lt;Return&gt; {cbOnOkSearchBuffer $flipStates(searche=
dData) $flipStates(searchFormat)}
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> drawGot=
oBufferDbox</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> flipFont
    <span class=3D"hljs-keyword">set</span> w .bufferGotoDbox
    <span class=3D"hljs-keyword">if</span> {[winfo exists $w]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    toplevel $w -class Dialog
    wm title $w <span class=3D"hljs-string">"Goto Address"</span>
    wm resizable $w <span class=3D"hljs-number">0</span> <span class=3D"hlj=
s-number">0</span>
    wm protocol $w WM_DELETE_WINDOW <span class=3D"hljs-string">"wm withdra=
w $w"</span>
    wm withdraw $w
    <span class=3D"hljs-keyword">set</span> fr $w.f_address
    frame $fr -relief groove -bd <span class=3D"hljs-number">2</span> -widt=
h <span class=3D"hljs-number">400</span>
    label $fr.l_address -text <span class=3D"hljs-string">"Address:"</span>=
 -font $flipFont -anchor e -width <span class=3D"hljs-number">10</span>
    setBalloon $fr.l_address <span class=3D"hljs-string">"Address from whic=
h buffer should be displayed"</span>
    entry $fr.e_address -textvariable gotoAddress -width <span class=3D"hlj=
s-number">7</span> -font $flipFont -justify left
    setBalloon $fr.e_address <span class=3D"hljs-string">"Actual address va=
lue"</span>
    label $fr.l_dummy1 -text <span class=3D"hljs-string">"    "</span> -wid=
th <span class=3D"hljs-number">10</span> -font $flipFont
    grid config $fr.l_address -row <span class=3D"hljs-number">0</span> -co=
l <span class=3D"hljs-number">0</span> -pady <span class=3D"hljs-number">5<=
/span>
    grid config $fr.e_address -row <span class=3D"hljs-number">0</span> -co=
l <span class=3D"hljs-number">1</span> -pady <span class=3D"hljs-number">5<=
/span> -padx <span class=3D"hljs-number">5</span>
    grid config $fr.l_dummy1 -row <span class=3D"hljs-number">0</span> -col=
 <span class=3D"hljs-number">2</span> -pady <span class=3D"hljs-number">5</=
span> -padx <span class=3D"hljs-number">5</span>
    <span class=3D"hljs-keyword">set</span> fr_b $w.f_buttons
    frame $fr_b -relief flat
    button $fr_b.b_ok -text <span class=3D"hljs-string">"OK"</span> -font $=
flipFont -bd <span class=3D"hljs-number">3</span> -command {cbOnOkGotoAddre=
ss $gotoAddress}
    setBalloon $fr_b.b_ok <span class=3D"hljs-string">"Goes to specified ad=
dress\nand closes dialog box"</span>
    button $fr_b.b_apply -text <span class=3D"hljs-string">"Apply"</span> -=
font $flipFont -bd <span class=3D"hljs-number">3</span> -command {gotoAddre=
ss $gotoAddress}
    setBalloon $fr_b.b_apply <span class=3D"hljs-string">"Goes to specified=
 address"</span>
    button $fr_b.b_cancel -text <span class=3D"hljs-string">"Cancel"</span>=
 -font $flipFont -bd <span class=3D"hljs-number">2</span> -command {wm with=
draw .bufferGotoDbox}
    setBalloon $fr_b.b_cancel <span class=3D"hljs-string">"Closes dialog bo=
x\nwithout applying options"</span>
    pack config $fr_b.b_cancel $fr_b.b_apply $fr_b.b_ok -side right -padx <=
span class=3D"hljs-number">5</span> -fill x
    pack config $fr $fr_b -side top -padx <span class=3D"hljs-number">5</sp=
an> -pady <span class=3D"hljs-number">10</span> -fill x
    <span class=3D"hljs-keyword">update</span>
    focus $fr.e_address
    bind $fr.e_address &lt;Return&gt; {cbOnOkGotoAddress $gotoAddress}
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> drawMod=
ifyBufferDbox</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> flipFont gui
    <span class=3D"hljs-keyword">set</span> w .bufferModifyDbox
    <span class=3D"hljs-keyword">if</span> {[winfo exists $w]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    toplevel $w -class Dialog
    wm title $w <span class=3D"hljs-string">"Modify Buffer"</span>
    wm resizable $w <span class=3D"hljs-number">0</span> <span class=3D"hlj=
s-number">0</span>
    wm protocol $w WM_DELETE_WINDOW <span class=3D"hljs-string">"wm withdra=
w $w"</span>
    wm withdraw $w
    <span class=3D"hljs-keyword">set</span> fr $w.f_addressData
    frame $fr -relief groove -bd <span class=3D"hljs-number">2</span> -widt=
h <span class=3D"hljs-number">400</span>
    label $fr.l_address -text <span class=3D"hljs-string">"Address:"</span>=
 -font $flipFont -anchor e -width <span class=3D"hljs-number">10</span>
    setBalloon $fr.l_address <span class=3D"hljs-string">"Address where dat=
a should be modified"</span>
    entry $fr.e_address -textvariable gui(modifyAddress) -width <span class=
=3D"hljs-number">7</span> -font $flipFont -justify left
    setBalloon $fr.e_address <span class=3D"hljs-string">"Actual address va=
lue"</span>
    label $fr.l_dummy1 -text <span class=3D"hljs-string">"    "</span> -wid=
th <span class=3D"hljs-number">10</span> -font $flipFont
    grid config $fr.l_address -row <span class=3D"hljs-number">0</span> -co=
l <span class=3D"hljs-number">0</span> -pady <span class=3D"hljs-number">5<=
/span>
    grid config $fr.e_address -row <span class=3D"hljs-number">0</span> -co=
l <span class=3D"hljs-number">1</span> -pady <span class=3D"hljs-number">5<=
/span> -padx <span class=3D"hljs-number">5</span>
    grid config $fr.l_dummy1 -row <span class=3D"hljs-number">0</span> -col=
 <span class=3D"hljs-number">2</span> -pady <span class=3D"hljs-number">5</=
span> -padx <span class=3D"hljs-number">5</span>
    label $fr.l_data -text <span class=3D"hljs-string">"Data:"</span> -font=
 $flipFont -anchor e -width <span class=3D"hljs-number">10</span>
    setBalloon $fr.l_data <span class=3D"hljs-string">"New data to be writt=
en at specified address"</span>
    entry $fr.e_data -textvariable gui(modifyData) -width <span class=3D"hl=
js-number">7</span> -font $flipFont -justify left
    setBalloon $fr.e_data <span class=3D"hljs-string">"Actual data value"</=
span>
    label $fr.l_dummy2 -text <span class=3D"hljs-string">"    "</span> -wid=
th <span class=3D"hljs-number">10</span> -font $flipFont
    grid config $fr.l_data -row <span class=3D"hljs-number">1</span> -col <=
span class=3D"hljs-number">0</span> -pady <span class=3D"hljs-number">5</sp=
an>
    grid config $fr.e_data -row <span class=3D"hljs-number">1</span> -col <=
span class=3D"hljs-number">1</span> -pady <span class=3D"hljs-number">5</sp=
an> -padx <span class=3D"hljs-number">5</span>
    grid config $fr.l_dummy2 -row <span class=3D"hljs-number">1</span> -col=
 <span class=3D"hljs-number">2</span> -pady <span class=3D"hljs-number">5</=
span> -padx <span class=3D"hljs-number">5</span>
    <span class=3D"hljs-keyword">set</span> fr_b $w.f_buttons
    frame $fr_b -relief flat
    button $fr_b.b_ok -text <span class=3D"hljs-string">"OK"</span> -font $=
flipFont -bd <span class=3D"hljs-number">3</span> -command {cbOnOkModifyBuf=
fer}
    setBalloon $fr_b.b_ok <span class=3D"hljs-string">"Applies specified mo=
dification\nand closes dialog box"</span>
    button $fr_b.b_apply -text <span class=3D"hljs-string">"Apply"</span> -=
font $flipFont -bd <span class=3D"hljs-number">3</span> -command {updateBuf=
ferSingleAddress $gui(modifyAddress) $gui(modifyData)}
    setBalloon $fr_b.b_apply <span class=3D"hljs-string">"Applies specified=
 modification"</span>
    button $fr_b.b_cancel -text <span class=3D"hljs-string">"Cancel"</span>=
 -font $flipFont -bd <span class=3D"hljs-number">2</span> -command {wm with=
draw .bufferModifyDbox
	focus .bufferEditWindow}
    setBalloon $fr_b.b_cancel <span class=3D"hljs-string">"Closes dialog bo=
x\nwithout applying options"</span>
    pack config $fr_b.b_cancel $fr_b.b_apply $fr_b.b_ok -side right -padx <=
span class=3D"hljs-number">5</span> -fill x
    pack config $fr $fr_b -side top -padx <span class=3D"hljs-number">5</sp=
an> -pady <span class=3D"hljs-number">10</span> -fill x
    focus $fr.e_data
    bind $fr.e_data &lt;Return&gt; {cbOnOkModifyBuffer}
    bind $fr.e_address &lt;Return&gt; {cbOnOkModifyBuffer}
    <span class=3D"hljs-keyword">update</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> drawBuf=
ferOptionsWindow</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> flipStates flipFont gui
    <span class=3D"hljs-keyword">set</span> w .bufferOptionsWindow
    <span class=3D"hljs-keyword">if</span> {[winfo exists $w]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    toplevel $w -class Dialog
    wm title $w <span class=3D"hljs-string">"Buffer Options"</span>
    wm resizable $w <span class=3D"hljs-number">0</span> <span class=3D"hlj=
s-number">0</span>
    wm protocol $w WM_DELETE_WINDOW <span class=3D"hljs-string">"wm withdra=
w $w"</span>
    wm withdraw $w
    <span class=3D"hljs-keyword">set</span> fr $w.f_bufferSize
    frame $fr -relief groove -bd <span class=3D"hljs-number">2</span>
    <span class=3D"hljs-keyword">set</span> frValue $fr.f_bufferSizeValue
    frame $frValue
    label $fr.l_bufferSizeTitle -text <span class=3D"hljs-string">"Buffer S=
ize Setting (Kbytes):"</span> -font $flipFont
    radiobutton $frValue.b_userDefined -command {updateGUI onBufferSizeType=
Change} -text <span class=3D"hljs-string">"User Defined:"</span> -<span cla=
ss=3D"hljs-keyword">variable</span> gui(sizeType) -value userDefined -ancho=
r w -font $flipFont
    setBalloon $frValue.b_userDefined <span class=3D"hljs-string">"User def=
ined buffer size"</span>
    entry $frValue.e_bufferSizeValue -textvariable gui(uDefSizeValue) -widt=
h <span class=3D"hljs-number">5</span> -font $flipFont
    setBalloon $frValue.e_bufferSizeValue <span class=3D"hljs-string">"User=
 defined buffer size value"</span>
    radiobutton $frValue.b_deviceDependent -command {updateGUI onBufferSize=
TypeChange} -text <span class=3D"hljs-string">"Device Dependent"</span> -<s=
pan class=3D"hljs-keyword">variable</span> gui(sizeType) -value deviceDepen=
dent -state $flipStates(deviceSelection) -anchor w -font $flipFont
    setBalloon $frValue.b_deviceDependent <span class=3D"hljs-string">"Devi=
ce dependent buffer size"</span>
    bind $frValue.e_bufferSizeValue &lt;Return&gt; {cbOnOkBufferOptions}
    pack config $fr.l_bufferSizeTitle -side top -anchor w -padx <span class=
=3D"hljs-number">5</span>
    pack config $frValue.b_userDefined $frValue.e_bufferSizeValue $frValue.=
b_deviceDependent -side left -padx <span class=3D"hljs-number">10</span>
    pack config $frValue -side top -fill x
    pack $fr -side top -padx <span class=3D"hljs-number">5</span> -pady <sp=
an class=3D"hljs-number">5</span> -fill x
    <span class=3D"hljs-keyword">set</span> fr $w.f_bufferInit
    frame $fr -relief groove -bd <span class=3D"hljs-number">2</span>
    <span class=3D"hljs-keyword">set</span> frValue $fr.f_bufferContentsVal=
ue
    frame $frValue
    label $fr.l_bufferBlankValueTitle -text <span class=3D"hljs-string">"In=
itial Buffer Contents:"</span> -font $flipFont
    radiobutton $frValue.b_userDefined -command {updateGUI onInitialBufferC=
ontentsChange} -text <span class=3D"hljs-string">"User Defined:"</span> -<s=
pan class=3D"hljs-keyword">variable</span> gui(blankValueType) -value userD=
efined -font $flipFont
    setBalloon $frValue.b_userDefined <span class=3D"hljs-string">"User def=
ined initial buffer content"</span>
    entry $frValue.e_bufferBlankValue -textvariable gui(uDefBlankValue) -wi=
dth <span class=3D"hljs-number">5</span> -font $flipFont
    setBalloon $frValue.e_bufferBlankValue <span class=3D"hljs-string">"Use=
r defined initial buffer content value"</span>
    radiobutton $frValue.b_deviceDependent -command {updateGUI onInitialBuf=
ferContentsChange} -text <span class=3D"hljs-string">"Device Blank Value"</=
span> -<span class=3D"hljs-keyword">variable</span> gui(blankValueType) -va=
lue deviceDependent -state $flipStates(deviceSelection) -font $flipFont
    setBalloon $frValue.b_deviceDependent <span class=3D"hljs-string">"Devi=
ce initial buffer content\n(blank value)"</span>
    label $fr.l_bufferReset -text <span class=3D"hljs-string">"Reset Buffer=
 Before Loading ?"</span> -font $flipFont
    setBalloon $fr.l_bufferReset <span class=3D"hljs-string">"Reset/no buff=
er reset before file load"</span>
    radiobutton $fr.b_bufferResetYes -text <span class=3D"hljs-string">"Yes=
"</span> -<span class=3D"hljs-keyword">variable</span> gui(resetBufferOnLoa=
ding) -value yes -font $flipFont
    setBalloon $fr.b_bufferResetYes <span class=3D"hljs-string">"Reset buff=
er with specified\n initial buffer content before file load"</span>
    radiobutton $fr.b_bufferResetNo -text <span class=3D"hljs-string">"No"<=
/span> -<span class=3D"hljs-keyword">variable</span> gui(resetBufferOnLoadi=
ng) -value no -font $flipFont
    setBalloon $fr.b_bufferResetNo <span class=3D"hljs-string">"No buffer r=
eset before file load"</span>
    bind $frValue.e_bufferBlankValue &lt;Return&gt; {cbOnOkBufferOptions}
    pack config $fr.l_bufferBlankValueTitle -side top -padx <span class=3D"=
hljs-number">5</span> -anchor w
    pack config $frValue.b_userDefined $frValue.e_bufferBlankValue $frValue=
.b_deviceDependent -side left -padx <span class=3D"hljs-number">10</span>
    pack config $frValue -side top -fill x
    pack $fr.l_bufferReset -side top -anchor w -padx <span class=3D"hljs-nu=
mber">5</span>
    pack $fr.b_bufferResetYes $fr.b_bufferResetNo -side top -anchor w -padx=
 <span class=3D"hljs-number">10</span>
    pack $fr -side top -fill x -expand <span class=3D"hljs-number">1</span>=
 -padx <span class=3D"hljs-number">5</span> -pady <span class=3D"hljs-numbe=
r">5</span>
    <span class=3D"hljs-keyword">set</span> gui(uDefMinProgAddr) [<span cla=
ss=3D"hljs-keyword">format</span> $gui(infoFormat) <span class=3D"hljs-numb=
er">0</span>x$gui(uDefMinProgAddr)]
    <span class=3D"hljs-keyword">set</span> gui(uDefMaxProgAddr) [<span cla=
ss=3D"hljs-keyword">format</span> $gui(infoFormat) <span class=3D"hljs-numb=
er">0</span>x$gui(uDefMaxProgAddr)]
    <span class=3D"hljs-keyword">set</span> fr $w.f_bufferRange
    frame $fr -relief groove -bd <span class=3D"hljs-number">2</span> -widt=
h <span class=3D"hljs-number">400</span>
    label $fr.l_bufferReset -text <span class=3D"hljs-string">"Address Prog=
ramming Range:"</span> -font $flipFont
    setBalloon $fr.l_bufferReset <span class=3D"hljs-string">"Device memory=
 programming range selection"</span>
    radiobutton $fr.b_bufferRangeLastLoad -command {updateGUI onAddrProgRan=
geChange} -text <span class=3D"hljs-string">"Address Range From Last Buffer=
 Load"</span> -<span class=3D"hljs-keyword">variable</span> gui(rangeOnDevi=
ceProg) -value lastLoad -anchor w -font $flipFont
    setBalloon $fr.b_bufferRangeLastLoad <span class=3D"hljs-string">"Addre=
ss range from last buffer load"</span>
    radiobutton $fr.b_bufferRangeWhole -command {updateGUI onAddrProgRangeC=
hange} -text <span class=3D"hljs-string">"Whole Buffer"</span> -<span class=
=3D"hljs-keyword">variable</span> gui(rangeOnDeviceProg) -value whole -font=
 $flipFont
    setBalloon $fr.b_bufferRangeWhole <span class=3D"hljs-string">"Address =
range from whole buffer size"</span>
    <span class=3D"hljs-keyword">set</span> frUdef $fr.f_uDefined
    frame $frUdef
    radiobutton $frUdef.b_bufferRangeUserDefined -command {updateGUI onAddr=
ProgRangeChange} -text <span class=3D"hljs-string">"User Defined Address Ra=
nge"</span> -<span class=3D"hljs-keyword">variable</span> gui(rangeOnDevice=
Prog) -value userDefined -font $flipFont
    setBalloon $frUdef.b_bufferRangeUserDefined <span class=3D"hljs-string"=
>"User defined programming range"</span>
    label $frUdef.l_bufferRangeMin -text <span class=3D"hljs-string">"Min:"=
</span> -font $flipFont
    setBalloon $frUdef.l_bufferRangeMin <span class=3D"hljs-string">"Min pr=
ogramming address (included)"</span>
    entry $frUdef.e_bufferRangeMin -textvariable gui(uDefMinProgAddr) -widt=
h <span class=3D"hljs-number">7</span> -font $flipFont -state disabled
    setBalloon $frUdef.e_bufferRangeMin <span class=3D"hljs-string">"Min pr=
ogramming address value"</span>
    label $frUdef.l_bufferRangeMax -text <span class=3D"hljs-string">"Max:"=
</span> -font $flipFont
    setBalloon $frUdef.l_bufferRangeMax <span class=3D"hljs-string">"Max pr=
ogramming address (included)"</span>
    entry $frUdef.e_bufferRangeMax -textvariable gui(uDefMaxProgAddr) -widt=
h <span class=3D"hljs-number">7</span> -font $flipFont -state disabled
    setBalloon $frUdef.e_bufferRangeMax <span class=3D"hljs-string">"Max pr=
ogramming address value"</span>
    <span class=3D"hljs-keyword">if</span> {$gui(rangeOnDeviceProg) =3D=3D =
<span class=3D"hljs-string">"userDefined"</span>} then {
	$frUdef.e_bufferRangeMin configure -state normal
	$frUdef.e_bufferRangeMax configure -state normal
    }
    bind $frUdef.e_bufferRangeMin &lt;Return&gt; {cbOnOkBufferOptions}
    bind $frUdef.e_bufferRangeMax &lt;Return&gt; {cbOnOkBufferOptions}
    pack configure $fr.l_bufferReset -side top -anchor w -padx <span class=
=3D"hljs-number">5</span>
    pack configure $fr.b_bufferRangeLastLoad -side top -anchor w -padx <spa=
n class=3D"hljs-number">10</span>
    pack configure $fr.b_bufferRangeWhole -side top -anchor w -padx <span c=
lass=3D"hljs-number">10</span>
    pack configure $frUdef.b_bufferRangeUserDefined $frUdef.l_bufferRangeMi=
n $frUdef.e_bufferRangeMin $frUdef.l_bufferRangeMax $frUdef.e_bufferRangeMa=
x -side left -padx <span class=3D"hljs-number">5</span>
    pack configure $frUdef -side top -anchor w -padx <span class=3D"hljs-nu=
mber">5</span>
    pack configure $fr -side top -padx <span class=3D"hljs-number">5</span>=
 -pady <span class=3D"hljs-number">5</span> -fill x
    <span class=3D"hljs-keyword">set</span> gui(loadingOffset) [<span class=
=3D"hljs-keyword">format</span> $gui(infoFormat) <span class=3D"hljs-number=
">0</span>x$gui(loadingOffset)]
    <span class=3D"hljs-keyword">set</span> fr $w.f_loadingAddressOffset
    frame $fr -relief groove -bd <span class=3D"hljs-number">2</span>
    label $fr.l_loadingOffset -text <span class=3D"hljs-string">"Loading Ad=
dress Offset:"</span> -font $flipFont
    setBalloon $fr.l_loadingOffset <span class=3D"hljs-string">"Offset appl=
ied to read addresses on file load"</span>
    entry $fr.e_loadingOffset -textvariable gui(loadingOffset) -width <span=
 class=3D"hljs-number">7</span> -font $flipFont
    setBalloon $fr.e_loadingOffset <span class=3D"hljs-string">"Loading add=
ress offset value"</span>
    pack $fr.l_loadingOffset $fr.e_loadingOffset -side left -padx <span cla=
ss=3D"hljs-number">5</span>
    pack $fr -side top -padx <span class=3D"hljs-number">5</span> -pady <sp=
an class=3D"hljs-number">5</span> -ipady <span class=3D"hljs-number">10</sp=
an> -fill x
    bind $fr.e_loadingOffset &lt;Return&gt; {cbOnOkBufferOptions}
    <span class=3D"hljs-keyword">set</span> fr $w.f_buttons
    frame $fr -relief flat
    button $fr.b_okButton -text <span class=3D"hljs-string">"OK"</span> -co=
mmand {log_message <span class=3D"hljs-string">"Please load a HEX file..."<=
/span>
	cbOnOkBufferOptions} -font $flipFont -bd <span class=3D"hljs-number">3</sp=
an>
    setBalloon $fr.b_okButton <span class=3D"hljs-string">"Applies selected=
 options\n and closes dialog box"</span>
    button $fr.b_applyButton -text <span class=3D"hljs-string">"Apply"</spa=
n> -command {log_message <span class=3D"hljs-string">"Please load a HEX fil=
e..."</span>
	cbOnApplyBufferOptions} -font $flipFont -bd <span class=3D"hljs-number">3<=
/span>
    setBalloon $fr.b_applyButton <span class=3D"hljs-string">"Applies selec=
ted options"</span>
    button $fr.b_cancelButton -text <span class=3D"hljs-string">"Cancel"</s=
pan> -command {cbOnCancelBufferOptions} -font $flipFont -bd <span class=3D"=
hljs-number">2</span>
    setBalloon $fr.b_cancelButton <span class=3D"hljs-string">"Closes dialo=
g box\nwithout applying options"</span>
    pack config $fr.b_cancelButton $fr.b_applyButton $fr.b_okButton -side r=
ight -padx <span class=3D"hljs-number">3</span> -ipadx <span class=3D"hljs-=
number">18</span>
    pack config $fr -side top -pady <span class=3D"hljs-number">10</span> -=
fill x -padx <span class=3D"hljs-number">5</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> drawBuf=
ferEditWindow</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> flipStates flipFont gui
    <span class=3D"hljs-keyword">set</span> w .bufferEditWindow
    <span class=3D"hljs-keyword">if</span> {[winfo exists $w]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    toplevel $w -class Dialog
    wm title $w <span class=3D"hljs-string">"Edit Buffer"</span>
    wm resizable $w <span class=3D"hljs-number">0</span> <span class=3D"hlj=
s-number">0</span>
    wm protocol $w WM_DELETE_WINDOW <span class=3D"hljs-string">"wm withdra=
w $w"</span>
    wm withdraw $w
    menu $w.menubar -type menubar -relief groove -bd <span class=3D"hljs-nu=
mber">1</span>
    $w configure -menu $w.menubar
    $w.menubar add cascade -label <span class=3D"hljs-string">"File"</span>=
 -menu $w.menubar.<span class=3D"hljs-keyword">file</span> -underline <span=
 class=3D"hljs-number">0</span> -font $flipFont
    $w.menubar add cascade -label <span class=3D"hljs-string">"Edit"</span>=
 -menu $w.menubar.edit -underline <span class=3D"hljs-number">0</span> -fon=
t $flipFont
    $w.menubar add cascade -label <span class=3D"hljs-string">"Device"</spa=
n> -menu $w.menubar.device -underline <span class=3D"hljs-number">0</span> =
-font $flipFont
    $w.menubar add command -label <span class=3D"hljs-string">"Options..."<=
/span> -command {cbOnBufferOptions} -underline <span class=3D"hljs-number">=
0</span> -font $flipFont
    $w.menubar add cascade -label <span class=3D"hljs-string">"Help"</span>=
 -menu $w.menubar.help -underline <span class=3D"hljs-number">0</span> -fon=
t $flipFont
    <span class=3D"hljs-keyword">set</span> f <span class=3D"hljs-string">"=
file"</span>
    menu $w.menubar.$f -tearoff no
    $w.menubar.$f add command -label <span class=3D"hljs-string">"Load..."<=
/span> -command {cbParseHexFile} -underline <span class=3D"hljs-number">0</=
span> -font $flipFont
    $w.menubar.$f add command -label <span class=3D"hljs-string">"Save As..=
."</span> -command {cbWriteHexFile} -underline <span class=3D"hljs-number">=
0</span> -font $flipFont
    <span class=3D"hljs-keyword">set</span> e <span class=3D"hljs-string">"=
edit"</span>
    menu $w.menubar.$e -tearoff no
    $w.menubar.$e add command -label <span class=3D"hljs-string">"Modify...=
"</span> -command {<span class=3D"hljs-keyword">set</span> eData .bufferMod=
ifyDbox.f_addressData.e_data
	$eData icursor end
	focus $eData
	cbDboxWakeUp .bufferModifyDbox} -underline <span class=3D"hljs-number">0</=
span> -font $flipFont
    $w.menubar.$e add command -label <span class=3D"hljs-string">"Goto..."<=
/span> -command {<span class=3D"hljs-keyword">set</span> eData .bufferGotoD=
box.f_address.e_address
	focus $eData
	cbDboxWakeUp .bufferGotoDbox} -underline <span class=3D"hljs-number">0</sp=
an> -font $flipFont
    $w.menubar.$e add command -label <span class=3D"hljs-string">"Fill..."<=
/span> -command {<span class=3D"hljs-keyword">set</span> eValue .bufferFill=
DBox.f_addresses.f_value.e_value
	$eValue icursor end
	focus $eValue
	cbDboxWakeUp .bufferFillDBox} -underline <span class=3D"hljs-number">0</sp=
an> -font $flipFont
    $w.menubar.$e add command -label <span class=3D"hljs-string">"Randomize=
"</span> -command {randomizeBuffer} -underline <span class=3D"hljs-number">=
0</span> -font $flipFont
    $w.menubar.$e add command -label <span class=3D"hljs-string">"Search...=
"</span> -command {cbDboxWakeUp .bufferSearchDbox} -underline <span class=
=3D"hljs-number">0</span> -font $flipFont
    $w.menubar.$e add command -label <span class=3D"hljs-string">"Copy / Mo=
ve..."</span> -command {cbDboxWakeUp .bufferCopyMoveDbox} -underline <span =
class=3D"hljs-number">0</span> -font $flipFont
    $w.menubar.$e add separator
    $w.menubar.$e add command -label <span class=3D"hljs-string">"Reset"</s=
pan> -command {resetBuffer} -underline <span class=3D"hljs-number">0</span>=
 -font $flipFont
    <span class=3D"hljs-keyword">set</span> d <span class=3D"hljs-string">"=
device"</span>
    menu $w.menubar.$d -tearoff no
    $w.menubar.$d add command -label <span class=3D"hljs-string">"Read"</sp=
an> -command {cbDboxWakeUp .deviceReadDBox} -underline <span class=3D"hljs-=
number">0</span> -font $flipFont -state $flipStates(deviceSelection)
    $w.menubar.$d add command -label <span class=3D"hljs-string">"Program"<=
/span> -command {cmdsDeviceProgram} -underline <span class=3D"hljs-number">=
0</span> -font $flipFont -state $flipStates(deviceSelection)
    $w.menubar.$d add command -label <span class=3D"hljs-string">"Verify"</=
span> -command {cmdsDeviceVerify} -underline <span class=3D"hljs-number">0<=
/span> -font $flipFont -state $flipStates(deviceSelection)
    <span class=3D"hljs-keyword">set</span> h <span class=3D"hljs-string">"=
help"</span>
    menu $w.menubar.$h -tearoff no
    $w.menubar.$h add command -label <span class=3D"hljs-string">"Contents.=
.."</span> -command {htmlView <span class=3D"hljs-string">"Help"</span> ./d=
oc/flip_um.htm} -underline <span class=3D"hljs-number">0</span> -font $flip=
Font
    $w.menubar.$h add separator
    $w.menubar.$h add command -label <span class=3D"hljs-string">"About Fli=
p..."</span> -command {displayAbout} -underline <span class=3D"hljs-number"=
>0</span> -font $flipFont
    <span class=3D"hljs-keyword">set</span> editBufferTopFrame $w.f_editBuf=
fer
    frame $editBufferTopFrame -relief sunken -bd <span class=3D"hljs-number=
">1</span>
    createBufferToolBar $editBufferTopFrame
    <span class=3D"hljs-keyword">set</span> legendLabel $editBufferTopFrame=
.l_legend
    label $legendLabel -text <span class=3D"hljs-string">"  Addr  00 01 02 =
03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F  0123456789ABCDEF"</span> -font cour=
ierb
    <span class=3D"hljs-keyword">set</span> txtFrame $editBufferTopFrame.f_=
txt
    frame $txtFrame -relief flat
    text $txtFrame.text -yscrollcommand <span class=3D"hljs-string">"$txtFr=
ame.scroll set"</span> -insertofftime <span class=3D"hljs-number">0</span> =
-setgrid <span class=3D"hljs-number">1</span>
    scrollbar $txtFrame.scroll -command <span class=3D"hljs-string">"$txtFr=
ame.text yview"</span>
    button $editBufferTopFrame.b_ok -text <span class=3D"hljs-string">"OK"<=
/span> -command <span class=3D"hljs-string">"wm withdraw $w"</span> -bd <sp=
an class=3D"hljs-number">3</span> -font $flipFont
    setBalloon $editBufferTopFrame.b_ok <span class=3D"hljs-string">"Closes=
 Edit Buffer window"</span>
    pack configure $txtFrame.scroll -side right -fill y
    pack configure $txtFrame.text -side left -fill x -expand yes
    pack configure $editBufferTopFrame.toolbar -side top -pady <span class=
=3D"hljs-number">2</span> -anchor w
    pack configure $legendLabel -side top -anchor w
    pack configure $txtFrame -side top -fill x -expand yes
    pack configure $editBufferTopFrame.b_ok -side top -pady <span class=3D"=
hljs-number">5</span>
    pack configure $editBufferTopFrame -side top -fill x -expand yes
    $w.f_editBuffer.f_txt.text configure -state normal -font courierb -spac=
ing3 <span class=3D"hljs-number">1</span> -cursor crosshair -width <span cl=
ass=3D"hljs-number">74</span> -height [<span class=3D"hljs-keyword">expr</s=
pan> $gui(numberOfVisibleLines) - <span class=3D"hljs-number">0</span>] -ba=
ckground #<span class=3D"hljs-number">88</span>a67d
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> updateB=
ufferAddressWindow</span> {} {
    <span class=3D"hljs-keyword">global</span> flipStates flipFont gui
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> setEdit=
BufferBindings</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> flipFont gui
    <span class=3D"hljs-keyword">set</span> w .bufferEditWindow.f_editBuffe=
r.f_txt.text
    bind $w &lt;Double-Button<span class=3D"hljs-number">-1</span>&gt; {
	<span class=3D"hljs-keyword">set</span> rcPos [.bufferEditWindow.f_editBuf=
fer.f_txt.text index <span class=3D"hljs-string">"@%x,%y wordstart"</span>]
	<span class=3D"hljs-keyword">set</span> addr [posToAddr $rcPos]
	<span class=3D"hljs-keyword">if</span> {$addr !=3D <span class=3D"hljs-num=
ber">-1</span>} then {
	    <span class=3D"hljs-keyword">set</span> gui(modifyAddress) $addr
	    <span class=3D"hljs-keyword">set</span> gui(modifyData) [readBuffer $a=
ddr]
	    cbDboxWakeUp .bufferModifyDbox
	    <span class=3D"hljs-keyword">set</span> eData .bufferModifyDbox.f_addr=
essData.e_data
	    $eData icursor end
	    focus $eData
	}
    }
    bind $w &lt;Motion&gt; {
	<span class=3D"hljs-keyword">set</span> rcPos [.bufferEditWindow.f_editBuf=
fer.f_txt.text index <span class=3D"hljs-string">"@%x,%y wordstart"</span>]
	highlightLocation .bufferEditWindow.f_editBuffer.f_txt.text $rcPos
    }
    bind .bufferEditWindow &lt;Home&gt; {
	updateBufferWidget <span class=3D"hljs-number">0.0</span>
    }
    bind .bufferEditWindow &lt;End&gt; {
	<span class=3D"hljs-keyword">set</span> fracTop [<span class=3D"hljs-keywo=
rd">expr</span> ($gui(numberOfLines).<span class=3D"hljs-number">0</span> -=
 $gui(numberOfVisibleLines).<span class=3D"hljs-number">0</span> + <span cl=
ass=3D"hljs-number">1.0</span>) / $gui(numberOfLines).<span class=3D"hljs-n=
umber">0</span>]
	updateBufferWidget $fracTop
	.bufferEditWindow.f_editBuffer.f_txt.text yview scroll <span class=3D"hljs=
-number">-1</span> units
    }
    bind .bufferEditWindow &lt;Up&gt; {
	<span class=3D"hljs-keyword">set</span> lineFraction [<span class=3D"hljs-=
keyword">expr</span> <span class=3D"hljs-number">1.0</span> / $gui(numberOf=
Lines)]
	<span class=3D"hljs-keyword">set</span> sliderList [.bufferEditWindow.f_ed=
itBuffer.f_txt.scroll get]
	<span class=3D"hljs-keyword">set</span> newTop [<span class=3D"hljs-keywor=
d">expr</span> [<span class=3D"hljs-keyword">lindex</span> $sliderList <spa=
n class=3D"hljs-number">0</span>] - $lineFraction]
	updateBufferWidget $newTop
    }
    bind .bufferEditWindow &lt;Down&gt; {
	<span class=3D"hljs-keyword">set</span> sliderList [.bufferEditWindow.f_ed=
itBuffer.f_txt.scroll get]
	<span class=3D"hljs-keyword">set</span> lineFraction [<span class=3D"hljs-=
keyword">expr</span> <span class=3D"hljs-number">1.0</span> / $gui(numberOf=
Lines)]
	<span class=3D"hljs-keyword">if</span> {$gui(bottomDisplayedLine) &lt; <sp=
an class=3D"hljs-number">4096</span>} then {
	    <span class=3D"hljs-keyword">set</span> newTop [<span class=3D"hljs-ke=
yword">expr</span> [<span class=3D"hljs-keyword">lindex</span> $sliderList =
<span class=3D"hljs-number">0</span>] + $lineFraction]
	    updateBufferWidget $newTop
	}
    }
    bind .bufferEditWindow &lt;Prior&gt; {
	<span class=3D"hljs-keyword">if</span> {$gui(topDisplayedLine) &lt; $gui(n=
umberOfVisibleLines)} then {
	    updateBufferWidget <span class=3D"hljs-number">0.0</span>
	} else {
	    <span class=3D"hljs-keyword">set</span> sliderList [.bufferEditWindow.=
f_editBuffer.f_txt.scroll get]
	    <span class=3D"hljs-keyword">set</span> pageFraction [<span class=3D"h=
ljs-keyword">expr</span> $gui(numberOfVisibleLines).<span class=3D"hljs-num=
ber">0</span> / $gui(numberOfLines)]
	    <span class=3D"hljs-keyword">set</span> newTop [<span class=3D"hljs-ke=
yword">expr</span> [<span class=3D"hljs-keyword">lindex</span> $sliderList =
<span class=3D"hljs-number">0</span>] - $pageFraction]
	    updateBufferWidget $newTop
	}
    }
    bind .bufferEditWindow &lt;Next&gt; {
	<span class=3D"hljs-keyword">if</span> {$gui(bottomDisplayedLine) &gt; [<s=
pan class=3D"hljs-keyword">expr</span> $gui(numberOfLines).<span class=3D"h=
ljs-number">0</span> - $gui(numberOfVisibleLines)]} then {
	    <span class=3D"hljs-keyword">set</span> fracTop [<span class=3D"hljs-k=
eyword">expr</span> ($gui(numberOfLines).<span class=3D"hljs-number">0</spa=
n> - $gui(numberOfVisibleLines).<span class=3D"hljs-number">0</span> + <spa=
n class=3D"hljs-number">1.0</span>) / $gui(numberOfLines).<span class=3D"hl=
js-number">0</span>]
	    updateBufferWidget $fracTop
	    .bufferEditWindow.f_editBuffer.f_txt.text yview scroll <span class=3D"=
hljs-number">-1</span> units
	} else {
	    <span class=3D"hljs-keyword">set</span> sliderList [.bufferEditWindow.=
f_editBuffer.f_txt.scroll get]
	    <span class=3D"hljs-keyword">set</span> pageFraction [<span class=3D"h=
ljs-keyword">expr</span> $gui(numberOfVisibleLines).<span class=3D"hljs-num=
ber">0</span> / $gui(numberOfLines)]
	    <span class=3D"hljs-keyword">set</span> newTop [<span class=3D"hljs-ke=
yword">expr</span> [<span class=3D"hljs-keyword">lindex</span> $sliderList =
<span class=3D"hljs-number">0</span>] + $pageFraction]
	    updateBufferWidget $newTop
	}
    }
    bind .bufferEditWindow.f_editBuffer.f_txt.scroll &lt;ButtonRelease<span=
 class=3D"hljs-number">-1</span>&gt; {
	updateBufferWidget [<span class=3D"hljs-keyword">lindex</span> [.bufferEdi=
tWindow.f_editBuffer.f_txt.scroll get] <span class=3D"hljs-number">0</span>=
]
    }
    bind .bufferEditWindow.f_editBuffer.f_txt.scroll &lt;ButtonPress<span c=
lass=3D"hljs-number">-1</span>&gt; {
	bind .bufferEditWindow.f_editBuffer.f_txt.scroll &lt;Motion&gt; {
	    updateBufferWidget [<span class=3D"hljs-keyword">lindex</span> [.buffe=
rEditWindow.f_editBuffer.f_txt.scroll get] <span class=3D"hljs-number">0</s=
pan>]
	}
    }
    bind .bufferEditWindow.f_editBuffer.f_txt &lt;MouseWheel&gt; {
<span class=3D"hljs-comment">	#dbgShowInfo "salut"</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> updateB=
ufferWidget</span> {sliderTop} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> flipFont gui
    <span class=3D"hljs-keyword">set</span> gui(topDisplayedLine) [<span cl=
ass=3D"hljs-keyword">expr</span> round($sliderTop * $gui(numberOfLines))]
    <span class=3D"hljs-keyword">if</span> {$gui(topDisplayedLine) &lt; <sp=
an class=3D"hljs-number">0</span>} then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">if</span> {$gui(topDisplayedLine) =3D=3D <=
span class=3D"hljs-number">0</span>} then {
	<span class=3D"hljs-keyword">set</span> gui(topDisplayedLine) <span class=
=3D"hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">set</span> gui(bottomDisplayedLine) [<span=
 class=3D"hljs-keyword">expr</span> $gui(topDisplayedLine) + $gui(numberOfV=
isibleLines) - <span class=3D"hljs-number">1</span>]
    deleteBufferText
    .bufferEditWindow.f_editBuffer.f_txt.text configure -state normal
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">1</span>} {$i &lt; $gui(topDisplaye=
dLine)} {<span class=3D"hljs-keyword">incr</span> i} {
	.bufferEditWindow.f_editBuffer.f_txt.text insert end <span class=3D"hljs-s=
tring">"\n"</span>
    }
    <span class=3D"hljs-keyword">set</span> nextLineAddr [<span class=3D"hl=
js-keyword">expr</span> ($gui(topDisplayedLine) - <span class=3D"hljs-numbe=
r">1</span>) * <span class=3D"hljs-number">16</span>]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i $nextLineAddr; <span class=3D"hljs-keyword">set</span> j <span =
class=3D"hljs-number">1</span>} {$j &lt;=3D [<span class=3D"hljs-keyword">e=
xpr</span> $gui(numberOfVisibleLines)+<span class=3D"hljs-number">1</span>]=
} {<span class=3D"hljs-keyword">incr</span> j <span class=3D"hljs-number">1=
</span>; <span class=3D"hljs-keyword">incr</span> i <span class=3D"hljs-num=
ber">16</span>} {
	<span class=3D"hljs-keyword">if</span> {$i &lt;=3D [<span class=3D"hljs-ke=
yword">expr</span> <span class=3D"hljs-string">"0x$gui(maxAddr)"</span> - <=
span class=3D"hljs-number">15</span>]} then {
	    buildOneBufferLine $i
	}
    }
    .bufferEditWindow.f_editBuffer.f_txt.text configure -state normal
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i [<span class=3D"hljs-keyword">expr</span> $gui(bottomDisplayedL=
ine) + <span class=3D"hljs-number">1</span>]} {$i &lt; $gui(numberOfLines)}=
 {<span class=3D"hljs-keyword">incr</span> i} {
	.bufferEditWindow.f_editBuffer.f_txt.text insert end <span class=3D"hljs-s=
tring">"\n"</span>
    }
    .bufferEditWindow.f_editBuffer.f_txt.text yview moveto $sliderTop
    .bufferEditWindow.f_editBuffer.f_txt.text configure -state disabled
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> drawBuf=
ferFillDBox</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> flipFont gui
    <span class=3D"hljs-keyword">set</span> w .bufferFillDBox
    <span class=3D"hljs-keyword">if</span> {[winfo exists $w]} then {
	destroy $w
    }
    toplevel $w -class Dialog
    wm title $w <span class=3D"hljs-string">"Buffer Fill/Check"</span>
    wm geometry $w <span class=3D"hljs-number">190</span>x210
    wm resizable $w <span class=3D"hljs-number">0</span> <span class=3D"hlj=
s-number">0</span>
    wm withdraw $w
    wm protocol $w WM_DELETE_WINDOW <span class=3D"hljs-string">"wm withdra=
w $w"</span>
    <span class=3D"hljs-keyword">set</span> gui(startFillAddr) [<span class=
=3D"hljs-keyword">format</span> $gui(infoFormat) <span class=3D"hljs-number=
">0</span>x$gui(startFillAddr)]
    <span class=3D"hljs-keyword">set</span> gui(endFillAddr) [<span class=
=3D"hljs-keyword">format</span> $gui(infoFormat) <span class=3D"hljs-number=
">0</span>x$gui(endFillAddr)]
    <span class=3D"hljs-keyword">set</span> fAddr $w.f_addresses
    frame $fAddr -bd <span class=3D"hljs-number">2</span> -relief groove
    <span class=3D"hljs-keyword">set</span> fStart $fAddr.f_start
    frame $fStart -relief flat
    <span class=3D"hljs-keyword">set</span> lStart $fStart.l_start
    label $lStart -text <span class=3D"hljs-string">"Start address:"</span>=
 -font $flipFont -anchor w -width <span class=3D"hljs-number">15</span>
    setBalloon $lStart <span class=3D"hljs-string">"Start address (included=
)\nfor buffer fill/check"</span>
    <span class=3D"hljs-keyword">set</span> eStart $fStart.e_start
    entry $eStart -textvariable gui(startFillAddr) -width <span class=3D"hl=
js-number">6</span> -font $flipFont
    setBalloon $eStart <span class=3D"hljs-string">"Start address value"</s=
pan>
    pack $lStart $eStart -side left
    <span class=3D"hljs-keyword">set</span> fEnd $fAddr.f_end
    frame $fEnd -relief flat
    <span class=3D"hljs-keyword">set</span> lEnd $fEnd.l_end
    label $lEnd -text <span class=3D"hljs-string">"End address:"</span> -fo=
nt $flipFont -anchor w -width <span class=3D"hljs-number">15</span>
    setBalloon $lEnd <span class=3D"hljs-string">"End address (included)\nf=
or buffer fill/check"</span>
    <span class=3D"hljs-keyword">set</span> eEnd $fEnd.e_end
    entry $eEnd -textvariable gui(endFillAddr) -width <span class=3D"hljs-n=
umber">6</span> -font $flipFont
    setBalloon $eEnd <span class=3D"hljs-string">"End address value"</span>
    pack $lEnd $eEnd -side left
    <span class=3D"hljs-keyword">set</span> fValue $fAddr.f_value
    frame $fValue -relief flat
    <span class=3D"hljs-keyword">set</span> lValue $fValue.l_value
    label $lValue -text <span class=3D"hljs-string">"Value:"</span> -font $=
flipFont -anchor w -width <span class=3D"hljs-number">18</span>
    setBalloon $lValue <span class=3D"hljs-string">"Value with which buffer=
 should be filled/checked"</span>
    <span class=3D"hljs-keyword">set</span> eValue $fValue.e_value
    entry $eValue -textvariable gui(fillValue) -width <span class=3D"hljs-n=
umber">3</span> -font $flipFont
    setBalloon $eValue <span class=3D"hljs-string">"Actual fill/check value=
"</span>
    pack $lValue $eValue -side left
    pack $fStart $fEnd $fValue -side top -pady <span class=3D"hljs-number">=
5</span>
    <span class=3D"hljs-keyword">set</span> fResults $w.f_results
    frame $fResults -bd <span class=3D"hljs-number">2</span> -relief groove
    setBalloon $fResults <span class=3D"hljs-string">"Buffer check status:\=
n no check, pass, fail"</span>
    <span class=3D"hljs-keyword">set</span> lTitle $fResults.l_title
    label $lTitle -text <span class=3D"hljs-string">"Buffer Check Status:"<=
/span> -font $flipFont
    <span class=3D"hljs-keyword">set</span> lResults $fResults.l_results
    label $lResults -text <span class=3D"hljs-string">"no check"</span> -fo=
nt $flipFont
    pack $lTitle $lResults -side top
    <span class=3D"hljs-keyword">set</span> fbuttons $w.f_buttons
    frame $fbuttons -relief flat
    button $fbuttons.b_fill -bd <span class=3D"hljs-number">3</span> -text =
<span class=3D"hljs-string">"Fill"</span> -command {cbFillBuffer} -font $fl=
ipFont
    setBalloon $fbuttons.b_fill <span class=3D"hljs-string">"Fills buffer w=
ith specified value\n between (and including) specified addresses"</span>
    button $fbuttons.b_check -bd <span class=3D"hljs-number">3</span> -text=
 <span class=3D"hljs-string">"Check"</span> -command {cbCheckBuffer} -font =
$flipFont
    setBalloon $fbuttons.b_check <span class=3D"hljs-string">"Checks buffer=
 contents against specified value\n between (and including) specified addre=
sses"</span>
    button $fbuttons.b_close -bd <span class=3D"hljs-number">2</span> -text=
 <span class=3D"hljs-string">"Close"</span> -command {wm withdraw .bufferFi=
llDBox} -font $flipFont
    setBalloon $fbuttons.b_close <span class=3D"hljs-string">"Closes dialog=
 box\nwithout applying options"</span>
    pack $fbuttons.b_fill $fbuttons.b_check $fbuttons.b_close -side left -p=
adx <span class=3D"hljs-number">5</span>
    pack $fAddr -side top -fill both -expand true -padx <span class=3D"hljs=
-number">10</span> -pady <span class=3D"hljs-number">10</span>
    pack $fResults -side top -fill both -expand true -padx <span class=3D"h=
ljs-number">10</span>
    pack $fbuttons -side top -fill both -expand true -padx <span class=3D"h=
ljs-number">10</span> -pady <span class=3D"hljs-number">10</span>
    focus $eValue
    $eValue icursor end
    bind $eStart &lt;Return&gt; {cbFillBuffer}
    bind $eEnd &lt;Return&gt; {cbFillBuffer}
    bind $eValue &lt;Return&gt; {cbFillBuffer}
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> cmdsZer=
oxPrefix</span> {data} {
    <span class=3D"hljs-keyword">if</span> {([<span class=3D"hljs-keyword">=
string</span> first <span class=3D"hljs-string">"0X"</span> $data] =3D=3D <=
span class=3D"hljs-number">-1</span>) &amp;&amp;([<span class=3D"hljs-keywo=
rd">string</span> first <span class=3D"hljs-string">"0x"</span> $data] =3D=
=3D <span class=3D"hljs-number">-1</span>)} then {
	<span class=3D"hljs-keyword">set</span> data <span class=3D"hljs-number">0=
</span>X$data
    }
    <span class=3D"hljs-keyword">return</span> $data
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> cmdsCom=
puteBufferChecksum_OBSOLETE</span> {} {
    <span class=3D"hljs-keyword">global</span> temp flipStates
    <span class=3D"hljs-keyword">if</span> {! $flipStates(simul)} then {
	<span class=3D"hljs-keyword">set</span> min [readBuffer minProgAddr]
	<span class=3D"hljs-keyword">set</span> max [readBuffer maxProgAddr]
	<span class=3D"hljs-keyword">return</span> [computeBufferChecksum_C $min $=
max]
    } else {
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-string">"0x=
DEADBEEF"</span>
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> parseCo=
nfigFile</span> {cfgFile {action <span class=3D"hljs-keyword">read</span>}}=
 {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> port baud flipStates blankCh=
eckAddr cfgFileId
    updateGUI onConfigFileLoaded
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">f=
ile</span> exists $cfgFile]} then {
	<span class=3D"hljs-keyword">set</span> flipStates(lastloadedCfgFile) $cfg=
File
	<span class=3D"hljs-keyword">source</span> $cfgFile
	<span class=3D"hljs-keyword">if</span> {$action =3D=3D <span class=3D"hljs=
-string">"execute"</span>} then {
	    runOperations
	}
	.menubar.<span class=3D"hljs-keyword">file</span> entryconfigure <span cla=
ss=3D"hljs-number">4</span> -state normal
	.menubar.<span class=3D"hljs-keyword">file</span> entryconfigure <span cla=
ss=3D"hljs-number">5</span> -state normal
    } else {
	<span class=3D"hljs-keyword">set</span> parentWindow [focus]
	tk_messageBox -icon warning -message <span class=3D"hljs-string">"You must=
 load a configuration file, first."</span> -title <span class=3D"hljs-strin=
g">"Flip message"</span> -type ok -parent $parentWindow
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> incSn</=
span> {} {
    <span class=3D"hljs-keyword">global</span> serialize sn
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">0</span>} {$i &lt; [<span class=3D"=
hljs-keyword">expr</span> $serialize(nBytes) * <span class=3D"hljs-number">=
8</span>]} {<span class=3D"hljs-keyword">incr</span> i} {
	<span class=3D"hljs-keyword">if</span> {$::sn($i) =3D=3D <span class=3D"hl=
js-number">0</span>} then {
	    <span class=3D"hljs-keyword">set</span> ::sn($i) <span class=3D"hljs-n=
umber">1</span>
	    <span class=3D"hljs-keyword">break</span>

	} else {
	    <span class=3D"hljs-keyword">set</span> ::sn($i) <span class=3D"hljs-n=
umber">0</span>
	}
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> decSn</=
span> {} {
    <span class=3D"hljs-keyword">global</span> serialize sn
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">0</span>} {$i &lt; [<span class=3D"=
hljs-keyword">expr</span> $serialize(nBytes) * <span class=3D"hljs-number">=
8</span>]} {<span class=3D"hljs-keyword">incr</span> i} {
	<span class=3D"hljs-keyword">if</span> {$::sn($i) =3D=3D <span class=3D"hl=
js-number">0</span>} then {
	    <span class=3D"hljs-keyword">set</span> ::sn($i) <span class=3D"hljs-n=
umber">1</span>
	} else {
	    <span class=3D"hljs-keyword">set</span> ::sn($i) <span class=3D"hljs-n=
umber">0</span>
	    <span class=3D"hljs-keyword">break</span>

	}
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> cmdsBui=
ldDeviceList</span> {filesList} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> deviceList projDir
    <span class=3D"hljs-keyword">set</span> initialDir [<span class=3D"hljs=
-keyword">pwd</span>]
    <span class=3D"hljs-keyword">set</span> deviceList <span class=3D"hljs-=
string">""</span>
    <span class=3D"hljs-keyword">set</span> notReadable <span class=3D"hljs=
-number">0</span>
    <span class=3D"hljs-keyword">foreach</span> fileName $filesList {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">file=
</span> readable $projDir/tcl/devices/$fileName]} then {
	    <span class=3D"hljs-keyword">set</span> fileId [<span class=3D"hljs-ke=
yword">open</span> $projDir/tcl/devices/$fileName <span class=3D"hljs-strin=
g">"r"</span>]
	    <span class=3D"hljs-keyword">while</span> {[<span class=3D"hljs-keywor=
d">gets</span> $fileId line] &gt;=3D <span class=3D"hljs-number">0</span>} =
{
		<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">str=
ing</span> first <span class=3D"hljs-string">"set ::deviceArray(name)"</spa=
n> $line] !=3D <span class=3D"hljs-number">-1</span>} then {
		    <span class=3D"hljs-keyword">lappend</span> deviceList [<span class=
=3D"hljs-keyword">lindex</span> $line <span class=3D"hljs-number">2</span>]
		    <span class=3D"hljs-keyword">break</span>
		}
	    }
	    <span class=3D"hljs-keyword">close</span> $fileId
	} else {
	    <span class=3D"hljs-keyword">set</span> notReadable <span class=3D"hlj=
s-number">1</span>
<span class=3D"hljs-comment">	    #dbgShowWarning "  Device file =3D $initi=
alDir/devices/$fileName"</span>
	    <span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-st=
ring">"Device file is not readable."</span>
	    messageBox <span class=3D"hljs-string">"Device Selection"</span> warni=
ng $message
	    <span class=3D"hljs-keyword">break</span>
	}
    }
    <span class=3D"hljs-keyword">if</span> {$notReadable} then {
<span class=3D"hljs-comment">	#dbgEndProc [info level [info level]]</span>
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    } else {
<span class=3D"hljs-comment">	#dbgEndProc [info level [info level]]</span>
	<span class=3D"hljs-keyword">return</span> $deviceList
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> buildTe=
stLogFileHeader</span> logFileId {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> version baud tcl_platform pr=
otcl
    <span class=3D"hljs-keyword">set</span> secs [<span class=3D"hljs-keywo=
rd">clock</span> seconds]
    <span class=3D"hljs-keyword">puts</span> $logFileId <span class=3D"hljs=
-string">"#################################################################=
######"</span>
    <span class=3D"hljs-keyword">puts</span> $logFileId <span class=3D"hljs=
-string">"# Device : $::deviceArray(name) - Bootloader version : $::deviceA=
rray(bootlVer)"</span>
    <span class=3D"hljs-keyword">set</span> date [<span class=3D"hljs-keywo=
rd">clock</span> <span class=3D"hljs-keyword">format</span> $secs -<span cl=
ass=3D"hljs-keyword">format</span> %c]
    <span class=3D"hljs-keyword">puts</span> $logFileId <span class=3D"hljs=
-string">"# Tested with FLIP version : $version on $date"</span>
    <span class=3D"hljs-keyword">puts</span> $logFileId <span class=3D"hljs=
-string">"# Tested protocol : $protcl"</span>
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists baud]} then {
	<span class=3D"hljs-keyword">puts</span> $logFileId <span class=3D"hljs-st=
ring">"# Baudrate : $baud"</span>
    }
    <span class=3D"hljs-keyword">puts</span> $logFileId <span class=3D"hljs=
-string">"# Platform : $tcl_platform(os) $tcl_platform(osVersion)"</span>
    <span class=3D"hljs-keyword">puts</span> $logFileId <span class=3D"hljs=
-string">"#################################################################=
######\n\n"</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> cmdsRun=
Tests</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> testArray libDir projDir tcl=
TestDir prot protcl
    <span class=3D"hljs-keyword">global</span> flipStates
    <span class=3D"hljs-keyword">set</span> flipStates(bufferInInitialState=
) <span class=3D"hljs-number">0</span>
    log_message <span class=3D"hljs-string">""</span>
    <span class=3D"hljs-keyword">if</span> {$testArray(nonRegress) &amp;&am=
p;([checkFilePathname $testArray(logFile)] !=3D <span class=3D"hljs-number"=
>1</span>)} then {
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">if</span> {$testArray(protocol) &amp;&amp;=
([checkFilePathname $testArray(logFile)] !=3D <span class=3D"hljs-number">1=
</span>)} then {
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">if</span> {($testArray(nonRegress) !=3D <s=
pan class=3D"hljs-number">1</span>) &amp;&amp;($testArray(protocol) !=3D <s=
pan class=3D"hljs-number">1</span>)} then {
	wm withdraw .testSelectionDbox
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">set</span> logFileId [<span class=3D"hljs-=
keyword">open</span> $testArray(logFile) <span class=3D"hljs-string">"w+"</=
span>]
    buildTestLogFileHeader $logFileId
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">l=
search</span> [<span class=3D"hljs-keyword">namespace</span> children] ::<s=
pan class=3D"hljs-keyword">tcltest</span>] =3D=3D <span class=3D"hljs-numbe=
r">-1</span>} then {
	<span class=3D"hljs-keyword">package</span> require <span class=3D"hljs-ke=
yword">tcltest</span>
	<span class=3D"hljs-keyword">namespace</span> import ::<span class=3D"hljs=
-keyword">tcltest</span>::*
    }
    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">=
tcltest</span>::outputChannel $logFileId
    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">=
tcltest</span>::errorChannel $logFileId
    modifyWidgetOption .main.f_flow state disabled
    modifyWidgetOption .main.f_device state disabled
    <span class=3D"hljs-keyword">update</span>
    <span class=3D"hljs-keyword">set</span> fore yellow
    <span class=3D"hljs-keyword">set</span> back red
    .main.f_flow.l_flow configure -state normal -bg $back
    .main.f_flow.l_flow configure -text <span class=3D"hljs-string">"TESTIN=
G"</span> -bg red -fg yellow
    working_start .main.f_flow.l_flow yellow red
    <span class=3D"hljs-keyword">if</span> {$testArray(nonRegress)} then {
<span class=3D"hljs-comment">	#dbgShowInfo "Running $projDir/tcl/tests/nore=
gr_test.tcl"</span>
	<span class=3D"hljs-keyword">source</span> $projDir/tcl/tests/noregr_test.=
tcl
    }
    <span class=3D"hljs-keyword">if</span> {$testArray(protocol)} then {
	<span class=3D"hljs-keyword">if</span> {$protcl =3D=3D <span class=3D"hljs=
-string">"RS232Standard"</span>} then {
<span class=3D"hljs-comment">	    #dbgShowInfo "Running $projDir/tcl/tests/=
rs232std_test.tcl"</span>
	    <span class=3D"hljs-keyword">source</span> $projDir/tcl/tests/rs232std=
_test.tcl
	} elseif {($protcl =3D=3D <span class=3D"hljs-string">"CANStandard"</span>=
) ||($protcl =3D=3D <span class=3D"hljs-string">"canview"</span>) ||($protc=
l =3D=3D <span class=3D"hljs-string">"usbcan"</span>)} {
<span class=3D"hljs-comment">	    #dbgShowInfo "Running $projDir/tcl/tests/=
canstd_test.tcl"</span>
	    <span class=3D"hljs-keyword">source</span> $projDir/tcl/tests/canstd_t=
est.tcl
<span class=3D"hljs-comment">	    #david eseo</span>
	} elseif {$protcl =3D=3D <span class=3D"hljs-string">"rs232can"</span>} {
<span class=3D"hljs-comment">	    #dbgShowInfo "Running $projDir/tcl/tests/=
rs232can_test.tcl"</span>
	    <span class=3D"hljs-keyword">source</span> $projDir/tcl/tests/rs232can=
_test.tcl
<span class=3D"hljs-comment">	    #fin david eseo</span>
	} elseif {$protcl =3D=3D <span class=3D"hljs-string">"USB_DFU"</span>} {
<span class=3D"hljs-comment">	    #dbgShowInfo "Running $projDir/tcl/tests/=
usb_dfu_test.tcl"</span>
	    <span class=3D"hljs-keyword">source</span> $projDir/tcl/tests/usb_dfu_=
test.tcl
	} else {
	    log_message <span class=3D"hljs-string">"Protocol tests file does not =
exist."</span>
	    working_stop .main.f_flow.l_flow black [.main cget -background]
	    .main.f_flow.l_flow configure -text <span class=3D"hljs-string">"Opera=
tions Flow"</span>
	    <span class=3D"hljs-keyword">close</span> $logFileId
	    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number"=
>0</span>
	}
    }
    working_stop .main.f_flow.l_flow black [.main cget -background]
    .main.f_flow.l_flow configure -text <span class=3D"hljs-string">"Operat=
ions Flow"</span>
    <span class=3D"hljs-keyword">close</span> $logFileId
    updateGUI onAnyCommunicationOn
    devcUpdateDeviceFrame
    <span class=3D"hljs-keyword">set</span> testArray(nonRegress) <span cla=
ss=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> testArray(protocol) <span class=
=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> logFileId [<span class=3D"hljs-=
keyword">open</span> $testArray(logFile) <span class=3D"hljs-string">"r"</s=
pan>]
    <span class=3D"hljs-keyword">while</span> {[<span class=3D"hljs-keyword=
">gets</span> $logFileId line] &gt;=3D <span class=3D"hljs-number">0</span>=
} {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> first <span class=3D"hljs-string">"Total"</span> $line] !=3D <spa=
n class=3D"hljs-number">-1</span>} then {
	    <span class=3D"hljs-keyword">set</span> first [<span class=3D"hljs-key=
word">string</span> wordstart $line end]
	    <span class=3D"hljs-keyword">set</span> nFail [<span class=3D"hljs-key=
word">string</span> range $line $first end]
	    <span class=3D"hljs-keyword">break</span>
	}
    }
    <span class=3D"hljs-keyword">close</span> $logFileId
    <span class=3D"hljs-keyword">if</span> {$nFail =3D=3D <span class=3D"hl=
js-number">0</span>} then {
	<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-string=
">"Tests PASS."</span>
	messageBox <span class=3D"hljs-string">"Tests Information"</span> <span cl=
ass=3D"hljs-keyword">info</span> $message
    } else {
	<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-string=
">"Tests FAIL."</span>
	messageBox <span class=3D"hljs-string">"Tests Information"</span> warning =
$message
    }
    <span class=3D"hljs-keyword">update</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">=
1</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> notImpl=
emented</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> parentWindow [focus]
    tk_messageBox -icon warning -message <span class=3D"hljs-string">"This =
function is not implemented, yet!"</span> -title <span class=3D"hljs-string=
">"Flip message"</span> -type ok -parent $parentWindow
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> existLe=
ading0x</span> {addr} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">if</span> {([<span class=3D"hljs-keyword">=
string</span> first <span class=3D"hljs-string">"0x"</span> $addr] =3D=3D <=
span class=3D"hljs-number">-1</span>) &amp;&amp;([<span class=3D"hljs-keywo=
rd">string</span> first <span class=3D"hljs-string">"0X"</span> $addr] =3D=
=3D <span class=3D"hljs-number">-1</span>)} then {
<span class=3D"hljs-comment">	#dbgEndProc [info level [info level]]</span>
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    } else {
<span class=3D"hljs-comment">	#dbgEndProc [info level [info level]]</span>
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">1</=
span>
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> isValid=
HexaInput</span> {data} {
    <span class=3D"hljs-keyword">if</span> {[existLeading0x $data]} then {
	<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-string=
">"Input is not valid."</span>
	messageBox <span class=3D"hljs-string">"Entry Check"</span> warning $messa=
ge
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    } elseif {! [<span class=3D"hljs-keyword">string</span> is xdigit -stri=
ct $data]} {
	<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-string=
">"Input is not valid."</span>
	messageBox <span class=3D"hljs-string">"Entry Check"</span> warning $messa=
ge
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    } else {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>1</span>
    }
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> isValid=
IntegerInput</span> {data} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">if</span> {! [<span class=3D"hljs-keyword"=
>string</span> is integer -strict $data]} then {
	<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-string=
">"Input is not valid."</span>
	messageBox <span class=3D"hljs-string">"Entry Check"</span> warning $messa=
ge
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    } else {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>1</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> checkFi=
lePathname</span> {path} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">if</span> {$path =3D=3D <span class=3D"hlj=
s-string">""</span>} then {
	<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-string=
">"No file specified."</span>
	messageBox <span class=3D"hljs-string">"Entry Check"</span> warning $messa=
ge
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    } else {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">glob=
</span> -nocomplain [<span class=3D"hljs-keyword">file</span> dirname $path=
]] =3D=3D <span class=3D"hljs-string">""</span>} then {
	    <span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-st=
ring">"Pathname does not exist."</span>
	    messageBox <span class=3D"hljs-string">"Entry Check"</span> warning $m=
essage
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">-1</span>
	} else {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">1</span>
	}
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> startEx=
traTimeOutCounter</span> {timeOut} {
    <span class=3D"hljs-keyword">global</span> extraTimeOutId extraTimeOut
    <span class=3D"hljs-keyword">set</span> extraTimeOut <span class=3D"hlj=
s-number">1</span>
    <span class=3D"hljs-keyword">set</span> extraTimeOutId [<span class=3D"=
hljs-keyword">after</span> $timeOut <span class=3D"hljs-string">"set extraT=
imeOut -1"</span>]
    <span class=3D"hljs-keyword">update</span>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> stopExt=
raTimeOutCounter</span> {} {
    <span class=3D"hljs-keyword">global</span> extraTimeOutId extraTimeOut
    <span class=3D"hljs-keyword">catch</span> [<span class=3D"hljs-keyword"=
>after</span> cancel $extraTimeOutId]
    <span class=3D"hljs-keyword">set</span> extraTimeOut <span class=3D"hlj=
s-number">0</span>
    <span class=3D"hljs-keyword">update</span>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> cbParse=
HexFile</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> buffer progBar
    <span class=3D"hljs-keyword">set</span> progBar(cancel) <span class=3D"=
hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> hexFile [fileOpenGet <span clas=
s=3D"hljs-string">"Open File"</span> <span class=3D"hljs-string">"hex"</spa=
n>]
    <span class=3D"hljs-keyword">if</span> {$hexFile =3D=3D <span class=3D"=
hljs-number">0</span>} then {
<span class=3D"hljs-comment">	#dbgEndProc [info level [info level]]</span>
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">-1<=
/span>
    } else {
	log_message <span class=3D"hljs-string">"HEX file [lindex [file split $hex=
File] end] selected..."</span>
<span class=3D"hljs-comment">	#dbgEndProc [info level [info level]]</span>
	<span class=3D"hljs-keyword">return</span> [parseHexFile $hexFile]
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> extract=
Data</span> {address hexLine maxAddr} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> buffer temp
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> [extractData_C [<span class=
=3D"hljs-keyword">format</span> %d $address] $hexLine [<span class=3D"hljs-=
keyword">format</span> %d $maxAddr]]
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> parseHe=
xFile</span> {hexFile} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> gui progBar loadConfig flipS=
tates
    <span class=3D"hljs-keyword">set</span> flipStates(hexFileName) $hexFil=
e
    <span class=3D"hljs-keyword">set</span> hexFileSize [<span class=3D"hlj=
s-keyword">file</span> size $hexFile]
    <span class=3D"hljs-keyword">set</span> numberOfLines [<span class=3D"h=
ljs-keyword">expr</span> ($hexFileSize / <span class=3D"hljs-number">45</sp=
an>) + <span class=3D"hljs-number">1</span>]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">c=
atch</span> {<span class=3D"hljs-keyword">set</span> hexFileId [<span class=
=3D"hljs-keyword">open</span> $hexFile <span class=3D"hljs-string">"r"</spa=
n>]}]} then {
	<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-string=
">"Cannot open the HEX file."</span>
	messageBox <span class=3D"hljs-string">"Entry Check"</span> <span class=3D=
"hljs-keyword">error</span> $message
	log_message <span class=3D"hljs-string">"HEX file not opened"</span>
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    .f_status.pb configure -percent <span class=3D"hljs-number">0</span> -s=
hape <span class=3D"hljs-number">3</span>D -color blue
    <span class=3D"hljs-keyword">set</span> prevLastLoadMinProgAddr $gui(la=
stLoadMinProgAddr)
    <span class=3D"hljs-keyword">set</span> prevLastLoadMaxProgAddr $gui(la=
stLoadMaxProgAddr)
    <span class=3D"hljs-keyword">set</span> gui(lastLoadMinProgAddr) $gui(m=
axAddr)
    <span class=3D"hljs-keyword">set</span> gui(lastLoadMaxProgAddr) <span =
class=3D"hljs-number">000000</span>
    <span class=3D"hljs-keyword">if</span> {$gui(resetBufferOnLoading) =3D=
=3D <span class=3D"hljs-string">"yes"</span>} then {
	resetBuffer
    }
    <span class=3D"hljs-keyword">set</span> gui(hexFileAddrOffset) <span cl=
ass=3D"hljs-string">"0000"</span>
    <span class=3D"hljs-keyword">set</span> lineIndex <span class=3D"hljs-n=
umber">1</span>
    <span class=3D"hljs-keyword">set</span> percent <span class=3D"hljs-num=
ber">0</span>
    <span class=3D"hljs-keyword">set</span> refPercent <span class=3D"hljs-=
number">5</span>
    <span class=3D"hljs-keyword">set</span> progBar(cancel) <span class=3D"=
hljs-number">0</span>
    log_message <span class=3D"hljs-string">"Loading HEX file [lindex [file=
 split $hexFile] end]..."</span>
    .f_status.pb configure -percent <span class=3D"hljs-number">0</span> -s=
hape <span class=3D"hljs-number">3</span>D -color blue
    bind . &lt;Escape&gt; {<span class=3D"hljs-keyword">set</span> progBar(=
cancel) <span class=3D"hljs-number">1</span>}
    <span class=3D"hljs-keyword">update</span>
    <span class=3D"hljs-keyword">while</span> {([<span class=3D"hljs-keywor=
d">gets</span> $hexFileId hexLine] &gt; <span class=3D"hljs-number">0</span=
>) &amp;&amp;(! $progBar(cancel))} {
	<span class=3D"hljs-keyword">set</span> percent [<span class=3D"hljs-keywo=
rd">expr</span> ($lineIndex * <span class=3D"hljs-number">100</span>) / $nu=
mberOfLines]
	<span class=3D"hljs-keyword">if</span> {$percent &gt;=3D $refPercent} then=
 {
	    .f_status.pb configure -percent $percent
	    <span class=3D"hljs-keyword">incr</span> refPercent +<span class=3D"hl=
js-number">5</span>
	    <span class=3D"hljs-keyword">update</span>
	}
	<span class=3D"hljs-keyword">set</span> recordLength <span class=3D"hljs-n=
umber">0</span>X[<span class=3D"hljs-keyword">string</span> range $hexLine =
<span class=3D"hljs-number">1</span> <span class=3D"hljs-number">2</span>]
	<span class=3D"hljs-keyword">if</span> {$recordLength !=3D <span class=3D"=
hljs-number">0</span>} then {
	    <span class=3D"hljs-keyword">set</span> address <span class=3D"hljs-nu=
mber">0</span>x[<span class=3D"hljs-keyword">string</span> range $hexLine <=
span class=3D"hljs-number">3</span> <span class=3D"hljs-number">6</span>]
	    <span class=3D"hljs-keyword">set</span> address [<span class=3D"hljs-k=
eyword">expr</span> <span class=3D"hljs-number">0</span>x$gui(loadingOffset=
) + $address]
	    <span class=3D"hljs-keyword">if</span> {$address &lt; <span class=3D"h=
ljs-string">"0x$gui(lastLoadMinProgAddr)"</span>} then {
		<span class=3D"hljs-keyword">set</span> gui(lastLoadMinProgAddr) [<span c=
lass=3D"hljs-keyword">format</span> %<span class=3D"hljs-number">06</span>X=
 $address]
	    }
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
expr</span> $address + $recordLength - <span class=3D"hljs-number">1</span>=
] &gt; <span class=3D"hljs-string">"0x$gui(lastLoadMaxProgAddr)"</span>} th=
en {
		<span class=3D"hljs-keyword">set</span> gui(lastLoadMaxProgAddr) [<span c=
lass=3D"hljs-keyword">format</span> %<span class=3D"hljs-number">06</span>X=
 [<span class=3D"hljs-keyword">expr</span> $address + $recordLength - <span=
 class=3D"hljs-number">1</span>]]
	    }
	    <span class=3D"hljs-keyword">set</span> addressError [extractData $add=
ress $hexLine <span class=3D"hljs-string">"0x$gui(maxAddr)"</span>]
	    <span class=3D"hljs-keyword">if</span> {$addressError &gt;=3D <span cl=
ass=3D"hljs-number">1</span>} then {
		<span class=3D"hljs-keyword">break</span>
	    }
	    <span class=3D"hljs-keyword">incr</span> lineIndex
	} else {
	    <span class=3D"hljs-keyword">if</span> {$hexLine =3D=3D <span class=3D=
"hljs-string">":00000001FF"</span>} then {
		<span class=3D"hljs-keyword">break</span>
	    }
	}
    }
    <span class=3D"hljs-keyword">close</span> $hexFileId
    cmdsResetProgressBar
    <span class=3D"hljs-keyword">if</span> {$progBar(cancel) =3D=3D <span c=
lass=3D"hljs-number">1</span>} then {
	log_message <span class=3D"hljs-string">"HEX file [lindex [file split $hex=
File] end] loading canceled"</span>
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    } elseif {$addressError =3D=3D <span class=3D"hljs-number">1</span>} {
	log_message <span class=3D"hljs-string">"Buffer Overflow"</span>
	<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-string=
">"Address error. Buffer overflow."</span>
	messageBox <span class=3D"hljs-string">"Buffer Check"</span> <span class=
=3D"hljs-keyword">error</span> $message
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    } elseif {$addressError =3D=3D <span class=3D"hljs-number">2</span>} {
	log_message <span class=3D"hljs-string">"HEX file checksum error at line $=
lineIndex."</span>
	<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-string=
">"HEX file checksum error."</span>
	messageBox <span class=3D"hljs-string">"Information"</span> <span class=3D=
"hljs-keyword">error</span> $message
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    } else {
	writeBuffer lastLoadMinProgAddr $gui(lastLoadMinProgAddr)
	writeBuffer lastLoadMaxProgAddr $gui(lastLoadMaxProgAddr)
	<span class=3D"hljs-keyword">if</span> {[readBuffer rangeOnDeviceProg] =3D=
=3D <span class=3D"hljs-string">"lastLoad"</span>} then {
	    writeBuffer minProgAddr $gui(lastLoadMinProgAddr)
	    writeBuffer maxProgAddr $gui(lastLoadMaxProgAddr)
	}
	log_message <span class=3D"hljs-string">"HEX file [lindex [file split $hex=
File] end] loading done"</span>
	actionsLog_message <span class=3D"hljs-string">"HEX file [lindex [file spl=
it $hexFile] end] loading done"</span>
	<span class=3D"hljs-keyword">set</span> gui(fileLoaded) <span class=3D"hlj=
s-string">"yes"</span>
	<span class=3D"hljs-keyword">set</span> flipStates(hexFileMtime) [<span cl=
ass=3D"hljs-keyword">file</span> mtime $hexFile]
<span class=3D"hljs-comment">	#dbgShowVar "flipStates(hexFileMtime) =3D $fl=
ipStates(hexFileMtime)"</span>
	<span class=3D"hljs-keyword">set</span> loadConfig(parseHex) <span class=
=3D"hljs-string">"parseHexFile \"$hexFile\""</span>
	writeBuffer hexFileName [<span class=3D"hljs-keyword">file</span> tail $he=
xFile]
	writeBuffer hexFileSize [displayHexFileSize $gui(lastLoadMinProgAddr) $gui=
(lastLoadMaxProgAddr)]
	updateGuiParameters
	<span class=3D"hljs-keyword">if</span> (<span class=3D"hljs-number">0</spa=
n>) then {
	    .main.f_buffer.f_hexFile.l_fileS configure -text [displayHexFileSize $=
gui(lastLoadMinProgAddr) $gui(lastLoadMaxProgAddr)] -fg blue
	}
<span class=3D"hljs-comment">	#dbgEndProc [info level [info level]]</span>
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>1</span>
	<span class=3D"hljs-keyword">set</span> flipStates(bufferInInitialState) <=
span class=3D"hljs-number">0</span>
    }
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> cmdsLoa=
dConfig</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> cfgFile [fileOpenGet <span clas=
s=3D"hljs-string">"Open Configuration File"</span> <span class=3D"hljs-stri=
ng">"cfg"</span>]
    <span class=3D"hljs-keyword">if</span> {$cfgFile =3D=3D <span class=3D"=
hljs-number">0</span>} then {
<span class=3D"hljs-comment">	#dbgEndProc [info level [info level]]</span>
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">-1<=
/span>
    } else {
	parseConfigFile $cfgFile
<span class=3D"hljs-comment">	#dbgEndProc [info level [info level]]</span>
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">1</=
span>
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> runLast=
LoadedConfigFile</span> {} {
    <span class=3D"hljs-keyword">global</span> flipStates
    parseConfigFile $flipStates(lastloadedCfgFile) execute
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> cbSaveC=
onfig</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> env initialDir
    <span class=3D"hljs-keyword">set</span> cfgFile [fileSaveGet <span clas=
s=3D"hljs-string">"Save Configuration File"</span> <span class=3D"hljs-stri=
ng">"cfg"</span>]
    <span class=3D"hljs-keyword">if</span> {($cfgFile =3D=3D <span class=3D=
"hljs-number">0</span>) ||($cfgFile =3D=3D <span class=3D"hljs-string">""</=
span>)} then {
<span class=3D"hljs-comment">	#dbgEndProc [info level [info level]]</span>
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">-1<=
/span>
    } else {
<span class=3D"hljs-comment">	#dbgEndProc [info level [info level]]</span>
	<span class=3D"hljs-keyword">return</span> [openCfgFile $cfgFile]
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> openCfg=
File</span> f {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> configFileId [<span class=3D"hl=
js-keyword">open</span> $f <span class=3D"hljs-string">"w"</span>]
    writeActionsToCfgFile $configFileId
    <span class=3D"hljs-keyword">close</span> $configFileId
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> writeAc=
tionsToCfgFile</span> cfgFile {
    <span class=3D"hljs-keyword">global</span> loadConfig
    <span class=3D"hljs-keyword">set</span> operationValid <span class=3D"h=
ljs-number">0</span>
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(name)]} then {
	<span class=3D"hljs-keyword">puts</span> $cfgFile <span class=3D"hljs-stri=
ng">"selectDevice $::deviceArray(name)"</span>
    }
    <span class=3D"hljs-keyword">if</span> {$loadConfig(port) !=3D <span cl=
ass=3D"hljs-string">""</span>} then {
	<span class=3D"hljs-keyword">puts</span> $cfgFile $loadConfig(port)
    }
    <span class=3D"hljs-keyword">if</span> {$loadConfig(baud) !=3D <span cl=
ass=3D"hljs-string">""</span>} then {
	<span class=3D"hljs-keyword">puts</span> $cfgFile $loadConfig(baud)
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists loadConfig(protocol)]} then {
	<span class=3D"hljs-keyword">if</span> {$loadConfig(protocol) !=3D <span c=
lass=3D"hljs-string">""</span>} then {
	    <span class=3D"hljs-keyword">puts</span> $cfgFile $loadConfig(protocol=
)
	}
    }
    <span class=3D"hljs-keyword">if</span> {$loadConfig(initComm) !=3D <spa=
n class=3D"hljs-string">""</span>} then {
	<span class=3D"hljs-keyword">puts</span> $cfgFile $loadConfig(initComm)
    }
    <span class=3D"hljs-keyword">if</span> {$loadConfig(parseHex) !=3D <spa=
n class=3D"hljs-string">""</span>} then {
	<span class=3D"hljs-keyword">puts</span> $cfgFile $loadConfig(parseHex)
	<span class=3D"hljs-keyword">set</span> operationValid <span class=3D"hljs=
-number">1</span>
<span class=3D"hljs-comment">	#dbgShowInfo "operationValid set by parseHex"=
</span>
    }
    <span class=3D"hljs-keyword">if</span> {$loadConfig(fullChipErase) !=3D=
 <span class=3D"hljs-string">""</span>} then {
	<span class=3D"hljs-keyword">puts</span> $cfgFile $loadConfig(fullChipEras=
e)
	<span class=3D"hljs-keyword">set</span> operationValid <span class=3D"hljs=
-number">1</span>
<span class=3D"hljs-comment">	#dbgShowInfo "operationValid set by fullChipE=
rase"</span>
    }
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">0</span>} {$i &lt;=3D<span class=3D=
"hljs-number">4</span>} {<span class=3D"hljs-keyword">incr</span> i} {
	<span class=3D"hljs-keyword">if</span> {$loadConfig(eraseBlock$i) !=3D <sp=
an class=3D"hljs-string">""</span>} then {
	    <span class=3D"hljs-keyword">puts</span> $cfgFile $loadConfig(eraseBlo=
ck$i)
	    <span class=3D"hljs-keyword">set</span> operationValid <span class=3D"=
hljs-number">1</span>
<span class=3D"hljs-comment">	    #dbgShowInfo "operationValid set by erase=
Block$i"</span>
	}
    }
    <span class=3D"hljs-keyword">if</span> {$loadConfig(blankCheck) !=3D <s=
pan class=3D"hljs-string">""</span>} then {
	<span class=3D"hljs-keyword">puts</span> $cfgFile $loadConfig(blankCheck)
	<span class=3D"hljs-keyword">set</span> operationValid <span class=3D"hljs=
-number">1</span>
<span class=3D"hljs-comment">	#dbgShowInfo "operationValid set by blankChec=
k"</span>
    }
    <span class=3D"hljs-keyword">if</span> {$loadConfig(blankCheckStart) !=
=3D <span class=3D"hljs-string">""</span>} then {
	<span class=3D"hljs-keyword">puts</span> $cfgFile $loadConfig(blankCheckSt=
art)
    }
    <span class=3D"hljs-keyword">if</span> {$loadConfig(blankCheckEnd) !=3D=
 <span class=3D"hljs-string">""</span>} then {
	<span class=3D"hljs-keyword">puts</span> $cfgFile $loadConfig(blankCheckEn=
d)
    }
    <span class=3D"hljs-keyword">if</span> {$loadConfig(programDevice) !=3D=
 <span class=3D"hljs-string">""</span>} then {
	<span class=3D"hljs-keyword">puts</span> $cfgFile $loadConfig(programDevic=
e)
	<span class=3D"hljs-keyword">set</span> operationValid <span class=3D"hljs=
-number">1</span>
<span class=3D"hljs-comment">	#dbgShowInfo "operationValid set by programDe=
vice"</span>
    }
    <span class=3D"hljs-keyword">if</span> {$loadConfig(verifyDevice) !=3D =
<span class=3D"hljs-string">""</span>} then {
	<span class=3D"hljs-keyword">puts</span> $cfgFile $loadConfig(verifyDevice=
)
	<span class=3D"hljs-keyword">set</span> operationValid <span class=3D"hljs=
-number">1</span>
<span class=3D"hljs-comment">	#dbgShowInfo "operationValid set by verifyDev=
ice"</span>
    }
    <span class=3D"hljs-keyword">if</span> {$loadConfig(setSbv) !=3D <span =
class=3D"hljs-string">""</span>} then {
	<span class=3D"hljs-keyword">puts</span> $cfgFile $loadConfig(setSbv)
	<span class=3D"hljs-keyword">set</span> operationValid <span class=3D"hljs=
-number">1</span>
<span class=3D"hljs-comment">	#dbgShowInfo "operationValid set by setSbv"</=
span>
    }
    <span class=3D"hljs-keyword">if</span> {$loadConfig(setBsb) !=3D <span =
class=3D"hljs-string">""</span>} then {
	<span class=3D"hljs-keyword">puts</span> $cfgFile $loadConfig(setBsb)
	<span class=3D"hljs-keyword">set</span> operationValid <span class=3D"hljs=
-number">1</span>
<span class=3D"hljs-comment">	#dbgShowInfo "operationValid set by setBsb"</=
span>
    }
    <span class=3D"hljs-keyword">if</span> {$loadConfig(setOscFuse) !=3D <s=
pan class=3D"hljs-string">""</span>} then {
	<span class=3D"hljs-keyword">puts</span> $cfgFile $loadConfig(setOscFuse)
	<span class=3D"hljs-keyword">set</span> operationValid <span class=3D"hljs=
-number">1</span>
<span class=3D"hljs-comment">	#dbgShowInfo "operationValid set by setOscFus=
e"</span>
    }
    <span class=3D"hljs-keyword">if</span> {$loadConfig(setBljbFuse) !=3D <=
span class=3D"hljs-string">""</span>} then {
	<span class=3D"hljs-keyword">puts</span> $cfgFile $loadConfig(setBljbFuse)
	<span class=3D"hljs-keyword">set</span> operationValid <span class=3D"hljs=
-number">1</span>
<span class=3D"hljs-comment">	#dbgShowInfo "operationValid set by setBljbFu=
se"</span>
    }
    <span class=3D"hljs-keyword">if</span> {$loadConfig(setX2Fuse) !=3D <sp=
an class=3D"hljs-string">""</span>} then {
	<span class=3D"hljs-keyword">puts</span> $cfgFile $loadConfig(setX2Fuse)
	<span class=3D"hljs-keyword">set</span> operationValid <span class=3D"hljs=
-number">1</span>
<span class=3D"hljs-comment">	#dbgShowInfo "operationValid set by setX2Fuse=
"</span>
    }
    <span class=3D"hljs-keyword">if</span> {$loadConfig(setSsb) !=3D <span =
class=3D"hljs-string">""</span>} then {
	<span class=3D"hljs-keyword">puts</span> $cfgFile $loadConfig(setSsb)
	<span class=3D"hljs-keyword">set</span> operationValid <span class=3D"hljs=
-number">1</span>
<span class=3D"hljs-comment">	#dbgShowInfo "operationValid set by setSsb"</=
span>
    }
    <span class=3D"hljs-keyword">if</span> {$operationValid} then {
    }
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> createC=
onfigFile</span> {{f <span class=3D"hljs-string">"deflt"</span>}} {
    <span class=3D"hljs-keyword">global</span> workingDir loadConfig env
    <span class=3D"hljs-keyword">if</span> {([<span class=3D"hljs-keyword">=
info</span> exists ::deviceArray(name)]) &amp;&amp;($::deviceArray(name) !=
=3D <span class=3D"hljs-string">"dummy"</span>)} then {
	<span class=3D"hljs-keyword">if</span> {$f =3D=3D <span class=3D"hljs-stri=
ng">"deflt"</span>} then {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
file</span> writable $workingDir]} then {
		<span class=3D"hljs-keyword">set</span> configFileId [<span class=3D"hljs=
-keyword">open</span> $workingDir/flip.cfg <span class=3D"hljs-string">"w"<=
/span>]
	    } else {
		<span class=3D"hljs-keyword">set</span> parentWindow [focus]
		tk_messageBox -icon warning -message <span class=3D"hljs-string">"No writ=
e permission to \n $workingDir"</span> -title <span class=3D"hljs-string">"=
Configuration File"</span> -type ok -parent $parentWindow
	    }
	} else {
	    <span class=3D"hljs-keyword">set</span> path [<span class=3D"hljs-keyw=
ord">file</span> dirname $f]
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
file</span> writable $path]} then {
		<span class=3D"hljs-keyword">set</span> configFileId [<span class=3D"hljs=
-keyword">open</span> $f <span class=3D"hljs-string">"w"</span>]
	    } else {
		<span class=3D"hljs-keyword">set</span> parentWindow [focus]
		tk_messageBox -icon warning -message <span class=3D"hljs-string">"No writ=
e permission to \n $path"</span> -title <span class=3D"hljs-string">"Config=
uration File"</span> -type ok -parent $parentWindow
	    }
	}
	writeActionsToCfgFile $configFileId
	<span class=3D"hljs-keyword">close</span> $configFileId
    }
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> setupFu=
llEraseDevice</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> gui
    <span class=3D"hljs-keyword">set</span> gui(flowErase) <span class=3D"h=
ljs-number">1</span>
    writeBuffer flowErase <span class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> gui(eraseType) <span class=3D"h=
ljs-string">"full"</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> setupEr=
aseBlock0</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> gui
    <span class=3D"hljs-keyword">set</span> gui(flowErase) <span class=3D"h=
ljs-number">1</span>
    writeBuffer flowErase <span class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> gui(eraseType) <span class=3D"h=
ljs-string">"blocks"</span>
    <span class=3D"hljs-keyword">set</span> gui(eraseBlock0) <span class=3D=
"hljs-number">1</span>
    writeBuffer eraseBlock0 <span class=3D"hljs-number">1</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> setupEr=
aseBlock1</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> gui
    <span class=3D"hljs-keyword">set</span> gui(flowErase) <span class=3D"h=
ljs-number">1</span>
    writeBuffer flowErase <span class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> gui(eraseType) <span class=3D"h=
ljs-string">"blocks"</span>
    <span class=3D"hljs-keyword">set</span> gui(eraseBlock1) <span class=3D=
"hljs-number">1</span>
    writeBuffer eraseBlock1 <span class=3D"hljs-number">1</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> setupEr=
aseBlock2</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> gui
    <span class=3D"hljs-keyword">set</span> gui(flowErase) <span class=3D"h=
ljs-number">1</span>
    writeBuffer flowErase <span class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> gui(eraseType) <span class=3D"h=
ljs-string">"blocks"</span>
    <span class=3D"hljs-keyword">set</span> gui(eraseBlock2) <span class=3D=
"hljs-number">1</span>
    writeBuffer eraseBlock2 <span class=3D"hljs-number">1</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> setupEr=
aseBlock3</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> gui
    <span class=3D"hljs-keyword">set</span> gui(flowErase) <span class=3D"h=
ljs-number">1</span>
    writeBuffer flowErase <span class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> gui(eraseType) <span class=3D"h=
ljs-string">"blocks"</span>
    <span class=3D"hljs-keyword">set</span> gui(eraseBlock3) <span class=3D=
"hljs-number">1</span>
    writeBuffer eraseBlock3 <span class=3D"hljs-number">1</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> setupEr=
aseBlock4</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> gui
    <span class=3D"hljs-keyword">set</span> gui(flowErase) <span class=3D"h=
ljs-number">1</span>
    writeBuffer flowErase <span class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> gui(eraseType) <span class=3D"h=
ljs-string">"blocks"</span>
    <span class=3D"hljs-keyword">set</span> gui(eraseBlock4) <span class=3D=
"hljs-number">1</span>
    writeBuffer eraseBlock4 <span class=3D"hljs-number">1</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> setupBl=
ankCheckDevice</span> {} {
    <span class=3D"hljs-keyword">global</span> gui
    <span class=3D"hljs-keyword">set</span> gui(flowBlankCheck) <span class=
=3D"hljs-number">1</span>
    writeBuffer flowBlankCheck <span class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> setupPr=
ogramDevice</span> {} {
    <span class=3D"hljs-keyword">global</span> gui
    <span class=3D"hljs-keyword">set</span> gui(flowProgram) <span class=3D=
"hljs-number">1</span>
    writeBuffer flowProgram <span class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> setupVe=
rifyDevice</span> {} {
    <span class=3D"hljs-keyword">global</span> gui
    <span class=3D"hljs-keyword">set</span> gui(flowVerify) <span class=3D"=
hljs-number">1</span>
    writeBuffer flowVerify <span class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> setupSt=
artAppli</span> {reset} {
    <span class=3D"hljs-keyword">global</span> gui
    <span class=3D"hljs-keyword">set</span> gui(flowStartAppli) <span class=
=3D"hljs-number">1</span>
    writeBuffer flowStartAppli <span class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> gui(flowWithReset) $reset
    writeBuffer flowWithReset $reset
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> setupSB=
V</span> {sbvValue} {
    <span class=3D"hljs-keyword">global</span> gui
    <span class=3D"hljs-keyword">set</span> gui(flowSpecialBytes) <span cla=
ss=3D"hljs-number">1</span>
    writeBuffer flowSpecialBytes <span class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(sbv) $sbvValue
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> setupBS=
B</span> {bsbValue} {
    <span class=3D"hljs-keyword">global</span> gui
    <span class=3D"hljs-keyword">set</span> gui(flowSpecialBytes) <span cla=
ss=3D"hljs-number">1</span>
    writeBuffer flowSpecialBytes <span class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(bsb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(bsb) $bsbValue
    }
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> setupOs=
cFuse</span> {oscFuseValue} {
    <span class=3D"hljs-keyword">global</span> gui
    <span class=3D"hljs-keyword">set</span> gui(flowSpecialBytes) <span cla=
ss=3D"hljs-number">1</span>
    writeBuffer flowSpecialBytes <span class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(oscFuse) $oscFuse=
Value
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> setupBl=
jbFuse</span> {bljbFuseValue} {
    <span class=3D"hljs-keyword">global</span> gui
    <span class=3D"hljs-keyword">set</span> gui(flowSpecialBytes) <span cla=
ss=3D"hljs-number">1</span>
    writeBuffer flowSpecialBytes <span class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(bljbFuse) $bljbFu=
seValue
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> setupX2=
Fuse</span> {x2FuseValue} {
    <span class=3D"hljs-keyword">global</span> gui
    <span class=3D"hljs-keyword">set</span> gui(flowSpecialBytes) <span cla=
ss=3D"hljs-number">1</span>
    writeBuffer flowSpecialBytes <span class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(x2Fuse) $x2FuseVa=
lue
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> setupSe=
curityLevel</span> {sLevel} {
    <span class=3D"hljs-keyword">global</span> gui
    <span class=3D"hljs-keyword">set</span> gui(flowSpecialBytes) <span cla=
ss=3D"hljs-number">1</span>
    writeBuffer flowSpecialBytes <span class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(level) $sLevel
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> cbWrite=
HexFile</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> gui progBar
    <span class=3D"hljs-keyword">set</span> progBar(cancel) <span class=3D"=
hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> hexFile [fileSaveGet <span clas=
s=3D"hljs-string">"Save File"</span> <span class=3D"hljs-string">"hex"</spa=
n>]
    <span class=3D"hljs-keyword">if</span> {($hexFile =3D=3D <span class=3D=
"hljs-number">0</span>) ||($hexFile =3D=3D <span class=3D"hljs-string">""</=
span>)} then {
<span class=3D"hljs-comment">	#dbgEndProc [info level [info level]]</span>
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">-1<=
/span>
    } else {
	log_message <span class=3D"hljs-string">"HEX file [lindex [file split $hex=
File] end] selected..."</span>
<span class=3D"hljs-comment">	#dbgEndProc [info level [info level]]</span>
	<span class=3D"hljs-keyword">return</span> [writeHexFile $hexFile]
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> writeHe=
xFile</span> {hexFile} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> gui progBar
    <span class=3D"hljs-keyword">set</span> hexFileId [<span class=3D"hljs-=
keyword">open</span> $hexFile <span class=3D"hljs-string">"w"</span>]
    <span class=3D"hljs-keyword">set</span> addrLo [<span class=3D"hljs-key=
word">format</span> %<span class=3D"hljs-number">06</span>X <span class=3D"=
hljs-number">0</span>x$gui(minProgAddr)]
    <span class=3D"hljs-keyword">set</span> addrHi [<span class=3D"hljs-key=
word">format</span> %<span class=3D"hljs-number">06</span>X <span class=3D"=
hljs-number">0</span>x$gui(maxProgAddr)]
    <span class=3D"hljs-keyword">set</span> nbData [<span class=3D"hljs-key=
word">expr</span> <span class=3D"hljs-number">0</span>x$addrHi - <span clas=
s=3D"hljs-number">0</span>x$addrLo + <span class=3D"hljs-number">1</span>]
    <span class=3D"hljs-keyword">set</span> nbFullLines [<span class=3D"hlj=
s-keyword">expr</span> $nbData / <span class=3D"hljs-number">16</span>]
    <span class=3D"hljs-keyword">if</span> {$nbFullLines !=3D <span class=
=3D"hljs-number">0</span>} then {
	<span class=3D"hljs-keyword">set</span> lineIndex <span class=3D"hljs-numb=
er">1</span>
	<span class=3D"hljs-keyword">set</span> percent <span class=3D"hljs-number=
">0</span>
	<span class=3D"hljs-keyword">set</span> refPercent <span class=3D"hljs-num=
ber">5</span>
	<span class=3D"hljs-keyword">set</span> progBar(cancel) <span class=3D"hlj=
s-number">0</span>
	log_message <span class=3D"hljs-string">"Writing HEX file [lindex [file sp=
lit $hexFile] end]..."</span>
	.f_status.pb configure -percent <span class=3D"hljs-number">0</span> -shap=
e <span class=3D"hljs-number">3</span>D -color blue
	bind . &lt;Escape&gt; {<span class=3D"hljs-keyword">set</span> progBar(can=
cel) <span class=3D"hljs-number">1</span>}
	<span class=3D"hljs-keyword">update</span>
	<span class=3D"hljs-keyword">while</span> {($lineIndex &lt;=3D $nbFullLine=
s) &amp;&amp;(! $progBar(cancel))} {
	    <span class=3D"hljs-keyword">set</span> percent [<span class=3D"hljs-k=
eyword">expr</span> ($lineIndex * <span class=3D"hljs-number">100</span>) /=
 $nbFullLines]
	    <span class=3D"hljs-keyword">if</span> {$percent &gt;=3D $refPercent} =
then {
		.f_status.pb configure -percent $percent
		<span class=3D"hljs-keyword">incr</span> refPercent +<span class=3D"hljs-=
number">5</span>
		<span class=3D"hljs-keyword">update</span>
	    }
	    <span class=3D"hljs-keyword">set</span> addrHi [<span class=3D"hljs-ke=
yword">format</span> %<span class=3D"hljs-number">06</span>X [<span class=
=3D"hljs-keyword">expr</span> <span class=3D"hljs-number">0</span>x$addrLo =
+ <span class=3D"hljs-number">15</span>]]
	    <span class=3D"hljs-keyword">puts</span> $hexFileId [buildIntelFrame <=
span class=3D"hljs-number">0</span>x$addrLo <span class=3D"hljs-number">0</=
span>x$addrHi]
	    <span class=3D"hljs-keyword">set</span> addrLo [<span class=3D"hljs-ke=
yword">format</span> %<span class=3D"hljs-number">06</span>X [<span class=
=3D"hljs-keyword">expr</span> <span class=3D"hljs-number">0</span>x$addrHi =
+ <span class=3D"hljs-number">1</span>]]
	    <span class=3D"hljs-keyword">incr</span> lineIndex
	}
    }
    cmdsResetProgressBar
    <span class=3D"hljs-keyword">if</span> {! $progBar(cancel)} then {
	<span class=3D"hljs-keyword">if</span> {$addrLo &lt;=3D [<span class=3D"hl=
js-keyword">format</span> %<span class=3D"hljs-number">06</span>X <span cla=
ss=3D"hljs-number">0</span>x$gui(maxProgAddr)]} then {
	    <span class=3D"hljs-keyword">set</span> addrHi [<span class=3D"hljs-ke=
yword">format</span> %<span class=3D"hljs-number">06</span>X <span class=3D=
"hljs-number">0</span>x$gui(maxProgAddr)]
	    <span class=3D"hljs-keyword">puts</span> $hexFileId [buildIntelFrame <=
span class=3D"hljs-number">0</span>x$addrLo <span class=3D"hljs-number">0</=
span>x$addrHi]
	}
	<span class=3D"hljs-keyword">set</span> hexLine <span class=3D"hljs-string=
">":00000001FF"</span>
	<span class=3D"hljs-keyword">puts</span> $hexFileId $hexLine
	<span class=3D"hljs-keyword">close</span> $hexFileId
	log_message <span class=3D"hljs-string">"HEX file [lindex [file split $hex=
File] end] written"</span>
	actionsLog_message <span class=3D"hljs-string">"HEX file [lindex [file spl=
it $hexFile] end] written"</span>
    } else {
	<span class=3D"hljs-keyword">close</span> $hexFileId
	<span class=3D"hljs-keyword">file</span> delete $hexFile
	log_message <span class=3D"hljs-string">"HEX file [lindex [file split $hex=
File] end] deleted"</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">=
1</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> checkSu=
m</span> {argsList} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> sum <span class=3D"hljs-number"=
>0x00</span>
    <span class=3D"hljs-keyword">foreach</span> i $argsList {
	<span class=3D"hljs-keyword">set</span> sum [<span class=3D"hljs-keyword">=
format</span> <span class=3D"hljs-string">"%#04X"</span> [<span class=3D"hl=
js-keyword">expr</span> $sum + <span class=3D"hljs-number">0</span>x$i]]
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keyword=
">format</span> %<span class=3D"hljs-number">02</span>X [<span class=3D"hlj=
s-keyword">expr</span> [<span class=3D"hljs-keyword">format</span> <span cl=
ass=3D"hljs-string">"%#04X"</span> [<span class=3D"hljs-keyword">expr</span=
> ~$sum + <span class=3D"hljs-number">0x01</span>]] &amp; <span class=3D"hl=
js-number">0xFF</span>]]
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> buildIn=
telFrame</span> {addrLo addrHi} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> recLen [<span class=3D"hljs-key=
word">format</span> <span class=3D"hljs-string">"%02X"</span> [<span class=
=3D"hljs-keyword">expr</span> $addrHi - $addrLo + <span class=3D"hljs-numbe=
r">1</span>]]
    <span class=3D"hljs-keyword">set</span> address [<span class=3D"hljs-ke=
yword">format</span> <span class=3D"hljs-string">"%04X"</span> $addrLo]
    <span class=3D"hljs-keyword">set</span> recType <span class=3D"hljs-str=
ing">"00"</span>
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> addr $addrLo} {$addr &lt;=3D $addrHi} {<span class=3D"hljs-keywor=
d">incr</span> addr} {
	<span class=3D"hljs-keyword">set</span> dataList [<span class=3D"hljs-keyw=
ord">lappend</span> dataList [readBuffer [<span class=3D"hljs-keyword">form=
at</span> %<span class=3D"hljs-number">06</span>X $addr]]]
    }
    <span class=3D"hljs-keyword">set</span> hexLine [<span class=3D"hljs-ke=
yword">join</span> $dataList <span class=3D"hljs-string">""</span>]
    <span class=3D"hljs-keyword">set</span> hexLine [<span class=3D"hljs-ke=
yword">append</span> hexLine [checkSum [<span class=3D"hljs-keyword">concat=
</span> $recLen [<span class=3D"hljs-keyword">string</span> range $address =
<span class=3D"hljs-number">0</span> <span class=3D"hljs-number">1</span>] =
[<span class=3D"hljs-keyword">string</span> range $address <span class=3D"h=
ljs-number">2</span> <span class=3D"hljs-number">3</span>] $recType $dataLi=
st]]]
    <span class=3D"hljs-keyword">set</span> hexLine [<span class=3D"hljs-ke=
yword">join</span> [<span class=3D"hljs-keyword">linsert</span> $hexLine <s=
pan class=3D"hljs-number">0</span> <span class=3D"hljs-string">":"</span> $=
recLen $address $recType] <span class=3D"hljs-string">""</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $hexLine
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> cmdsRea=
dAddrRange</span> {{addrLo <span class=3D"hljs-string">"000000"</span>} {ad=
drHi $gui(maxAddr)}} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> gui progBar deviceArray test=
Array flipStates
    <span class=3D"hljs-keyword">set</span> addrLo [<span class=3D"hljs-key=
word">subst</span> $addrLo]
    <span class=3D"hljs-keyword">set</span> addrHi [<span class=3D"hljs-key=
word">subst</span> $addrHi]
    <span class=3D"hljs-keyword">set</span> addrLo [cmdsZeroxPrefix $addrLo=
]
    <span class=3D"hljs-keyword">set</span> addrHi [cmdsZeroxPrefix $addrHi=
]
    .f_status.pb configure -percent <span class=3D"hljs-number">0</span> -s=
hape <span class=3D"hljs-number">3</span>D -color blue
    clearStatusMessage
    <span class=3D"hljs-keyword">set</span> numberOfBlocks [<span class=3D"=
hljs-keyword">expr</span> (($addrHi - $addrLo) / $flipStates(readBlockSize)=
) + <span class=3D"hljs-number">1</span>]
    <span class=3D"hljs-keyword">set</span> progBar(cancel) <span class=3D"=
hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> percent <span class=3D"hljs-num=
ber">0</span>
    <span class=3D"hljs-keyword">set</span> refPercent <span class=3D"hljs-=
number">5</span>
    <span class=3D"hljs-keyword">if</span> {! $testArray(protocol)} then {
	log_message <span class=3D"hljs-string">"Reading $::deviceArray(name) memo=
ry..."</span>
    }
    .f_status.pb configure -percent <span class=3D"hljs-number">0</span> -s=
hape <span class=3D"hljs-number">3</span>D -color blue
    bind . &lt;Escape&gt; {<span class=3D"hljs-keyword">set</span> progBar(=
cancel) <span class=3D"hljs-number">1</span>}
    <span class=3D"hljs-keyword">if</span> {[winfo exists .deviceReadDBox]}=
 then {
	bind .deviceReadDBox &lt;Escape&gt; {<span class=3D"hljs-keyword">set</spa=
n> progBar(cancel) <span class=3D"hljs-number">1</span>}
    }
    <span class=3D"hljs-keyword">update</span>
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">set</span> blockIndex <span class=3D"hljs-=
number">0</span>
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> addr $addrLo} {$addr &lt;=3D $addrHi} {<span class=3D"hljs-keywor=
d">set</span> addr [<span class=3D"hljs-keyword">expr</span> $addr + $flipS=
tates(readBlockSize)]; <span class=3D"hljs-keyword">incr</span> blockIndex}=
 {
	<span class=3D"hljs-keyword">set</span> percent [<span class=3D"hljs-keywo=
rd">expr</span> ($blockIndex * <span class=3D"hljs-number">100</span>) / $n=
umberOfBlocks]
	<span class=3D"hljs-keyword">if</span> {$percent &gt;=3D $refPercent} then=
 {
	    .f_status.pb configure -percent $percent
	    <span class=3D"hljs-keyword">incr</span> refPercent +<span class=3D"hl=
js-number">5</span>
	    <span class=3D"hljs-keyword">update</span>
	}
	<span class=3D"hljs-keyword">set</span> hiBound [<span class=3D"hljs-keywo=
rd">expr</span> $addr + $flipStates(readBlockSize) - <span class=3D"hljs-nu=
mber">0x1</span>]
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">expr=
</span> $hiBound &gt;=3D $addrHi]} then {
	    <span class=3D"hljs-keyword">set</span> status [ptclReadBlock [<span c=
lass=3D"hljs-keyword">format</span> <span class=3D"hljs-string">"%#04X"</sp=
an> $addr] [<span class=3D"hljs-keyword">format</span> <span class=3D"hljs-=
string">"%#04X"</span> $addrHi] [readDeviceArray displayData]]
	    <span class=3D"hljs-keyword">break</span>
	} else {
	    <span class=3D"hljs-keyword">set</span> status [ptclReadBlock [<span c=
lass=3D"hljs-keyword">format</span> <span class=3D"hljs-string">"%#04X"</sp=
an> $addr] [<span class=3D"hljs-keyword">format</span> <span class=3D"hljs-=
string">"%#04X"</span> $hiBound] [readDeviceArray displayData]]
	}
	<span class=3D"hljs-keyword">if</span> {! $status} then {
	    <span class=3D"hljs-keyword">break</span>
	} elseif {$progBar(cancel)} {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	    log_message <span class=3D"hljs-string">"Device verification canceled.=
"</span>
	    <span class=3D"hljs-keyword">break</span>
	}
    }
    cmdsResetProgressBar
    <span class=3D"hljs-keyword">if</span> {[winfo exists .deviceReadDBox]}=
 then {
	bind .deviceReadDBox &lt;Escape&gt; {}
    }
    <span class=3D"hljs-keyword">update</span>
    <span class=3D"hljs-keyword">if</span> {! $testArray(protocol)} then {
	<span class=3D"hljs-keyword">if</span> {$status} then {
	    log_message <span class=3D"hljs-string">"$::deviceArray(name) memory r=
eading pass"</span>
	} else {
	    log_message <span class=3D"hljs-string">"$::deviceArray(name) memory r=
eading aborted"</span>
	}
    }
    <span class=3D"hljs-keyword">set</span> flipStates(bufferInInitialState=
) <span class=3D"hljs-number">0</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> cmdsDev=
iceErase</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> loadConfig gui testArray
    updateGUI onDeviceActionStart
    <span class=3D"hljs-keyword">if</span> {$gui(eraseType) =3D=3D <span cl=
ass=3D"hljs-string">"full"</span>} then {
	<span class=3D"hljs-keyword">set</span> loadConfig(fullChipErase) <span cl=
ass=3D"hljs-string">"setupFullEraseDevice"</span>
	<span class=3D"hljs-keyword">if</span> {! $testArray(protocol)} then {
	    log_message <span class=3D"hljs-string">"Erasing the device..."</span>
	}
	<span class=3D"hljs-keyword">set</span> status [ptclFullChipErase]
	<span class=3D"hljs-keyword">if</span> {$status} then {
	    <span class=3D"hljs-keyword">if</span> {! $testArray(protocol)} then {
		log_message <span class=3D"hljs-string">"Full Chip Erase done"</span>
	    }
	    actionsLog_message <span class=3D"hljs-string">"Full Chip Erase done"<=
/span>
	    devcUpdateDeviceFrame
	} else {
	    <span class=3D"hljs-keyword">if</span> {! $testArray(protocol)} then {
		log_message <span class=3D"hljs-string">"Full Chip Erase fail"</span>
	    }
	}
    } else {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>1</span>
	<span class=3D"hljs-keyword">if</span> {!$gui(eraseBlock0) &amp;&amp; !$gu=
i(eraseBlock1) &amp;&amp; !$gui(eraseBlock2) &amp;&amp; !$gui(eraseBlock3) =
&amp;&amp; !$gui(eraseBlock4)} then {
	    log_message <span class=3D"hljs-string">"Please select a block to be e=
rased..."</span>
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	}
	<span class=3D"hljs-keyword">if</span> {$gui(eraseBlock0)} then {
	    <span class=3D"hljs-keyword">set</span> loadConfig(eraseBlock0) <span =
class=3D"hljs-string">"setupEraseBlock0"</span>
	    <span class=3D"hljs-keyword">set</span> status [ptclEraseBlock0]
	    <span class=3D"hljs-keyword">if</span> {$status} then {
		<span class=3D"hljs-keyword">if</span> {! $testArray(protocol)} then {
		    log_message <span class=3D"hljs-string">"Block 0 erasing done"</span>
		    actionsLog_message <span class=3D"hljs-string">"Block 0 erasing done"=
</span>
		}
	    } else {
		<span class=3D"hljs-keyword">if</span> {! $testArray(protocol)} then {
		    log_message <span class=3D"hljs-string">"Block 0 erasing fail"</span>
		}
	    }
	}
	<span class=3D"hljs-keyword">if</span> {$gui(eraseBlock1) &amp;&amp;($stat=
us)} then {
	    <span class=3D"hljs-keyword">set</span> loadConfig(eraseBlock1) <span =
class=3D"hljs-string">"setupEraseBlock1"</span>
	    <span class=3D"hljs-keyword">set</span> status [ptclEraseBlock1]
	    <span class=3D"hljs-keyword">if</span> {$status} then {
		<span class=3D"hljs-keyword">if</span> {! $testArray(protocol)} then {
		    log_message <span class=3D"hljs-string">"Block 1 erasing done"</span>
		    actionsLog_message <span class=3D"hljs-string">"Block 1 erasing done"=
</span>
		}
	    } else {
		<span class=3D"hljs-keyword">if</span> {! $testArray(protocol)} then {
		    log_message <span class=3D"hljs-string">"Block 1 erasing fail."</span=
>
		}
	    }
	}
	<span class=3D"hljs-keyword">if</span> {$gui(eraseBlock2) &amp;&amp;($stat=
us)} then {
	    <span class=3D"hljs-keyword">set</span> loadConfig(eraseBlock2) <span =
class=3D"hljs-string">"setupEraseBlock2"</span>
	    <span class=3D"hljs-keyword">set</span> status [ptclEraseBlock2]
	    <span class=3D"hljs-keyword">if</span> {$status} then {
		<span class=3D"hljs-keyword">if</span> {! $testArray(protocol)} then {
		    log_message <span class=3D"hljs-string">"Block 2 erasing done"</span>
		    actionsLog_message <span class=3D"hljs-string">"Block 2 erasing done"=
</span>
		}
	    } else {
		<span class=3D"hljs-keyword">if</span> {! $testArray(protocol)} then {
		    log_message <span class=3D"hljs-string">"Block 2 erasing fail"</span>
		}
	    }
	}
	<span class=3D"hljs-keyword">if</span> {$gui(eraseBlock3) &amp;&amp;($stat=
us)} then {
	    <span class=3D"hljs-keyword">set</span> loadConfig(eraseBlock3) <span =
class=3D"hljs-string">"setupEraseBlock3"</span>
	    <span class=3D"hljs-keyword">set</span> status [ptclEraseBlock3]
	    <span class=3D"hljs-keyword">if</span> {$status} then {
		<span class=3D"hljs-keyword">if</span> {! $testArray(protocol)} then {
		    log_message <span class=3D"hljs-string">"Block 3 erasing done"</span>
		    actionsLog_message <span class=3D"hljs-string">"Block 3 erasing done"=
</span>
		}
	    } else {
		<span class=3D"hljs-keyword">if</span> {! $testArray(protocol)} then {
		    log_message <span class=3D"hljs-string">"Block 3 erasing fail"</span>
		}
	    }
	}
	<span class=3D"hljs-keyword">if</span> {$gui(eraseBlock4) &amp;&amp;($stat=
us)} then {
	    <span class=3D"hljs-keyword">set</span> loadConfig(eraseBlock4) <span =
class=3D"hljs-string">"setupEraseBlock4"</span>
	    <span class=3D"hljs-keyword">set</span> status [ptclEraseBlock4]
	    <span class=3D"hljs-keyword">if</span> {$status} then {
		<span class=3D"hljs-keyword">if</span> {! $testArray(protocol)} then {
		    log_message <span class=3D"hljs-string">"Block 4 erasing done"</span>
		    actionsLog_message <span class=3D"hljs-string">"Block 4 erasing done"=
</span>
		}
	    } else {
		<span class=3D"hljs-keyword">if</span> {! $testArray(protocol)} then {
		    log_message <span class=3D"hljs-string">"Block 4 erasing fail"</span>
		}
	    }
	}
    }
    updateGUI onDeviceActionStop
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> fileOpe=
nGet</span> {title {fileType <span class=3D"hljs-string">"none"</span>}} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> initialDir
    <span class=3D"hljs-keyword">if</span> {$fileType =3D=3D <span class=3D=
"hljs-string">"cfg"</span>} then {
	<span class=3D"hljs-keyword">set</span> file_types {
{ <span class=3D"hljs-string">"Config. Files"</span>   { .cfg .CFG .Cfg } }
{ <span class=3D"hljs-string">"Hex Files"</span>   { .hex .HEX .Hex } }
{ <span class=3D"hljs-string">"Text Files"</span>  { .txt .TXT } }
{ <span class=3D"hljs-string">"All Files"</span>   * }
}
    } else {
	<span class=3D"hljs-keyword">set</span> file_types {
{ <span class=3D"hljs-string">"Hex Files"</span>   { .hex .HEX .Hex } }
{ <span class=3D"hljs-string">"Config. Files"</span>   { .cfg .CFG .Cfg } }
{ <span class=3D"hljs-string">"Text Files"</span>  { .txt .TXT } }
{ <span class=3D"hljs-string">"All Files"</span>   * }
}
    }
    <span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">fi=
lename</span> [tk_getOpenFile -initialdir $initialDir -filetypes $file_type=
s -title <span class=3D"hljs-string">"$title"</span> -parent .]
    <span class=3D"hljs-keyword">if</span> {($filename !=3D <span class=3D"=
hljs-string">""</span>) &amp;&amp;([<span class=3D"hljs-keyword">file</span=
> exists $filename])} then {
	<span class=3D"hljs-keyword">set</span> initialDir [<span class=3D"hljs-ke=
yword">file</span> dirname $filename]
<span class=3D"hljs-comment">	#dbgEndProc [info level [info level]]</span>
	<span class=3D"hljs-keyword">return</span> $filename
    } else {
<span class=3D"hljs-comment">	#dbgEndProc [info level [info level]]</span>
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> fileSav=
eGet</span> {title {fileType <span class=3D"hljs-string">"none"</span>}} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> initialDir
    <span class=3D"hljs-keyword">if</span> {$fileType =3D=3D <span class=3D=
"hljs-string">"cfg"</span>} then {
	<span class=3D"hljs-keyword">set</span> file_types {
{ <span class=3D"hljs-string">"Config. Files"</span>   { .cfg .CFG .Cfg } }
}
	<span class=3D"hljs-keyword">set</span> defaultExt <span class=3D"hljs-str=
ing">"cfg"</span>
    } elseif {$fileType =3D=3D <span class=3D"hljs-string">"hex"</span>} {
	<span class=3D"hljs-keyword">set</span> file_types {
{ <span class=3D"hljs-string">"Hex Files"</span>   { .hex .HEX .Hex } }
}
	<span class=3D"hljs-keyword">set</span> defaultExt <span class=3D"hljs-str=
ing">"hex"</span>
    } else {
	<span class=3D"hljs-keyword">set</span> file_types {
{ <span class=3D"hljs-string">"Text Files"</span>  { .txt .TXT } }
{ <span class=3D"hljs-string">"All Files"</span>   * }
}
	<span class=3D"hljs-keyword">set</span> defaultExt <span class=3D"hljs-str=
ing">"txt"</span>
    }
    <span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">fi=
lename</span> [tk_getSaveFile -initialdir $initialDir -filetypes $file_type=
s -defaultextension $defaultExt -title <span class=3D"hljs-string">"$title"=
</span> -parent .]
    <span class=3D"hljs-keyword">if</span> {$filename !=3D <span class=3D"h=
ljs-string">""</span>} then {
	<span class=3D"hljs-keyword">set</span> initialDir [<span class=3D"hljs-ke=
yword">file</span> dirname $filename]
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $filename
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> clearSt=
atusMessage</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> testArray
    <span class=3D"hljs-keyword">if</span> {! $testArray(protocol)} then {
	<span class=3D"hljs-keyword">set</span> w .f_status.l_message
	$w configure -text <span class=3D"hljs-string">""</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> setProg=
BarMessage</span> {msg} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> w .progressBarDbox.l_actionOnGo=
ing
    <span class=3D"hljs-keyword">if</span> {[winfo exists $w]} then {
	$w configure -text $msg
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>1</span>
    } else {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> closePr=
ogBarWindow</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> w .progressBarDbox
    <span class=3D"hljs-keyword">if</span> {[winfo exists $w]} then {
	destroy $w
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>1</span>
    } else {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> connect=
RS232</span> {prot} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> protcl projDir flipStates gu=
i device
    <span class=3D"hljs-keyword">global</span> cfgFileId deviceArray
    <span class=3D"hljs-keyword">set</span> prot <span class=3D"hljs-string=
">"Standard"</span>
    cmdsImportCurrentMemoryNameSpace [<span class=3D"hljs-keyword">lindex</=
span> $::deviceArray(memoryList) <span class=3D"hljs-number">0</span>]
    <span class=3D"hljs-keyword">catch</span> [ptclCancelRs232Comm]
    <span class=3D"hljs-keyword">if</span> {$flipStates(canNode) =3D=3D <sp=
an class=3D"hljs-string">"open"</span>} then {
	ptclSelectNode
    }
    <span class=3D"hljs-keyword">if</span> {$flipStates(canComm) =3D=3D <sp=
an class=3D"hljs-string">"on"</span>} then {
	ptclCancelCANComm
    }
    <span class=3D"hljs-keyword">set</span> protcl RS232$prot
    <span class=3D"hljs-keyword">if</span> {[ptclInitRs232Comm] !=3D <span =
class=3D"hljs-number">1</span>} then {
<span class=3D"hljs-comment">	#dbgEndProc [info level [info level]]</span>
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info=
</span> exists cfgFileId]} then {
	    <span class=3D"hljs-keyword">set</span> returnCode <span class=3D"hljs=
-string">"break"</span>
	} else {
	    <span class=3D"hljs-keyword">set</span> returnCode <span class=3D"hljs=
-string">"ok"</span>
	}
    } else {
	<span class=3D"hljs-keyword">set</span> returnCode <span class=3D"hljs-str=
ing">"ok"</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> -code $returnCode
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> startNe=
wCommandLine</span> txt {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> PROMPT
    $txt insert insert $PROMPT
    $txt mark <span class=3D"hljs-keyword">set</span> boundary insert
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> doComma=
nd</span> txt {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> CommandLine [$txt get boundary =
end]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> complete $CommandLine]} then {
	<span class=3D"hljs-keyword">catch</span> {interact <span class=3D"hljs-ke=
yword">eval</span> $CommandLine} CatchBak
	<span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-string">"$Catc=
hBak"</span> !=3D <span class=3D"hljs-string">""</span>} then {
	    $txt insert insert \n$CatchBak
	}
	$txt insert insert \n
	startNewCommandLine $txt
	$txt see {insert linestart}
	$txt see insert
    } else {
	$txt insert insert \n
	$txt see insert
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> selectD=
evice</span> {device} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> flipStates gui projDir proto=
col tclTestDir
    <span class=3D"hljs-keyword">catch</span> [<span class=3D"hljs-keyword"=
>unset</span> protocol]
    <span class=3D"hljs-keyword">catch</span> [<span class=3D"hljs-keyword"=
>unset</span> protcl]
    wm withdraw .deviceSelectDbox
    <span class=3D"hljs-keyword">update</span>
    cancelEveryLink
    destroy .deviceErase
    drawDeviceEraseDbox
    <span class=3D"hljs-keyword">catch</span> [<span class=3D"hljs-keyword"=
>rename</span> ptclProgramData <span class=3D"hljs-string">""</span>]
    <span class=3D"hljs-keyword">catch</span> [<span class=3D"hljs-keyword"=
>rename</span> ptclWriteSBV <span class=3D"hljs-string">""</span>]
    <span class=3D"hljs-keyword">catch</span> [<span class=3D"hljs-keyword"=
>rename</span> ptclWriteBSB <span class=3D"hljs-string">""</span>]
    init
    <span class=3D"hljs-keyword">source</span> $projDir/tcl/devices/${devic=
e}.tcl
    updateGUI onAnyCommunicationOff
    updateGUI onDeviceSelection
    log_message <span class=3D"hljs-string">"Settings &gt; Communication...=
"</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> cmdsFor=
getEraseOptions</span> {} {
    <span class=3D"hljs-keyword">global</span> gui
    <span class=3D"hljs-keyword">set</span> gui(eraseType) [readBuffer eras=
eType]
    <span class=3D"hljs-keyword">set</span> gui(erasePossibleBlocks) [readB=
uffer erasePossibleBlocks]
    <span class=3D"hljs-keyword">set</span> gui(erasePossibleBlock0) [readB=
uffer erasePossibleBlock0]
    <span class=3D"hljs-keyword">set</span> gui(eraseBlock0) [readBuffer er=
aseBlock0]
    <span class=3D"hljs-keyword">set</span> gui(erasePossibleBlock1) [readB=
uffer erasePossibleBlock1]
    <span class=3D"hljs-keyword">set</span> gui(eraseBlock1) [readBuffer er=
aseBlock1]
    <span class=3D"hljs-keyword">set</span> gui(erasePossibleBlock2) [readB=
uffer erasePossibleBlock2]
    <span class=3D"hljs-keyword">set</span> gui(eraseBlock2) [readBuffer er=
aseBlock2]
    <span class=3D"hljs-keyword">set</span> gui(erasePossibleBlock3) [readB=
uffer erasePossibleBlock3]
    <span class=3D"hljs-keyword">set</span> gui(eraseBlock3) [readBuffer er=
aseBlock3]
    <span class=3D"hljs-keyword">set</span> gui(erasePossibleBlock4) [readB=
uffer erasePossibleBlock4]
    <span class=3D"hljs-keyword">set</span> gui(eraseBlock4) [readBuffer er=
aseBlock4]
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> cmdsFor=
getReadOptions</span> {} {
    <span class=3D"hljs-keyword">global</span> gui
    <span class=3D"hljs-keyword">set</span> gui(startReadAddr) [readBuffer =
startReadAddr]
    <span class=3D"hljs-keyword">set</span> gui(endReadAddr) [readBuffer en=
dReadAddr]
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> cbOnRes=
etBlankCheck</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> blankCheckAddr gui flipFont
    focus .blankCheckDBox
    <span class=3D"hljs-keyword">set</span> gui(blankCheckMin) [<span class=
=3D"hljs-keyword">format</span> $gui(infoFormat) <span class=3D"hljs-number=
">0</span>x$gui(minProgAddr)]
    <span class=3D"hljs-keyword">set</span> gui(blankCheckMax) [<span class=
=3D"hljs-keyword">format</span> $gui(infoFormat) <span class=3D"hljs-number=
">0</span>x$gui(maxProgAddr)]
    updateGUI onBlankCheckOptionsChange
    .blankCheckDBox.f_results.l_results configure -text <span class=3D"hljs=
-string">"no check"</span> -font $flipFont
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> cmdsEra=
seSBVBSB</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclEraseSBVBSB]
    <span class=3D"hljs-keyword">if</span> {$status} then {
	ptclReadSBV
	ptclReadBSB
	focus .
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> cbOnRes=
etReadDBox</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> gui
    focus .deviceReadDBox
    <span class=3D"hljs-keyword">set</span> gui(startReadAddr) [<span class=
=3D"hljs-keyword">format</span> $gui(infoFormat) <span class=3D"hljs-number=
">0x000000</span>]
    <span class=3D"hljs-keyword">set</span> gui(endReadAddr) [<span class=
=3D"hljs-keyword">format</span> $gui(infoFormat) <span class=3D"hljs-number=
">0</span>x$gui(maxProgAddr)]
    .deviceReadDBox.f_results.l_results configure -text <span class=3D"hljs=
-string">"no reading"</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]  </s=
pan>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> cmdsRea=
dDevice</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> gui progBar
    <span class=3D"hljs-keyword">if</span> {![isValidHexaInput $gui(startRe=
adAddr)]} then {
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-string">"0x=
$gui(startReadAddr)"</span> &gt; <span class=3D"hljs-string">"0x$gui(endRea=
dAddr)"</span>} then {
	<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-string=
">"Address is out of range."</span>
	messageBox <span class=3D"hljs-string">"Edit Buffer"</span> warning $messa=
ge
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-string">"0x=
$gui(startReadAddr)"</span> &gt; <span class=3D"hljs-string">"0x$gui(maxAdd=
r)"</span>} then {
	<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-string=
">"Address is out of range."</span>
	messageBox <span class=3D"hljs-string">"Edit Buffer"</span> warning $messa=
ge
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">set</span> gui(startReadAddr) [<span class=
=3D"hljs-keyword">format</span> $gui(infoFormat) <span class=3D"hljs-number=
">0</span>x$gui(startReadAddr)]
    <span class=3D"hljs-keyword">if</span> {![isValidHexaInput $gui(endRead=
Addr)]} then {
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-string">"0x=
$gui(endReadAddr)"</span> &gt; <span class=3D"hljs-string">"0x$gui(maxAddr)=
"</span>} then {
	<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-string=
">"Address is out of range."</span>
	messageBox <span class=3D"hljs-string">"Edit Buffer"</span> warning $messa=
ge
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">set</span> gui(endReadAddr) [<span class=
=3D"hljs-keyword">format</span> $gui(infoFormat) <span class=3D"hljs-number=
">0</span>x$gui(endReadAddr)]
    <span class=3D"hljs-keyword">if</span> {[winfo exists .deviceReadDBox]}=
 then {
	focus .deviceReadDBox
    } else {
	focus .
    }
    updateGUI onDeviceActionStart
    <span class=3D"hljs-keyword">set</span> status [cmdsReadAddrRange $gui(=
startReadAddr) $gui(endReadAddr)]
    updateGUI onDeviceActionStop
    <span class=3D"hljs-keyword">if</span> {$status} then {
	gotoAddress $gui(startReadAddr)
    }
    updateBufferChecksum
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> cmdsCle=
arOperations</span> {state} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> saveArray gui color
    <span class=3D"hljs-keyword">set</span> flowList { \
	    flowErase \
	    flowBlankCheck \
	    flowProgram \
	    flowVerify \
	    flowSpecialBytes \
	}
    <span class=3D"hljs-keyword">set</span> bErase .main.f_flow.f_operation=
s.b_erase
    <span class=3D"hljs-keyword">set</span> bBlankCheck .main.f_flow.f_oper=
ations.b_blankCheck
    <span class=3D"hljs-keyword">set</span> bProgram .main.f_flow.f_operati=
ons.b_program
    <span class=3D"hljs-keyword">set</span> bVerify .main.f_flow.f_operatio=
ns.b_verify
    <span class=3D"hljs-keyword">set</span> bSpecialBytes .main.f_flow.f_op=
erations.b_specialBytes
    <span class=3D"hljs-keyword">set</span> buttons_List [<span class=3D"hl=
js-keyword">list</span> $bErase $bBlankCheck $bProgram $bVerify $bSpecialBy=
tes]
    <span class=3D"hljs-keyword">if</span> {$state =3D=3D <span class=3D"hl=
js-number">0</span>} then {
	<span class=3D"hljs-keyword">foreach</span> i $flowList {
	    <span class=3D"hljs-keyword">set</span> gui($i) <span class=3D"hljs-nu=
mber">0</span>
	    writeBuffer $i <span class=3D"hljs-number">0</span>
	}
    }
    <span class=3D"hljs-keyword">foreach</span> button $buttons_List {
	$button configure -selectcolor $color(systemWindow)
    }
    <span class=3D"hljs-keyword">foreach</span> i $flowList {
	<span class=3D"hljs-keyword">set</span> gui(${i}Color) $color(systemWindow=
)
	writeBuffer ${i}Color $color(systemWindow)
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> cbOnOkT=
imersDbox</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime
    <span class=3D"hljs-keyword">if</span> {![isValidIntegerInput $waitTime=
(standard)]} then {
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">if</span> {![isValidIntegerInput $waitTime=
(extended)]} then {
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    wm withdraw .timersDBox
    focus .
    <span class=3D"hljs-keyword">update</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">=
1</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> cbCheck=
CANOptions</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> w .canOptions
    wm withdraw $w
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> runOper=
ations</span> {} {
    cmdsRunOperations
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> setupSe=
rialize</span> {<span class=3D"hljs-keyword">memory</span> initVal nBytes s=
tep lsbAddr} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> serialize
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">l=
search</span> $::::deviceArray(memoryList) $memory] =3D=3D <span class=3D"h=
ljs-number">-1</span>} then {
	.main.f_buffer.f_serialNum.l_number configure -text <span class=3D"hljs-st=
ring">"Invalid memory selection."</span> -foreground red
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">e=
xpr</span> [<span class=3D"hljs-keyword">string</span> length $initVal] % <=
span class=3D"hljs-number">2</span>] !=3D <span class=3D"hljs-number">0</sp=
an>} then {
	.main.f_buffer.f_serialNum.l_number configure -text <span class=3D"hljs-st=
ring">"Invalid initial value."</span> -foreground red
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">if</span> {! [<span class=3D"hljs-keyword"=
>string</span> is xdigit $initVal]} then {
	.main.f_buffer.f_serialNum.l_number configure -text <span class=3D"hljs-st=
ring">"Invalid initial value."</span> -foreground red
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">if</span> {! [<span class=3D"hljs-keyword"=
>expr</span> ($nBytes &gt;=3D <span class=3D"hljs-number">1</span>) &amp;&a=
mp; ($nBytes &lt;=3D <span class=3D"hljs-number">8</span>)]} then {
	.main.f_buffer.f_serialNum.l_number configure -text <span class=3D"hljs-st=
ring">"Invalid number of bytes."</span> -foreground red
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">if</span> {$step =3D=3D <span class=3D"hlj=
s-number">0</span>} then {
	.main.f_buffer.f_serialNum.l_number configure -text <span class=3D"hljs-st=
ring">"Invalid step value."</span> -foreground red
	<span class=3D"hljs-keyword">return</span>
    }
    cmdsImportCurrentMemoryNameSpace $memory
    <span class=3D"hljs-keyword">set</span> addrMax [<span class=3D"hljs-ke=
yword">expr</span> [readDeviceArray memorySize] * <span class=3D"hljs-numbe=
r">1024</span> - <span class=3D"hljs-number">1</span>]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">e=
xpr</span> $lsbAddr &gt; $addrMax]} then {
	.main.f_buffer.f_serialNum.l_number configure -text <span class=3D"hljs-st=
ring">"Invalid storage address."</span> -foreground red
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">e=
xpr</span> $lsbAddr &lt; ($nBytes - <span class=3D"hljs-number">1</span>)]}=
 then {
	.main.f_buffer.f_serialNum.l_number configure -text <span class=3D"hljs-st=
ring">"Invalid storage address."</span> -foreground red
	<span class=3D"hljs-keyword">return</span>
    }
    .main.f_buffer.f_serialNum.l_number configure -text <span class=3D"hljs=
-string">""</span>
    <span class=3D"hljs-keyword">set</span> serialize(<span class=3D"hljs-k=
eyword">memory</span>) $memory
    <span class=3D"hljs-keyword">set</span> serialize(initVal) $initVal
    <span class=3D"hljs-keyword">set</span> serialize(nBytes) $nBytes
    <span class=3D"hljs-keyword">set</span> serialize(step) $step
    <span class=3D"hljs-keyword">set</span> serialize(lsbAddr) $lsbAddr
    <span class=3D"hljs-keyword">set</span> serialize(do_it) <span class=3D=
"hljs-number">1</span>
    cmdsImportCurrentMemoryNameSpace FLASH
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> seriali=
zePart</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> serialize
    <span class=3D"hljs-keyword">if</span> {! $serialize(execute)} then {
	<span class=3D"hljs-keyword">set</span> j <span class=3D"hljs-number">0</s=
pan>
	<span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">set<=
/span> i [<span class=3D"hljs-keyword">expr</span> [<span class=3D"hljs-key=
word">string</span> length $serialize(initVal)] - <span class=3D"hljs-numbe=
r">1</span>]} {$i &gt;=3D <span class=3D"hljs-number">0</span>} {<span clas=
s=3D"hljs-keyword">incr</span> i <span class=3D"hljs-number">-1</span>} {
	    <span class=3D"hljs-keyword">set</span> nibble <span class=3D"hljs-num=
ber">0</span>x[<span class=3D"hljs-keyword">string</span> index $serialize(=
initVal) $i]
	    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">=
set</span> X <span class=3D"hljs-number">1</span>} {$X &lt;=3D <span class=
=3D"hljs-number">8</span>} {<span class=3D"hljs-keyword">set</span> X [<spa=
n class=3D"hljs-keyword">expr</span> $X * <span class=3D"hljs-number">2</sp=
an>]} {
		<span class=3D"hljs-keyword">if</span> {$nibble &amp; $X} then {
		    <span class=3D"hljs-keyword">set</span> ::sn($j) <span class=3D"hljs-=
number">1</span>
		} else {
		    <span class=3D"hljs-keyword">set</span> ::sn($j) <span class=3D"hljs-=
number">0</span>
		}
		<span class=3D"hljs-keyword">incr</span> j <span class=3D"hljs-number">1<=
/span>
	    }
	}
    }
    cmdsImportCurrentMemoryNameSpace $serialize(memory)
    <span class=3D"hljs-keyword">set</span> snStrg <span class=3D"hljs-stri=
ng">""</span>
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i [<span class=3D"hljs-keyword">expr</span> $serialize(nBytes) * =
<span class=3D"hljs-number">8</span> - <span class=3D"hljs-number">1</span>=
]} {$i &gt;=3D <span class=3D"hljs-number">0</span>} {<span class=3D"hljs-k=
eyword">incr</span> i <span class=3D"hljs-number">-4</span>} {
	<span class=3D"hljs-keyword">set</span> nibble <span class=3D"hljs-number"=
>0</span>
	<span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">set<=
/span> j <span class=3D"hljs-number">0</span>} {$j &lt;=3D <span class=3D"h=
ljs-number">3</span>} {<span class=3D"hljs-keyword">incr</span> j} {
	    <span class=3D"hljs-keyword">set</span> nibble [<span class=3D"hljs-ke=
yword">expr</span> $nibble + $::sn([<span class=3D"hljs-keyword">expr</span=
> $i - <span class=3D"hljs-number">3</span> + $j]) * int(pow(<span class=3D=
"hljs-number">2</span>,$j))]
	}
	<span class=3D"hljs-keyword">append</span> snStrg [<span class=3D"hljs-key=
word">format</span> %X $nibble]
    }
    .main.f_buffer.f_serialNum.l_number configure -text $snStrg -foreground=
 red
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">0</span>} {$i &lt; $serialize(nByte=
s)} {<span class=3D"hljs-keyword">incr</span> i} {
	<span class=3D"hljs-keyword">set</span> byte [<span class=3D"hljs-keyword"=
>string</span> range $snStrg [<span class=3D"hljs-keyword">expr</span> $i *=
 <span class=3D"hljs-number">2</span>] [<span class=3D"hljs-keyword">expr</=
span> $i * <span class=3D"hljs-number">2</span> + <span class=3D"hljs-numbe=
r">1</span>]]
	writeBuffer [<span class=3D"hljs-keyword">format</span> %<span class=3D"hl=
js-number">06</span>X [<span class=3D"hljs-keyword">expr</span> $serialize(=
lsbAddr) - $serialize(nBytes) + <span class=3D"hljs-number">1</span> + $i]]=
 $byte
    }
    <span class=3D"hljs-keyword">if</span> {[winfo exists .bufferEditWindow=
]} then {
	updateBufferWidget <span class=3D"hljs-number">0.0</span>
    }
    <span class=3D"hljs-keyword">set</span> ::flipStates(bufferInInitialSta=
te) <span class=3D"hljs-number">0</span>
    cmdsDeviceProgram [<span class=3D"hljs-keyword">format</span> %<span cl=
ass=3D"hljs-number">06</span>X [<span class=3D"hljs-keyword">expr</span> $s=
erialize(lsbAddr) - $serialize(nBytes) + <span class=3D"hljs-number">1</spa=
n>]] [<span class=3D"hljs-keyword">format</span> %<span class=3D"hljs-numbe=
r">06</span>X $serialize(lsbAddr)]
    <span class=3D"hljs-keyword">if</span> {$serialize(step) &gt; <span cla=
ss=3D"hljs-number">0</span>} then {
	<span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">set<=
/span> i <span class=3D"hljs-number">0</span>} {$i &lt; $serialize(step)} {=
<span class=3D"hljs-keyword">incr</span> i} {
	    incSn
	}
    } elseif {$serialize(step) &lt; <span class=3D"hljs-number">0</span>} {
	<span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">set<=
/span> i <span class=3D"hljs-number">0</span>} {$i &gt; $serialize(step)} {=
<span class=3D"hljs-keyword">incr</span> i <span class=3D"hljs-number">-1</=
span>} {
	    decSn
	}
    }
    cmdsImportCurrentMemoryNameSpace FLASH
    <span class=3D"hljs-keyword">set</span> serialize(execute) <span class=
=3D"hljs-number">1</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> cmdsRun=
Operations</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> saveArray gui serialize
    updateGUI onRunOperations
    <span class=3D"hljs-keyword">set</span> ff .main.f_flow
    <span class=3D"hljs-keyword">set</span> bRun $ff.f_buttons.b_run
    <span class=3D"hljs-keyword">set</span> bClear $ff.f_buttons.b_clear
    <span class=3D"hljs-keyword">set</span> bErase $ff.f_operations.b_erase
    <span class=3D"hljs-keyword">set</span> bBlankCheck $ff.f_operations.b_=
blankCheck
    <span class=3D"hljs-keyword">set</span> bProgram $ff.f_operations.b_pro=
gram
    <span class=3D"hljs-keyword">set</span> bVerify $ff.f_operations.b_veri=
fy
    <span class=3D"hljs-keyword">set</span> bSpecialBytes $ff.f_operations.=
b_specialBytes
    <span class=3D"hljs-keyword">set</span> saveArray(flowErase) $gui(flowE=
rase)
    <span class=3D"hljs-keyword">set</span> saveArray(flowBlankCheck) $gui(=
flowBlankCheck)
    <span class=3D"hljs-keyword">set</span> saveArray(flowProgram) $gui(flo=
wProgram)
    <span class=3D"hljs-keyword">set</span> saveArray(flowVerify) $gui(flow=
Verify)
    <span class=3D"hljs-keyword">set</span> saveArray(flowSpecialBytes) $gu=
i(flowSpecialBytes)
    <span class=3D"hljs-keyword">if</span> {(($gui(flowErase) =3D=3D <span =
class=3D"hljs-number">0</span>) ||([$bErase cget -state] =3D=3D <span class=
=3D"hljs-string">"disabled"</span>)) &amp;&amp;(($gui(flowBlankCheck) =3D=
=3D <span class=3D"hljs-number">0</span>) ||([$bBlankCheck cget -state] =3D=
=3D <span class=3D"hljs-string">"disabled"</span>)) &amp;&amp;(($gui(flowPr=
ogram) =3D=3D <span class=3D"hljs-number">0</span>) ||([$bProgram cget -sta=
te] =3D=3D <span class=3D"hljs-string">"disabled"</span>)) &amp;&amp;(($gui=
(flowVerify) =3D=3D <span class=3D"hljs-number">0</span>) ||([$bVerify cget=
 -state] =3D=3D <span class=3D"hljs-string">"disabled"</span>)) &amp;&amp;(=
($gui(flowSpecialBytes) =3D=3D <span class=3D"hljs-number">0</span>) ||([$b=
SpecialBytes cget -state] =3D=3D <span class=3D"hljs-string">"disabled"</sp=
an>))} then {
	log_message <span class=3D"hljs-string">"Please select operations..."</spa=
n>
	updateGUI onRunOperationsCompleted
<span class=3D"hljs-comment">	#dbgEndProc [info level [info level]]</span>
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-string">"ok=
"</span>
    }
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(sbv)]} then {
	<span class=3D"hljs-keyword">set</span> sbv $::deviceArray(sbv)
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(bsb)]} then {
	<span class=3D"hljs-keyword">set</span> bsb $::deviceArray(bsb)
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(eb)]} then {
	<span class=3D"hljs-keyword">set</span> eb $::deviceArray(eb)
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(ssb)]} then {
	<span class=3D"hljs-keyword">set</span> ssb $::deviceArray(ssb)
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(level)]} then {
	<span class=3D"hljs-keyword">set</span> level $::deviceArray(level)
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(oscFuse)]} then {
<span class=3D"hljs-comment">	#dbgShowInfo "::deviceArray(oscFuse) exists"<=
/span>
	<span class=3D"hljs-keyword">set</span> oscFuse $::deviceArray(oscFuse)
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(bljbFuse)]} then {
	<span class=3D"hljs-keyword">set</span> bljbFuse $::deviceArray(bljbFuse)
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(x2Fuse)]} then {
	<span class=3D"hljs-keyword">set</span> x2Fuse $::deviceArray(x2Fuse)
    }
    <span class=3D"hljs-keyword">if</span> {($saveArray(flowErase) =3D=3D <=
span class=3D"hljs-number">1</span>) &amp;&amp;([.main.f_flow.f_operations.=
b_erase cget -state] =3D=3D <span class=3D"hljs-string">"normal"</span>)} t=
hen {
	<span class=3D"hljs-keyword">set</span> status [cmdsDeviceErase]
	$bErase configure -state normal
	<span class=3D"hljs-keyword">if</span> {$status} then {
	    writeBuffer flowEraseColor green
	    $bErase configure -selectcolor green
	} else {
	    writeBuffer flowEraseColor red
	    $bErase configure -selectcolor red
	}
	<span class=3D"hljs-keyword">update</span>
    }
    <span class=3D"hljs-keyword">if</span> {($saveArray(flowBlankCheck) =3D=
=3D <span class=3D"hljs-number">1</span>) &amp;&amp;($status) &amp;&amp;([.=
main.f_flow.f_operations.b_blankCheck cget -state] =3D=3D <span class=3D"hl=
js-string">"normal"</span>)} then {
	<span class=3D"hljs-keyword">set</span> status [cmdsBlankCheck]
	<span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"hljs=
-number">-1</span>} then {
	    writeBuffer flowBlankCheckColor green
	    $bBlankCheck configure -selectcolor green
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">1</span>
	} else {
	    writeBuffer flowBlankCheckColor red
	    $bBlankCheck configure -selectcolor red
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	}
	<span class=3D"hljs-keyword">update</span>
    }
    <span class=3D"hljs-keyword">if</span> {($saveArray(flowProgram) =3D=3D=
 <span class=3D"hljs-number">1</span>) &amp;&amp;($status)} then {
	$bProgram configure -state normal
	<span class=3D"hljs-keyword">update</span>
	<span class=3D"hljs-keyword">set</span> status [cmdsDeviceProgram]
	<span class=3D"hljs-keyword">if</span> {$status} then {
	    writeBuffer flowProgramColor green
	    $bProgram configure -selectcolor green
	} else {
	    writeBuffer flowProgramColor red
	    $bProgram configure -selectcolor red
	}
	<span class=3D"hljs-keyword">update</span>
    }
    <span class=3D"hljs-keyword">if</span> {($saveArray(flowVerify) =3D=3D =
<span class=3D"hljs-number">1</span>) &amp;&amp;($status)} then {
	$bVerify configure -state normal
	<span class=3D"hljs-keyword">update</span>
	<span class=3D"hljs-keyword">set</span> status [cmdsDeviceVerify]
<span class=3D"hljs-comment">	#dbgShowVar "verify state: $status"</span>
	<span class=3D"hljs-keyword">if</span> {$status} then {
<span class=3D"hljs-comment">	    #dbgShowInfo "verify PASS"</span>
	    writeBuffer flowVerifyColor green
	    $bVerify configure -selectcolor green
	} else {
<span class=3D"hljs-comment">	    #dbgShowInfo "verify FAIL"</span>
	    writeBuffer flowVerifyColor red
	    $bVerify configure -selectcolor red
	}
	<span class=3D"hljs-keyword">update</span>
    }
    <span class=3D"hljs-keyword">if</span> {($saveArray(flowSpecialBytes) =
=3D=3D <span class=3D"hljs-number">1</span>) &amp;&amp;($status)} then {
	<span class=3D"hljs-keyword">if</span> {$gui(flowErase) =3D=3D <span class=
=3D"hljs-number">1</span>} then {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
info</span> exists sbv]} then {
		<span class=3D"hljs-keyword">set</span> ::deviceArray(sbv) $sbv
	    }
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
info</span> exists bsb]} then {
		<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">inf=
o</span> exists ::deviceArray(bsb)]} then {
		    <span class=3D"hljs-keyword">set</span> ::deviceArray(bsb) $bsb
		}
	    }
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
info</span> exists eb]} then {
		<span class=3D"hljs-keyword">set</span> ::deviceArray(eb) $eb
	    }
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
info</span> exists level]} then {
		<span class=3D"hljs-keyword">set</span> ::deviceArray(level) $level
	    }
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
info</span> exists oscFuse]} then {
<span class=3D"hljs-comment">		#dbgShowInfo "oscFuse exists"</span>
		<span class=3D"hljs-keyword">set</span> ::deviceArray(oscFuse) $oscFuse
	    }
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
info</span> exists bljbFuse]} then {
		<span class=3D"hljs-keyword">set</span> ::deviceArray(bljbFuse) $bljbFuse
	    }
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
info</span> exists x2Fuse]} then {
		<span class=3D"hljs-keyword">set</span> ::deviceArray(x2Fuse) $x2Fuse
	    }
	}
	<span class=3D"hljs-keyword">if</span> {$saveArray(flowProgram) =3D=3D <sp=
an class=3D"hljs-number">1</span>} then {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
info</span> exists ::deviceArray(bsb)]} then {
		<span class=3D"hljs-keyword">set</span> ::deviceArray(bsb) $bsb
	    }
	}
	$bSpecialBytes configure -state normal
	<span class=3D"hljs-keyword">update</span>
	<span class=3D"hljs-keyword">set</span> status [devcSetDeviceSpecialBytes]
	<span class=3D"hljs-keyword">if</span> {$status} then {
	    writeBuffer flowSpecialBytesColor green
	    $bSpecialBytes configure -selectcolor green
	} else {
	    writeBuffer flowSpecialBytesColor red
	    $bSpecialBytes configure -selectcolor red
	}
	<span class=3D"hljs-keyword">update</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">l=
search</span> [buildSkipProcList] ptclReadSSB] =3D=3D <span class=3D"hljs-n=
umber">-1</span>} then {
	<span class=3D"hljs-keyword">if</span> {! $status} then {
	    restoreSSB $ssb
	} else {
	    ptclReadSSB
	}
    }
    <span class=3D"hljs-keyword">if</span> {$gui(flowStartAppli)} then {
	ptclStartAppli $gui(flowWithReset)
    }
    <span class=3D"hljs-keyword">if</span> {$serialize(do_it)} then {
	serializePart
    }
    updateGUI onRunOperationsCompleted
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> cmdsBla=
nkCheck</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> blankCheckAddr gui loadConfi=
g flipFont testArray
    <span class=3D"hljs-keyword">set</span> lResults .blankCheckDBox.f_resu=
lts.l_results
    <span class=3D"hljs-keyword">if</span> {![winfo exists $lResults]} then=
 {
	drawBlankCheckDbox
    }
    <span class=3D"hljs-keyword">if</span> {![isValidHexaInput $gui(blankCh=
eckMin)]} then {
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-string">"0x=
$gui(blankCheckMin)"</span> &gt; <span class=3D"hljs-string">"0x$gui(blankC=
heckMax)"</span>} then {
	<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-string=
">"Address is out of range."</span>
	messageBox <span class=3D"hljs-string">"Edit Buffer"</span> warning $messa=
ge
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-string">"0x=
$gui(blankCheckMin)"</span> &gt; <span class=3D"hljs-string">"0x$gui(maxAdd=
r)"</span>} then {
	<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-string=
">"Address is out of range."</span>
	messageBox <span class=3D"hljs-string">"Edit Buffer"</span> warning $messa=
ge
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">set</span> gui(blankCheckMin) [<span class=
=3D"hljs-keyword">format</span> $gui(infoFormat) <span class=3D"hljs-number=
">0</span>x$gui(blankCheckMin)]
    <span class=3D"hljs-keyword">set</span> loadConfig(blankCheckStart) <sp=
an class=3D"hljs-string">"set gui(blankCheckMin) $gui(blankCheckMin)"</span=
>
    <span class=3D"hljs-keyword">if</span> {![isValidHexaInput $gui(blankCh=
eckMax)]} then {
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-string">"0x=
$gui(blankCheckMax)"</span> &gt; <span class=3D"hljs-string">"0x$gui(maxAdd=
r)"</span>} then {
	<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-string=
">"Address is out of range."</span>
	messageBox <span class=3D"hljs-string">"Edit Buffer"</span> warning $messa=
ge
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">set</span> gui(blankCheckMax) [<span class=
=3D"hljs-keyword">format</span> $gui(infoFormat) <span class=3D"hljs-number=
">0</span>x$gui(blankCheckMax)]
    <span class=3D"hljs-keyword">set</span> loadConfig(blankCheckEnd) <span=
 class=3D"hljs-string">"set gui(blankCheckMax) $gui(blankCheckMax)"</span>
    <span class=3D"hljs-keyword">if</span> {[winfo exists .blankCheckDBox]}=
 then {
	focus .blankCheckDBox
    } else {
	focus .
    }
    updateGUI onDeviceActionStart
    <span class=3D"hljs-keyword">set</span> status [ptclBlankCheck $gui(bla=
nkCheckMin) $gui(blankCheckMax)]
    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"h=
ljs-string">"-1"</span>} then {
	$lResults configure -text <span class=3D"hljs-string">"Pass"</span> -font =
$flipFont
	<span class=3D"hljs-keyword">if</span> {! $testArray(protocol)} then {
	    actionsLog_message <span class=3D"hljs-string">"Blank Check Pass"</spa=
n>
	    log_message <span class=3D"hljs-string">"Blank Check Pass"</span>
	}
    } elseif {$status !=3D <span class=3D"hljs-string">"-2"</span>} {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>x$status
	$lResults configure -text <span class=3D"hljs-string">"Fail at $status"</s=
pan> -font $flipFont
	<span class=3D"hljs-keyword">if</span> {! $testArray(protocol)} then {
	    actionsLog_message <span class=3D"hljs-string">"Blank Check Fail at $s=
tatus"</span>
	    log_message <span class=3D"hljs-string">"Blank Check Fail at $status"<=
/span>
	}
    }
    updateGUI onDeviceActionStop
    <span class=3D"hljs-keyword">set</span> loadConfig(blankCheck) <span cl=
ass=3D"hljs-string">"setupBlankCheckDevice"</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> cmdsDev=
iceVerify</span> {{minProgAddr $gui(minProgAddr)} {maxProgAddr $gui(maxProg=
Addr)}} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> gui deviceArray progBar load=
Config testArray flipStates
    <span class=3D"hljs-keyword">set</span> minProgAddr [<span class=3D"hlj=
s-keyword">subst</span> $minProgAddr]
    <span class=3D"hljs-keyword">set</span> maxProgAddr [<span class=3D"hlj=
s-keyword">subst</span> $maxProgAddr]
<span class=3D"hljs-comment">    #dbgShowVar "addrMin =3D $minProgAddr"</sp=
an>
<span class=3D"hljs-comment">    #dbgShowVar "addrMax =3D $maxProgAddr"</sp=
an>
    <span class=3D"hljs-keyword">if</span> {! $testArray(protocol)} then {
	log_message <span class=3D"hljs-string">"Verifying $::deviceArray(name) Me=
mory..."</span>
    }
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">0</span>
    .f_status.pb configure -percent <span class=3D"hljs-number">0</span> -s=
hape <span class=3D"hljs-number">3</span>D -color blue
    <span class=3D"hljs-keyword">set</span> addrLo <span class=3D"hljs-numb=
er">0</span>x$minProgAddr
    <span class=3D"hljs-keyword">set</span> addrHi <span class=3D"hljs-numb=
er">0</span>x$maxProgAddr
    <span class=3D"hljs-keyword">set</span> numberOfBlocks [<span class=3D"=
hljs-keyword">expr</span> (($addrHi - $addrLo) / $flipStates(readBlockSize)=
) + <span class=3D"hljs-number">1</span>]
    <span class=3D"hljs-keyword">set</span> progBar(cancel) <span class=3D"=
hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> percent <span class=3D"hljs-num=
ber">0</span>
    <span class=3D"hljs-keyword">set</span> refPercent <span class=3D"hljs-=
number">5</span>
    bind . &lt;Escape&gt; {<span class=3D"hljs-keyword">set</span> progBar(=
cancel) <span class=3D"hljs-number">1</span>}
    <span class=3D"hljs-keyword">update</span>
    <span class=3D"hljs-keyword">set</span> blockIndex <span class=3D"hljs-=
number">0</span>
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> addr $addrLo} {$addr &lt;=3D $addrHi} {<span class=3D"hljs-keywor=
d">set</span> addr [<span class=3D"hljs-keyword">expr</span> $addr + $flipS=
tates(readBlockSize)]; <span class=3D"hljs-keyword">incr</span> blockIndex}=
 {
	<span class=3D"hljs-keyword">set</span> percent [<span class=3D"hljs-keywo=
rd">expr</span> ($blockIndex * <span class=3D"hljs-number">100</span>) / $n=
umberOfBlocks]
	<span class=3D"hljs-keyword">if</span> {$percent &gt;=3D $refPercent} then=
 {
	    .f_status.pb configure -percent $percent
	    <span class=3D"hljs-keyword">incr</span> refPercent +<span class=3D"hl=
js-number">5</span>
	    <span class=3D"hljs-keyword">update</span>
	}
	<span class=3D"hljs-keyword">set</span> hiBound [<span class=3D"hljs-keywo=
rd">expr</span> $addr + $flipStates(readBlockSize) - <span class=3D"hljs-nu=
mber">0x1</span>]
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">expr=
</span> $hiBound &gt;=3D $addrHi]} then {
	    <span class=3D"hljs-keyword">set</span> status [ptclReadBlock [<span c=
lass=3D"hljs-keyword">format</span> <span class=3D"hljs-string">"%#04X"</sp=
an> $addr] [<span class=3D"hljs-keyword">format</span> <span class=3D"hljs-=
string">"%#04X"</span> $addrHi] [readDeviceArray displayData] <span class=
=3D"hljs-string">"compare"</span>]
	    <span class=3D"hljs-keyword">break</span>
	} else {
	    <span class=3D"hljs-keyword">set</span> status [ptclReadBlock [<span c=
lass=3D"hljs-keyword">format</span> <span class=3D"hljs-string">"%#04X"</sp=
an> $addr] [<span class=3D"hljs-keyword">format</span> <span class=3D"hljs-=
string">"%#04X"</span> $hiBound] [readDeviceArray displayData] <span class=
=3D"hljs-string">"compare"</span>]
	}
	<span class=3D"hljs-keyword">if</span> {! $status} then {
	    <span class=3D"hljs-keyword">break</span>
	} elseif {$progBar(cancel)} {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	    log_message <span class=3D"hljs-string">"Device verification canceled.=
"</span>
	    <span class=3D"hljs-keyword">break</span>
	}
    }
    cmdsResetProgressBar
    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"h=
ljs-number">1</span>} then {
	<span class=3D"hljs-keyword">if</span> {! $testArray(protocol)} then {
	    log_message <span class=3D"hljs-string">"Memory Verify Pass"</span>
	    actionsLog_message <span class=3D"hljs-string">"Memory Verify Pass"</s=
pan>
	}
    }
    <span class=3D"hljs-keyword">set</span> loadConfig(verifyDevice) <span =
class=3D"hljs-string">"setupVerifyDevice"</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> cmdsRel=
oadHexFileIfChanged</span> {} {
    <span class=3D"hljs-keyword">global</span> flipStates
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">f=
ile</span> exists $flipStates(hexFileName)]} then {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">file=
</span> mtime $flipStates(hexFileName)] !=3D $flipStates(hexFileMtime)} the=
n {
	    <span class=3D"hljs-keyword">set</span> w .main.f_buffer.f_hexFile.l_f=
ileN
	    <span class=3D"hljs-keyword">if</span> {[winfo exists $w]} then {
		$w configure -fg red
		<span class=3D"hljs-keyword">set</span> answer [tk_messageBox -icon quest=
ion -message <span class=3D"hljs-string">"The HEX file has been changed on =
disk.\n\nReload it ?"</span> -title <span class=3D"hljs-string">"Flip HEX f=
ile message"</span> -type yesno]
		<span class=3D"hljs-keyword">if</span> {$answer =3D=3D <span class=3D"hlj=
s-string">"yes"</span>} then {
		    <span class=3D"hljs-keyword">set</span> status [parseHexFile $flipSta=
tes(hexFileName)]
		    .main.f_buffer.f_hexFile.l_fileN configure -fg black
		}
	    }
	}
    }
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> cmdsWar=
ningBufferNotProgrammed</span> {} {
    <span class=3D"hljs-keyword">global</span> flipStates
    <span class=3D"hljs-keyword">set</span> answer [tk_messageBox -message =
<span class=3D"hljs-string">"The buffer initial contents has not been  modi=
fied. Do you wish to continue programming ?"</span> -title <span class=3D"h=
ljs-string">"Programming Information"</span> -type yesno -icon question]
    <span class=3D"hljs-keyword">if</span> {$answer =3D=3D <span class=3D"h=
ljs-string">"yes"</span>} then {
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">1</=
span>
    } else {
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> cmdsDev=
iceProgram</span> {{minProgAddr $gui(minProgAddr)} {maxProgAddr $gui(maxPro=
gAddr)}} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> protocol gui deviceArray pro=
gBar waitTime projDir loadConfig
    <span class=3D"hljs-keyword">global</span> flipStates testArray protcl
    <span class=3D"hljs-keyword">if</span> {$flipStates(bufferInInitialStat=
e)} then {
	<span class=3D"hljs-keyword">if</span> {! [cmdsWarningBufferNotProgrammed]=
} then {
	    clearStatusMessage
	    log_message <span class=3D"hljs-string">"Device programming aborted."<=
/span>
	    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number"=
>0</span>
	}
    }
    <span class=3D"hljs-keyword">if</span> {! [cmdsReloadHexFileIfChanged]}=
 then {
	clearStatusMessage
	log_message <span class=3D"hljs-string">"Device programming aborted."</spa=
n>
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(bootloaderId)]} then {
	<span class=3D"hljs-keyword">if</span> {$::deviceArray(bootloaderId) =3D=
=3D <span class=3D"hljs-string">"0001"</span>} then {
	    storeSSBinBuffer [<span class=3D"hljs-keyword">format</span> %<span cl=
ass=3D"hljs-number">06</span>X [<span class=3D"hljs-keyword">expr</span> [r=
eadDeviceArray memorySize] * <span class=3D"hljs-number">1024</span> - <spa=
n class=3D"hljs-number">3</span>]]
	    log_message <span class=3D"hljs-string">"Computing CRC..."</span>
	    storeCRCinBuffer [<span class=3D"hljs-keyword">format</span> %<span cl=
ass=3D"hljs-number">06</span>X [<span class=3D"hljs-keyword">expr</span> [r=
eadDeviceArray memorySize] * <span class=3D"hljs-number">1024</span> - <spa=
n class=3D"hljs-number">3</span>]]
	    log_message <span class=3D"hljs-string">"Done."</span>
	    <span class=3D"hljs-keyword">set</span> minProgAddr <span class=3D"hlj=
s-number">0</span>
	    <span class=3D"hljs-keyword">set</span> maxProgAddr [<span class=3D"hl=
js-keyword">format</span> <span class=3D"hljs-string">"%X"</span> [<span cl=
ass=3D"hljs-keyword">expr</span> [readDeviceArray memorySize] * <span class=
=3D"hljs-number">1024</span> - <span class=3D"hljs-number">1</span>]]
	}
	<span class=3D"hljs-keyword">if</span> {$::deviceArray(bootloaderId) =3D=
=3D <span class=3D"hljs-string">"0002"</span>} then {
	    storeCRCinBuffer [<span class=3D"hljs-keyword">format</span> %<span cl=
ass=3D"hljs-number">06</span>X [<span class=3D"hljs-keyword">expr</span> [r=
eadDeviceArray memorySize] * <span class=3D"hljs-number">1024</span> - <spa=
n class=3D"hljs-number">3</span>]]
	    <span class=3D"hljs-keyword">set</span> minProgAddr <span class=3D"hlj=
s-number">0</span>
	    <span class=3D"hljs-keyword">set</span> maxProgAddr [<span class=3D"hl=
js-keyword">format</span> <span class=3D"hljs-string">"%X"</span> [<span cl=
ass=3D"hljs-keyword">expr</span> [readDeviceArray memorySize] * <span class=
=3D"hljs-number">1024</span> - <span class=3D"hljs-number">1</span>]]
	}
    }
    <span class=3D"hljs-keyword">set</span> minProgAddr [<span class=3D"hlj=
s-keyword">subst</span> $minProgAddr]
    <span class=3D"hljs-keyword">set</span> maxProgAddr [<span class=3D"hlj=
s-keyword">subst</span> $maxProgAddr]
    clearStatusMessage
    <span class=3D"hljs-keyword">if</span> {! $testArray(protocol)} then {
	log_message <span class=3D"hljs-string">"Programming $::deviceArray(name).=
.."</span>
    }
    <span class=3D"hljs-keyword">set</span> progBar(cancel) <span class=3D"=
hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> numberOfFrames [<span class=3D"=
hljs-keyword">expr</span> ((<span class=3D"hljs-number">0</span>x$maxProgAd=
dr - <span class=3D"hljs-number">0</span>x$minProgAddr) / $protocol(frameLe=
ngthW)) + <span class=3D"hljs-number">1</span>]
    <span class=3D"hljs-keyword">set</span> percent <span class=3D"hljs-num=
ber">0</span>
    <span class=3D"hljs-keyword">set</span> refPercent <span class=3D"hljs-=
number">5</span>
    <span class=3D"hljs-keyword">set</span> frameIndex <span class=3D"hljs-=
number">1</span>
    .f_status.pb configure -percent <span class=3D"hljs-number">0</span> -s=
hape <span class=3D"hljs-number">3</span>D -color blue
    bind . &lt;Escape&gt; {<span class=3D"hljs-keyword">set</span> progBar(=
cancel) <span class=3D"hljs-number">1</span>}
    <span class=3D"hljs-keyword">update</span>
    <span class=3D"hljs-keyword">set</span> address <span class=3D"hljs-str=
ing">"0x$minProgAddr"</span>
    <span class=3D"hljs-keyword">set</span> startT [<span class=3D"hljs-key=
word">clock</span> clicks -milliseconds]
    <span class=3D"hljs-keyword">set</span> p <span class=3D"hljs-string">"=
ptclSendIdProgStart"</span>
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> procs $p] =3D=3D $p} then {
	<span class=3D"hljs-keyword">set</span> status [$p $minProgAddr $maxProgAd=
dr [readDeviceArray progStart]]
	<span class=3D"hljs-keyword">if</span> {! $status} then {
	    <span class=3D"hljs-keyword">return</span> $status
	}
    }
    updateGUI onDeviceActionStart
    <span class=3D"hljs-keyword">while</span> {! $progBar(cancel)} {
	<span class=3D"hljs-keyword">set</span> percent [<span class=3D"hljs-keywo=
rd">expr</span> ($frameIndex * <span class=3D"hljs-number">100</span>) / $n=
umberOfFrames]
	<span class=3D"hljs-keyword">if</span> {$percent &gt;=3D $refPercent} then=
 {
	    .f_status.pb configure -percent $percent
	    <span class=3D"hljs-keyword">incr</span> refPercent +<span class=3D"hl=
js-number">5</span>
	}
	<span class=3D"hljs-keyword">set</span> distanceToFrameBoundary [<span cla=
ss=3D"hljs-keyword">expr</span> $protocol(frameLengthW) - ($address % $prot=
ocol(frameLengthW)) - <span class=3D"hljs-number">1</span>]
	<span class=3D"hljs-keyword">set</span> distanceToAddrMax [<span class=3D"=
hljs-keyword">expr</span> <span class=3D"hljs-number">0</span>x$maxProgAddr=
 - $address]
	<span class=3D"hljs-keyword">if</span> {$distanceToAddrMax &lt;=3D $distan=
ceToFrameBoundary} then {
	    <span class=3D"hljs-keyword">set</span> hiBound <span class=3D"hljs-nu=
mber">0</span>x$maxProgAddr
	    <span class=3D"hljs-keyword">set</span> breakOnNext <span class=3D"hlj=
s-number">1</span>
	} else {
	    <span class=3D"hljs-keyword">set</span> hiBound [<span class=3D"hljs-k=
eyword">expr</span> $address + $distanceToFrameBoundary]
	    <span class=3D"hljs-keyword">set</span> breakOnNext <span class=3D"hlj=
s-number">0</span>
	}
<span class=3D"hljs-comment">	#dbgShowVar "breakOnNext =3D $breakOnNext"</s=
pan>
	<span class=3D"hljs-keyword">set</span> status [ptclProgramData $address $=
hiBound [readDeviceArray programData]]
<span class=3D"hljs-comment">	#dbgShowVar "status =3D $status"</span>
	<span class=3D"hljs-keyword">set</span> address [<span class=3D"hljs-keywo=
rd">expr</span> $address + $distanceToFrameBoundary + <span class=3D"hljs-n=
umber">1</span>]
	<span class=3D"hljs-keyword">if</span> {$flipStates(canComm) =3D=3D <span =
class=3D"hljs-string">"on"</span>} then {
	    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"=
hljs-number">0</span>} then {
		<span class=3D"hljs-keyword">break</span>
	    }
	    <span class=3D"hljs-keyword">if</span> {($status =3D=3D <span class=3D=
"hljs-number">1</span>) &amp;&amp;(! $breakOnNext)} then {
		<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-strin=
g">"FLIP has more data to send \n  but the bootloader cannot accept them."<=
/span>
		messageBox <span class=3D"hljs-string">"Programming Information"</span> <=
span class=3D"hljs-keyword">error</span> $message
		<span class=3D"hljs-keyword">break</span>
	    }
	    <span class=3D"hljs-keyword">if</span> {$breakOnNext} then {
		<span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"hlj=
s-number">2</span>} then {
		    <span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-s=
tring">"The bootloader expected more data from FLIP"</span>
		    messageBox <span class=3D"hljs-string">"Programming Information"</spa=
n> <span class=3D"hljs-keyword">error</span> $message
		    <span class=3D"hljs-keyword">break</span>
		} else {
		    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-nu=
mber">1</span>
		    <span class=3D"hljs-keyword">break</span>
		}
	    }
	} elseif {$flipStates(rs232Comm) =3D=3D <span class=3D"hljs-string">"on"</=
span>} {
<span class=3D"hljs-comment">	    #david eseo</span>
	    <span class=3D"hljs-keyword">if</span> {($protocol(name) =3D=3D <span =
class=3D"hljs-string">"rs232can"</span>) ||($protocol(name) =3D=3D <span cl=
ass=3D"hljs-string">"canview"</span>)} then {
		<span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"hlj=
s-number">0</span>} then {
		    <span class=3D"hljs-keyword">break</span>
		}
		<span class=3D"hljs-keyword">if</span> {($status =3D=3D <span class=3D"hl=
js-number">1</span>) &amp;&amp;(! $breakOnNext)} then {
		    <span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-s=
tring">"FLIP has more data to send \n  but the bootloader cannot accept the=
m."</span>
		    messageBox <span class=3D"hljs-string">"Programming Information"</spa=
n> <span class=3D"hljs-keyword">error</span> $message
		    <span class=3D"hljs-keyword">break</span>
		}
		<span class=3D"hljs-keyword">if</span> {$breakOnNext} then {
		    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D=
"hljs-number">2</span>} then {
			<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-stri=
ng">"The bootloader expected more data from FLIP"</span>
			messageBox <span class=3D"hljs-string">"Programming Information"</span> =
<span class=3D"hljs-keyword">error</span> $message
			<span class=3D"hljs-keyword">break</span>
		    } else {
			<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numbe=
r">1</span>
			<span class=3D"hljs-keyword">break</span>
		    }
		}
	    } elseif {$breakOnNext ||($status !=3D <span class=3D"hljs-number">1</=
span>)} {
		<span class=3D"hljs-keyword">break</span>
	    }
<span class=3D"hljs-comment">	    #fin david eseo</span>
	} elseif {$flipStates(usbComm) =3D=3D <span class=3D"hljs-string">"on"</sp=
an>} {
	    <span class=3D"hljs-keyword">if</span> {$breakOnNext ||($status !=3D <=
span class=3D"hljs-number">1</span>)} then {
		<span class=3D"hljs-keyword">break</span>
	    }
	}
	<span class=3D"hljs-keyword">incr</span> frameIndex
	<span class=3D"hljs-keyword">update</span>
    }
    <span class=3D"hljs-keyword">after</span> <span class=3D"hljs-number">1=
00</span>
    <span class=3D"hljs-keyword">update</span>
    updateGUI onDeviceActionStop
    <span class=3D"hljs-keyword">set</span> stopT [<span class=3D"hljs-keyw=
ord">clock</span> clicks -milliseconds]
    cmdsResetProgressBar
    <span class=3D"hljs-keyword">if</span> {$progBar(cancel)} then {
	<span class=3D"hljs-keyword">set</span> mssg <span class=3D"hljs-string">"=
$::deviceArray(name) programming canceled."</span>
	log_message $mssg
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    } elseif {$status =3D=3D <span class=3D"hljs-number">1</span>} {
	<span class=3D"hljs-keyword">set</span> mssg <span class=3D"hljs-string">"=
$frameIndex frames sent in [expr ($stopT - $startT)/1000.0]sec. "</span>
	<span class=3D"hljs-keyword">if</span> {! $testArray(protocol)} then {
	    log_message $mssg
	    actionsLog_message <span class=3D"hljs-string">"$::deviceArray(name) p=
rogrammed"</span>
	}
    }
    <span class=3D"hljs-keyword">if</span> {([<span class=3D"hljs-keyword">=
info</span> exists ::deviceArray(bsb)]) &amp;&amp;(!$progBar(cancel)) &amp;=
&amp;($status =3D=3D <span class=3D"hljs-number">1</span>)} then {
	cmdsSetBsbToZero
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(bootloaderId)]} then {
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray(bootloaderId) =3D =
$::deviceArray(bootloaderId)"</span>
	<span class=3D"hljs-keyword">if</span> {$::deviceArray(bootloaderId) =3D=
=3D <span class=3D"hljs-string">"0001"</span>} then {
	    <span class=3D"hljs-keyword">set</span> status [readBootloaderCrcCheck=
]
	}
	<span class=3D"hljs-keyword">if</span> {$::deviceArray(bootloaderId) =3D=
=3D <span class=3D"hljs-string">"0002"</span>} then {
<span class=3D"hljs-comment">	    #dbgShowVar "protcl =3D $protcl"</span>
	    <span class=3D"hljs-keyword">if</span> {$protcl !=3D <span class=3D"hl=
js-string">"USB_DFU"</span>} then {
		<span class=3D"hljs-keyword">set</span> status [readBootloaderCrcCheck]
	    }
	}
    } else {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
    <span class=3D"hljs-keyword">set</span> loadConfig(programDevice) <span=
 class=3D"hljs-string">"setupProgramDevice"</span>
<span class=3D"hljs-comment">    #dbgShowVar "status =3D $status"</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> cmdsRes=
etProgressBar</span> {} {
    .f_status.pb configure -color [.main cget -background] -shape flat -per=
cent <span class=3D"hljs-number">0</span>
    bind . &lt;Escape&gt; {}
    <span class=3D"hljs-keyword">update</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> cmdsSet=
BsbToZero</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(bsb) <span class=
=3D"hljs-number">00</span>
    <span class=3D"hljs-keyword">set</span> p <span class=3D"hljs-string">"=
ptclWriteBSB"</span>
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> procs $p] =3D=3D $p} then {
	<span class=3D"hljs-keyword">set</span> status [$p $::deviceArray(bsb)]
    }
    <span class=3D"hljs-keyword">if</span> {$status} then {
	<span class=3D"hljs-keyword">set</span> p <span class=3D"hljs-string">"ptc=
lReadBSB"</span>
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info=
</span> procs $p] =3D=3D $p} then {
	    $p
	}
    } else {
	log_message <span class=3D"hljs-string">"Could not program BSB."</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> cmdsTog=
gleMemory</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> index [<span class=3D"hljs-keyw=
ord">lsearch</span> $::deviceArray(memoryList) $::deviceArray(currentMemory=
)]
    <span class=3D"hljs-keyword">if</span> {$index &lt; [<span class=3D"hlj=
s-keyword">expr</span> [<span class=3D"hljs-keyword">llength</span> $::devi=
ceArray(memoryList)] - <span class=3D"hljs-number">1</span>]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(currentMemory) [<spa=
n class=3D"hljs-keyword">lindex</span> $::deviceArray(memoryList) [<span cl=
ass=3D"hljs-keyword">expr</span> $index + <span class=3D"hljs-number">1</sp=
an>]]
	<span class=3D"hljs-keyword">set</span> ::deviceArray(currentMemoryButton)=
 [<span class=3D"hljs-keyword">lindex</span> $::deviceArray(memoryButtonLis=
t) [<span class=3D"hljs-keyword">expr</span> $index + <span class=3D"hljs-n=
umber">1</span>]]
	<span class=3D"hljs-keyword">incr</span> index <span class=3D"hljs-number"=
>2</span>
    } else {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(currentMemory) [<spa=
n class=3D"hljs-keyword">lindex</span> $::deviceArray(memoryList) <span cla=
ss=3D"hljs-number">0</span>]
	<span class=3D"hljs-keyword">set</span> ::deviceArray(currentMemoryButton)=
 [<span class=3D"hljs-keyword">lindex</span> $::deviceArray(memoryButtonLis=
t) <span class=3D"hljs-number">0</span>]
	<span class=3D"hljs-keyword">set</span> index <span class=3D"hljs-number">=
1</span>
    }
    cmdsImportCurrentMemoryNameSpace $::deviceArray(currentMemory)
    updateGuiParameters
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> cmdsImp=
ortCurrentMemoryNameSpace</span> {<span class=3D"hljs-keyword">memory</span=
>} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">foreach</span> m $::deviceArray(memoryList=
) {
	<span class=3D"hljs-keyword">namespace</span> forget ::${m}::*
    }
    <span class=3D"hljs-keyword">namespace</span> import ::${memory}::*
<span class=3D"hljs-comment">    #dbgShowVar "$memory selected"</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> cmdsOnE=
raseOptionsChange</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> gui
    writeBuffer eraseType $gui(eraseType)
    writeBuffer erasePossibleBlocks $gui(erasePossibleBlocks)
    writeBuffer erasePossibleBlock0 $gui(erasePossibleBlock0)
    writeBuffer eraseBlock0 $gui(eraseBlock0)
    writeBuffer erasePossibleBlock1 $gui(erasePossibleBlock1)
    writeBuffer eraseBlock1 $gui(eraseBlock1)
    writeBuffer erasePossibleBlock2 $gui(erasePossibleBlock2)
    writeBuffer eraseBlock2 $gui(eraseBlock2)
    writeBuffer erasePossibleBlock3 $gui(erasePossibleBlock3)
    writeBuffer eraseBlock3 $gui(eraseBlock3)
    writeBuffer erasePossibleBlock4 $gui(erasePossibleBlock4)
    writeBuffer eraseBlock4 $gui(eraseBlock4)
    <span class=3D"hljs-keyword">if</span> {$gui(eraseType) =3D=3D <span cl=
ass=3D"hljs-string">"full"</span>} then {
	<span class=3D"hljs-keyword">set</span> gui(blankCheckMin) [<span class=3D=
"hljs-keyword">format</span> $gui(infoFormat) <span class=3D"hljs-number">0=
</span>]
	<span class=3D"hljs-keyword">set</span> gui(blankCheckMax) [<span class=3D=
"hljs-keyword">format</span> $gui(infoFormat) <span class=3D"hljs-number">0=
</span>x[readBuffer maxAddr]]
    } else {
	<span class=3D"hljs-keyword">set</span> lMin [<span class=3D"hljs-keyword"=
>list</span>]
	<span class=3D"hljs-keyword">set</span> lMax [<span class=3D"hljs-keyword"=
>list</span>]
	<span class=3D"hljs-keyword">foreach</span> i {<span class=3D"hljs-number"=
>0</span> <span class=3D"hljs-number">1</span> <span class=3D"hljs-number">=
2</span> <span class=3D"hljs-number">3</span> <span class=3D"hljs-number">4=
</span>} min {<span class=3D"hljs-number">0x0</span> <span class=3D"hljs-nu=
mber">0x2000</span> <span class=3D"hljs-number">0x4000</span> <span class=
=3D"hljs-number">0x8000</span> <span class=3D"hljs-number">0xC000</span>} m=
ax {<span class=3D"hljs-number">0x1FFF</span> <span class=3D"hljs-number">0=
x3FFF</span> <span class=3D"hljs-number">0x7FFF</span> <span class=3D"hljs-=
number">0xBFFF</span> <span class=3D"hljs-number">0xFFFF</span>} {
	    <span class=3D"hljs-keyword">if</span> {$gui(eraseBlock${i})} then {
		<span class=3D"hljs-keyword">lappend</span> lMin $min
		<span class=3D"hljs-keyword">lappend</span> lMax $max
	    }
	}
	<span class=3D"hljs-keyword">set</span> min <span class=3D"hljs-number">0x=
FFFF</span>
	<span class=3D"hljs-keyword">set</span> max <span class=3D"hljs-number">0x=
0000</span>
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">llen=
gth</span> $lMin] !=3D <span class=3D"hljs-number">0</span>} then {
	    <span class=3D"hljs-keyword">foreach</span> i $lMin {
		<span class=3D"hljs-keyword">if</span> {$i &lt; $min} then {
		    <span class=3D"hljs-keyword">set</span> min $i
		}
	    }
	    <span class=3D"hljs-keyword">foreach</span> i $lMax {
		<span class=3D"hljs-keyword">if</span> {$i &gt; $max} then {
		    <span class=3D"hljs-keyword">set</span> max $i
		}
	    }
	    <span class=3D"hljs-keyword">set</span> gui(blankCheckMin) [<span clas=
s=3D"hljs-keyword">format</span> $gui(infoFormat) $min]
	    <span class=3D"hljs-keyword">set</span> gui(blankCheckMax) [<span clas=
s=3D"hljs-keyword">format</span> $gui(infoFormat) $max]
	} else {
	    <span class=3D"hljs-keyword">set</span> gui(blankCheckMin) [<span clas=
s=3D"hljs-keyword">format</span> $gui(infoFormat) <span class=3D"hljs-numbe=
r">0</span>]
	    <span class=3D"hljs-keyword">set</span> gui(blankCheckMax) [<span clas=
s=3D"hljs-keyword">format</span> $gui(infoFormat) <span class=3D"hljs-numbe=
r">0</span>x[readBuffer maxAddr]]
	}
    }
    writeBuffer blankCheckMin $gui(blankCheckMin)
    writeBuffer blankCheckMax $gui(blankCheckMax)
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> cmdsOnR=
eadOptionsChange</span> {} {
    <span class=3D"hljs-keyword">global</span> gui
    writeBuffer startReadAddr $gui(startReadAddr)
    writeBuffer endReadAddr $gui(endReadAddr)
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> cmdsSet=
MemoryParameters</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> gui
    writeBuffer uDefSizeValue [readDeviceArray memorySize]
    writeBuffer dDepSizeValue [readDeviceArray memorySize]
    writeBuffer sizeValue [readBuffer dDepSizeValue]
    writeBuffer rangeOnDeviceProg lastLoad
    writeBuffer fileLoaded <span class=3D"hljs-string">"no"</span>
    writeBuffer sizeType deviceDependent
    writeBuffer maxAddr [<span class=3D"hljs-keyword">format</span> <span c=
lass=3D"hljs-string">"%06X"</span> [<span class=3D"hljs-keyword">expr</span=
> ([readBuffer sizeValue] * <span class=3D"hljs-number">1024</span>) - <spa=
n class=3D"hljs-number">1</span>]]
    writeBuffer blankValueType deviceDependent
    writeBuffer uDefBlankValue FF
    writeBuffer dDepBlankValue [readDeviceArray blankValue]
    writeBuffer blankValue [readBuffer dDepBlankValue]
    writeBuffer resetBufferOnLoading no
    writeBuffer uDefMinProgAddr <span class=3D"hljs-number">000000</span>
    writeBuffer uDefMaxProgAddr [readBuffer maxAddr]
    writeBuffer lastLoadMinProgAddr <span class=3D"hljs-number">000000</spa=
n>
    writeBuffer lastLoadMaxProgAddr [readBuffer maxAddr]
    writeBuffer minProgAddr <span class=3D"hljs-number">0</span>
    writeBuffer maxProgAddr [readBuffer maxAddr]
    writeBuffer loadingOffset <span class=3D"hljs-string">"0000"</span>
    writeBuffer hexFileAddrOffset <span class=3D"hljs-string">"0000"</span>
    writeBuffer hexFileName <span class=3D"hljs-string">""</span>
    writeBuffer hexFileSize <span class=3D"hljs-string">""</span>
    writeBuffer modifyAddress <span class=3D"hljs-string">""</span>
    writeBuffer modifyData <span class=3D"hljs-string">""</span>
    writeBuffer numberOfVisibleLines <span class=3D"hljs-number">24</span>
    writeBuffer topDisplayedLine <span class=3D"hljs-number">1</span>
    writeBuffer bottomDisplayedLine [readBuffer numberOfVisibleLines]
    writeBuffer numberOfLines [<span class=3D"hljs-keyword">expr</span> (<s=
pan class=3D"hljs-string">"0x[readBuffer maxAddr]"</span> + <span class=3D"=
hljs-number">1</span>) / <span class=3D"hljs-number">16</span>]
    writeBuffer startFillAddr [<span class=3D"hljs-keyword">format</span> $=
gui(infoFormat) <span class=3D"hljs-number">0</span>x[readBuffer minProgAdd=
r]]
    writeBuffer endFillAddr [<span class=3D"hljs-keyword">format</span> $gu=
i(infoFormat) <span class=3D"hljs-number">0</span>x[readBuffer maxProgAddr]=
]
    writeBuffer fillValue [readBuffer blankValue]
    writeBuffer maxSize [readDeviceArray memorySize]
    writeBuffer blankCheckMin [<span class=3D"hljs-keyword">format</span> $=
gui(infoFormat) <span class=3D"hljs-number">0</span>]
    writeBuffer blankCheckMax [<span class=3D"hljs-keyword">format</span> $=
gui(infoFormat) [<span class=3D"hljs-keyword">expr</span> ([readBuffer size=
Value] * <span class=3D"hljs-number">1024</span>) - <span class=3D"hljs-num=
ber">1</span>]]
    writeBuffer startReadAddr [<span class=3D"hljs-keyword">format</span> $=
gui(infoFormat) <span class=3D"hljs-number">0</span>]
    writeBuffer endReadAddr [<span class=3D"hljs-keyword">format</span> $gu=
i(infoFormat) <span class=3D"hljs-number">0</span>x[readBuffer maxAddr]]
    writeBuffer flowErase $gui(flowErase)
    writeBuffer flowBlankCheck $gui(flowBlankCheck)
    writeBuffer flowProgram $gui(flowProgram)
    writeBuffer flowVerify $gui(flowVerify)
    writeBuffer flowSpecialBytes $gui(flowSpecialBytes)
    writeBuffer flowEraseColor $gui(flowEraseColor)
    writeBuffer flowBlankCheckColor $gui(flowBlankCheckColor)
    writeBuffer flowProgramColor $gui(flowProgramColor)
    writeBuffer flowVerifyColor $gui(flowVerifyColor)
    writeBuffer flowSpecialBytesColor $gui(flowSpecialBytesColor)
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> cmdsRea=
dSpecialBytes</span> {} {
    <span class=3D"hljs-keyword">global</span> deviceArrayBackup
    devcUpdateDeviceFrame
    <span class=3D"hljs-keyword">foreach</span> Byte [<span class=3D"hljs-k=
eyword">array</span> names deviceArray] {
	<span class=3D"hljs-keyword">set</span> deviceArrayBackup($Byte) $::device=
Array($Byte)
    }
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> cmdsRes=
toreSpecialBytes</span> {} {
    <span class=3D"hljs-keyword">global</span> deviceArrayBackup
    <span class=3D"hljs-keyword">foreach</span> Byte [<span class=3D"hljs-k=
eyword">array</span> names deviceArrayBackup] {
	<span class=3D"hljs-keyword">set</span> ::deviceArray($Byte) $deviceArrayB=
ackup($Byte)
    }
    devcSetDeviceSpecialBytes
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ta</spa=
n> {Name Index Op} {
    <span class=3D"hljs-keyword">upvar</span> $Name X
<span class=3D"hljs-comment">    #dbgShowInfo "- ARRAY TRACING - $Name $Ind=
ex $Op $X([subst $Index])"</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tv</spa=
n> {Name Index Op} {
    <span class=3D"hljs-keyword">upvar</span> $Name X
<span class=3D"hljs-comment">    #dbgShowInfo "- VARIABLE TRACING - $Name $=
Index $Op $X"</span>
}
<span class=3D"hljs-comment">#dbgBeginSrc [info script]</span>
<span class=3D"hljs-keyword">global</span> projDir
<span class=3D"hljs-keyword">source</span> $projDir/tcl/devices/devices_com=
mon.tcl
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> t89c511=
5</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> protcl protocol nAddrBits fl=
ipFont rs232standard canstandard expAnsw testFlag buffer flowButtons flipSt=
ates bootloaderVerDependent
    <span class=3D"hljs-keyword">set</span> children_List [<span class=3D"h=
ljs-keyword">split</span> [winfo children .main.f_device]]
    <span class=3D"hljs-keyword">foreach</span> item $children_List {
	<span class=3D"hljs-keyword">if</span> {$item !=3D <span class=3D"hljs-str=
ing">".main.f_device.f_deviceName"</span>} then {
	    destroy $item
	}
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">a=
rray</span> exists ::deviceArray]} then {
	<span class=3D"hljs-keyword">array</span> <span class=3D"hljs-keyword">uns=
et</span> ::deviceArray
    }
    <span class=3D"hljs-keyword">set</span> ::deviceArray(name) <span class=
=3D"hljs-string">"AT89C5115"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(communicationList=
) <span class=3D"hljs-string">"RS232"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(memoryList) [<spa=
n class=3D"hljs-keyword">list</span> FLASH EEPROM]
    <span class=3D"hljs-keyword">set</span> ::deviceArray(memoryButtonList)=
 [<span class=3D"hljs-keyword">list</span> <span class=3D"hljs-string">"Sel=
ect EEPROM"</span> <span class=3D"hljs-string">"Select FLASH"</span>]
    <span class=3D"hljs-keyword">set</span> ::deviceArray(memoryColor) [<sp=
an class=3D"hljs-keyword">list</span> <span class=3D"hljs-string">"#88a67d"=
</span> <span class=3D"hljs-string">"wheat"</span>]
    <span class=3D"hljs-keyword">set</span> ::deviceArray(currentMemory) <s=
pan class=3D"hljs-string">"FLASH"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(currentMemoryButt=
on) <span class=3D"hljs-string">"Select EEPROM"</span>
    <span class=3D"hljs-keyword">set</span> bootloaderVerDependent(eeprom) =
<span class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> bootloaderVerDependent(eb) <spa=
n class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> bootloaderVerDependent(startApp=
li) <span class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> bootloaderVerDependent(p1p3p4_c=
onfig) <span class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> protocol(frameLengthW) <span cl=
ass=3D"hljs-number">128</span>
    <span class=3D"hljs-keyword">set</span> protocol(frameLengthR) <span cl=
ass=3D"hljs-number">16</span>
    <span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keywo=
rd">eval</span> ::FLASH:: {
	<span class=3D"hljs-keyword">variable</span> buffer
	<span class=3D"hljs-keyword">variable</span> deviceArray
	<span class=3D"hljs-keyword">set</span> deviceArray(memorySize) <span clas=
s=3D"hljs-number">16</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankValue) <span clas=
s=3D"hljs-string">"FF"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erase) <span class=3D"hljs-=
string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(blankCheck) <span class=3D"=
hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseType) <span class=3D"h=
ljs-string">"full"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlocks) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock0) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock0) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock1) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock1) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock2) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock2) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock3) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock3) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock4) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock4) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(progStart) <span class=
=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(displayData) <span cla=
ss=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankCheck) <span clas=
s=3D"hljs-string">"01"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(programData) <span cla=
ss=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">namespace</span> export writeBuffer readBuffe=
r readDeviceArray initBuffer bufferChecksum
    }
    <span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keywo=
rd">eval</span> ::EEPROM:: {
	<span class=3D"hljs-keyword">variable</span> buffer
	<span class=3D"hljs-keyword">variable</span> deviceArray
	<span class=3D"hljs-keyword">set</span> deviceArray(memorySize) <span clas=
s=3D"hljs-number">2</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankValue) <span clas=
s=3D"hljs-string">"FF"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erase) <span class=3D"hljs-=
string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(blankCheck) <span class=3D"=
hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseType) <span class=3D"h=
ljs-string">"full"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlocks) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock0) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock0) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock1) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock1) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock2) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock2) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock3) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock3) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock4) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock4) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(progStart) <span class=
=3D"hljs-string">"01"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(displayData) <span cla=
ss=3D"hljs-string">"02"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankCheck) <span clas=
s=3D"hljs-string">"XX"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(programData) <span cla=
ss=3D"hljs-string">"07"</span>
	<span class=3D"hljs-keyword">namespace</span> export writeBuffer readBuffe=
r readDeviceArray initBuffer bufferChecksum
    }
    <span class=3D"hljs-keyword">foreach</span> M $::deviceArray(memoryList=
) {
	<span class=3D"hljs-keyword">proc</span> ::${M}::writeBuffer {index data} =
{
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">set</span> buffer($index) $data
	    <span class=3D"hljs-keyword">return</span>
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::readBuffer {index} {
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">return</span> $buffer($index)
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::readDeviceArray {index} {
	    <span class=3D"hljs-keyword">variable</span> deviceArray
	    <span class=3D"hljs-keyword">return</span> $deviceArray($index)
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::initBuffer {} {
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">global</span> flipStates
	    <span class=3D"hljs-keyword">variable</span> deviceArray
	    <span class=3D"hljs-keyword">set</span> max [<span class=3D"hljs-keywo=
rd">expr</span> $deviceArray(memorySize) * <span class=3D"hljs-number">1024=
</span>]
	    <span class=3D"hljs-keyword">if</span> {$flipStates(simul)} then {
		<span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">set=
</span> i <span class=3D"hljs-number">0</span>} {$i &lt; $max} {<span class=
=3D"hljs-keyword">incr</span> i} {
		    <span class=3D"hljs-keyword">set</span> buffer([<span class=3D"hljs-k=
eyword">format</span> %<span class=3D"hljs-number">06</span>X $i]) $deviceA=
rray(blankValue)
		}
	    } else {
		initBuffer_C $max $deviceArray(blankValue)
	    }
	    <span class=3D"hljs-keyword">return</span>
	}
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::F=
LASH::bufferChecksum</span> {} {
	<span class=3D"hljs-keyword">variable</span> buffer
	<span class=3D"hljs-keyword">global</span> flipStates
	<span class=3D"hljs-keyword">set</span> min $buffer(minProgAddr)
	<span class=3D"hljs-keyword">set</span> max $buffer(maxProgAddr)
	<span class=3D"hljs-keyword">if</span> {$flipStates(simul)} then {
	    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number"=
>0xCAFEFADE</span>
	} else {
	    <span class=3D"hljs-keyword">return</span> [computeBufferChecksum_C $m=
in $max]
	}
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::E=
EPROM::bufferChecksum</span> {} {
	<span class=3D"hljs-keyword">variable</span> buffer
	<span class=3D"hljs-keyword">global</span> flipStates
	<span class=3D"hljs-keyword">set</span> min $buffer(minProgAddr)
	<span class=3D"hljs-keyword">set</span> max $buffer(maxProgAddr)
	<span class=3D"hljs-keyword">if</span> {$flipStates(simul)} then {
	    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number"=
>0xDEADBEEF</span>
	} else {
	    <span class=3D"hljs-keyword">return</span> [computeBufferChecksum_C $m=
in $max]
	}
    }
    <span class=3D"hljs-keyword">set</span> ::deviceArray(jumpAdd) <span cl=
ass=3D"hljs-string">"0000"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(specialSynchro) <=
span class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(RS232ProtocolsLis=
t) <span class=3D"hljs-string">"Standard Enhanced"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(CANProtocolsList)=
 <span class=3D"hljs-string">"Standard Enhanced"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(nnbConnect) <span=
 class=3D"hljs-string">"FF"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(nnbProg) <span cl=
ass=3D"hljs-string">"XX"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(crisConnect) <spa=
n class=3D"hljs-string">"00"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(crisProg) <span c=
lass=3D"hljs-string">"XX"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(btc1) <span class=
=3D"hljs-string">"XX"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(btc2) <span class=
=3D"hljs-string">"XX"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(btc3) <span class=
=3D"hljs-string">"XX"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(p1_config) <span =
class=3D"hljs-string">"XX"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(p3_config) <span =
class=3D"hljs-string">"XX"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(p4_config) <span =
class=3D"hljs-string">"XX"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev0) [<span cla=
ss=3D"hljs-keyword">list</span> FF]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev0Test) <span =
class=3D"hljs-string">"FF"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev1) [<span cla=
ss=3D"hljs-keyword">list</span> FE]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev1Test) <span =
class=3D"hljs-string">"FE"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev2Test) <span =
class=3D"hljs-string">"FC"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev2) [<span cla=
ss=3D"hljs-keyword">list</span> FC XX]
    <span class=3D"hljs-keyword">set</span> expAnsw(readManufId) <span clas=
s=3D"hljs-number">58</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId1) XX
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId2) XX
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId3) XX
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock0) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock1) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock2) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock3) <span cla=
ss=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock4) <span cla=
ss=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> testFlag(readDevBootId1) <span =
class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(readDevBootId2) <span =
class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(sbv) <span class=3D"hl=
js-string">"FC"</span>
    <span class=3D"hljs-keyword">set</span> fBlocks .deviceErase.f_erase.f_=
blocks
    <span class=3D"hljs-keyword">set</span> bBlock0 $fBlocks.b_block0
    <span class=3D"hljs-keyword">set</span> bBlock1 $fBlocks.b_block1
    <span class=3D"hljs-keyword">set</span> bBlock2 $fBlocks.b_block2
    <span class=3D"hljs-keyword">set</span> bBlock3 $fBlocks.b_block3
    <span class=3D"hljs-keyword">set</span> bBlock4 $fBlocks.b_block4
    setBalloon $bBlock0 <span class=3D"hljs-string">"Erase memory between 0=
000 and 1FFF"</span>
    setBalloon $bBlock1 <span class=3D"hljs-string">"Erase memory between 2=
000 and 3FFF"</span>
    setBalloon $bBlock2 <span class=3D"hljs-string">"Erase memory between 4=
000 and 7FFF"</span>
    $bBlock3 configure -state disabled
    $bBlock4 configure -state disabled
    .main.f_device.f_deviceName.l_device configure -text $::deviceArray(nam=
e)
    .main.f_device.f_deviceName configure -relief groove
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(sbv)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(sbv) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(bsb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(bsb) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(ssb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(ssb) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(hsb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(hsb) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(eb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(eb) <span class=3D"h=
ljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(deviceBootId1)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(deviceBootId1) <span=
 class=3D"hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(deviceBootId2)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(deviceBootId2) <span=
 class=3D"hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(bljbFuse)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(bljbFuse) <span clas=
s=3D"hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(x2Fuse)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(x2Fuse) <span class=
=3D"hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(level)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(level) X
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(eraseType)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(eraseType) <span cla=
ss=3D"hljs-string">"full"</span>
    }
    <span class=3D"hljs-keyword">set</span> nAddrBits <span class=3D"hljs-n=
umber">4</span>
    <span class=3D"hljs-keyword">set</span> rs232standard(readHwByte) <span=
 class=3D"hljs-string">":020000050B00EE"</span>
    <span class=3D"hljs-keyword">set</span> rs232standard(readBootlVer) <sp=
an class=3D"hljs-string">":020000050F00EA"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowErase) <span =
class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowBlankCheck) <=
span class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowProgram) <spa=
n class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowVerify) <span=
 class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowSpecialBytes)=
 <span class=3D"hljs-number">0</span>
    wm title .deviceErase <span class=3D"hljs-string">"$::deviceArray(name)=
 Erase"</span>
    .deviceErase.f_erase.f_blocks.b_blockErase configure -state normal
    <span class=3D"hljs-keyword">set</span> fReadOnly .main.f_device.f_read=
Only
    frame $fReadOnly -relief groove -borderwidth <span class=3D"hljs-number=
">1</span>
    <span class=3D"hljs-keyword">set</span> fManufId $fReadOnly.f_manufId
    frame $fManufId -relief flat
    <span class=3D"hljs-keyword">set</span> lManufId $fManufId.l_manufId
    label $lManufId -text <span class=3D"hljs-string">"Manufact. Id"</span>=
 -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    <span class=3D"hljs-keyword">set</span> eManufId $fManufId.e_manufId
    entry $eManufId -textvariable ::deviceArray(manufId) -width <span class=
=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eManufId <span class=3D"hljs-string">"Manufacturer code val=
ue"</span>
    pack config $lManufId $eManufId -padx <span class=3D"hljs-number">1</sp=
an> -side left
    pack config $fManufId -side top -ipady <span class=3D"hljs-number">1</s=
pan> -fill both
    <span class=3D"hljs-keyword">set</span> fDeviceIds $fReadOnly.f_deviceI=
ds
    frame $fDeviceIds -relief flat
    <span class=3D"hljs-keyword">set</span> lDeviceIds $fDeviceIds.l_device=
Ids
    label $lDeviceIds -text <span class=3D"hljs-string">"Device Ids"</span>=
 -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    <span class=3D"hljs-keyword">set</span> eDeviceId1 $fDeviceIds.e_device=
Id1
    entry $eDeviceId1 -textvariable ::deviceArray(deviceId1) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId1 <span class=3D"hljs-string">"Family code value"<=
/span>
    <span class=3D"hljs-keyword">set</span> eDeviceId2 $fDeviceIds.e_device=
Id2
    entry $eDeviceId2 -textvariable ::deviceArray(deviceId2) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId2 <span class=3D"hljs-string">"Device name code"</=
span>
    <span class=3D"hljs-keyword">set</span> eDeviceId3 $fDeviceIds.e_device=
Id3
    entry $eDeviceId3 -textvariable ::deviceArray(deviceId3) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId3 <span class=3D"hljs-string">"Device revision num=
ber"</span>
    pack config $lDeviceIds $eDeviceId1 $eDeviceId2 $eDeviceId3 -padx <span=
 class=3D"hljs-number">1</span> -side left
    pack config $fDeviceIds -side top -ipady <span class=3D"hljs-number">1<=
/span> -fill both
    <span class=3D"hljs-keyword">set</span> fDeviceBootIds $fReadOnly.f_dev=
iceBootIds
    frame $fDeviceBootIds -relief flat
    <span class=3D"hljs-keyword">set</span> lDeviceBootIds $fDeviceBootIds.=
l_deviceBootIds
    label $lDeviceBootIds -text <span class=3D"hljs-string">"Device Boot Id=
s"</span> -font $flipFont -anchor w -width <span class=3D"hljs-number">16</=
span>
    setBalloon $lDeviceBootIds <span class=3D"hljs-string">"Boot Ids 1, 2: =
read-only"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceBootId1 $fDeviceBootIds.=
e_deviceBootId1
    entry $eDeviceBootId1 -textvariable ::deviceArray(deviceBootId1) -width=
 <span class=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceBootId1 <span class=3D"hljs-string">"Boot Id 1 value=
"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceBootId2 $fDeviceBootIds.=
e_deviceBootId2
    entry $eDeviceBootId2 -textvariable ::deviceArray(deviceBootId2) -width=
 <span class=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceBootId2 <span class=3D"hljs-string">"Boot Id 2 value=
"</span>
    pack config $lDeviceBootIds $eDeviceBootId1 $eDeviceBootId2 -padx <span=
 class=3D"hljs-number">1</span> -side left
    pack config $fDeviceBootIds -side top -ipady <span class=3D"hljs-number=
">1</span> -fill both
    <span class=3D"hljs-keyword">set</span> fHSB $fReadOnly.f_hsb
    frame $fHSB -relief flat
    <span class=3D"hljs-keyword">set</span> lHSB $fHSB.l_hsb
    label $lHSB -text <span class=3D"hljs-string">"Hardware Byte"</span> -f=
ont $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lHSB <span class=3D"hljs-string">"Hardware Security Byte: r=
ead-only"</span>
    <span class=3D"hljs-keyword">set</span> eHSB $fHSB.e_hsb
    entry $eHSB -textvariable ::deviceArray(hsb) -width <span class=3D"hljs=
-number">3</span> -font $flipFont -state disabled
    setBalloon $eHSB <span class=3D"hljs-string">"Hardware Security Byte va=
lue"</span>
    pack config $lHSB $eHSB -padx <span class=3D"hljs-number">1</span> -sid=
e left
    pack config $fHSB -side top -ipady <span class=3D"hljs-number">1</span>=
 -fill both
    <span class=3D"hljs-keyword">set</span> fBootlVer $fReadOnly.f_bootlVer
    frame $fBootlVer -relief flat
    <span class=3D"hljs-keyword">set</span> lBootlVer $fBootlVer.l_bootlVer
    label $lBootlVer -text <span class=3D"hljs-string">"Bootloader Ver."</s=
pan> -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lBootlVer <span class=3D"hljs-string">"Bootloader Version: =
read-only"</span>
    <span class=3D"hljs-keyword">set</span> eBootlVer $fBootlVer.e_bootlVer
    entry $eBootlVer -textvariable ::deviceArray(bootlVer) -width <span cla=
ss=3D"hljs-number">5</span> -font $flipFont -state disabled
    setBalloon $eBootlVer <span class=3D"hljs-string">"Bootloader Version"<=
/span>
    pack config $lBootlVer $eBootlVer -padx <span class=3D"hljs-number">1</=
span> -side left
    pack config $fBootlVer -side top -ipady <span class=3D"hljs-number">1</=
span> -fill both
    pack configure $fReadOnly -side top -padx <span class=3D"hljs-number">5=
</span> -fill both
    <span class=3D"hljs-keyword">set</span> fFuses .main.f_device.f_fuses
    frame $fFuses -relief groove -borderwidth <span class=3D"hljs-number">1=
</span>
    <span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-number">0</=
span>} then {
	<span class=3D"hljs-keyword">set</span> bBLJB $fFuses.b_bljb
	checkbutton $bBLJB -text <span class=3D"hljs-string">"BLJB"</span> -font $=
flipFont -<span class=3D"hljs-keyword">variable</span> ::deviceArray(bljbFu=
se) -onvalue <span class=3D"hljs-number">0</span> -offvalue <span class=3D"=
hljs-number">1</span> -indicatoron true -state disabled
	setBalloon $bBLJB <span class=3D"hljs-string">"Boot Loader Jump Bit \nSet =
=3D 0 / Unset =3D 1"</span>
    }
    <span class=3D"hljs-keyword">set</span> bX2 $fFuses.b_x2
    checkbutton $bX2 -text <span class=3D"hljs-string">"X2"</span> -font $f=
lipFont -<span class=3D"hljs-keyword">variable</span> ::deviceArray(x2Fuse)=
 -onvalue <span class=3D"hljs-number">0</span> -offvalue <span class=3D"hlj=
s-number">1</span> -indicatoron true -state disabled
    setBalloon $bX2 <span class=3D"hljs-string">"X2 fuse bit \nSet =3D 0 / =
Unset =3D 1"</span>
    <span class=3D"hljs-keyword">set</span> bConfigPorts $fFuses.b_cfgp
    button $bConfigPorts -bd <span class=3D"hljs-number">3</span> -text <sp=
an class=3D"hljs-string">"Configure HW"</span> -font $flipFont -command {cb=
DboxWakeUp .configP1P3P4Window} -state disabled -width <span class=3D"hljs-=
number">13</span>
    setBalloon $bConfigPorts <span class=3D"hljs-string">"Configure Hardwar=
e Conditions"</span>
    pack config $bConfigPorts $bX2 -side left -padx <span class=3D"hljs-num=
ber">5</span> -pady <span class=3D"hljs-number">5</span> -anchor w
    pack configure $fFuses -side top -padx <span class=3D"hljs-number">5</s=
pan> -pady <span class=3D"hljs-number">5</span> -fill x
    <span class=3D"hljs-keyword">set</span> f_BSB_SBV .main.f_device.f_bsb_=
sbv
    frame $f_BSB_SBV -relief groove -borderwidth <span class=3D"hljs-number=
">1</span>
    <span class=3D"hljs-keyword">set</span> f_BSB $f_BSB_SBV.f_bsb
    frame $f_BSB -relief flat
    <span class=3D"hljs-keyword">set</span> l_BSB $f_BSB.l_bsb
    label $l_BSB -text <span class=3D"hljs-string">"Device BSB &amp; EB"</s=
pan> -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $l_BSB <span class=3D"hljs-string">"Boot Status Byte &amp; E=
xtra Byte"</span>
    <span class=3D"hljs-keyword">set</span> e_BSB $f_BSB.e_bsb
    entry $e_BSB -textvariable ::deviceArray(bsb) -width <span class=3D"hlj=
s-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0=
</span> -state disabled
    setBalloon $e_BSB <span class=3D"hljs-string">"Actual BSB value"</span>
    <span class=3D"hljs-keyword">set</span> e_EB $f_BSB.e_eb
    entry $e_EB -textvariable ::deviceArray(eb) -width <span class=3D"hljs-=
number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0</=
span> -state disabled
    setBalloon $e_EB <span class=3D"hljs-string">"Actual EB value"</span>
    pack config $l_BSB $e_BSB $e_EB -padx <span class=3D"hljs-number">1</sp=
an> -side left
    pack config $f_BSB -side top -ipady <span class=3D"hljs-number">1</span=
> -fill both
    <span class=3D"hljs-keyword">set</span> f_SBV $f_BSB_SBV.f_sbv
    frame $f_SBV -relief flat
    <span class=3D"hljs-keyword">set</span> l_SBV $f_SBV.l_sbv
    label $l_SBV -text <span class=3D"hljs-string">"Device SBV"</span> -fon=
t $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $l_SBV <span class=3D"hljs-string">"Software Boot Vector"</s=
pan>
    <span class=3D"hljs-keyword">set</span> e_SBV $f_SBV.e_sbv
    entry $e_SBV -textvariable ::deviceArray(sbv) -width <span class=3D"hlj=
s-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0=
</span> -state disabled
    setBalloon $e_SBV <span class=3D"hljs-string">"Actual SBV value"</span>
    <span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-number">0</=
span>} then {
	<span class=3D"hljs-keyword">set</span> bErase $fSBV.b_erase
	button $bErase -bd <span class=3D"hljs-number">3</span> -text <span class=
=3D"hljs-string">"Erase"</span> -font $flipFont -command {cmdsEraseSBVBSB} =
-state disabled -width <span class=3D"hljs-number">5</span>
	setBalloon $bErase <span class=3D"hljs-string">"Resets SBV and BSB\nto def=
ault values"</span>
    }
    pack config $l_SBV $e_SBV -padx <span class=3D"hljs-number">1</span> -s=
ide left
    pack config $f_SBV -side top -ipady <span class=3D"hljs-number">1</span=
> -fill both
    pack configure $f_BSB_SBV -side top -padx <span class=3D"hljs-number">5=
</span> -fill both
    bind $e_SBV &lt;Return&gt; {devcSetDeviceSpecialBytes}
    bind $e_BSB &lt;Return&gt; {devcSetDeviceSpecialBytes}
    <span class=3D"hljs-keyword">set</span> fSSB .main.f_device.f_ssb
    frame $fSSB -relief groove -borderwidth <span class=3D"hljs-number">1</=
span>
    <span class=3D"hljs-keyword">set</span> fInfo $fSSB.f_info
    frame $fInfo -relief flat
    <span class=3D"hljs-keyword">set</span> lSSB $fInfo.l_ssb
    label $lSSB -text <span class=3D"hljs-string">"Device SSB"</span> -font=
 $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lSSB <span class=3D"hljs-string">"Software Security Byte"</=
span>
    <span class=3D"hljs-keyword">set</span> eSSB $fInfo.e_ssb
    entry $eSSB -textvariable ::deviceArray(ssb) -width <span class=3D"hljs=
-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0<=
/span> -state disabled
    setBalloon $eSSB <span class=3D"hljs-string">"Actual SSB value"</span>
    pack config $lSSB $eSSB -padx <span class=3D"hljs-number">1</span> -sid=
e left
    pack config $fInfo -side top
    <span class=3D"hljs-keyword">set</span> fLevel $fSSB.f_level
    frame $fLevel -relief flat
    <span class=3D"hljs-keyword">set</span> bLevel0 $fLevel.b_level0
    radiobutton $bLevel0 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 0"</span> -value <sp=
an class=3D"hljs-number">0</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 0"</span> -state disabled
    setBalloon $bLevel0 <span class=3D"hljs-string">"Security level 0: no s=
ecurity\n (setting to levels 1 and 2 allowed)"</span>
    pack configure $bLevel0 -side left
    <span class=3D"hljs-keyword">set</span> bLevel1 $fLevel.b_level1
    radiobutton $bLevel1 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 1"</span> -value <sp=
an class=3D"hljs-number">1</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 1"</span> -state disabled
    setBalloon $bLevel1 <span class=3D"hljs-string">"Security level 1: no w=
riting allowed\n (setting to level 2 allowed)"</span>
    pack configure $bLevel1 -side left
    <span class=3D"hljs-keyword">set</span> bLevel2 $fLevel.b_level2
    radiobutton $bLevel2 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 2"</span> -value <sp=
an class=3D"hljs-number">2</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 2"</span> -state disabled
    setBalloon $bLevel2 <span class=3D"hljs-string">"Security level 2: neit=
her reading nor writing allowed\n (full chip erase resets security level to=
 0)"</span>
    pack configure $bLevel2 -side left
    pack configure $fInfo -side top -anchor w -ipady <span class=3D"hljs-nu=
mber">2</span> -fill both
    pack configure $fLevel -side top -anchor w -pady <span class=3D"hljs-nu=
mber">5</span> -fill both
    pack configure $fSSB -side top -padx <span class=3D"hljs-number">5</spa=
n> -pady <span class=3D"hljs-number">5</span> -fill both
    <span class=3D"hljs-keyword">set</span> fStartApp .main.f_device.f_star=
tApp
    frame $fStartApp -relief groove -borderwidth <span class=3D"hljs-number=
">1</span>
    button $fStartApp.b_start -text <span class=3D"hljs-string">"Start Appl=
ication"</span> -bd <span class=3D"hljs-number">3</span> -font $flipFont -s=
tate disabled -command {ptclStartAppli $flipStates(withReset)}
    setBalloon $fStartApp.b_start <span class=3D"hljs-string">"Starts appli=
cation at address 0x0000"</span>
    checkbutton $fStartApp.b_reset -text <span class=3D"hljs-string">"With =
Reset"</span> -font $flipFont -<span class=3D"hljs-keyword">variable</span>=
 flipStates(withReset) -indicatoron true -state disabled
    setBalloon $fStartApp.b_reset <span class=3D"hljs-string">"If set, gene=
rates a hardware reset pulse\n  when the Start Application button is presse=
d."</span>
    pack configure $fStartApp.b_start $fStartApp.b_reset -side left -padx <=
span class=3D"hljs-number">5</span> -pady <span class=3D"hljs-number">5</sp=
an>
    pack configure $fStartApp -padx <span class=3D"hljs-number">5</span> -f=
ill both
    <span class=3D"hljs-keyword">set</span> fButtons .main.f_device.f_butto=
ns
    frame $fButtons -relief flat
    pack configure $fButtons -side top
    <span class=3D"hljs-keyword">set</span> bUpdate $fButtons.b_update
    button $bUpdate -bd <span class=3D"hljs-number">3</span> -text <span cl=
ass=3D"hljs-string">"Read"</span> -font $flipFont -command {devcUpdateDevic=
eFrame} -state disabled
    setBalloon $bUpdate <span class=3D"hljs-string">"Reads device special b=
ytes"</span>
    <span class=3D"hljs-keyword">set</span> bWrite $fButtons.b_write
    button $bWrite -bd <span class=3D"hljs-number">3</span> -text <span cla=
ss=3D"hljs-string">"Set"</span> -font $flipFont -command {devcSetDeviceSpec=
ialBytes} -state disabled
    setBalloon $bWrite <span class=3D"hljs-string">"Sets device special byt=
es"</span>
    <span class=3D"hljs-keyword">set</span> bCanConfig $fButtons.b_canconfi=
g
    button $bCanConfig -bd <span class=3D"hljs-number">3</span> -text <span=
 class=3D"hljs-string">"CAN"</span> -font $flipFont -command {cbDboxWakeUp =
.canNodeConfigDbox} -state disabled
    setBalloon $bCanConfig <span class=3D"hljs-string">"Sets a CAN node par=
ameters"</span>
    <span class=3D"hljs-keyword">set</span> bMemorySelect .main.f_buffer.b_=
memSelect
    <span class=3D"hljs-keyword">if</span> {! [winfo exists $bMemorySelect]=
} then {
	button $bMemorySelect -bd <span class=3D"hljs-number">3</span> -text $::de=
viceArray(currentMemoryButton) -font $flipFont -command {cmdsToggleMemory} =
-width <span class=3D"hljs-number">14</span> -state disabled
	setBalloon $bMemorySelect <span class=3D"hljs-string">"FLIP will perform a=
ll operations\n on the selected memory"</span>
    }
    pack config $bUpdate $bWrite $bCanConfig -side left -padx <span class=
=3D"hljs-number">15</span>
    pack configure $fButtons -side top -padx <span class=3D"hljs-number">5<=
/span> -pady <span class=3D"hljs-number">15</span> -fill both
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> buildSk=
ipTestList</span> {protocol} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">if</span> {$protocol =3D=3D <span class=3D=
"hljs-string">"RS232Standard"</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(skipList) <span clas=
s=3D"hljs-string">"  flash-2.23  flash-2.24  flash-2.25  flash-2.26  flash-=
2.27  flash-2.28  flash-2.29  flash-2.30  checksum-5.4  checksum-5.5  check=
sum-5.6  checksum-5.13  checksum-5.14 "</span>
    } elseif {($protocol =3D=3D <span class=3D"hljs-string">"CANStandard"</=
span>) ||($protocol =3D=3D <span class=3D"hljs-string">"rs232can"</span>)} =
{
	<span class=3D"hljs-keyword">set</span> ::deviceArray(skipList) <span clas=
s=3D"hljs-string">"  flash-2.23  flash-2.24  flash-2.25  flash-2.26  flash-=
2.27  flash-2.28  flash-2.29  flash-2.30 "</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> buildSk=
ipProcList</span> {} {
    <span class=3D"hljs-keyword">set</span> skipL {}
    <span class=3D"hljs-keyword">return</span> $skipL
}
drawCanNodeConfigDbox
drawP1P3P4ConfigDbox
t89c5115
<span class=3D"hljs-keyword">foreach</span> m $::deviceArray(memoryList) {
    cmdsImportCurrentMemoryNameSpace $m
    cmdsSetMemoryParameters
    initBuffer
}
cmdsImportCurrentMemoryNameSpace FLASH
<span class=3D"hljs-comment">#dbgEndSrc [info script]</span>
<span class=3D"hljs-comment">#dbgBeginSrc [info script]</span>
<span class=3D"hljs-keyword">global</span> projDir
<span class=3D"hljs-keyword">source</span> $projDir/tcl/devices/devices_com=
mon.tcl
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> AT89C51=
31</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> protcl protocol nAddrBits fl=
ipFont rs232standard canstandard expAnsw testFlag buffer flowButtons flipSt=
ates bootloaderVerDependent
    <span class=3D"hljs-keyword">set</span> children_List [<span class=3D"h=
ljs-keyword">split</span> [winfo children .main.f_device]]
    <span class=3D"hljs-keyword">foreach</span> item $children_List {
	<span class=3D"hljs-keyword">if</span> {$item !=3D <span class=3D"hljs-str=
ing">".main.f_device.f_deviceName"</span>} then {
	    destroy $item
	}
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">a=
rray</span> exists ::deviceArray]} then {
	<span class=3D"hljs-keyword">array</span> <span class=3D"hljs-keyword">uns=
et</span> ::deviceArray
    }
    <span class=3D"hljs-keyword">set</span> ::deviceArray(name) <span class=
=3D"hljs-string">"AT89C5131"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(communicationList=
) <span class=3D"hljs-string">"USB RS232"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(memoryList) [<spa=
n class=3D"hljs-keyword">list</span> FLASH EEPROM]
    <span class=3D"hljs-keyword">set</span> ::deviceArray(memoryButtonList)=
 [<span class=3D"hljs-keyword">list</span> <span class=3D"hljs-string">"Sel=
ect EEPROM"</span> <span class=3D"hljs-string">"Select FLASH"</span>]
    <span class=3D"hljs-keyword">set</span> ::deviceArray(memoryColor) [<sp=
an class=3D"hljs-keyword">list</span> <span class=3D"hljs-string">"#88a67d"=
</span> <span class=3D"hljs-string">"wheat"</span>]
    <span class=3D"hljs-keyword">set</span> ::deviceArray(currentMemory) <s=
pan class=3D"hljs-string">"FLASH"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(currentMemoryButt=
on) <span class=3D"hljs-string">"Select EEPROM"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(usb_dfu_default_p=
roduct_id) <span class=3D"hljs-number">0x2FFD</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(startAppliTest) {=
<span class=3D"hljs-number">43</span> BC <span class=3D"hljs-number">80</sp=
an> <span class=3D"hljs-number">43</span> BC <span class=3D"hljs-number">10=
</span> <span class=3D"hljs-number">75</span> <span class=3D"hljs-number">8=
3</span> <span class=3D"hljs-number">00</span> <span class=3D"hljs-number">=
75</span> <span class=3D"hljs-number">82</span> <span class=3D"hljs-number"=
>1</span>C <span class=3D"hljs-number">74</span> \
	    F4 <span class=3D"hljs-number">75</span> D1 <span class=3D"hljs-number=
">08</span> F0 <span class=3D"hljs-number">75</span> D1 <span class=3D"hljs=
-number">00</span> <span class=3D"hljs-number">43</span> A2 <span class=3D"=
hljs-number">20</span> <span class=3D"hljs-number">12</span> FF F3 <span cl=
ass=3D"hljs-number">02</span> <span class=3D"hljs-number">00</span> <span c=
lass=3D"hljs-number">00</span>}
    <span class=3D"hljs-keyword">set</span> ::deviceArray(startAppliFailAdd=
r) <span class=3D"hljs-number">0X001C</span>
    <span class=3D"hljs-keyword">set</span> bootloaderVerDependent(p1p3p4_c=
onfig) <span class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> bootloaderVerDependent(eb) <spa=
n class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keywo=
rd">eval</span> ::FLASH:: {
	<span class=3D"hljs-keyword">variable</span> deviceArray
	<span class=3D"hljs-keyword">variable</span> buffer
	<span class=3D"hljs-keyword">set</span> deviceArray(memorySize) <span clas=
s=3D"hljs-number">32</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankValue) <span clas=
s=3D"hljs-string">"FF"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erase) <span class=3D"hljs-=
string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(blankCheck) <span class=3D"=
hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseType) <span class=3D"h=
ljs-string">"full"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlocks) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock0) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock0) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock1) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock1) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock2) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock2) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock3) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock3) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock4) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock4) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(progStart) <span class=
=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(displayData) <span cla=
ss=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankCheck) <span clas=
s=3D"hljs-string">"01"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(programData) <span cla=
ss=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">namespace</span> export writeBuffer readBuffe=
r readDeviceArray initBuffer bufferChecksum
    }
    <span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keywo=
rd">eval</span> ::EEPROM:: {
	<span class=3D"hljs-keyword">variable</span> deviceArray
	<span class=3D"hljs-keyword">variable</span> buffer
	<span class=3D"hljs-keyword">set</span> deviceArray(memorySize) <span clas=
s=3D"hljs-number">1</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankValue) <span clas=
s=3D"hljs-string">"FF"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erase) <span class=3D"hljs-=
string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(blankCheck) <span class=3D"=
hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseType) <span class=3D"h=
ljs-string">"full"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlocks) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock0) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock0) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock1) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock1) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock2) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock2) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock3) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock3) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock4) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock4) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(progStart) <span class=
=3D"hljs-string">"01"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(displayData) <span cla=
ss=3D"hljs-string">"02"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankCheck) <span clas=
s=3D"hljs-string">"XX"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(programData) <span cla=
ss=3D"hljs-string">"07"</span>
	<span class=3D"hljs-keyword">namespace</span> export writeBuffer readBuffe=
r readDeviceArray initBuffer bufferChecksum
    }
    <span class=3D"hljs-keyword">foreach</span> M $::deviceArray(memoryList=
) {
	<span class=3D"hljs-keyword">proc</span> ::${M}::writeBuffer {index data} =
{
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">set</span> buffer($index) $data
	    <span class=3D"hljs-keyword">return</span>
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::readBuffer {index} {
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">return</span> $buffer($index)
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::readDeviceArray {index} {
	    <span class=3D"hljs-keyword">variable</span> deviceArray
	    <span class=3D"hljs-keyword">return</span> $deviceArray($index)
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::initBuffer {} {
	    <span class=3D"hljs-keyword">variable</span> deviceArray
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">global</span> flipStates
	    <span class=3D"hljs-keyword">set</span> max [<span class=3D"hljs-keywo=
rd">expr</span> $deviceArray(memorySize) * <span class=3D"hljs-number">1024=
</span>]
	    <span class=3D"hljs-keyword">if</span> {$flipStates(simul)} then {
		<span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">set=
</span> i <span class=3D"hljs-number">0</span>} {$i &lt; $max} {<span class=
=3D"hljs-keyword">incr</span> i} {
		    <span class=3D"hljs-keyword">set</span> buffer([<span class=3D"hljs-k=
eyword">format</span> %<span class=3D"hljs-number">06</span>X $i]) $deviceA=
rray(blankValue)
		}
	    } else {
		initBuffer_C $max $deviceArray(blankValue)
	    }
	    <span class=3D"hljs-keyword">return</span>
	}
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::F=
LASH::bufferChecksum</span> {} {
	<span class=3D"hljs-keyword">variable</span> buffer
	<span class=3D"hljs-keyword">global</span> flipStates
	<span class=3D"hljs-keyword">set</span> min $buffer(minProgAddr)
	<span class=3D"hljs-keyword">set</span> max $buffer(maxProgAddr)
	<span class=3D"hljs-keyword">if</span> {$flipStates(simul)} then {
	    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number"=
>0xCAFEFADE</span>
	} else {
	    <span class=3D"hljs-keyword">return</span> [computeBufferChecksum_C $m=
in $max]
	}
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::E=
EPROM::bufferChecksum</span> {} {
	<span class=3D"hljs-keyword">variable</span> buffer
	<span class=3D"hljs-keyword">global</span> flipStates
	<span class=3D"hljs-keyword">set</span> min $buffer(minProgAddr)
	<span class=3D"hljs-keyword">set</span> max $buffer(maxProgAddr)
	<span class=3D"hljs-keyword">if</span> {$flipStates(simul)} then {
	    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number"=
>0xDEADBEEF</span>
	} else {
	    <span class=3D"hljs-keyword">return</span> [computeBufferChecksum_C $m=
in $max]
	}
    }
    <span class=3D"hljs-keyword">set</span> ::deviceArray(jumpAdd) <span cl=
ass=3D"hljs-string">"0000"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(specialSynchro) <=
span class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(RS232ProtocolsLis=
t) <span class=3D"hljs-string">"Standard"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(p1_config) <span =
class=3D"hljs-string">"XX"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(p3_config) <span =
class=3D"hljs-string">"XX"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(p4_config) <span =
class=3D"hljs-string">"XX"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev0) [<span cla=
ss=3D"hljs-keyword">list</span> FF]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev0Test) <span =
class=3D"hljs-string">"FF"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev1) [<span cla=
ss=3D"hljs-keyword">list</span> FE]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev1Test) <span =
class=3D"hljs-string">"FE"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev2Test) <span =
class=3D"hljs-string">"FC"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev2) [<span cla=
ss=3D"hljs-keyword">list</span> FC XX]
    <span class=3D"hljs-keyword">set</span> expAnsw(readManufId) <span clas=
s=3D"hljs-number">58</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId1) D7
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId2) F7
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId3) DF
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock0) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock1) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock2) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock3) <span cla=
ss=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock4) <span cla=
ss=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> testFlag(readDevBootId1) <span =
class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(readDevBootId2) <span =
class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(sbv) <span class=3D"hl=
js-string">"F4"</span>
    <span class=3D"hljs-keyword">set</span> fBlocks .deviceErase.f_erase.f_=
blocks
    <span class=3D"hljs-keyword">set</span> bBlock0 $fBlocks.b_block0
    <span class=3D"hljs-keyword">set</span> bBlock1 $fBlocks.b_block1
    <span class=3D"hljs-keyword">set</span> bBlock2 $fBlocks.b_block2
    <span class=3D"hljs-keyword">set</span> bBlock3 $fBlocks.b_block3
    <span class=3D"hljs-keyword">set</span> bBlock4 $fBlocks.b_block4
    setBalloon $bBlock0 <span class=3D"hljs-string">"Erase memory between 0=
000 and 1FFF"</span>
    setBalloon $bBlock1 <span class=3D"hljs-string">"Erase memory between 2=
000 and 3FFF"</span>
    setBalloon $bBlock2 <span class=3D"hljs-string">"Erase memory between 4=
000 and 7FFF"</span>
    $bBlock3 configure -state disabled
    $bBlock4 configure -state disabled
    .main.f_device.f_deviceName.l_device configure -text $::deviceArray(nam=
e)
    .main.f_device.f_deviceName configure -relief groove
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(sbv)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(sbv) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(bsb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(bsb) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(ssb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(ssb) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(hsb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(hsb) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(eb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(eb) <span class=3D"h=
ljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(deviceBootId1)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(deviceBootId1) <span=
 class=3D"hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(deviceBootId2)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(deviceBootId2) <span=
 class=3D"hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(bljbFuse)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(bljbFuse) <span clas=
s=3D"hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(x2Fuse)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(x2Fuse) <span class=
=3D"hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(level)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(level) X
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(eraseType)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(eraseType) <span cla=
ss=3D"hljs-string">"full"</span>
    }
    <span class=3D"hljs-keyword">set</span> ::deviceArray(oscCtrl) <span cl=
ass=3D"hljs-number">3</span>
    <span class=3D"hljs-keyword">set</span> nAddrBits <span class=3D"hljs-n=
umber">4</span>
    <span class=3D"hljs-keyword">set</span> rs232standard(readHwByte) <span=
 class=3D"hljs-string">":020000050B00EE"</span>
    <span class=3D"hljs-keyword">set</span> rs232standard(readBootlVer) <sp=
an class=3D"hljs-string">":020000050F00EA"</span>
    <span class=3D"hljs-keyword">set</span> protocol(frameLengthW) <span cl=
ass=3D"hljs-number">128</span>
    <span class=3D"hljs-keyword">set</span> protocol(frameLengthR) <span cl=
ass=3D"hljs-number">16</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowErase) <span =
class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowBlankCheck) <=
span class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowProgram) <spa=
n class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowVerify) <span=
 class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowSpecialBytes)=
 <span class=3D"hljs-number">0</span>
    wm title .deviceErase <span class=3D"hljs-string">"$::deviceArray(name)=
 Erase"</span>
    .deviceErase.f_erase.f_blocks.b_blockErase configure -state normal
    <span class=3D"hljs-keyword">set</span> fReadOnly .main.f_device.f_read=
Only
    frame $fReadOnly -relief groove -borderwidth <span class=3D"hljs-number=
">1</span>
    <span class=3D"hljs-keyword">set</span> fManufId $fReadOnly.f_manufId
    frame $fManufId -relief flat
    <span class=3D"hljs-keyword">set</span> lManufId $fManufId.l_manufId
    label $lManufId -text <span class=3D"hljs-string">"Manufact. Id"</span>=
 -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    <span class=3D"hljs-keyword">set</span> eManufId $fManufId.e_manufId
    entry $eManufId -textvariable ::deviceArray(manufId) -width <span class=
=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eManufId <span class=3D"hljs-string">"Manufacturer code val=
ue"</span>
    pack config $lManufId $eManufId -padx <span class=3D"hljs-number">1</sp=
an> -side left
    pack config $fManufId -side top -ipady <span class=3D"hljs-number">1</s=
pan> -fill both
    <span class=3D"hljs-keyword">set</span> fDeviceIds $fReadOnly.f_deviceI=
ds
    frame $fDeviceIds -relief flat
    <span class=3D"hljs-keyword">set</span> lDeviceIds $fDeviceIds.l_device=
Ids
    label $lDeviceIds -text <span class=3D"hljs-string">"Device Ids"</span>=
 -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    <span class=3D"hljs-keyword">set</span> eDeviceId1 $fDeviceIds.e_device=
Id1
    entry $eDeviceId1 -textvariable ::deviceArray(deviceId1) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId1 <span class=3D"hljs-string">"Family code value"<=
/span>
    <span class=3D"hljs-keyword">set</span> eDeviceId2 $fDeviceIds.e_device=
Id2
    entry $eDeviceId2 -textvariable ::deviceArray(deviceId2) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId2 <span class=3D"hljs-string">"Device name code"</=
span>
    <span class=3D"hljs-keyword">set</span> eDeviceId3 $fDeviceIds.e_device=
Id3
    entry $eDeviceId3 -textvariable ::deviceArray(deviceId3) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId3 <span class=3D"hljs-string">"Device revision num=
ber"</span>
    pack config $lDeviceIds $eDeviceId1 $eDeviceId2 $eDeviceId3 -padx <span=
 class=3D"hljs-number">1</span> -side left
    pack config $fDeviceIds -side top -ipady <span class=3D"hljs-number">1<=
/span> -fill both
    <span class=3D"hljs-keyword">set</span> fDeviceBootIds $fReadOnly.f_dev=
iceBootIds
    frame $fDeviceBootIds -relief flat
    <span class=3D"hljs-keyword">set</span> lDeviceBootIds $fDeviceBootIds.=
l_deviceBootIds
    label $lDeviceBootIds -text <span class=3D"hljs-string">"Device Boot Id=
s"</span> -font $flipFont -anchor w -width <span class=3D"hljs-number">16</=
span>
    setBalloon $lDeviceBootIds <span class=3D"hljs-string">"Boot Ids 1, 2: =
read-only"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceBootId1 $fDeviceBootIds.=
e_deviceBootId1
    entry $eDeviceBootId1 -textvariable ::deviceArray(deviceBootId1) -width=
 <span class=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceBootId1 <span class=3D"hljs-string">"Boot Id 1 value=
"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceBootId2 $fDeviceBootIds.=
e_deviceBootId2
    entry $eDeviceBootId2 -textvariable ::deviceArray(deviceBootId2) -width=
 <span class=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceBootId2 <span class=3D"hljs-string">"Boot Id 2 value=
"</span>
    pack config $lDeviceBootIds $eDeviceBootId1 $eDeviceBootId2 -padx <span=
 class=3D"hljs-number">1</span> -side left
    pack config $fDeviceBootIds -side top -ipady <span class=3D"hljs-number=
">1</span> -fill both
    <span class=3D"hljs-keyword">set</span> fHSB $fReadOnly.f_hsb
    frame $fHSB -relief flat
    <span class=3D"hljs-keyword">set</span> lHSB $fHSB.l_hsb
    label $lHSB -text <span class=3D"hljs-string">"Hardware Byte"</span> -f=
ont $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lHSB <span class=3D"hljs-string">"Hardware Security Byte: r=
ead-only"</span>
    <span class=3D"hljs-keyword">set</span> eHSB $fHSB.e_hsb
    entry $eHSB -textvariable ::deviceArray(hsb) -width <span class=3D"hljs=
-number">3</span> -font $flipFont -state disabled
    setBalloon $eHSB <span class=3D"hljs-string">"Hardware Security Byte va=
lue"</span>
    pack config $lHSB $eHSB -padx <span class=3D"hljs-number">1</span> -sid=
e left
    pack config $fHSB -side top -ipady <span class=3D"hljs-number">1</span>=
 -fill both
    <span class=3D"hljs-keyword">set</span> fBootlVer $fReadOnly.f_bootlVer
    frame $fBootlVer -relief flat
    <span class=3D"hljs-keyword">set</span> lBootlVer $fBootlVer.l_bootlVer
    label $lBootlVer -text <span class=3D"hljs-string">"Bootloader Ver."</s=
pan> -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lBootlVer <span class=3D"hljs-string">"Bootloader Version: =
read-only"</span>
    <span class=3D"hljs-keyword">set</span> eBootlVer $fBootlVer.e_bootlVer
    entry $eBootlVer -textvariable ::deviceArray(bootlVer) -width <span cla=
ss=3D"hljs-number">5</span> -font $flipFont -state disabled
    setBalloon $eBootlVer <span class=3D"hljs-string">"Bootloader Version"<=
/span>
    pack config $lBootlVer $eBootlVer -padx <span class=3D"hljs-number">1</=
span> -side left
    pack config $fBootlVer -side top -ipady <span class=3D"hljs-number">1</=
span> -fill both
    pack configure $fReadOnly -side top -padx <span class=3D"hljs-number">5=
</span> -fill both
    <span class=3D"hljs-keyword">set</span> fFuses .main.f_device.f_fuses
    frame $fFuses -relief groove -borderwidth <span class=3D"hljs-number">1=
</span>
    <span class=3D"hljs-keyword">set</span> bBLJB $fFuses.b_bljb
    checkbutton $bBLJB -text <span class=3D"hljs-string">"BLJB"</span> -fon=
t $flipFont -<span class=3D"hljs-keyword">variable</span> ::deviceArray(blj=
bFuse) -onvalue <span class=3D"hljs-number">0</span> -offvalue <span class=
=3D"hljs-number">1</span> -indicatoron true -state disabled
    setBalloon $bBLJB <span class=3D"hljs-string">"Boot Loader Jump Bit \nS=
et =3D 0 / Unset =3D 1"</span>
    <span class=3D"hljs-keyword">set</span> bX2 $fFuses.b_x2
    checkbutton $bX2 -text <span class=3D"hljs-string">"X2"</span> -font $f=
lipFont -<span class=3D"hljs-keyword">variable</span> ::deviceArray(x2Fuse)=
 -onvalue <span class=3D"hljs-number">0</span> -offvalue <span class=3D"hlj=
s-number">1</span> -indicatoron true -state disabled
    setBalloon $bX2 <span class=3D"hljs-string">"X2 fuse bit \nSet =3D 0 / =
Unset =3D 1"</span>
    <span class=3D"hljs-keyword">set</span> bConfigPorts $fFuses.b_cfgp
    button $bConfigPorts -bd <span class=3D"hljs-number">3</span> -text <sp=
an class=3D"hljs-string">"LPC"</span> -font $flipFont -command {cbDboxWakeU=
p .configP1P3P4Window} -state disabled
    setBalloon $bConfigPorts <span class=3D"hljs-string">"Configure Hardwar=
e Conditions\n Low Pin Count devices only"</span>
    <span class=3D"hljs-keyword">set</span> bConfigOsc $fFuses.b_cfgOsc
    button $bConfigOsc -bd <span class=3D"hljs-number">3</span> -text <span=
 class=3D"hljs-string">"OSC"</span> -font $flipFont -command {cbDboxWakeUp =
.configOscWindow} -state disabled
    setBalloon $bConfigOsc <span class=3D"hljs-string">"Configure Oscillato=
r"</span>
    pack config $bBLJB $bX2 $bConfigPorts $bConfigOsc -side left -padx <spa=
n class=3D"hljs-number">2</span> -pady <span class=3D"hljs-number">5</span>=
 -anchor w
    pack configure $fFuses -side top -padx <span class=3D"hljs-number">5</s=
pan> -pady <span class=3D"hljs-number">5</span> -fill x
    <span class=3D"hljs-keyword">set</span> f_BSB_SBV .main.f_device.f_bsb_=
sbv
    frame $f_BSB_SBV -relief groove -borderwidth <span class=3D"hljs-number=
">1</span>
    <span class=3D"hljs-keyword">set</span> f_BSB $f_BSB_SBV.f_bsb
    frame $f_BSB -relief flat
    <span class=3D"hljs-keyword">set</span> l_BSB $f_BSB.l_bsb
    label $l_BSB -text <span class=3D"hljs-string">"BSB / EB / SBV"</span> =
-font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $l_BSB <span class=3D"hljs-string">"Boot Status Byte / Extra=
 Byte / Software Boot Vector"</span>
    <span class=3D"hljs-keyword">set</span> e_BSB $f_BSB.e_bsb
    entry $e_BSB -textvariable ::deviceArray(bsb) -width <span class=3D"hlj=
s-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0=
</span> -state disabled
    setBalloon $e_BSB <span class=3D"hljs-string">"Actual BSB value"</span>
    <span class=3D"hljs-keyword">set</span> e_EB $f_BSB.e_eb
    entry $e_EB -textvariable ::deviceArray(eb) -width <span class=3D"hljs-=
number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0</=
span> -state disabled
    setBalloon $e_EB <span class=3D"hljs-string">"Actual EB value"</span>
    <span class=3D"hljs-keyword">set</span> e_SBV $f_BSB.e_sbv
    entry $e_SBV -textvariable ::deviceArray(sbv) -width <span class=3D"hlj=
s-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0=
</span> -state disabled
    setBalloon $e_SBV <span class=3D"hljs-string">"Actual SBV value"</span>
    pack config $l_BSB $e_BSB $e_EB $e_SBV -padx <span class=3D"hljs-number=
">1</span> -pady <span class=3D"hljs-number">5</span> -side left
    pack config $f_BSB -side top -ipady <span class=3D"hljs-number">1</span=
> -fill both
    pack configure $f_BSB_SBV -side top -padx <span class=3D"hljs-number">5=
</span> -fill both
    bind $e_SBV &lt;Return&gt; {devcSetDeviceSpecialBytes}
    bind $e_BSB &lt;Return&gt; {devcSetDeviceSpecialBytes}
    <span class=3D"hljs-keyword">set</span> fSSB .main.f_device.f_ssb
    frame $fSSB -relief groove -borderwidth <span class=3D"hljs-number">1</=
span>
    <span class=3D"hljs-keyword">set</span> fInfo $fSSB.f_info
    frame $fInfo -relief flat
    <span class=3D"hljs-keyword">set</span> lSSB $fInfo.l_ssb
    label $lSSB -text <span class=3D"hljs-string">"Device SSB"</span> -font=
 $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lSSB <span class=3D"hljs-string">"Software Security Byte"</=
span>
    <span class=3D"hljs-keyword">set</span> eSSB $fInfo.e_ssb
    entry $eSSB -textvariable ::deviceArray(ssb) -width <span class=3D"hljs=
-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0<=
/span> -state disabled
    setBalloon $eSSB <span class=3D"hljs-string">"Actual SSB value"</span>
    pack config $lSSB $eSSB -padx <span class=3D"hljs-number">1</span> -sid=
e left
    pack config $fInfo -side top
    <span class=3D"hljs-keyword">set</span> fLevel $fSSB.f_level
    frame $fLevel -relief flat
    <span class=3D"hljs-keyword">set</span> bLevel0 $fLevel.b_level0
    radiobutton $bLevel0 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 0"</span> -value <sp=
an class=3D"hljs-number">0</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 0"</span> -state disabled
    setBalloon $bLevel0 <span class=3D"hljs-string">"Security level 0: no s=
ecurity\n (setting to levels 1 and 2 allowed)"</span>
    pack configure $bLevel0 -side left
    <span class=3D"hljs-keyword">set</span> bLevel1 $fLevel.b_level1
    radiobutton $bLevel1 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 1"</span> -value <sp=
an class=3D"hljs-number">1</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 1"</span> -state disabled
    setBalloon $bLevel1 <span class=3D"hljs-string">"Security level 1: no w=
riting allowed\n (setting to level 2 allowed)"</span>
    pack configure $bLevel1 -side left
    <span class=3D"hljs-keyword">set</span> bLevel2 $fLevel.b_level2
    radiobutton $bLevel2 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 2"</span> -value <sp=
an class=3D"hljs-number">2</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 2"</span> -state disabled
    setBalloon $bLevel2 <span class=3D"hljs-string">"Security level 2: neit=
her reading nor writing allowed\n (full chip erase resets security level to=
 0)"</span>
    pack configure $bLevel2 -side left
    pack configure $fInfo -side top -anchor w -ipady <span class=3D"hljs-nu=
mber">2</span> -fill both
    pack configure $fLevel -side top -anchor w -pady <span class=3D"hljs-nu=
mber">5</span> -fill both
    pack configure $fSSB -side top -padx <span class=3D"hljs-number">5</spa=
n> -pady <span class=3D"hljs-number">5</span> -fill both
    <span class=3D"hljs-keyword">set</span> fStartApp .main.f_device.f_star=
tApp
    frame $fStartApp -relief groove -borderwidth <span class=3D"hljs-number=
">1</span>
    button $fStartApp.b_start -text <span class=3D"hljs-string">"Start Appl=
ication"</span> -bd <span class=3D"hljs-number">3</span> -font $flipFont -s=
tate disabled -command {ptclStartAppli $flipStates(withReset)}
    setBalloon $fStartApp.b_start <span class=3D"hljs-string">"Starts appli=
cation at address 0x0000"</span>
    checkbutton $fStartApp.b_reset -text <span class=3D"hljs-string">"With =
Reset"</span> -font $flipFont -<span class=3D"hljs-keyword">variable</span>=
 flipStates(withReset) -indicatoron true -state disabled
    setBalloon $fStartApp.b_reset <span class=3D"hljs-string">"If set, gene=
rates a hardware reset pulse\n  when the Start Application button is presse=
d."</span>
    pack configure $fStartApp.b_start $fStartApp.b_reset -side left -padx <=
span class=3D"hljs-number">5</span> -pady <span class=3D"hljs-number">5</sp=
an>
    pack configure $fStartApp -padx <span class=3D"hljs-number">5</span> -f=
ill both
    <span class=3D"hljs-keyword">set</span> fButtons .main.f_device.f_butto=
ns
    frame $fButtons -relief flat
    pack configure $fButtons -side top
    <span class=3D"hljs-keyword">set</span> bUpdate $fButtons.b_update
    button $bUpdate -bd <span class=3D"hljs-number">3</span> -text <span cl=
ass=3D"hljs-string">"Read"</span> -font $flipFont -command {devcUpdateDevic=
eFrame} -state disabled
    setBalloon $bUpdate <span class=3D"hljs-string">"Reads device special b=
ytes"</span>
    <span class=3D"hljs-keyword">set</span> bWrite $fButtons.b_write
    button $bWrite -bd <span class=3D"hljs-number">3</span> -text <span cla=
ss=3D"hljs-string">"Set"</span> -font $flipFont -command {devcSetDeviceSpec=
ialBytes} -state disabled
    setBalloon $bWrite <span class=3D"hljs-string">"Sets device special byt=
es"</span>
    <span class=3D"hljs-keyword">set</span> bCanConfig $fButtons.b_canconfi=
g
    button $bCanConfig -bd <span class=3D"hljs-number">3</span> -text <span=
 class=3D"hljs-string">"CAN"</span> -font $flipFont -command {cbDboxWakeUp =
.canNodeConfigDbox} -state disabled
    setBalloon $bCanConfig <span class=3D"hljs-string">"Sets a CAN node par=
ameters"</span>
    <span class=3D"hljs-keyword">set</span> bMemorySelect .main.f_buffer.b_=
memSelect
    <span class=3D"hljs-keyword">if</span> {! [winfo exists $bMemorySelect]=
} then {
	button $bMemorySelect -bd <span class=3D"hljs-number">3</span> -text $::de=
viceArray(currentMemoryButton) -font $flipFont -command {cmdsToggleMemory} =
-width <span class=3D"hljs-number">14</span> -state disabled
	setBalloon $bMemorySelect <span class=3D"hljs-string">"FLIP will perform a=
ll operations\n on the selected memory"</span>
    }
    pack config $bUpdate $bWrite -side left -padx <span class=3D"hljs-numbe=
r">15</span>
    pack configure $fButtons -side top -padx <span class=3D"hljs-number">5<=
/span> -pady <span class=3D"hljs-number">15</span> -fill both
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> buildSk=
ipTestList</span> {protocol} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">switch</span> $protocol {
    USB_DFU {
	    <span class=3D"hljs-keyword">set</span> ::deviceArray(skipList) <span =
class=3D"hljs-string">"  flash-2.23.1  flash-2.26  flash-2.27  flash-2.28  =
flash-2.29  flash-2.30 "</span>
	}
    RS232Standard {
	    <span class=3D"hljs-keyword">set</span> ::deviceArray(skipList) <span =
class=3D"hljs-string">"  flash-2.23.1  flash-2.26  flash-2.27  flash-2.28  =
flash-2.29  flash-2.30 "</span>
	}
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> buildSk=
ipProcList</span> {} {
    <span class=3D"hljs-keyword">set</span> skipL {}
    <span class=3D"hljs-keyword">return</span> $skipL
}
drawCanNodeConfigDbox
drawP1P3P4ConfigDbox
AT89C5131
<span class=3D"hljs-keyword">foreach</span> m $::deviceArray(memoryList) {
    cmdsImportCurrentMemoryNameSpace $m
    cmdsSetMemoryParameters
    initBuffer
}
cmdsImportCurrentMemoryNameSpace FLASH
<span class=3D"hljs-comment">#dbgEndSrc [info script]</span>
<span class=3D"hljs-comment">#dbgBeginSrc [info script]</span>
<span class=3D"hljs-keyword">global</span> projDir
<span class=3D"hljs-keyword">source</span> $projDir/tcl/devices/devices_com=
mon.tcl
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> t89c51s=
nd1</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> protcl protocol nAddrBits fl=
ipFont rs232standard canstandard expAnsw testFlag buffer flowButtons flipSt=
ates
    <span class=3D"hljs-keyword">set</span> children_List [<span class=3D"h=
ljs-keyword">split</span> [winfo children .main.f_device]]
    <span class=3D"hljs-keyword">foreach</span> item $children_List {
	<span class=3D"hljs-keyword">if</span> {$item !=3D <span class=3D"hljs-str=
ing">".main.f_device.f_deviceName"</span>} then {
	    destroy $item
	}
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">a=
rray</span> exists ::deviceArray]} then {
	<span class=3D"hljs-keyword">array</span> <span class=3D"hljs-keyword">uns=
et</span> ::deviceArray
    }
    <span class=3D"hljs-keyword">set</span> ::deviceArray(name) <span class=
=3D"hljs-string">"AT89C5132"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(communicationList=
) <span class=3D"hljs-string">"RS232 USB"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(memoryList) [<spa=
n class=3D"hljs-keyword">list</span> FLASH]
    <span class=3D"hljs-keyword">set</span> ::deviceArray(memoryColor) [<sp=
an class=3D"hljs-keyword">list</span> <span class=3D"hljs-string">"#88a67d"=
</span> <span class=3D"hljs-string">"wheat"</span>]
    <span class=3D"hljs-keyword">set</span> ::deviceArray(currentMemory) <s=
pan class=3D"hljs-string">"FLASH"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(usb_dfu_default_p=
roduct_id) <span class=3D"hljs-number">0x2FFF</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(startAppliFailAdd=
r) <span class=3D"hljs-number">0X001C</span>
    <span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keywo=
rd">eval</span> ::FLASH:: {
	<span class=3D"hljs-keyword">variable</span> deviceArray
	<span class=3D"hljs-keyword">variable</span> buffer
	<span class=3D"hljs-keyword">set</span> deviceArray(memorySize) <span clas=
s=3D"hljs-number">64</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankValue) <span clas=
s=3D"hljs-string">"FF"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erase) <span class=3D"hljs-=
string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(blankCheck) <span class=3D"=
hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseType) <span class=3D"h=
ljs-string">"full"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlocks) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock0) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock0) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock1) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock1) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock2) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock2) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock3) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock3) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock4) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock4) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(progStart) <span class=
=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(displayData) <span cla=
ss=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankCheck) <span clas=
s=3D"hljs-string">"01"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(programData) <span cla=
ss=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">namespace</span> export writeBuffer readBuffe=
r readDeviceArray initBuffer bufferChecksum
    }
    <span class=3D"hljs-keyword">foreach</span> M $::deviceArray(memoryList=
) {
	<span class=3D"hljs-keyword">proc</span> ::${M}::writeBuffer {index data} =
{
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">set</span> buffer($index) $data
	    <span class=3D"hljs-keyword">return</span>
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::readBuffer {index} {
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">return</span> $buffer($index)
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::readDeviceArray {index} {
	    <span class=3D"hljs-keyword">variable</span> deviceArray
	    <span class=3D"hljs-keyword">return</span> $deviceArray($index)
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::initBuffer {} {
	    <span class=3D"hljs-keyword">variable</span> deviceArray
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">global</span> flipStates
	    <span class=3D"hljs-keyword">set</span> max [<span class=3D"hljs-keywo=
rd">expr</span> $deviceArray(memorySize) * <span class=3D"hljs-number">1024=
</span>]
	    <span class=3D"hljs-keyword">if</span> {$flipStates(simul)} then {
		<span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">set=
</span> i <span class=3D"hljs-number">0</span>} {$i &lt; $max} {<span class=
=3D"hljs-keyword">incr</span> i} {
		    <span class=3D"hljs-keyword">set</span> buffer([<span class=3D"hljs-k=
eyword">format</span> %<span class=3D"hljs-number">06</span>X $i]) $deviceA=
rray(blankValue)
		}
	    } else {
		initBuffer_C $max $deviceArray(blankValue)
	    }
	    <span class=3D"hljs-keyword">return</span>
	}
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::F=
LASH::bufferChecksum</span> {} {
	<span class=3D"hljs-keyword">variable</span> buffer
	<span class=3D"hljs-keyword">global</span> flipStates
	<span class=3D"hljs-keyword">set</span> min $buffer(minProgAddr)
	<span class=3D"hljs-keyword">set</span> max $buffer(maxProgAddr)
	<span class=3D"hljs-keyword">if</span> {$flipStates(simul)} then {
	    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number"=
>0xCAFEFADE</span>
	} else {
	    <span class=3D"hljs-keyword">return</span> [computeBufferChecksum_C $m=
in $max]
	}
    }
    <span class=3D"hljs-keyword">set</span> ::deviceArray(jumpAdd) <span cl=
ass=3D"hljs-string">"0000"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(specialSynchro) <=
span class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(RS232ProtocolsLis=
t) <span class=3D"hljs-string">"Standard Enhanced"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(nnbConnect) <span=
 class=3D"hljs-string">"FF"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(nnbProg) <span cl=
ass=3D"hljs-string">"XX"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(crisConnect) <spa=
n class=3D"hljs-string">"00"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(crisProg) <span c=
lass=3D"hljs-string">"XX"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(btc1) <span class=
=3D"hljs-string">"XX"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(btc2) <span class=
=3D"hljs-string">"XX"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(btc3) <span class=
=3D"hljs-string">"XX"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev0) [<span cla=
ss=3D"hljs-keyword">list</span> FF]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev0Test) <span =
class=3D"hljs-string">"FF"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev1) [<span cla=
ss=3D"hljs-keyword">list</span> FE]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev1Test) <span =
class=3D"hljs-string">"FE"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev2Test) <span =
class=3D"hljs-string">"FC"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev2) [<span cla=
ss=3D"hljs-keyword">list</span> FC XX]
    <span class=3D"hljs-keyword">set</span> expAnsw(readManufId) <span clas=
s=3D"hljs-number">58</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId1) XX
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId2) XX
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId3) XX
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock0) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock1) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock2) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock3) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock4) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(readDevBootId1) <span =
class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(readDevBootId2) <span =
class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(sbv) <span class=3D"hl=
js-string">"F0"</span>
    <span class=3D"hljs-keyword">set</span> fBlocks .deviceErase.f_erase.f_=
blocks
    <span class=3D"hljs-keyword">set</span> bBlock0 $fBlocks.b_block0
    <span class=3D"hljs-keyword">set</span> bBlock1 $fBlocks.b_block1
    <span class=3D"hljs-keyword">set</span> bBlock2 $fBlocks.b_block2
    <span class=3D"hljs-keyword">set</span> bBlock3 $fBlocks.b_block3
    <span class=3D"hljs-keyword">set</span> bBlock4 $fBlocks.b_block4
    setBalloon $bBlock0 <span class=3D"hljs-string">"Erase memory between 0=
000 and 1FFF"</span>
    setBalloon $bBlock1 <span class=3D"hljs-string">"Erase memory between 2=
000 and 3FFF"</span>
    setBalloon $bBlock2 <span class=3D"hljs-string">"Erase memory between 4=
000 and 7FFF"</span>
    setBalloon $bBlock3 <span class=3D"hljs-string">"Erase memory between 8=
000 and BFFF"</span>
    setBalloon $bBlock4 <span class=3D"hljs-string">"Erase memory between C=
000 and FFFF"</span>
    .main.f_device.f_deviceName.l_device configure -text $::deviceArray(nam=
e)
    .main.f_device.f_deviceName configure -relief groove
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(sbv)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(sbv) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(bsb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(bsb) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(ssb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(ssb) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(hsb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(hsb) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(eb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(eb) <span class=3D"h=
ljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(deviceBootId1)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(deviceBootId1) <span=
 class=3D"hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(deviceBootId2)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(deviceBootId2) <span=
 class=3D"hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(bljbFuse)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(bljbFuse) <span clas=
s=3D"hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(x2Fuse)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(x2Fuse) <span class=
=3D"hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(level)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(level) X
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(eraseType)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(eraseType) <span cla=
ss=3D"hljs-string">"full"</span>
    }
    <span class=3D"hljs-keyword">set</span> nAddrBits <span class=3D"hljs-n=
umber">4</span>
    <span class=3D"hljs-keyword">set</span> rs232standard(readHwByte) <span=
 class=3D"hljs-string">":020000050B00EE"</span>
    <span class=3D"hljs-keyword">set</span> rs232standard(readBootlVer) <sp=
an class=3D"hljs-string">":020000050F00EA"</span>
    <span class=3D"hljs-keyword">set</span> protocol(frameLengthW) <span cl=
ass=3D"hljs-number">128</span>
    <span class=3D"hljs-keyword">set</span> protocol(frameLengthR) <span cl=
ass=3D"hljs-number">128</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowErase) <span =
class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowBlankCheck) <=
span class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowProgram) <spa=
n class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowVerify) <span=
 class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowSpecialBytes)=
 <span class=3D"hljs-number">0</span>
    wm title .deviceErase <span class=3D"hljs-string">"$::deviceArray(name)=
 Erase"</span>
    .deviceErase.f_erase.f_blocks.b_blockErase configure -state normal
    <span class=3D"hljs-keyword">set</span> fReadOnly .main.f_device.f_read=
Only
    frame $fReadOnly -relief groove -borderwidth <span class=3D"hljs-number=
">1</span>
    <span class=3D"hljs-keyword">set</span> fManufId $fReadOnly.f_manufId
    frame $fManufId -relief flat
    <span class=3D"hljs-keyword">set</span> lManufId $fManufId.l_manufId
    label $lManufId -text <span class=3D"hljs-string">"Manufact. Id"</span>=
 -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    <span class=3D"hljs-keyword">set</span> eManufId $fManufId.e_manufId
    entry $eManufId -textvariable ::deviceArray(manufId) -width <span class=
=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eManufId <span class=3D"hljs-string">"Manufacturer code val=
ue"</span>
    pack config $lManufId $eManufId -padx <span class=3D"hljs-number">1</sp=
an> -side left
    pack config $fManufId -side top -ipady <span class=3D"hljs-number">1</s=
pan> -fill both
    <span class=3D"hljs-keyword">set</span> fDeviceIds $fReadOnly.f_deviceI=
ds
    frame $fDeviceIds -relief flat
    <span class=3D"hljs-keyword">set</span> lDeviceIds $fDeviceIds.l_device=
Ids
    label $lDeviceIds -text <span class=3D"hljs-string">"Device Ids"</span>=
 -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    <span class=3D"hljs-keyword">set</span> eDeviceId1 $fDeviceIds.e_device=
Id1
    entry $eDeviceId1 -textvariable ::deviceArray(deviceId1) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId1 <span class=3D"hljs-string">"Family code value"<=
/span>
    <span class=3D"hljs-keyword">set</span> eDeviceId2 $fDeviceIds.e_device=
Id2
    entry $eDeviceId2 -textvariable ::deviceArray(deviceId2) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId2 <span class=3D"hljs-string">"Device name code"</=
span>
    <span class=3D"hljs-keyword">set</span> eDeviceId3 $fDeviceIds.e_device=
Id3
    entry $eDeviceId3 -textvariable ::deviceArray(deviceId3) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId3 <span class=3D"hljs-string">"Device revision num=
ber"</span>
    pack config $lDeviceIds $eDeviceId1 $eDeviceId2 $eDeviceId3 -padx <span=
 class=3D"hljs-number">1</span> -side left
    pack config $fDeviceIds -side top -ipady <span class=3D"hljs-number">1<=
/span> -fill both
    <span class=3D"hljs-keyword">set</span> fDeviceBootIds $fReadOnly.f_dev=
iceBootIds
    frame $fDeviceBootIds -relief flat
    <span class=3D"hljs-keyword">set</span> lDeviceBootIds $fDeviceBootIds.=
l_deviceBootIds
    label $lDeviceBootIds -text <span class=3D"hljs-string">"Device Boot Id=
s"</span> -font $flipFont -anchor w -width <span class=3D"hljs-number">16</=
span>
    setBalloon $lDeviceBootIds <span class=3D"hljs-string">"Boot Ids 1, 2: =
read-only"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceBootId1 $fDeviceBootIds.=
e_deviceBootId1
    entry $eDeviceBootId1 -textvariable ::deviceArray(deviceBootId1) -width=
 <span class=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceBootId1 <span class=3D"hljs-string">"Boot Id 1 value=
"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceBootId2 $fDeviceBootIds.=
e_deviceBootId2
    entry $eDeviceBootId2 -textvariable ::deviceArray(deviceBootId2) -width=
 <span class=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceBootId2 <span class=3D"hljs-string">"Boot Id 2 value=
"</span>
    pack config $lDeviceBootIds $eDeviceBootId1 $eDeviceBootId2 -padx <span=
 class=3D"hljs-number">1</span> -side left
    pack config $fDeviceBootIds -side top -ipady <span class=3D"hljs-number=
">1</span> -fill both
    <span class=3D"hljs-keyword">set</span> fHSB $fReadOnly.f_hsb
    frame $fHSB -relief flat
    <span class=3D"hljs-keyword">set</span> lHSB $fHSB.l_hsb
    label $lHSB -text <span class=3D"hljs-string">"Hardware Byte"</span> -f=
ont $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lHSB <span class=3D"hljs-string">"Hardware Security Byte: r=
ead-only"</span>
    <span class=3D"hljs-keyword">set</span> eHSB $fHSB.e_hsb
    entry $eHSB -textvariable ::deviceArray(hsb) -width <span class=3D"hljs=
-number">3</span> -font $flipFont -state disabled
    setBalloon $eHSB <span class=3D"hljs-string">"Hardware Security Byte va=
lue"</span>
    pack config $lHSB $eHSB -padx <span class=3D"hljs-number">1</span> -sid=
e left
    pack config $fHSB -side top -ipady <span class=3D"hljs-number">1</span>=
 -fill both
    <span class=3D"hljs-keyword">set</span> fBootlVer $fReadOnly.f_bootlVer
    frame $fBootlVer -relief flat
    <span class=3D"hljs-keyword">set</span> lBootlVer $fBootlVer.l_bootlVer
    label $lBootlVer -text <span class=3D"hljs-string">"Bootloader Ver."</s=
pan> -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lBootlVer <span class=3D"hljs-string">"Bootloader Version: =
read-only"</span>
    <span class=3D"hljs-keyword">set</span> eBootlVer $fBootlVer.e_bootlVer
    entry $eBootlVer -textvariable ::deviceArray(bootlVer) -width <span cla=
ss=3D"hljs-number">5</span> -font $flipFont -state disabled
    setBalloon $eBootlVer <span class=3D"hljs-string">"Bootloader Version"<=
/span>
    pack config $lBootlVer $eBootlVer -padx <span class=3D"hljs-number">1</=
span> -side left
    pack config $fBootlVer -side top -ipady <span class=3D"hljs-number">1</=
span> -fill both
    pack configure $fReadOnly -side top -padx <span class=3D"hljs-number">5=
</span> -fill both
    <span class=3D"hljs-keyword">set</span> fFuses .main.f_device.f_fuses
    frame $fFuses -relief groove -borderwidth <span class=3D"hljs-number">1=
</span>
    <span class=3D"hljs-keyword">set</span> bBLJB $fFuses.b_bljb
    checkbutton $bBLJB -text <span class=3D"hljs-string">"BLJB"</span> -fon=
t $flipFont -<span class=3D"hljs-keyword">variable</span> ::deviceArray(blj=
bFuse) -onvalue <span class=3D"hljs-number">0</span> -offvalue <span class=
=3D"hljs-number">1</span> -indicatoron true -state disabled
    setBalloon $bBLJB <span class=3D"hljs-string">"Boot Loader Jump Bit \nS=
et =3D 0 / Unset =3D 1"</span>
    <span class=3D"hljs-keyword">set</span> bX2 $fFuses.b_x2
    checkbutton $bX2 -text <span class=3D"hljs-string">"X2"</span> -font $f=
lipFont -<span class=3D"hljs-keyword">variable</span> ::deviceArray(x2Fuse)=
 -onvalue <span class=3D"hljs-number">0</span> -offvalue <span class=3D"hlj=
s-number">1</span> -indicatoron true -state disabled
    setBalloon $bX2 <span class=3D"hljs-string">"X2 fuse bit \nSet =3D 0 / =
Unset =3D 1"</span>
    pack config $bBLJB $bX2 -side left -padx <span class=3D"hljs-number">10=
</span> -anchor w
    pack configure $fFuses -side top -padx <span class=3D"hljs-number">5</s=
pan> -pady <span class=3D"hljs-number">5</span> -fill x
    <span class=3D"hljs-keyword">set</span> f_BSB_SBV .main.f_device.f_bsb_=
sbv
    frame $f_BSB_SBV -relief groove -borderwidth <span class=3D"hljs-number=
">1</span>
    <span class=3D"hljs-keyword">set</span> f_BSB $f_BSB_SBV.f_bsb
    frame $f_BSB -relief flat
    <span class=3D"hljs-keyword">set</span> l_BSB $f_BSB.l_bsb
    label $l_BSB -text <span class=3D"hljs-string">"Device BSB"</span> -fon=
t $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $l_BSB <span class=3D"hljs-string">"Boot Status Byte"</span>
    <span class=3D"hljs-keyword">set</span> e_BSB $f_BSB.e_bsb
    entry $e_BSB -textvariable ::deviceArray(bsb) -width <span class=3D"hlj=
s-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0=
</span> -state disabled
    setBalloon $e_BSB <span class=3D"hljs-string">"Actual BSB value"</span>
    <span class=3D"hljs-keyword">set</span> e_EB $f_BSB.e_eb
    entry $e_EB -textvariable ::deviceArray(eb) -width <span class=3D"hljs-=
number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0</=
span> -state disabled
    setBalloon $e_EB <span class=3D"hljs-string">"Actual EB value"</span>
    pack config $l_BSB $e_BSB -padx <span class=3D"hljs-number">1</span> -s=
ide left
    pack config $f_BSB -side top -ipady <span class=3D"hljs-number">1</span=
> -fill both
    <span class=3D"hljs-keyword">set</span> f_SBV $f_BSB_SBV.f_sbv
    frame $f_SBV -relief flat
    <span class=3D"hljs-keyword">set</span> l_SBV $f_SBV.l_sbv
    label $l_SBV -text <span class=3D"hljs-string">"Device SBV"</span> -fon=
t $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $l_SBV <span class=3D"hljs-string">"Software Boot Vector"</s=
pan>
    <span class=3D"hljs-keyword">set</span> e_SBV $f_SBV.e_sbv
    entry $e_SBV -textvariable ::deviceArray(sbv) -width <span class=3D"hlj=
s-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0=
</span> -state disabled
    setBalloon $e_SBV <span class=3D"hljs-string">"Actual SBV value"</span>
    <span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-number">0</=
span>} then {
	<span class=3D"hljs-keyword">set</span> bErase $fSBV.b_erase
	button $bErase -bd <span class=3D"hljs-number">3</span> -text <span class=
=3D"hljs-string">"Erase"</span> -font $flipFont -command {cmdsEraseSBVBSB} =
-state disabled -width <span class=3D"hljs-number">5</span>
	setBalloon $bErase <span class=3D"hljs-string">"Resets SBV and BSB\nto def=
ault values"</span>
    }
    pack config $l_SBV $e_SBV -padx <span class=3D"hljs-number">1</span> -s=
ide left
    pack config $f_SBV -side top -ipady <span class=3D"hljs-number">1</span=
> -fill both
    pack configure $f_BSB_SBV -side top -padx <span class=3D"hljs-number">5=
</span> -fill both
    bind $e_SBV &lt;Return&gt; {devcSetDeviceSpecialBytes}
    bind $e_BSB &lt;Return&gt; {devcSetDeviceSpecialBytes}
    <span class=3D"hljs-keyword">set</span> fSSB .main.f_device.f_ssb
    frame $fSSB -relief groove -borderwidth <span class=3D"hljs-number">1</=
span>
    <span class=3D"hljs-keyword">set</span> fInfo $fSSB.f_info
    frame $fInfo -relief flat
    <span class=3D"hljs-keyword">set</span> lSSB $fInfo.l_ssb
    label $lSSB -text <span class=3D"hljs-string">"Device SSB"</span> -font=
 $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lSSB <span class=3D"hljs-string">"Software Security Byte"</=
span>
    <span class=3D"hljs-keyword">set</span> eSSB $fInfo.e_ssb
    entry $eSSB -textvariable ::deviceArray(ssb) -width <span class=3D"hljs=
-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0<=
/span> -state disabled
    setBalloon $eSSB <span class=3D"hljs-string">"Actual SSB value"</span>
    pack config $lSSB $eSSB -padx <span class=3D"hljs-number">1</span> -sid=
e left
    pack config $fInfo -side top
    <span class=3D"hljs-keyword">set</span> fLevel $fSSB.f_level
    frame $fLevel -relief flat
    <span class=3D"hljs-keyword">set</span> bLevel0 $fLevel.b_level0
    radiobutton $bLevel0 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 0"</span> -value <sp=
an class=3D"hljs-number">0</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 0"</span> -state disabled
    setBalloon $bLevel0 <span class=3D"hljs-string">"Security level 0: no s=
ecurity\n (setting to levels 1 and 2 allowed)"</span>
    pack configure $bLevel0 -side left
    <span class=3D"hljs-keyword">set</span> bLevel1 $fLevel.b_level1
    radiobutton $bLevel1 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 1"</span> -value <sp=
an class=3D"hljs-number">1</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 1"</span> -state disabled
    setBalloon $bLevel1 <span class=3D"hljs-string">"Security level 1: no w=
riting allowed\n (setting to level 2 allowed)"</span>
    pack configure $bLevel1 -side left
    <span class=3D"hljs-keyword">set</span> bLevel2 $fLevel.b_level2
    radiobutton $bLevel2 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 2"</span> -value <sp=
an class=3D"hljs-number">2</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 2"</span> -state disabled
    setBalloon $bLevel2 <span class=3D"hljs-string">"Security level 2: neit=
her reading nor writing allowed\n (full chip erase resets security level to=
 0)"</span>
    pack configure $bLevel2 -side left
    pack configure $fInfo -side top -anchor w -ipady <span class=3D"hljs-nu=
mber">2</span> -fill both
    pack configure $fLevel -side top -anchor w -pady <span class=3D"hljs-nu=
mber">5</span> -fill both
    pack configure $fSSB -side top -padx <span class=3D"hljs-number">5</spa=
n> -pady <span class=3D"hljs-number">5</span> -fill both
    <span class=3D"hljs-keyword">set</span> fStartApp .main.f_device.f_star=
tApp
    frame $fStartApp -relief groove -borderwidth <span class=3D"hljs-number=
">1</span>
    button $fStartApp.b_start -text <span class=3D"hljs-string">"Start Appl=
ication"</span> -bd <span class=3D"hljs-number">3</span> -font $flipFont -s=
tate disabled -command {ptclStartAppli $flipStates(withReset)}
    setBalloon $fStartApp.b_start <span class=3D"hljs-string">"Starts appli=
cation at address 0x0000"</span>
    checkbutton $fStartApp.b_reset -text <span class=3D"hljs-string">"With =
Reset"</span> -font $flipFont -<span class=3D"hljs-keyword">variable</span>=
 flipStates(withReset) -indicatoron true -state disabled
    setBalloon $fStartApp.b_reset <span class=3D"hljs-string">"If set, gene=
rates a hardware reset pulse\n  when the Start Application button is presse=
d."</span>
    pack configure $fStartApp.b_start $fStartApp.b_reset -side left -padx <=
span class=3D"hljs-number">5</span> -pady <span class=3D"hljs-number">5</sp=
an>
    pack configure $fStartApp -padx <span class=3D"hljs-number">5</span> -f=
ill both
    <span class=3D"hljs-keyword">set</span> fButtons .main.f_device.f_butto=
ns
    frame $fButtons -relief flat
    pack configure $fButtons -side top
    <span class=3D"hljs-keyword">set</span> bUpdate $fButtons.b_update
    button $bUpdate -bd <span class=3D"hljs-number">3</span> -text <span cl=
ass=3D"hljs-string">"Read"</span> -font $flipFont -command {devcUpdateDevic=
eFrame} -state disabled
    setBalloon $bUpdate <span class=3D"hljs-string">"Reads device special b=
ytes"</span>
    <span class=3D"hljs-keyword">set</span> bWrite $fButtons.b_write
    button $bWrite -bd <span class=3D"hljs-number">3</span> -text <span cla=
ss=3D"hljs-string">"Set"</span> -font $flipFont -command {devcSetDeviceSpec=
ialBytes} -state disabled
    setBalloon $bWrite <span class=3D"hljs-string">"Sets device special byt=
es"</span>
    <span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-number">0</=
span>} then {
	<span class=3D"hljs-keyword">set</span> bMemorySelect .main.f_buffer.b_mem=
Select
	<span class=3D"hljs-keyword">if</span> {! [winfo exists $bMemorySelect]} t=
hen {
	    button $bMemorySelect -bd <span class=3D"hljs-number">3</span> -text $=
::deviceArray(currentMemory) -font $flipFont -command {cmdsToggleMemory} -w=
idth <span class=3D"hljs-number">8</span> -state disabled
	    setBalloon $bMemorySelect <span class=3D"hljs-string">"FLIP will perfo=
rm all operations\n on the selected memory"</span>
	}
    }
    pack config $bUpdate $bWrite -side left -padx <span class=3D"hljs-numbe=
r">15</span>
    pack configure $fButtons -side top -padx <span class=3D"hljs-number">5<=
/span> -pady <span class=3D"hljs-number">15</span> -fill both
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> buildSk=
ipTestList</span> {protocol} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">switch</span> $protocol {
    USB_DFU {
	    <span class=3D"hljs-keyword">set</span> ::deviceArray(skipList) <span =
class=3D"hljs-string">"  xaf-1.5  xaf-1.6  xaf-1.13  xaf-1.14  xaf-1.21  xa=
f-1.22  xaf-1.28  flash-2.23.1  flash-2.25 "</span>
	}
    RS232Standard {
	    <span class=3D"hljs-keyword">set</span> ::deviceArray(skipList) <span =
class=3D"hljs-string">"  xaf-1.5  xaf-1.6  xaf-1.13  xaf-1.14  xaf-1.21  xa=
f-1.22  xaf-1.28  flash-2.23.1  flash-2.25 "</span>
	}
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> buildSk=
ipProcList</span> {} {
    <span class=3D"hljs-keyword">set</span> skipL {}
    <span class=3D"hljs-keyword">return</span> $skipL
}
t89c51snd1
<span class=3D"hljs-keyword">foreach</span> m $::deviceArray(memoryList) {
    cmdsImportCurrentMemoryNameSpace $m
    cmdsSetMemoryParameters
    initBuffer
}
cmdsImportCurrentMemoryNameSpace FLASH
<span class=3D"hljs-comment">#dbgEndSrc [info script]</span>
<span class=3D"hljs-comment">#dbgBeginSrc [info script]</span>
<span class=3D"hljs-keyword">global</span> projDir
<span class=3D"hljs-keyword">source</span> $projDir/tcl/devices/devices_com=
mon.tcl
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> at89c51=
cc03</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> protcl protocol nAddrBits fl=
ipFont rs232standard canstandard expAnsw testFlag buffer flowButtons flipSt=
ates
    <span class=3D"hljs-keyword">set</span> children_List [<span class=3D"h=
ljs-keyword">split</span> [winfo children .main.f_device]]
    <span class=3D"hljs-keyword">foreach</span> item $children_List {
	<span class=3D"hljs-keyword">if</span> {$item !=3D <span class=3D"hljs-str=
ing">".main.f_device.f_deviceName"</span>} then {
	    destroy $item
	}
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">a=
rray</span> exists ::deviceArray]} then {
	<span class=3D"hljs-keyword">array</span> <span class=3D"hljs-keyword">uns=
et</span> ::deviceArray
    }
    <span class=3D"hljs-keyword">set</span> ::deviceArray(name) <span class=
=3D"hljs-string">"AT89C51CC03"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(communicationList=
) <span class=3D"hljs-string">"CAN RS232"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(memoryList) [<spa=
n class=3D"hljs-keyword">list</span> FLASH EEPROM]
    <span class=3D"hljs-keyword">set</span> ::deviceArray(memoryButtonList)=
 [<span class=3D"hljs-keyword">list</span> <span class=3D"hljs-string">"Sel=
ect EEPROM"</span> <span class=3D"hljs-string">"Select FLASH"</span>]
    <span class=3D"hljs-keyword">set</span> ::deviceArray(memoryColor) [<sp=
an class=3D"hljs-keyword">list</span> <span class=3D"hljs-string">"#88a67d"=
</span> <span class=3D"hljs-string">"wheat"</span>]
    <span class=3D"hljs-keyword">set</span> ::deviceArray(currentMemory) <s=
pan class=3D"hljs-string">"FLASH"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(currentMemoryButt=
on) <span class=3D"hljs-string">"Select EEPROM"</span>
    <span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keywo=
rd">eval</span> ::FLASH:: {
	<span class=3D"hljs-keyword">variable</span> deviceArray
	<span class=3D"hljs-keyword">variable</span> buffer
	<span class=3D"hljs-keyword">set</span> deviceArray(memorySize) <span clas=
s=3D"hljs-number">64</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankValue) <span clas=
s=3D"hljs-string">"FF"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erase) <span class=3D"hljs-=
string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(blankCheck) <span class=3D"=
hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseType) <span class=3D"h=
ljs-string">"full"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlocks) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock0) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock0) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock1) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock1) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock2) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock2) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock3) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock3) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock4) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock4) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(progStart) <span class=
=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(displayData) <span cla=
ss=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankCheck) <span clas=
s=3D"hljs-string">"01"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(programData) <span cla=
ss=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">namespace</span> export writeBuffer readBuffe=
r readDeviceArray initBuffer bufferChecksum
    }
    <span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keywo=
rd">eval</span> ::EEPROM:: {
	<span class=3D"hljs-keyword">variable</span> deviceArray
	<span class=3D"hljs-keyword">variable</span> buffer
	<span class=3D"hljs-keyword">set</span> deviceArray(memorySize) <span clas=
s=3D"hljs-number">2</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankValue) <span clas=
s=3D"hljs-string">"FF"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erase) <span class=3D"hljs-=
string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(blankCheck) <span class=3D"=
hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseType) <span class=3D"h=
ljs-string">"full"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlocks) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock0) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock0) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock1) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock1) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock2) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock2) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock3) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock3) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock4) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock4) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(progStart) <span class=
=3D"hljs-string">"01"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(displayData) <span cla=
ss=3D"hljs-string">"02"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankCheck) <span clas=
s=3D"hljs-string">"XX"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(programData) <span cla=
ss=3D"hljs-string">"07"</span>
	<span class=3D"hljs-keyword">namespace</span> export writeBuffer readBuffe=
r readDeviceArray initBuffer bufferChecksum
    }
    <span class=3D"hljs-keyword">foreach</span> M $::deviceArray(memoryList=
) {
	<span class=3D"hljs-keyword">proc</span> ::${M}::writeBuffer {index data} =
{
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">set</span> buffer($index) $data
	    <span class=3D"hljs-keyword">return</span>
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::readBuffer {index} {
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">return</span> $buffer($index)
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::readDeviceArray {index} {
	    <span class=3D"hljs-keyword">variable</span> deviceArray
	    <span class=3D"hljs-keyword">return</span> $deviceArray($index)
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::initBuffer {} {
	    <span class=3D"hljs-keyword">variable</span> deviceArray
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">global</span> flipStates
	    <span class=3D"hljs-keyword">set</span> max [<span class=3D"hljs-keywo=
rd">expr</span> $deviceArray(memorySize) * <span class=3D"hljs-number">1024=
</span>]
	    <span class=3D"hljs-keyword">if</span> {$flipStates(simul)} then {
		<span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">set=
</span> i <span class=3D"hljs-number">0</span>} {$i &lt; $max} {<span class=
=3D"hljs-keyword">incr</span> i} {
		    <span class=3D"hljs-keyword">set</span> buffer([<span class=3D"hljs-k=
eyword">format</span> %<span class=3D"hljs-number">06</span>X $i]) $deviceA=
rray(blankValue)
		}
	    } else {
		initBuffer_C $max $deviceArray(blankValue)
	    }
	    <span class=3D"hljs-keyword">return</span>
	}
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::F=
LASH::bufferChecksum</span> {} {
	<span class=3D"hljs-keyword">variable</span> buffer
	<span class=3D"hljs-keyword">global</span> flipStates
	<span class=3D"hljs-keyword">set</span> min $buffer(minProgAddr)
	<span class=3D"hljs-keyword">set</span> max $buffer(maxProgAddr)
	<span class=3D"hljs-keyword">if</span> {$flipStates(simul)} then {
	    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number"=
>0xCAFEFADE</span>
	} else {
	    <span class=3D"hljs-keyword">return</span> [computeBufferChecksum_C $m=
in $max]
	}
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::E=
EPROM::bufferChecksum</span> {} {
	<span class=3D"hljs-keyword">variable</span> buffer
	<span class=3D"hljs-keyword">global</span> flipStates
	<span class=3D"hljs-keyword">set</span> min $buffer(minProgAddr)
	<span class=3D"hljs-keyword">set</span> max $buffer(maxProgAddr)
	<span class=3D"hljs-keyword">if</span> {$flipStates(simul)} then {
	    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number"=
>0xDEADBEEF</span>
	} else {
	    <span class=3D"hljs-keyword">return</span> [computeBufferChecksum_C $m=
in $max]
	}
    }
    <span class=3D"hljs-keyword">set</span> ::deviceArray(jumpAdd) <span cl=
ass=3D"hljs-string">"0000"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(specialSynchro) <=
span class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(RS232ProtocolsLis=
t) <span class=3D"hljs-string">"Standard Enhanced"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(CANProtocolsList)=
 <span class=3D"hljs-string">"Standard Enhanced"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(nnbConnect) <span=
 class=3D"hljs-string">"FF"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(nnbProg) <span cl=
ass=3D"hljs-string">"XX"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(crisConnect) <spa=
n class=3D"hljs-string">"00"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(crisProg) <span c=
lass=3D"hljs-string">"XX"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(btc1) <span class=
=3D"hljs-string">"XX"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(btc2) <span class=
=3D"hljs-string">"XX"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(btc3) <span class=
=3D"hljs-string">"XX"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev0) [<span cla=
ss=3D"hljs-keyword">list</span> FF]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev0Test) <span =
class=3D"hljs-string">"FF"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev1) [<span cla=
ss=3D"hljs-keyword">list</span> FE]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev1Test) <span =
class=3D"hljs-string">"FE"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev2Test) <span =
class=3D"hljs-string">"FC"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev2) [<span cla=
ss=3D"hljs-keyword">list</span> FC XX]
    <span class=3D"hljs-keyword">set</span> expAnsw(readManufId) <span clas=
s=3D"hljs-number">58</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId1) XX
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId2) XX
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId3) XX
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock0) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock1) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock2) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock3) <span cla=
ss=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock4) <span cla=
ss=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> testFlag(readDevBootId1) <span =
class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(readDevBootId2) <span =
class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(sbv) <span class=3D"hl=
js-string">"FC"</span>
    <span class=3D"hljs-keyword">set</span> fBlocks .deviceErase.f_erase.f_=
blocks
    <span class=3D"hljs-keyword">set</span> bBlock0 $fBlocks.b_block0
    <span class=3D"hljs-keyword">set</span> bBlock1 $fBlocks.b_block1
    <span class=3D"hljs-keyword">set</span> bBlock2 $fBlocks.b_block2
    <span class=3D"hljs-keyword">set</span> bBlock3 $fBlocks.b_block3
    <span class=3D"hljs-keyword">set</span> bBlock4 $fBlocks.b_block4
    setBalloon $bBlock0 <span class=3D"hljs-string">"Erase memory between 0=
000 and 1FFF"</span>
    setBalloon $bBlock1 <span class=3D"hljs-string">"Erase memory between 2=
000 and 3FFF"</span>
    setBalloon $bBlock2 <span class=3D"hljs-string">"Erase memory between 4=
000 and 7FFF"</span>
    $bBlock3 configure -state disabled
    $bBlock4 configure -state disabled
    .main.f_device.f_deviceName.l_device configure -text $::deviceArray(nam=
e)
    .main.f_device.f_deviceName configure -relief groove
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(sbv)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(sbv) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(bsb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(bsb) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(ssb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(ssb) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(hsb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(hsb) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(eb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(eb) <span class=3D"h=
ljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(deviceBootId1)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(deviceBootId1) <span=
 class=3D"hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(deviceBootId2)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(deviceBootId2) <span=
 class=3D"hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(bljbFuse)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(bljbFuse) <span clas=
s=3D"hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(x2Fuse)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(x2Fuse) <span class=
=3D"hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(level)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(level) X
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(eraseType)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(eraseType) <span cla=
ss=3D"hljs-string">"full"</span>
    }
    <span class=3D"hljs-keyword">set</span> nAddrBits <span class=3D"hljs-n=
umber">4</span>
    <span class=3D"hljs-keyword">set</span> rs232standard(readHwByte) <span=
 class=3D"hljs-string">":020000050B00EE"</span>
    <span class=3D"hljs-keyword">set</span> rs232standard(readBootlVer) <sp=
an class=3D"hljs-string">":020000050F00EA"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowErase) <span =
class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowBlankCheck) <=
span class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowProgram) <spa=
n class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowVerify) <span=
 class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowSpecialBytes)=
 <span class=3D"hljs-number">0</span>
    wm title .deviceErase <span class=3D"hljs-string">"$::deviceArray(name)=
 Erase"</span>
    .deviceErase.f_erase.f_blocks.b_blockErase configure -state normal
    <span class=3D"hljs-keyword">set</span> fReadOnly .main.f_device.f_read=
Only
    frame $fReadOnly -relief groove -borderwidth <span class=3D"hljs-number=
">1</span>
    <span class=3D"hljs-keyword">set</span> fManufId $fReadOnly.f_manufId
    frame $fManufId -relief flat
    <span class=3D"hljs-keyword">set</span> lManufId $fManufId.l_manufId
    label $lManufId -text <span class=3D"hljs-string">"Manufact. Id"</span>=
 -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    <span class=3D"hljs-keyword">set</span> eManufId $fManufId.e_manufId
    entry $eManufId -textvariable ::deviceArray(manufId) -width <span class=
=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eManufId <span class=3D"hljs-string">"Manufacturer code val=
ue"</span>
    pack config $lManufId $eManufId -padx <span class=3D"hljs-number">1</sp=
an> -side left
    pack config $fManufId -side top -ipady <span class=3D"hljs-number">1</s=
pan> -fill both
    <span class=3D"hljs-keyword">set</span> fDeviceIds $fReadOnly.f_deviceI=
ds
    frame $fDeviceIds -relief flat
    <span class=3D"hljs-keyword">set</span> lDeviceIds $fDeviceIds.l_device=
Ids
    label $lDeviceIds -text <span class=3D"hljs-string">"Device Ids"</span>=
 -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    <span class=3D"hljs-keyword">set</span> eDeviceId1 $fDeviceIds.e_device=
Id1
    entry $eDeviceId1 -textvariable ::deviceArray(deviceId1) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId1 <span class=3D"hljs-string">"Family code value"<=
/span>
    <span class=3D"hljs-keyword">set</span> eDeviceId2 $fDeviceIds.e_device=
Id2
    entry $eDeviceId2 -textvariable ::deviceArray(deviceId2) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId2 <span class=3D"hljs-string">"Device name code"</=
span>
    <span class=3D"hljs-keyword">set</span> eDeviceId3 $fDeviceIds.e_device=
Id3
    entry $eDeviceId3 -textvariable ::deviceArray(deviceId3) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId3 <span class=3D"hljs-string">"Device revision num=
ber"</span>
    pack config $lDeviceIds $eDeviceId1 $eDeviceId2 $eDeviceId3 -padx <span=
 class=3D"hljs-number">1</span> -side left
    pack config $fDeviceIds -side top -ipady <span class=3D"hljs-number">1<=
/span> -fill both
    <span class=3D"hljs-keyword">set</span> fDeviceBootIds $fReadOnly.f_dev=
iceBootIds
    frame $fDeviceBootIds -relief flat
    <span class=3D"hljs-keyword">set</span> lDeviceBootIds $fDeviceBootIds.=
l_deviceBootIds
    label $lDeviceBootIds -text <span class=3D"hljs-string">"Device Boot Id=
s"</span> -font $flipFont -anchor w -width <span class=3D"hljs-number">16</=
span>
    setBalloon $lDeviceBootIds <span class=3D"hljs-string">"Boot Ids 1, 2: =
read-only"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceBootId1 $fDeviceBootIds.=
e_deviceBootId1
    entry $eDeviceBootId1 -textvariable ::deviceArray(deviceBootId1) -width=
 <span class=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceBootId1 <span class=3D"hljs-string">"Boot Id 1 value=
"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceBootId2 $fDeviceBootIds.=
e_deviceBootId2
    entry $eDeviceBootId2 -textvariable ::deviceArray(deviceBootId2) -width=
 <span class=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceBootId2 <span class=3D"hljs-string">"Boot Id 2 value=
"</span>
    pack config $lDeviceBootIds $eDeviceBootId1 $eDeviceBootId2 -padx <span=
 class=3D"hljs-number">1</span> -side left
    pack config $fDeviceBootIds -side top -ipady <span class=3D"hljs-number=
">1</span> -fill both
    <span class=3D"hljs-keyword">set</span> fHSB $fReadOnly.f_hsb
    frame $fHSB -relief flat
    <span class=3D"hljs-keyword">set</span> lHSB $fHSB.l_hsb
    label $lHSB -text <span class=3D"hljs-string">"Hardware Byte"</span> -f=
ont $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lHSB <span class=3D"hljs-string">"Hardware Security Byte: r=
ead-only"</span>
    <span class=3D"hljs-keyword">set</span> eHSB $fHSB.e_hsb
    entry $eHSB -textvariable ::deviceArray(hsb) -width <span class=3D"hljs=
-number">3</span> -font $flipFont -state disabled
    setBalloon $eHSB <span class=3D"hljs-string">"Hardware Security Byte va=
lue"</span>
    pack config $lHSB $eHSB -padx <span class=3D"hljs-number">1</span> -sid=
e left
    pack config $fHSB -side top -ipady <span class=3D"hljs-number">1</span>=
 -fill both
    <span class=3D"hljs-keyword">set</span> fBootlVer $fReadOnly.f_bootlVer
    frame $fBootlVer -relief flat
    <span class=3D"hljs-keyword">set</span> lBootlVer $fBootlVer.l_bootlVer
    label $lBootlVer -text <span class=3D"hljs-string">"Bootloader Ver."</s=
pan> -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lBootlVer <span class=3D"hljs-string">"Bootloader Version: =
read-only"</span>
    <span class=3D"hljs-keyword">set</span> eBootlVer $fBootlVer.e_bootlVer
    entry $eBootlVer -textvariable ::deviceArray(bootlVer) -width <span cla=
ss=3D"hljs-number">5</span> -font $flipFont -state disabled
    setBalloon $eBootlVer <span class=3D"hljs-string">"Bootloader Version"<=
/span>
    pack config $lBootlVer $eBootlVer -padx <span class=3D"hljs-number">1</=
span> -side left
    pack config $fBootlVer -side top -ipady <span class=3D"hljs-number">1</=
span> -fill both
    pack configure $fReadOnly -side top -padx <span class=3D"hljs-number">5=
</span> -fill both
    <span class=3D"hljs-keyword">set</span> fFuses .main.f_device.f_fuses
    frame $fFuses -relief groove -borderwidth <span class=3D"hljs-number">1=
</span>
    <span class=3D"hljs-keyword">set</span> bBLJB $fFuses.b_bljb
    checkbutton $bBLJB -text <span class=3D"hljs-string">"BLJB"</span> -fon=
t $flipFont -<span class=3D"hljs-keyword">variable</span> ::deviceArray(blj=
bFuse) -onvalue <span class=3D"hljs-number">0</span> -offvalue <span class=
=3D"hljs-number">1</span> -indicatoron true -state disabled
    setBalloon $bBLJB <span class=3D"hljs-string">"Boot Loader Jump Bit \nS=
et =3D 0 / Unset =3D 1"</span>
    <span class=3D"hljs-keyword">set</span> bX2 $fFuses.b_x2
    checkbutton $bX2 -text <span class=3D"hljs-string">"X2"</span> -font $f=
lipFont -<span class=3D"hljs-keyword">variable</span> ::deviceArray(x2Fuse)=
 -onvalue <span class=3D"hljs-number">0</span> -offvalue <span class=3D"hlj=
s-number">1</span> -indicatoron true -state disabled
    setBalloon $bX2 <span class=3D"hljs-string">"X2 fuse bit \nSet =3D 0 / =
Unset =3D 1"</span>
    pack config $bBLJB $bX2 -side left -padx <span class=3D"hljs-number">10=
</span> -anchor w
    pack configure $fFuses -side top -padx <span class=3D"hljs-number">5</s=
pan> -pady <span class=3D"hljs-number">5</span> -fill x
    <span class=3D"hljs-keyword">set</span> f_BSB_SBV .main.f_device.f_bsb_=
sbv
    frame $f_BSB_SBV -relief groove -borderwidth <span class=3D"hljs-number=
">1</span>
    <span class=3D"hljs-keyword">set</span> f_BSB $f_BSB_SBV.f_bsb
    frame $f_BSB -relief flat
    <span class=3D"hljs-keyword">set</span> l_BSB $f_BSB.l_bsb
    label $l_BSB -text <span class=3D"hljs-string">"Device BSB &amp; EB"</s=
pan> -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $l_BSB <span class=3D"hljs-string">"Boot Status Byte &amp; E=
xtra Byte"</span>
    <span class=3D"hljs-keyword">set</span> e_BSB $f_BSB.e_bsb
    entry $e_BSB -textvariable ::deviceArray(bsb) -width <span class=3D"hlj=
s-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0=
</span> -state disabled
    setBalloon $e_BSB <span class=3D"hljs-string">"Actual BSB value"</span>
    <span class=3D"hljs-keyword">set</span> e_EB $f_BSB.e_eb
    entry $e_EB -textvariable ::deviceArray(eb) -width <span class=3D"hljs-=
number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0</=
span> -state disabled
    setBalloon $e_EB <span class=3D"hljs-string">"Actual EB value"</span>
    pack config $l_BSB $e_BSB $e_EB -padx <span class=3D"hljs-number">1</sp=
an> -side left
    pack config $f_BSB -side top -ipady <span class=3D"hljs-number">1</span=
> -fill both
    <span class=3D"hljs-keyword">set</span> f_SBV $f_BSB_SBV.f_sbv
    frame $f_SBV -relief flat
    <span class=3D"hljs-keyword">set</span> l_SBV $f_SBV.l_sbv
    label $l_SBV -text <span class=3D"hljs-string">"Device SBV"</span> -fon=
t $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $l_SBV <span class=3D"hljs-string">"Software Boot Vector"</s=
pan>
    <span class=3D"hljs-keyword">set</span> e_SBV $f_SBV.e_sbv
    entry $e_SBV -textvariable ::deviceArray(sbv) -width <span class=3D"hlj=
s-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0=
</span> -state disabled
    setBalloon $e_SBV <span class=3D"hljs-string">"Actual SBV value"</span>
    <span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-number">0</=
span>} then {
	<span class=3D"hljs-keyword">set</span> bErase $fSBV.b_erase
	button $bErase -bd <span class=3D"hljs-number">3</span> -text <span class=
=3D"hljs-string">"Erase"</span> -font $flipFont -command {cmdsEraseSBVBSB} =
-state disabled -width <span class=3D"hljs-number">5</span>
	setBalloon $bErase <span class=3D"hljs-string">"Resets SBV and BSB\nto def=
ault values"</span>
    }
    pack config $l_SBV $e_SBV -padx <span class=3D"hljs-number">1</span> -s=
ide left
    pack config $f_SBV -side top -ipady <span class=3D"hljs-number">1</span=
> -fill both
    pack configure $f_BSB_SBV -side top -padx <span class=3D"hljs-number">5=
</span> -fill both
    bind $e_SBV &lt;Return&gt; {devcSetDeviceSpecialBytes}
    bind $e_BSB &lt;Return&gt; {devcSetDeviceSpecialBytes}
    <span class=3D"hljs-keyword">set</span> fSSB .main.f_device.f_ssb
    frame $fSSB -relief groove -borderwidth <span class=3D"hljs-number">1</=
span>
    <span class=3D"hljs-keyword">set</span> fInfo $fSSB.f_info
    frame $fInfo -relief flat
    <span class=3D"hljs-keyword">set</span> lSSB $fInfo.l_ssb
    label $lSSB -text <span class=3D"hljs-string">"Device SSB"</span> -font=
 $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lSSB <span class=3D"hljs-string">"Software Security Byte"</=
span>
    <span class=3D"hljs-keyword">set</span> eSSB $fInfo.e_ssb
    entry $eSSB -textvariable ::deviceArray(ssb) -width <span class=3D"hljs=
-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0<=
/span> -state disabled
    setBalloon $eSSB <span class=3D"hljs-string">"Actual SSB value"</span>
    pack config $lSSB $eSSB -padx <span class=3D"hljs-number">1</span> -sid=
e left
    pack config $fInfo -side top
    <span class=3D"hljs-keyword">set</span> fLevel $fSSB.f_level
    frame $fLevel -relief flat
    <span class=3D"hljs-keyword">set</span> bLevel0 $fLevel.b_level0
    radiobutton $bLevel0 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 0"</span> -value <sp=
an class=3D"hljs-number">0</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 0"</span> -state disabled
    setBalloon $bLevel0 <span class=3D"hljs-string">"Security level 0: no s=
ecurity\n (setting to levels 1 and 2 allowed)"</span>
    pack configure $bLevel0 -side left
    <span class=3D"hljs-keyword">set</span> bLevel1 $fLevel.b_level1
    radiobutton $bLevel1 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 1"</span> -value <sp=
an class=3D"hljs-number">1</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 1"</span> -state disabled
    setBalloon $bLevel1 <span class=3D"hljs-string">"Security level 1: no w=
riting allowed\n (setting to level 2 allowed)"</span>
    pack configure $bLevel1 -side left
    <span class=3D"hljs-keyword">set</span> bLevel2 $fLevel.b_level2
    radiobutton $bLevel2 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 2"</span> -value <sp=
an class=3D"hljs-number">2</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 2"</span> -state disabled
    setBalloon $bLevel2 <span class=3D"hljs-string">"Security level 2: neit=
her reading nor writing allowed\n (full chip erase resets security level to=
 0)"</span>
    pack configure $bLevel2 -side left
    pack configure $fInfo -side top -anchor w -ipady <span class=3D"hljs-nu=
mber">2</span> -fill both
    pack configure $fLevel -side top -anchor w -pady <span class=3D"hljs-nu=
mber">5</span> -fill both
    pack configure $fSSB -side top -padx <span class=3D"hljs-number">5</spa=
n> -pady <span class=3D"hljs-number">5</span> -fill both
    <span class=3D"hljs-keyword">set</span> fStartApp .main.f_device.f_star=
tApp
    frame $fStartApp -relief groove -borderwidth <span class=3D"hljs-number=
">1</span>
    button $fStartApp.b_start -text <span class=3D"hljs-string">"Start Appl=
ication"</span> -bd <span class=3D"hljs-number">3</span> -font $flipFont -s=
tate disabled -command {ptclStartAppli $flipStates(withReset)}
    setBalloon $fStartApp.b_start <span class=3D"hljs-string">"Starts appli=
cation at address 0x0000"</span>
    checkbutton $fStartApp.b_reset -text <span class=3D"hljs-string">"With =
Reset"</span> -font $flipFont -<span class=3D"hljs-keyword">variable</span>=
 flipStates(withReset) -indicatoron true -state disabled
    setBalloon $fStartApp.b_reset <span class=3D"hljs-string">"If set, gene=
rates a hardware reset pulse\n  when the Start Application button is presse=
d."</span>
    pack configure $fStartApp.b_start $fStartApp.b_reset -side left -padx <=
span class=3D"hljs-number">5</span> -pady <span class=3D"hljs-number">5</sp=
an>
    pack configure $fStartApp -padx <span class=3D"hljs-number">5</span> -f=
ill both
    <span class=3D"hljs-keyword">set</span> fButtons .main.f_device.f_butto=
ns
    frame $fButtons -relief flat
    pack configure $fButtons -side top
    <span class=3D"hljs-keyword">set</span> bUpdate $fButtons.b_update
    button $bUpdate -bd <span class=3D"hljs-number">3</span> -text <span cl=
ass=3D"hljs-string">"Read"</span> -font $flipFont -command {devcUpdateDevic=
eFrame} -state disabled
    setBalloon $bUpdate <span class=3D"hljs-string">"Reads device special b=
ytes"</span>
    <span class=3D"hljs-keyword">set</span> bWrite $fButtons.b_write
    button $bWrite -bd <span class=3D"hljs-number">3</span> -text <span cla=
ss=3D"hljs-string">"Set"</span> -font $flipFont -command {devcSetDeviceSpec=
ialBytes} -state disabled
    setBalloon $bWrite <span class=3D"hljs-string">"Sets device special byt=
es"</span>
    <span class=3D"hljs-keyword">set</span> bCanConfig $fButtons.b_canconfi=
g
    button $bCanConfig -bd <span class=3D"hljs-number">3</span> -text <span=
 class=3D"hljs-string">"CAN"</span> -font $flipFont -command {cbDboxWakeUp =
.canNodeConfigDbox} -state disabled
    setBalloon $bCanConfig <span class=3D"hljs-string">"Sets a CAN node par=
ameters"</span>
    <span class=3D"hljs-keyword">set</span> bMemorySelect .main.f_buffer.b_=
memSelect
    <span class=3D"hljs-keyword">if</span> {! [winfo exists $bMemorySelect]=
} then {
	button $bMemorySelect -bd <span class=3D"hljs-number">3</span> -text $::de=
viceArray(currentMemoryButton) -font $flipFont -command {cmdsToggleMemory} =
-width <span class=3D"hljs-number">14</span> -state disabled
	setBalloon $bMemorySelect <span class=3D"hljs-string">"FLIP will perform a=
ll operations\n on the selected memory"</span>
    }
    pack config $bUpdate $bWrite $bCanConfig -side left -padx <span class=
=3D"hljs-number">15</span>
    pack configure $fButtons -side top -padx <span class=3D"hljs-number">5<=
/span> -pady <span class=3D"hljs-number">15</span> -fill both
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> buildSk=
ipTestList</span> {protocol} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">if</span> {$protocol =3D=3D <span class=3D=
"hljs-string">"RS232Standard"</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(skipList) <span clas=
s=3D"hljs-string">"  flash-2.23.1  flash-2.26  flash-2.27  flash-2.28  flas=
h-2.29  flash-2.30  checksum-5.5  checksum-5.6 "</span>
    } elseif {($protocol =3D=3D <span class=3D"hljs-string">"CANStandard"</=
span>) ||($protocol =3D=3D <span class=3D"hljs-string">"rs232can"</span>) |=
|($protocol =3D=3D <span class=3D"hljs-string">"usbcan"</span>) ||($protoco=
l =3D=3D <span class=3D"hljs-string">"canview"</span>)} {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(skipList) <span clas=
s=3D"hljs-string">"  flash-2.23.1  flash-2.26  flash-2.27  flash-2.28  flas=
h-2.29  flash-2.30 "</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> buildSk=
ipProcList</span> {} {
    <span class=3D"hljs-keyword">set</span> skipL {}
    <span class=3D"hljs-keyword">return</span> $skipL
}
drawCanNodeConfigDbox
at89c51cc03
<span class=3D"hljs-keyword">foreach</span> m $::deviceArray(memoryList) {
    cmdsImportCurrentMemoryNameSpace $m
    cmdsSetMemoryParameters
    initBuffer
}
cmdsImportCurrentMemoryNameSpace FLASH
<span class=3D"hljs-comment">#dbgEndSrc [info script]</span>
<span class=3D"hljs-comment">#dbgBeginSrc [info script]</span>
<span class=3D"hljs-keyword">global</span> projDir
<span class=3D"hljs-keyword">source</span> $projDir/tcl/devices/devices_com=
mon.tcl
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> at89c51=
ed2</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> protcl protocol nAddrBits fl=
ipFont rs232standard canstandard expAnsw testFlag buffer flowButtons flipSt=
ates
    <span class=3D"hljs-keyword">set</span> children_List [<span class=3D"h=
ljs-keyword">split</span> [winfo children .main.f_device]]
    <span class=3D"hljs-keyword">foreach</span> item $children_List {
	<span class=3D"hljs-keyword">if</span> {$item !=3D <span class=3D"hljs-str=
ing">".main.f_device.f_deviceName"</span>} then {
	    destroy $item
	}
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">a=
rray</span> exists ::deviceArray]} then {
	<span class=3D"hljs-keyword">array</span> <span class=3D"hljs-keyword">uns=
et</span> ::deviceArray
    }
    <span class=3D"hljs-keyword">set</span> ::deviceArray(name) <span class=
=3D"hljs-string">"AT89C51ED2"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(communicationList=
) <span class=3D"hljs-string">"RS232"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(memoryList) [<spa=
n class=3D"hljs-keyword">list</span> FLASH EEPROM]
    <span class=3D"hljs-keyword">set</span> ::deviceArray(memoryButtonList)=
 [<span class=3D"hljs-keyword">list</span> <span class=3D"hljs-string">"Sel=
ect EEPROM"</span> <span class=3D"hljs-string">"Select FLASH"</span>]
    <span class=3D"hljs-keyword">set</span> ::deviceArray(memoryColor) [<sp=
an class=3D"hljs-keyword">list</span> <span class=3D"hljs-string">"#88a67d"=
</span> <span class=3D"hljs-string">"wheat"</span>]
    <span class=3D"hljs-keyword">set</span> ::deviceArray(currentMemory) <s=
pan class=3D"hljs-string">"FLASH"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(currentMemoryButt=
on) <span class=3D"hljs-string">"Select EEPROM"</span>
    <span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keywo=
rd">eval</span> ::FLASH:: {
	<span class=3D"hljs-keyword">variable</span> deviceArray
	<span class=3D"hljs-keyword">variable</span> buffer
	<span class=3D"hljs-keyword">set</span> deviceArray(memorySize) <span clas=
s=3D"hljs-number">64</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankValue) <span clas=
s=3D"hljs-string">"FF"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erase) <span class=3D"hljs-=
string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(blankCheck) <span class=3D"=
hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseType) <span class=3D"h=
ljs-string">"full"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlocks) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock0) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock0) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock1) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock1) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock2) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock2) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock3) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock3) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock4) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock4) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(displayData) <span cla=
ss=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankCheck) <span clas=
s=3D"hljs-string">"01"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(programData) <span cla=
ss=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">namespace</span> export writeBuffer readBuffe=
r readDeviceArray initBuffer bufferChecksum
    }
    <span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keywo=
rd">eval</span> ::EEPROM:: {
	<span class=3D"hljs-keyword">variable</span> deviceArray
	<span class=3D"hljs-keyword">variable</span> buffer
	<span class=3D"hljs-keyword">set</span> deviceArray(memorySize) <span clas=
s=3D"hljs-number">2</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankValue) <span clas=
s=3D"hljs-string">"FF"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erase) <span class=3D"hljs-=
string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(blankCheck) <span class=3D"=
hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseType) <span class=3D"h=
ljs-string">"full"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlocks) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock0) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock0) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock1) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock1) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock2) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock2) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock3) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock3) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock4) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock4) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(displayData) <span cla=
ss=3D"hljs-string">"02"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankCheck) <span clas=
s=3D"hljs-string">"XX"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(programData) <span cla=
ss=3D"hljs-string">"07"</span>
	<span class=3D"hljs-keyword">namespace</span> export writeBuffer readBuffe=
r readDeviceArray initBuffer bufferChecksum
    }
    <span class=3D"hljs-keyword">foreach</span> M $::deviceArray(memoryList=
) {
	<span class=3D"hljs-keyword">proc</span> ::${M}::writeBuffer {index data} =
{
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">set</span> buffer($index) $data
	    <span class=3D"hljs-keyword">return</span>
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::readBuffer {index} {
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">return</span> $buffer($index)
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::readDeviceArray {index} {
	    <span class=3D"hljs-keyword">variable</span> deviceArray
	    <span class=3D"hljs-keyword">return</span> $deviceArray($index)
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::initBuffer {} {
	    <span class=3D"hljs-keyword">variable</span> deviceArray
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">global</span> flipStates
	    <span class=3D"hljs-keyword">set</span> max [<span class=3D"hljs-keywo=
rd">expr</span> $deviceArray(memorySize) * <span class=3D"hljs-number">1024=
</span>]
	    <span class=3D"hljs-keyword">if</span> {$flipStates(simul)} then {
		<span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">set=
</span> i <span class=3D"hljs-number">0</span>} {$i &lt; $max} {<span class=
=3D"hljs-keyword">incr</span> i} {
		    <span class=3D"hljs-keyword">set</span> buffer([<span class=3D"hljs-k=
eyword">format</span> %<span class=3D"hljs-number">06</span>X $i]) $deviceA=
rray(blankValue)
		}
	    } else {
		initBuffer_C $max $deviceArray(blankValue)
	    }
	    <span class=3D"hljs-keyword">return</span>
	}
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::F=
LASH::bufferChecksum</span> {} {
	<span class=3D"hljs-keyword">variable</span> buffer
	<span class=3D"hljs-keyword">global</span> flipStates
	<span class=3D"hljs-keyword">set</span> min $buffer(minProgAddr)
	<span class=3D"hljs-keyword">set</span> max $buffer(maxProgAddr)
	<span class=3D"hljs-keyword">if</span> {$flipStates(simul)} then {
	    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number"=
>0xCAFEFADE</span>
	} else {
	    <span class=3D"hljs-keyword">return</span> [computeBufferChecksum_C $m=
in $max]
	}
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::E=
EPROM::bufferChecksum</span> {} {
	<span class=3D"hljs-keyword">variable</span> buffer
	<span class=3D"hljs-keyword">global</span> flipStates
	<span class=3D"hljs-keyword">set</span> min $buffer(minProgAddr)
	<span class=3D"hljs-keyword">set</span> max $buffer(maxProgAddr)
	<span class=3D"hljs-keyword">if</span> {$flipStates(simul)} then {
	    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number"=
>0xDEADBEEF</span>
	} else {
	    <span class=3D"hljs-keyword">return</span> [computeBufferChecksum_C $m=
in $max]
	}
    }
    <span class=3D"hljs-keyword">set</span> ::deviceArray(jumpAdd) <span cl=
ass=3D"hljs-string">"0000"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(specialSynchro) <=
span class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(RS232ProtocolsLis=
t) <span class=3D"hljs-string">"Standard"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(CANProtocolsList)=
 <span class=3D"hljs-string">"Standard Enhanced"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev0) [<span cla=
ss=3D"hljs-keyword">list</span> FF]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev0Test) <span =
class=3D"hljs-string">"FF"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev1) [<span cla=
ss=3D"hljs-keyword">list</span> FE]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev1Test) <span =
class=3D"hljs-string">"FE"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev2) [<span cla=
ss=3D"hljs-keyword">list</span> FC XX]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev2Test) <span =
class=3D"hljs-string">"FC"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readManufId) <span clas=
s=3D"hljs-number">58</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId1) XX
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId2) XX
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId3) XX
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock0) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock1) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock2) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock3) <span cla=
ss=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock4) <span cla=
ss=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> testFlag(readDevBootId1) <span =
class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(readDevBootId2) <span =
class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(sbv) <span class=3D"hl=
js-string">"FC"</span>
    <span class=3D"hljs-keyword">set</span> fBlocks .deviceErase.f_erase.f_=
blocks
    <span class=3D"hljs-keyword">set</span> bBlock0 $fBlocks.b_block0
    <span class=3D"hljs-keyword">set</span> bBlock1 $fBlocks.b_block1
    <span class=3D"hljs-keyword">set</span> bBlock2 $fBlocks.b_block2
    <span class=3D"hljs-keyword">set</span> bBlock3 $fBlocks.b_block3
    <span class=3D"hljs-keyword">set</span> bBlock4 $fBlocks.b_block4
    setBalloon $bBlock0 <span class=3D"hljs-string">"Erase memory between 0=
000 and 1FFF"</span>
    setBalloon $bBlock1 <span class=3D"hljs-string">"Erase memory between 2=
000 and 3FFF"</span>
    setBalloon $bBlock2 <span class=3D"hljs-string">"Erase memory between 4=
000 and 7FFF"</span>
    $bBlock3 configure -state disabled
    $bBlock4 configure -state disabled
    .main.f_device.f_deviceName.l_device configure -text $::deviceArray(nam=
e)
    .main.f_device.f_deviceName configure -relief groove
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(sbv)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(sbv) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(bsb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(bsb) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(ssb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(ssb) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(hsb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(hsb) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(eb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(eb) <span class=3D"h=
ljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(deviceBootId1)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(deviceBootId1) <span=
 class=3D"hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(deviceBootId2)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(deviceBootId2) <span=
 class=3D"hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(oscFuse)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(oscFuse) <span class=
=3D"hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(bljbFuse)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(bljbFuse) <span clas=
s=3D"hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(x2Fuse)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(x2Fuse) <span class=
=3D"hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(level)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(level) X
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(eraseType)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(eraseType) <span cla=
ss=3D"hljs-string">"full"</span>
    }
    <span class=3D"hljs-keyword">set</span> nAddrBits <span class=3D"hljs-n=
umber">4</span>
    <span class=3D"hljs-keyword">set</span> rs232standard(readHwByte) <span=
 class=3D"hljs-string">":020000050B00EE"</span>
    <span class=3D"hljs-keyword">set</span> rs232standard(readBootlVer) <sp=
an class=3D"hljs-string">":020000050F00EA"</span>
    <span class=3D"hljs-keyword">set</span> protocol(frameLengthW) <span cl=
ass=3D"hljs-number">128</span>
    <span class=3D"hljs-keyword">set</span> protocol(frameLengthR) <span cl=
ass=3D"hljs-number">16</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowErase) <span =
class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowBlankCheck) <=
span class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowProgram) <spa=
n class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowVerify) <span=
 class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowSpecialBytes)=
 <span class=3D"hljs-number">0</span>
    wm title .deviceErase <span class=3D"hljs-string">"$::deviceArray(name)=
 Erase"</span>
    .deviceErase.f_erase.f_blocks.b_blockErase configure -state normal
    <span class=3D"hljs-keyword">set</span> fReadOnly .main.f_device.f_read=
Only
    frame $fReadOnly -relief groove -borderwidth <span class=3D"hljs-number=
">1</span>
    <span class=3D"hljs-keyword">set</span> fManufId $fReadOnly.f_manufId
    frame $fManufId -relief flat
    <span class=3D"hljs-keyword">set</span> lManufId $fManufId.l_manufId
    label $lManufId -text <span class=3D"hljs-string">"Manufact. Id"</span>=
 -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    <span class=3D"hljs-keyword">set</span> eManufId $fManufId.e_manufId
    entry $eManufId -textvariable ::deviceArray(manufId) -width <span class=
=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eManufId <span class=3D"hljs-string">"Manufacturer code val=
ue"</span>
    pack config $lManufId $eManufId -padx <span class=3D"hljs-number">1</sp=
an> -side left
    pack config $fManufId -side top -ipady <span class=3D"hljs-number">1</s=
pan> -fill both
    <span class=3D"hljs-keyword">set</span> fDeviceIds $fReadOnly.f_deviceI=
ds
    frame $fDeviceIds -relief flat
    <span class=3D"hljs-keyword">set</span> lDeviceIds $fDeviceIds.l_device=
Ids
    label $lDeviceIds -text <span class=3D"hljs-string">"Device Ids"</span>=
 -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    <span class=3D"hljs-keyword">set</span> eDeviceId1 $fDeviceIds.e_device=
Id1
    entry $eDeviceId1 -textvariable ::deviceArray(deviceId1) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId1 <span class=3D"hljs-string">"Family code value"<=
/span>
    <span class=3D"hljs-keyword">set</span> eDeviceId2 $fDeviceIds.e_device=
Id2
    entry $eDeviceId2 -textvariable ::deviceArray(deviceId2) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId2 <span class=3D"hljs-string">"Device name code"</=
span>
    <span class=3D"hljs-keyword">set</span> eDeviceId3 $fDeviceIds.e_device=
Id3
    entry $eDeviceId3 -textvariable ::deviceArray(deviceId3) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId3 <span class=3D"hljs-string">"Device revision num=
ber"</span>
    pack config $lDeviceIds $eDeviceId1 $eDeviceId2 $eDeviceId3 -padx <span=
 class=3D"hljs-number">1</span> -side left
    pack config $fDeviceIds -side top -ipady <span class=3D"hljs-number">1<=
/span> -fill both
    <span class=3D"hljs-keyword">set</span> fDeviceBootIds $fReadOnly.f_dev=
iceBootIds
    frame $fDeviceBootIds -relief flat
    <span class=3D"hljs-keyword">set</span> lDeviceBootIds $fDeviceBootIds.=
l_deviceBootIds
    label $lDeviceBootIds -text <span class=3D"hljs-string">"Device Boot Id=
s"</span> -font $flipFont -anchor w -width <span class=3D"hljs-number">16</=
span>
    setBalloon $lDeviceBootIds <span class=3D"hljs-string">"Boot Ids 1, 2: =
read-only"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceBootId1 $fDeviceBootIds.=
e_deviceBootId1
    entry $eDeviceBootId1 -textvariable ::deviceArray(deviceBootId1) -width=
 <span class=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceBootId1 <span class=3D"hljs-string">"Boot Id 1 value=
"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceBootId2 $fDeviceBootIds.=
e_deviceBootId2
    entry $eDeviceBootId2 -textvariable ::deviceArray(deviceBootId2) -width=
 <span class=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceBootId2 <span class=3D"hljs-string">"Boot Id 2 value=
"</span>
    pack config $lDeviceBootIds $eDeviceBootId1 $eDeviceBootId2 -padx <span=
 class=3D"hljs-number">1</span> -side left
    pack config $fDeviceBootIds -side top -ipady <span class=3D"hljs-number=
">1</span> -fill both
    <span class=3D"hljs-keyword">set</span> fHSB $fReadOnly.f_hsb
    frame $fHSB -relief flat
    <span class=3D"hljs-keyword">set</span> lHSB $fHSB.l_hsb
    label $lHSB -text <span class=3D"hljs-string">"Hardware Byte"</span> -f=
ont $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lHSB <span class=3D"hljs-string">"Hardware Security Byte: r=
ead-only"</span>
    <span class=3D"hljs-keyword">set</span> eHSB $fHSB.e_hsb
    entry $eHSB -textvariable ::deviceArray(hsb) -width <span class=3D"hljs=
-number">3</span> -font $flipFont -state disabled
    setBalloon $eHSB <span class=3D"hljs-string">"Hardware Security Byte va=
lue"</span>
    pack config $lHSB $eHSB -padx <span class=3D"hljs-number">1</span> -sid=
e left
    pack config $fHSB -side top -ipady <span class=3D"hljs-number">1</span>=
 -fill both
    <span class=3D"hljs-keyword">set</span> fBootlVer $fReadOnly.f_bootlVer
    frame $fBootlVer -relief flat
    <span class=3D"hljs-keyword">set</span> lBootlVer $fBootlVer.l_bootlVer
    label $lBootlVer -text <span class=3D"hljs-string">"Bootloader Ver."</s=
pan> -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lBootlVer <span class=3D"hljs-string">"Bootloader Version: =
read-only"</span>
    <span class=3D"hljs-keyword">set</span> eBootlVer $fBootlVer.e_bootlVer
    entry $eBootlVer -textvariable ::deviceArray(bootlVer) -width <span cla=
ss=3D"hljs-number">5</span> -font $flipFont -state disabled
    setBalloon $eBootlVer <span class=3D"hljs-string">"Bootloader Version"<=
/span>
    pack config $lBootlVer $eBootlVer -padx <span class=3D"hljs-number">1</=
span> -side left
    pack config $fBootlVer -side top -ipady <span class=3D"hljs-number">1</=
span> -fill both
    pack configure $fReadOnly -side top -padx <span class=3D"hljs-number">5=
</span> -fill both
    <span class=3D"hljs-keyword">set</span> fFuses .main.f_device.f_fuses
    frame $fFuses -relief groove -borderwidth <span class=3D"hljs-number">1=
</span>
    <span class=3D"hljs-keyword">set</span> bOsc $fFuses.b_osc
    checkbutton $bOsc -text <span class=3D"hljs-string">"Osc. B"</span> -fo=
nt $flipFont -<span class=3D"hljs-keyword">variable</span> ::deviceArray(os=
cFuse) -onvalue <span class=3D"hljs-number">0</span> -offvalue <span class=
=3D"hljs-number">1</span> -indicatoron true -state disabled
    setBalloon $bOsc <span class=3D"hljs-string">"Osc. B set : Osc B =3D 0"=
</span>
    <span class=3D"hljs-keyword">set</span> bBLJB $fFuses.b_bljb
    checkbutton $bBLJB -text <span class=3D"hljs-string">"BLJB"</span> -fon=
t $flipFont -<span class=3D"hljs-keyword">variable</span> ::deviceArray(blj=
bFuse) -onvalue <span class=3D"hljs-number">0</span> -offvalue <span class=
=3D"hljs-number">1</span> -indicatoron true -state disabled
    setBalloon $bBLJB <span class=3D"hljs-string">"Boot Loader Jump Bit \nS=
et =3D 0 / Unset =3D 1"</span>
    <span class=3D"hljs-keyword">set</span> bX2 $fFuses.b_x2
    checkbutton $bX2 -text <span class=3D"hljs-string">"X2"</span> -font $f=
lipFont -<span class=3D"hljs-keyword">variable</span> ::deviceArray(x2Fuse)=
 -onvalue <span class=3D"hljs-number">0</span> -offvalue <span class=3D"hlj=
s-number">1</span> -indicatoron true -state disabled
    setBalloon $bX2 <span class=3D"hljs-string">"X2 fuse bit \nSet =3D 0 / =
Unset =3D 1"</span>
    pack config $bBLJB $bX2 -side left -anchor w
    pack configure $fFuses -side top -padx <span class=3D"hljs-number">5</s=
pan> -pady <span class=3D"hljs-number">5</span> -fill x
    <span class=3D"hljs-keyword">set</span> f_BSB_SBV .main.f_device.f_bsb_=
sbv
    frame $f_BSB_SBV -relief groove -borderwidth <span class=3D"hljs-number=
">1</span>
    <span class=3D"hljs-keyword">set</span> f_BSB $f_BSB_SBV.f_bsb
    frame $f_BSB -relief flat
    <span class=3D"hljs-keyword">set</span> l_BSB $f_BSB.l_bsb
    label $l_BSB -text <span class=3D"hljs-string">"Device BSB &amp; EB"</s=
pan> -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $l_BSB <span class=3D"hljs-string">"Boot Status Byte &amp; E=
xtra Byte"</span>
    <span class=3D"hljs-keyword">set</span> e_BSB $f_BSB.e_bsb
    entry $e_BSB -textvariable ::deviceArray(bsb) -width <span class=3D"hlj=
s-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0=
</span> -state disabled
    setBalloon $e_BSB <span class=3D"hljs-string">"Actual BSB value"</span>
    <span class=3D"hljs-keyword">set</span> e_EB $f_BSB.e_eb
    entry $e_EB -textvariable ::deviceArray(eb) -width <span class=3D"hljs-=
number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0</=
span> -state disabled
    setBalloon $e_EB <span class=3D"hljs-string">"Actual EB value"</span>
    pack config $l_BSB $e_BSB $e_EB -padx <span class=3D"hljs-number">1</sp=
an> -side left
    pack config $f_BSB -side top -ipady <span class=3D"hljs-number">1</span=
> -fill both
    <span class=3D"hljs-keyword">set</span> f_SBV $f_BSB_SBV.f_sbv
    frame $f_SBV -relief flat
    <span class=3D"hljs-keyword">set</span> l_SBV $f_SBV.l_sbv
    label $l_SBV -text <span class=3D"hljs-string">"Device SBV"</span> -fon=
t $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $l_SBV <span class=3D"hljs-string">"Software Boot Vector"</s=
pan>
    <span class=3D"hljs-keyword">set</span> e_SBV $f_SBV.e_sbv
    entry $e_SBV -textvariable ::deviceArray(sbv) -width <span class=3D"hlj=
s-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0=
</span> -state disabled
    setBalloon $e_SBV <span class=3D"hljs-string">"Actual SBV value"</span>
    <span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-number">0</=
span>} then {
	<span class=3D"hljs-keyword">set</span> bErase $fSBV.b_erase
	button $bErase -bd <span class=3D"hljs-number">3</span> -text <span class=
=3D"hljs-string">"Erase"</span> -font $flipFont -command {cmdsEraseSBVBSB} =
-state disabled -width <span class=3D"hljs-number">5</span>
	setBalloon $bErase <span class=3D"hljs-string">"Resets SBV and BSB\nto def=
ault values"</span>
    }
    pack config $l_SBV $e_SBV -padx <span class=3D"hljs-number">1</span> -s=
ide left
    pack config $f_SBV -side top -ipady <span class=3D"hljs-number">1</span=
> -fill both
    pack configure $f_BSB_SBV -side top -padx <span class=3D"hljs-number">5=
</span> -fill both
    bind $e_SBV &lt;Return&gt; {devcSetDeviceSpecialBytes}
    bind $e_BSB &lt;Return&gt; {devcSetDeviceSpecialBytes}
    <span class=3D"hljs-keyword">set</span> fSSB .main.f_device.f_ssb
    frame $fSSB -relief groove -borderwidth <span class=3D"hljs-number">1</=
span>
    <span class=3D"hljs-keyword">set</span> fInfo $fSSB.f_info
    frame $fInfo -relief flat
    <span class=3D"hljs-keyword">set</span> lSSB $fInfo.l_ssb
    label $lSSB -text <span class=3D"hljs-string">"Device SSB"</span> -font=
 $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lSSB <span class=3D"hljs-string">"Software Security Byte"</=
span>
    <span class=3D"hljs-keyword">set</span> eSSB $fInfo.e_ssb
    entry $eSSB -textvariable ::deviceArray(ssb) -width <span class=3D"hljs=
-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0<=
/span> -state disabled
    setBalloon $eSSB <span class=3D"hljs-string">"Actual SSB value"</span>
    pack config $lSSB $eSSB -padx <span class=3D"hljs-number">1</span> -sid=
e left
    pack config $fInfo -side top
    <span class=3D"hljs-keyword">set</span> fLevel $fSSB.f_level
    frame $fLevel -relief flat
    <span class=3D"hljs-keyword">set</span> bLevel0 $fLevel.b_level0
    radiobutton $bLevel0 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 0"</span> -value <sp=
an class=3D"hljs-number">0</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 0"</span> -state disabled
    setBalloon $bLevel0 <span class=3D"hljs-string">"Security level 0: no s=
ecurity\n (setting to levels 1 and 2 allowed)"</span>
    pack configure $bLevel0 -side left
    <span class=3D"hljs-keyword">set</span> bLevel1 $fLevel.b_level1
    radiobutton $bLevel1 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 1"</span> -value <sp=
an class=3D"hljs-number">1</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 1"</span> -state disabled
    setBalloon $bLevel1 <span class=3D"hljs-string">"Security level 1: no w=
riting allowed\n (setting to level 2 allowed)"</span>
    pack configure $bLevel1 -side left
    <span class=3D"hljs-keyword">set</span> bLevel2 $fLevel.b_level2
    radiobutton $bLevel2 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 2"</span> -value <sp=
an class=3D"hljs-number">2</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 2"</span> -state disabled
    setBalloon $bLevel2 <span class=3D"hljs-string">"Security level 2: neit=
her reading nor writing allowed\n (full chip erase resets security level to=
 0)"</span>
    pack configure $bLevel2 -side left
    pack configure $fInfo -side top -anchor w -ipady <span class=3D"hljs-nu=
mber">2</span> -fill both
    pack configure $fLevel -side top -anchor w -pady <span class=3D"hljs-nu=
mber">5</span> -fill both
    pack configure $fSSB -side top -padx <span class=3D"hljs-number">5</spa=
n> -pady <span class=3D"hljs-number">5</span> -fill both
    <span class=3D"hljs-keyword">set</span> fStartApp .main.f_device.f_star=
tApp
    frame $fStartApp -relief groove -borderwidth <span class=3D"hljs-number=
">1</span>
    button $fStartApp.b_start -text <span class=3D"hljs-string">"Start Appl=
ication"</span> -bd <span class=3D"hljs-number">3</span> -font $flipFont -s=
tate disabled -command {ptclStartAppli $flipStates(withReset)}
    setBalloon $fStartApp.b_start <span class=3D"hljs-string">"Starts appli=
cation at address 0x0000"</span>
    checkbutton $fStartApp.b_reset -text <span class=3D"hljs-string">"With =
Reset"</span> -font $flipFont -<span class=3D"hljs-keyword">variable</span>=
 flipStates(withReset) -indicatoron true -state disabled
    setBalloon $fStartApp.b_reset <span class=3D"hljs-string">"If set, gene=
rates a hardware reset pulse\n  when the Start Application button is presse=
d."</span>
    pack configure $fStartApp.b_start $fStartApp.b_reset -side left -padx <=
span class=3D"hljs-number">5</span> -pady <span class=3D"hljs-number">5</sp=
an>
    pack configure $fStartApp -padx <span class=3D"hljs-number">5</span> -f=
ill both
    <span class=3D"hljs-keyword">set</span> fButtons .main.f_device.f_butto=
ns
    frame $fButtons -relief flat
    pack configure $fButtons -side top
    <span class=3D"hljs-keyword">set</span> bUpdate $fButtons.b_update
    button $bUpdate -bd <span class=3D"hljs-number">3</span> -text <span cl=
ass=3D"hljs-string">"Read"</span> -font $flipFont -command {devcUpdateDevic=
eFrame} -state disabled
    setBalloon $bUpdate <span class=3D"hljs-string">"Reads device special b=
ytes"</span>
    <span class=3D"hljs-keyword">set</span> bWrite $fButtons.b_write
    button $bWrite -bd <span class=3D"hljs-number">3</span> -text <span cla=
ss=3D"hljs-string">"Set"</span> -font $flipFont -command {devcSetDeviceSpec=
ialBytes} -state disabled
    setBalloon $bWrite <span class=3D"hljs-string">"Sets device special byt=
es"</span>
    <span class=3D"hljs-keyword">set</span> bCanConfig $fButtons.b_canconfi=
g
    button $bCanConfig -bd <span class=3D"hljs-number">3</span> -text <span=
 class=3D"hljs-string">"CAN"</span> -font $flipFont -command {cbDboxWakeUp =
.canNodeConfigDbox} -state disabled
    setBalloon $bCanConfig <span class=3D"hljs-string">"Sets a CAN node par=
ameters"</span>
    <span class=3D"hljs-keyword">set</span> bMemorySelect .main.f_buffer.b_=
memSelect
    <span class=3D"hljs-keyword">if</span> {! [winfo exists $bMemorySelect]=
} then {
	button $bMemorySelect -bd <span class=3D"hljs-number">3</span> -text $::de=
viceArray(currentMemoryButton) -font $flipFont -command {cmdsToggleMemory} =
-width <span class=3D"hljs-number">14</span> -state disabled
	setBalloon $bMemorySelect <span class=3D"hljs-string">"FLIP will perform a=
ll operations\n on the selected memory"</span>
    }
    pack config $bUpdate $bWrite -side left -padx <span class=3D"hljs-numbe=
r">15</span>
    pack configure $fButtons -side top -padx <span class=3D"hljs-number">5<=
/span> -pady <span class=3D"hljs-number">15</span> -fill both
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> buildSk=
ipTestList</span> {protocol} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(skipList) <span c=
lass=3D"hljs-string">"  flash-2.23.1  flash-2.25  checksum-5.5  checksum-5.=
6 "</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> buildSk=
ipProcList</span> {} {
    <span class=3D"hljs-keyword">set</span> skipL {}
    <span class=3D"hljs-keyword">return</span> $skipL
}
drawCanNodeConfigDbox
at89c51ed2
<span class=3D"hljs-keyword">foreach</span> m $::deviceArray(memoryList) {
    cmdsImportCurrentMemoryNameSpace $m
    cmdsSetMemoryParameters
    initBuffer
}
cmdsImportCurrentMemoryNameSpace FLASH
<span class=3D"hljs-comment">#dbgEndSrc [info script]</span>
<span class=3D"hljs-comment">#dbgBeginSrc [info script]</span>
<span class=3D"hljs-keyword">global</span> projDir
<span class=3D"hljs-keyword">source</span> $projDir/tcl/devices/devices_com=
mon.tcl
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> t89c51i=
c2</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> protcl protocol nAddrBits rs=
232standard canstandard expAnsw testFlag buffer flowButtons flipFont
    <span class=3D"hljs-keyword">set</span> children_List [<span class=3D"h=
ljs-keyword">split</span> [winfo children .main.f_device]]
    <span class=3D"hljs-keyword">foreach</span> item $children_List {
	<span class=3D"hljs-keyword">if</span> {$item !=3D <span class=3D"hljs-str=
ing">".main.f_device.f_deviceName"</span>} then {
	    destroy $item
	}
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">a=
rray</span> exists ::deviceArray]} then {
	<span class=3D"hljs-keyword">array</span> <span class=3D"hljs-keyword">uns=
et</span> ::deviceArray
    }
    <span class=3D"hljs-keyword">set</span> ::deviceArray(name) <span class=
=3D"hljs-string">"AT89C51IC2"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(communicationList=
) RS232
    <span class=3D"hljs-keyword">set</span> ::deviceArray(memoryList) [<spa=
n class=3D"hljs-keyword">list</span> FLASH]
    <span class=3D"hljs-keyword">set</span> ::deviceArray(memoryColor) [<sp=
an class=3D"hljs-keyword">list</span> <span class=3D"hljs-string">"#88a67d"=
</span> <span class=3D"hljs-string">"wheat"</span>]
    <span class=3D"hljs-keyword">set</span> ::deviceArray(currentMemory) <s=
pan class=3D"hljs-string">"FLASH"</span>
    <span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keywo=
rd">eval</span> ::FLASH:: {
	<span class=3D"hljs-keyword">variable</span> deviceArray
	<span class=3D"hljs-keyword">variable</span> buffer
	<span class=3D"hljs-keyword">set</span> deviceArray(memorySize) <span clas=
s=3D"hljs-number">32</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankValue) <span clas=
s=3D"hljs-string">"FF"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erase) <span class=3D"hljs-=
string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(blankCheck) <span class=3D"=
hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseType) <span class=3D"h=
ljs-string">"full"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlocks) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock0) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock0) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock1) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock1) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock2) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock2) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock3) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock3) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock4) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock4) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(progStart) <span class=
=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(displayData) <span cla=
ss=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankCheck) <span clas=
s=3D"hljs-string">"01"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(programData) <span cla=
ss=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">namespace</span> export writeBuffer readBuffe=
r readDeviceArray initBuffer bufferChecksum
    }
    <span class=3D"hljs-keyword">foreach</span> M $::deviceArray(memoryList=
) {
	<span class=3D"hljs-keyword">proc</span> ::${M}::writeBuffer {index data} =
{
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">set</span> buffer($index) $data
	    <span class=3D"hljs-keyword">return</span>
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::readBuffer {index} {
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">return</span> $buffer($index)
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::readDeviceArray {index} {
	    <span class=3D"hljs-keyword">variable</span> deviceArray
	    <span class=3D"hljs-keyword">return</span> $deviceArray($index)
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::initBuffer {} {
	    <span class=3D"hljs-keyword">variable</span> deviceArray
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">global</span> flipStates
	    <span class=3D"hljs-keyword">set</span> max [<span class=3D"hljs-keywo=
rd">expr</span> $deviceArray(memorySize) * <span class=3D"hljs-number">1024=
</span>]
	    <span class=3D"hljs-keyword">if</span> {$flipStates(simul)} then {
		<span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">set=
</span> i <span class=3D"hljs-number">0</span>} {$i &lt; $max} {<span class=
=3D"hljs-keyword">incr</span> i} {
		    <span class=3D"hljs-keyword">set</span> buffer([<span class=3D"hljs-k=
eyword">format</span> %<span class=3D"hljs-number">06</span>X $i]) $deviceA=
rray(blankValue)
		}
	    } else {
		initBuffer_C $max $deviceArray(blankValue)
	    }
	    <span class=3D"hljs-keyword">return</span>
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::bufferChecksum {} {
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">global</span> flipStates
	    <span class=3D"hljs-keyword">set</span> min $buffer(minProgAddr)
	    <span class=3D"hljs-keyword">set</span> max $buffer(maxProgAddr)
	    <span class=3D"hljs-keyword">if</span> {$flipStates(simul)} then {
		<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0x=
CAFEFADE</span>
	    } else {
		<span class=3D"hljs-keyword">return</span> [computeBufferChecksum_C $min =
$max]
	    }
	}
    }
    <span class=3D"hljs-keyword">set</span> ::deviceArray(specialSynchro) <=
span class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(RS232ProtocolsLis=
t) <span class=3D"hljs-string">"Standard Enhanced"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev0) [<span cla=
ss=3D"hljs-keyword">list</span> FF]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev0Test) <span =
class=3D"hljs-string">"FF"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev1) [<span cla=
ss=3D"hljs-keyword">list</span> FE]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev1Test) <span =
class=3D"hljs-string">"FE"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev2) [<span cla=
ss=3D"hljs-keyword">list</span> FC XX]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev2Test) [<span=
 class=3D"hljs-keyword">list</span> FC]
    <span class=3D"hljs-keyword">set</span> expAnsw(readManufId) <span clas=
s=3D"hljs-number">58</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId1) XX
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId2) XX
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId3) XX
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock0) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock1) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock2) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock3) <span cla=
ss=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock4) <span cla=
ss=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> testFlag(readDevBootId1) <span =
class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(readDevBootId2) <span =
class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(sbv) <span class=3D"hl=
js-string">"FC"</span>
    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">=
tcltest</span>::testConstraints(eraseBlockPossible) <span class=3D"hljs-num=
ber">1</span>
    .main.f_device.f_deviceName.l_device configure -text $::deviceArray(nam=
e)
    .main.f_device.f_deviceName configure -relief groove
    <span class=3D"hljs-keyword">set</span> fBlocks .deviceErase.f_erase.f_=
blocks
    <span class=3D"hljs-keyword">set</span> bBlock0 $fBlocks.b_block0
    <span class=3D"hljs-keyword">set</span> bBlock1 $fBlocks.b_block1
    <span class=3D"hljs-keyword">set</span> bBlock2 $fBlocks.b_block2
    setBalloon $bBlock0 <span class=3D"hljs-string">"Erase memory between 0=
000 and 1FFF"</span>
    setBalloon $bBlock1 <span class=3D"hljs-string">"Erase memory between 2=
000 and 3FFF"</span>
    setBalloon $bBlock2 <span class=3D"hljs-string">"Erase memory between 4=
000 and 7FFF"</span>
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(sbv)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(sbv) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(bsb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(bsb) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(ssb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(ssb) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(hsb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(hsb) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(eb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(eb) <span class=3D"h=
ljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(deviceBootId1)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(deviceBootId1) <span=
 class=3D"hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(deviceBootId2)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(deviceBootId2) <span=
 class=3D"hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(oscFuse)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(oscFuse) <span class=
=3D"hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(bljbFuse)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(bljbFuse) <span clas=
s=3D"hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(x2Fuse)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(x2Fuse) <span class=
=3D"hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(level)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(level) X
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(eraseType)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(eraseType) <span cla=
ss=3D"hljs-string">"full"</span>
    }
    <span class=3D"hljs-keyword">set</span> nAddrBits <span class=3D"hljs-n=
umber">4</span>
    <span class=3D"hljs-keyword">set</span> rs232standard(readHwByte) <span=
 class=3D"hljs-string">":020000050B00EE"</span>
    <span class=3D"hljs-keyword">set</span> rs232standard(readBootlVer) <sp=
an class=3D"hljs-string">":020000050F00EA"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowErase) <span =
class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowBlankCheck) <=
span class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowProgram) <spa=
n class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowVerify) <span=
 class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowSpecialBytes)=
 <span class=3D"hljs-number">0</span>
    wm title .deviceErase <span class=3D"hljs-string">"$::deviceArray(name)=
 Erase"</span>
    .deviceErase.f_erase.f_blocks.b_blockErase configure -state normal
    <span class=3D"hljs-keyword">set</span> fReadOnly .main.f_device.f_read=
Only
    frame $fReadOnly -relief groove -borderwidth <span class=3D"hljs-number=
">1</span>
    <span class=3D"hljs-keyword">set</span> fManufId $fReadOnly.f_manufId
    frame $fManufId -relief flat
    <span class=3D"hljs-keyword">set</span> lManufId $fManufId.l_manufId
    label $lManufId -text <span class=3D"hljs-string">"Manufact. Id"</span>=
 -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lManufId <span class=3D"hljs-string">"Manufacturer Id: read=
-only"</span>
    <span class=3D"hljs-keyword">set</span> eManufId $fManufId.e_manufId
    entry $eManufId -textvariable ::deviceArray(manufId) -width <span class=
=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eManufId <span class=3D"hljs-string">"Manufacturer Id value=
"</span>
    pack config $lManufId $eManufId -side left
    pack config $fManufId -side top -ipady <span class=3D"hljs-number">1</s=
pan> -fill both
    <span class=3D"hljs-keyword">set</span> fDeviceIds $fReadOnly.f_deviceI=
ds
    frame $fDeviceIds -relief flat
    <span class=3D"hljs-keyword">set</span> lDeviceIds $fDeviceIds.l_device=
Ids
    label $lDeviceIds -text <span class=3D"hljs-string">"Device Ids"</span>=
 -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lDeviceIds <span class=3D"hljs-string">"Ids 1, 2, 3: read-o=
nly"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceId1 $fDeviceIds.e_device=
Id1
    entry $eDeviceId1 -textvariable ::deviceArray(deviceId1) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId1 <span class=3D"hljs-string">"Id 1 value"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceId2 $fDeviceIds.e_device=
Id2
    entry $eDeviceId2 -textvariable ::deviceArray(deviceId2) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId2 <span class=3D"hljs-string">"Id 2 value"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceId3 $fDeviceIds.e_device=
Id3
    entry $eDeviceId3 -textvariable ::deviceArray(deviceId3) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId3 <span class=3D"hljs-string">"Id 3 value"</span>
    pack config $lDeviceIds $eDeviceId1 -side left
    pack config $eDeviceId2 -padx <span class=3D"hljs-number">2</span> -sid=
e left
    pack config $eDeviceId3 -side left
    pack config $fDeviceIds -side top -ipady <span class=3D"hljs-number">1<=
/span> -fill both
    <span class=3D"hljs-keyword">set</span> fDeviceBootIds $fReadOnly.f_dev=
iceBootIds
    frame $fDeviceBootIds -relief flat
    <span class=3D"hljs-keyword">set</span> lDeviceBootIds $fDeviceBootIds.=
l_deviceBootIds
    label $lDeviceBootIds -text <span class=3D"hljs-string">"Device Boot Id=
s"</span> -font $flipFont -anchor w -width <span class=3D"hljs-number">16</=
span>
    setBalloon $lDeviceBootIds <span class=3D"hljs-string">"Boot Ids 1, 2: =
read-only"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceBootId1 $fDeviceBootIds.=
e_deviceBootId1
    entry $eDeviceBootId1 -textvariable ::deviceArray(deviceBootId1) -width=
 <span class=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceBootId1 <span class=3D"hljs-string">"Boot Id 1 value=
"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceBootId2 $fDeviceBootIds.=
e_deviceBootId2
    entry $eDeviceBootId2 -textvariable ::deviceArray(deviceBootId2) -width=
 <span class=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceBootId2 <span class=3D"hljs-string">"Boot Id 2 value=
"</span>
    pack config $lDeviceBootIds $eDeviceBootId1 -side left
    pack config $eDeviceBootId2 -padx <span class=3D"hljs-number">2</span> =
-side left
    pack config $fDeviceBootIds -side top -ipady <span class=3D"hljs-number=
">1</span> -fill both
    <span class=3D"hljs-keyword">set</span> fHSB $fReadOnly.f_hsb
    frame $fHSB -relief flat
    <span class=3D"hljs-keyword">set</span> lHSB $fHSB.l_hsb
    label $lHSB -text <span class=3D"hljs-string">"HSB"</span> -font $flipF=
ont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lHSB <span class=3D"hljs-string">"Hardware Security Byte: r=
ead-only"</span>
    <span class=3D"hljs-keyword">set</span> eHSB $fHSB.e_hsb
    entry $eHSB -textvariable ::deviceArray(hsb) -width <span class=3D"hljs=
-number">3</span> -font $flipFont -state disabled
    setBalloon $eHSB <span class=3D"hljs-string">"Hardware Byte value"</spa=
n>
    pack config $lHSB $eHSB -side left
    pack config $fHSB -side top -ipady <span class=3D"hljs-number">1</span>=
 -fill both
    <span class=3D"hljs-keyword">set</span> fBootlVer $fReadOnly.f_bootlVer
    frame $fBootlVer -relief flat
    <span class=3D"hljs-keyword">set</span> lBootlVer $fBootlVer.l_bootlVer
    label $lBootlVer -text <span class=3D"hljs-string">"Bootloader Ver."</s=
pan> -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lBootlVer <span class=3D"hljs-string">"Bootloader Version: =
read-only"</span>
    <span class=3D"hljs-keyword">set</span> eBootlVer $fBootlVer.e_bootlVer
    entry $eBootlVer -textvariable ::deviceArray(bootlVer) -width <span cla=
ss=3D"hljs-number">5</span> -font $flipFont -state disabled
    setBalloon $eBootlVer <span class=3D"hljs-string">"Bootloader Version"<=
/span>
    pack config $lBootlVer $eBootlVer -side left
    pack config $fBootlVer -side top -ipady <span class=3D"hljs-number">1</=
span> -fill both
    pack configure $fReadOnly -side top -padx <span class=3D"hljs-number">5=
</span> -fill both
    <span class=3D"hljs-keyword">set</span> fFuses .main.f_device.f_fuses
    frame $fFuses -relief groove -borderwidth <span class=3D"hljs-number">1=
</span>
    <span class=3D"hljs-keyword">set</span> bOsc $fFuses.b_osc
    checkbutton $bOsc -text <span class=3D"hljs-string">"Osc. B"</span> -fo=
nt $flipFont -<span class=3D"hljs-keyword">variable</span> ::deviceArray(os=
cFuse) -onvalue <span class=3D"hljs-number">0</span> -offvalue <span class=
=3D"hljs-number">1</span> -indicatoron true -state disabled
    setBalloon $bOsc <span class=3D"hljs-string">"Osc. B set : Osc B =3D 0"=
</span>
    <span class=3D"hljs-keyword">set</span> bBLJB $fFuses.b_bljb
    checkbutton $bBLJB -text <span class=3D"hljs-string">"BLJB"</span> -fon=
t $flipFont -<span class=3D"hljs-keyword">variable</span> ::deviceArray(blj=
bFuse) -onvalue <span class=3D"hljs-number">0</span> -offvalue <span class=
=3D"hljs-number">1</span> -indicatoron true -state disabled
    setBalloon $bBLJB <span class=3D"hljs-string">"BootLoader Jump Bit set =
: BLJB =3D 0"</span>
    <span class=3D"hljs-keyword">set</span> bX2 $fFuses.b_x2
    checkbutton $bX2 -text <span class=3D"hljs-string">"X2"</span> -font $f=
lipFont -<span class=3D"hljs-keyword">variable</span> ::deviceArray(x2Fuse)=
 -onvalue <span class=3D"hljs-number">0</span> -offvalue <span class=3D"hlj=
s-number">1</span> -indicatoron true -state disabled
    setBalloon $bX2 <span class=3D"hljs-string">"X2 fuse bit \nSet =3D 0 / =
Unset =3D 1"</span>
    pack config $bOsc $bBLJB $bX2 -side left -anchor w
    pack configure $fFuses -side top -padx <span class=3D"hljs-number">5</s=
pan> -pady <span class=3D"hljs-number">1</span> -fill both
    <span class=3D"hljs-keyword">set</span> f_BSB_SBV .main.f_device.f_bsb_=
sbv
    frame $f_BSB_SBV -relief groove -borderwidth <span class=3D"hljs-number=
">1</span>
    <span class=3D"hljs-keyword">set</span> f_BSB $f_BSB_SBV.f_bsb
    frame $f_BSB -relief flat
    <span class=3D"hljs-keyword">set</span> l_BSB $f_BSB.l_bsb
    label $l_BSB -text <span class=3D"hljs-string">"Device BSB"</span> -fon=
t $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $l_BSB <span class=3D"hljs-string">"Boot Status Byte"</span>
    <span class=3D"hljs-keyword">set</span> e_BSB $f_BSB.e_bsb
    entry $e_BSB -textvariable ::deviceArray(bsb) -width <span class=3D"hlj=
s-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0=
</span> -state disabled
    setBalloon $e_BSB <span class=3D"hljs-string">"Actual BSB value"</span>
    pack config $l_BSB $e_BSB -side left
    pack config $f_BSB -side top -ipady <span class=3D"hljs-number">1</span=
> -fill both
    <span class=3D"hljs-keyword">set</span> f_SBV $f_BSB_SBV.f_sbv
    frame $f_SBV -relief flat
    <span class=3D"hljs-keyword">set</span> l_SBV $f_SBV.l_sbv
    label $l_SBV -text <span class=3D"hljs-string">"Device SBV"</span> -fon=
t $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $l_SBV <span class=3D"hljs-string">"Software Boot Vector"</s=
pan>
    <span class=3D"hljs-keyword">set</span> e_SBV $f_SBV.e_sbv
    entry $e_SBV -textvariable ::deviceArray(sbv) -width <span class=3D"hlj=
s-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0=
</span> -state disabled
    setBalloon $e_SBV <span class=3D"hljs-string">"Actual SBV value"</span>
    <span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-number">0</=
span>} then {
	<span class=3D"hljs-keyword">set</span> bErase $fSBV.b_erase
	button $bErase -bd <span class=3D"hljs-number">3</span> -text <span class=
=3D"hljs-string">"Erase"</span> -font $flipFont -command {cmdsEraseSBVBSB} =
-state disabled -width <span class=3D"hljs-number">5</span>
	setBalloon $bErase <span class=3D"hljs-string">"Resets SBV and BSB\nto def=
ault values"</span>
    }
    pack config $l_SBV $e_SBV -side left
    pack config $f_SBV -side top -ipady <span class=3D"hljs-number">1</span=
> -fill both
    pack configure $f_BSB_SBV -side top -padx <span class=3D"hljs-number">5=
</span> -fill both
    bind $e_SBV &lt;Return&gt; {devcSetDeviceSpecialBytes}
    bind $e_BSB &lt;Return&gt; {devcSetDeviceSpecialBytes}
    <span class=3D"hljs-keyword">set</span> fSSB .main.f_device.f_ssb
    frame $fSSB -relief groove -borderwidth <span class=3D"hljs-number">1</=
span>
    <span class=3D"hljs-keyword">set</span> fInfo $fSSB.f_info
    frame $fInfo -relief flat
    <span class=3D"hljs-keyword">set</span> lSSB $fInfo.l_ssb
    label $lSSB -text <span class=3D"hljs-string">"Device SSB"</span> -font=
 $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lSSB <span class=3D"hljs-string">"Software Security Byte"</=
span>
    <span class=3D"hljs-keyword">set</span> eSSB $fInfo.e_ssb
    entry $eSSB -textvariable ::deviceArray(ssb) -width <span class=3D"hljs=
-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0<=
/span> -state disabled
    setBalloon $eSSB <span class=3D"hljs-string">"Actual SSB value"</span>
    pack config $lSSB $eSSB -side left
    pack config $fInfo -side top
    <span class=3D"hljs-keyword">set</span> fLevel0 $fSSB.f_level0
    frame $fLevel0 -relief flat
    <span class=3D"hljs-keyword">set</span> bLevel0 $fLevel0.b_level0
    radiobutton $bLevel0 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 0"</span> -value <sp=
an class=3D"hljs-number">0</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 0"</span> -state disabled
    setBalloon $bLevel0 <span class=3D"hljs-string">"Security level 0: no s=
ecurity\n (setting to levels 1 and 2 allowed)"</span>
    pack configure $bLevel0 -side left
    <span class=3D"hljs-keyword">set</span> fLevel1 $fSSB.f_level1
    frame $fLevel1 -relief flat
    <span class=3D"hljs-keyword">set</span> bLevel1 $fLevel1.b_level1
    radiobutton $bLevel1 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 1"</span> -value <sp=
an class=3D"hljs-number">1</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 1"</span> -state disabled
    setBalloon $bLevel1 <span class=3D"hljs-string">"Security level 1: no w=
riting allowed\n (setting to level 2 allowed)"</span>
    pack configure $bLevel1 -side left
    <span class=3D"hljs-keyword">set</span> fLevel2 $fSSB.f_level2
    frame $fLevel2 -relief flat
    <span class=3D"hljs-keyword">set</span> bLevel2 $fLevel2.b_level2
    radiobutton $bLevel2 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 2"</span> -value <sp=
an class=3D"hljs-number">2</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 2"</span> -state disabled
    setBalloon $bLevel2 <span class=3D"hljs-string">"Security level 2: no r=
eading/writing allowed\n (full chip erase resets security level to 0)"</spa=
n>
    pack configure $bLevel2 -side left
    pack configure $fInfo -side top -anchor w -ipady <span class=3D"hljs-nu=
mber">1</span> -fill both
    pack configure $fInfo $fLevel0 $fLevel1 $fLevel2 -side top -anchor w -f=
ill both
    pack configure $fSSB -side top -padx <span class=3D"hljs-number">5</spa=
n> -pady <span class=3D"hljs-number">1</span> -fill both
    <span class=3D"hljs-keyword">set</span> fStartApp .main.f_device.f_star=
tApp
    frame $fStartApp -relief groove -borderwidth <span class=3D"hljs-number=
">1</span>
    button $fStartApp.b_start -text <span class=3D"hljs-string">"Start Appl=
ication"</span> -bd <span class=3D"hljs-number">3</span> -font $flipFont -s=
tate disabled -command {ptclStartAppli $flipStates(withReset)}
    setBalloon $fStartApp.b_start <span class=3D"hljs-string">"Starts appli=
cation at address 0x0000"</span>
    checkbutton $fStartApp.b_reset -text <span class=3D"hljs-string">"With =
Reset"</span> -font $flipFont -<span class=3D"hljs-keyword">variable</span>=
 flipStates(withReset) -indicatoron true -state disabled
    setBalloon $fStartApp.b_reset <span class=3D"hljs-string">"If set, gene=
rates a hardware reset pulse\n  when the Start Application button is presse=
d."</span>
    pack configure $fStartApp.b_start $fStartApp.b_reset -side left -padx <=
span class=3D"hljs-number">5</span> -pady <span class=3D"hljs-number">5</sp=
an>
    pack configure $fStartApp -padx <span class=3D"hljs-number">5</span> -f=
ill both
    <span class=3D"hljs-keyword">set</span> fButtons .main.f_device.f_butto=
ns
    frame $fButtons -relief flat
    <span class=3D"hljs-keyword">set</span> bUpdate $fButtons.b_update
    button $bUpdate -bd <span class=3D"hljs-number">3</span> -text <span cl=
ass=3D"hljs-string">"Read"</span> -font $flipFont -command {devcUpdateDevic=
eFrame} -state disabled
    setBalloon $bUpdate <span class=3D"hljs-string">"Reads device special b=
ytes"</span>
    <span class=3D"hljs-keyword">set</span> bWrite $fButtons.b_write
    button $bWrite -bd <span class=3D"hljs-number">3</span> -text <span cla=
ss=3D"hljs-string">"Set"</span> -font $flipFont -command {devcSetDeviceSpec=
ialBytes} -state disabled
    setBalloon $bWrite <span class=3D"hljs-string">"Sets device special byt=
es"</span>
    pack config $bUpdate $bWrite -side left -padx <span class=3D"hljs-numbe=
r">10</span>
    <span class=3D"hljs-keyword">catch</span> [destroy .main.f_buffer.b_mem=
Select]
    pack configure $fButtons -side top -padx <span class=3D"hljs-number">35=
</span> -pady <span class=3D"hljs-number">5</span> -fill both
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> buildSk=
ipTestList</span> {protocol} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(skipList) <span c=
lass=3D"hljs-string">"
xaf-1.5  xaf-1.6  xaf-1.13  xaf-1.14  xaf-1.21  xaf-1.22  xaf-1.28  flash-2=
.23.1  flash-2.26  flash-2.27  flash-2.28  flash-2.29  flash-2.30  checksum=
-5.5  checksum-5.6 "</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> buildSk=
ipProcList</span> {} {
    <span class=3D"hljs-keyword">set</span> skipL {}
    <span class=3D"hljs-keyword">return</span> $skipL
}
t89c51ic2
<span class=3D"hljs-keyword">foreach</span> m $::deviceArray(memoryList) {
    cmdsImportCurrentMemoryNameSpace $m
    cmdsSetMemoryParameters
    initBuffer
}
cmdsImportCurrentMemoryNameSpace FLASH
<span class=3D"hljs-comment">#dbgEndSrc [info script]</span>
<span class=3D"hljs-comment">#dbgBeginSrc [info script]</span>
<span class=3D"hljs-keyword">global</span> projDir
<span class=3D"hljs-keyword">source</span> $projDir/tcl/devices/devices_com=
mon.tcl
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> at89c51=
id2</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> protcl protocol nAddrBits fl=
ipFont rs232standard canstandard expAnsw testFlag buffer flowButtons flipSt=
ates
    <span class=3D"hljs-keyword">set</span> children_List [<span class=3D"h=
ljs-keyword">split</span> [winfo children .main.f_device]]
    <span class=3D"hljs-keyword">foreach</span> item $children_List {
	<span class=3D"hljs-keyword">if</span> {$item !=3D <span class=3D"hljs-str=
ing">".main.f_device.f_deviceName"</span>} then {
	    destroy $item
	}
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">a=
rray</span> exists ::deviceArray]} then {
	<span class=3D"hljs-keyword">array</span> <span class=3D"hljs-keyword">uns=
et</span> ::deviceArray
    }
    <span class=3D"hljs-keyword">set</span> ::deviceArray(name) <span class=
=3D"hljs-string">"AT89C51ID2"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(communicationList=
) <span class=3D"hljs-string">"RS232"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(memoryList) [<spa=
n class=3D"hljs-keyword">list</span> FLASH EEPROM]
    <span class=3D"hljs-keyword">set</span> ::deviceArray(memoryButtonList)=
 [<span class=3D"hljs-keyword">list</span> <span class=3D"hljs-string">"Sel=
ect EEPROM"</span> <span class=3D"hljs-string">"Select FLASH"</span>]
    <span class=3D"hljs-keyword">set</span> ::deviceArray(memoryColor) [<sp=
an class=3D"hljs-keyword">list</span> <span class=3D"hljs-string">"#88a67d"=
</span> <span class=3D"hljs-string">"wheat"</span>]
    <span class=3D"hljs-keyword">set</span> ::deviceArray(currentMemory) <s=
pan class=3D"hljs-string">"FLASH"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(currentMemoryButt=
on) <span class=3D"hljs-string">"Select EEPROM"</span>
    <span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keywo=
rd">eval</span> ::FLASH:: {
	<span class=3D"hljs-keyword">variable</span> deviceArray
	<span class=3D"hljs-keyword">variable</span> buffer
	<span class=3D"hljs-keyword">set</span> deviceArray(memorySize) <span clas=
s=3D"hljs-number">64</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankValue) <span clas=
s=3D"hljs-string">"FF"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erase) <span class=3D"hljs-=
string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(blankCheck) <span class=3D"=
hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseType) <span class=3D"h=
ljs-string">"full"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlocks) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock0) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock0) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock1) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock1) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock2) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock2) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock3) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock3) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock4) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock4) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(displayData) <span cla=
ss=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankCheck) <span clas=
s=3D"hljs-string">"01"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(programData) <span cla=
ss=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">namespace</span> export writeBuffer readBuffe=
r readDeviceArray initBuffer bufferChecksum
    }
    <span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keywo=
rd">eval</span> ::EEPROM:: {
	<span class=3D"hljs-keyword">variable</span> deviceArray
	<span class=3D"hljs-keyword">variable</span> buffer
	<span class=3D"hljs-keyword">set</span> deviceArray(memorySize) <span clas=
s=3D"hljs-number">2</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankValue) <span clas=
s=3D"hljs-string">"FF"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erase) <span class=3D"hljs-=
string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(blankCheck) <span class=3D"=
hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseType) <span class=3D"h=
ljs-string">"full"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlocks) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock0) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock0) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock1) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock1) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock2) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock2) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock3) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock3) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock4) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock4) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(displayData) <span cla=
ss=3D"hljs-string">"02"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankCheck) <span clas=
s=3D"hljs-string">"XX"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(programData) <span cla=
ss=3D"hljs-string">"07"</span>
	<span class=3D"hljs-keyword">namespace</span> export writeBuffer readBuffe=
r readDeviceArray initBuffer bufferChecksum
    }
    <span class=3D"hljs-keyword">foreach</span> M $::deviceArray(memoryList=
) {
	<span class=3D"hljs-keyword">proc</span> ::${M}::writeBuffer {index data} =
{
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">set</span> buffer($index) $data
	    <span class=3D"hljs-keyword">return</span>
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::readBuffer {index} {
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">return</span> $buffer($index)
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::readDeviceArray {index} {
	    <span class=3D"hljs-keyword">variable</span> deviceArray
	    <span class=3D"hljs-keyword">return</span> $deviceArray($index)
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::initBuffer {} {
	    <span class=3D"hljs-keyword">variable</span> deviceArray
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">global</span> flipStates
	    <span class=3D"hljs-keyword">set</span> max [<span class=3D"hljs-keywo=
rd">expr</span> $deviceArray(memorySize) * <span class=3D"hljs-number">1024=
</span>]
	    <span class=3D"hljs-keyword">if</span> {$flipStates(simul)} then {
		<span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">set=
</span> i <span class=3D"hljs-number">0</span>} {$i &lt; $max} {<span class=
=3D"hljs-keyword">incr</span> i} {
		    <span class=3D"hljs-keyword">set</span> buffer([<span class=3D"hljs-k=
eyword">format</span> %<span class=3D"hljs-number">06</span>X $i]) $deviceA=
rray(blankValue)
		}
	    } else {
		initBuffer_C $max $deviceArray(blankValue)
	    }
	    <span class=3D"hljs-keyword">return</span>
	}
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::F=
LASH::bufferChecksum</span> {} {
	<span class=3D"hljs-keyword">variable</span> buffer
	<span class=3D"hljs-keyword">global</span> flipStates
	<span class=3D"hljs-keyword">set</span> min $buffer(minProgAddr)
	<span class=3D"hljs-keyword">set</span> max $buffer(maxProgAddr)
	<span class=3D"hljs-keyword">if</span> {$flipStates(simul)} then {
	    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number"=
>0xCAFEFADE</span>
	} else {
	    <span class=3D"hljs-keyword">return</span> [computeBufferChecksum_C $m=
in $max]
	}
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::E=
EPROM::bufferChecksum</span> {} {
	<span class=3D"hljs-keyword">variable</span> buffer
	<span class=3D"hljs-keyword">global</span> flipStates
	<span class=3D"hljs-keyword">set</span> min $buffer(minProgAddr)
	<span class=3D"hljs-keyword">set</span> max $buffer(maxProgAddr)
	<span class=3D"hljs-keyword">if</span> {$flipStates(simul)} then {
	    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number"=
>0xDEADBEEF</span>
	} else {
	    <span class=3D"hljs-keyword">return</span> [computeBufferChecksum_C $m=
in $max]
	}
    }
    <span class=3D"hljs-keyword">set</span> ::deviceArray(jumpAdd) <span cl=
ass=3D"hljs-string">"0000"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(specialSynchro) <=
span class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(RS232ProtocolsLis=
t) <span class=3D"hljs-string">"Standard"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(CANProtocolsList)=
 <span class=3D"hljs-string">"Standard Enhanced"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev0) [<span cla=
ss=3D"hljs-keyword">list</span> FF]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev0Test) <span =
class=3D"hljs-string">"FF"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev1) [<span cla=
ss=3D"hljs-keyword">list</span> FE]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev1Test) <span =
class=3D"hljs-string">"FE"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev2) [<span cla=
ss=3D"hljs-keyword">list</span> FC XX]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev2Test) <span =
class=3D"hljs-string">"FC"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readManufId) <span clas=
s=3D"hljs-number">58</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId1) XX
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId2) XX
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId3) XX
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock0) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock1) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock2) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock3) <span cla=
ss=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock4) <span cla=
ss=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> testFlag(readDevBootId1) <span =
class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(readDevBootId2) <span =
class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(sbv) <span class=3D"hl=
js-string">"FC"</span>
    <span class=3D"hljs-keyword">set</span> fBlocks .deviceErase.f_erase.f_=
blocks
    <span class=3D"hljs-keyword">set</span> bBlock0 $fBlocks.b_block0
    <span class=3D"hljs-keyword">set</span> bBlock1 $fBlocks.b_block1
    <span class=3D"hljs-keyword">set</span> bBlock2 $fBlocks.b_block2
    <span class=3D"hljs-keyword">set</span> bBlock3 $fBlocks.b_block3
    <span class=3D"hljs-keyword">set</span> bBlock4 $fBlocks.b_block4
    setBalloon $bBlock0 <span class=3D"hljs-string">"Erase memory between 0=
000 and 1FFF"</span>
    setBalloon $bBlock1 <span class=3D"hljs-string">"Erase memory between 2=
000 and 3FFF"</span>
    setBalloon $bBlock2 <span class=3D"hljs-string">"Erase memory between 4=
000 and 7FFF"</span>
    $bBlock3 configure -state disabled
    $bBlock4 configure -state disabled
    .main.f_device.f_deviceName.l_device configure -text $::deviceArray(nam=
e)
    .main.f_device.f_deviceName configure -relief groove
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(sbv)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(sbv) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(bsb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(bsb) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(ssb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(ssb) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(hsb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(hsb) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(eb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(eb) <span class=3D"h=
ljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(deviceBootId1)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(deviceBootId1) <span=
 class=3D"hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(deviceBootId2)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(deviceBootId2) <span=
 class=3D"hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(oscFuse)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(oscFuse) <span class=
=3D"hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(bljbFuse)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(bljbFuse) <span clas=
s=3D"hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(x2Fuse)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(x2Fuse) <span class=
=3D"hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(level)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(level) X
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(eraseType)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(eraseType) <span cla=
ss=3D"hljs-string">"full"</span>
    }
    <span class=3D"hljs-keyword">set</span> nAddrBits <span class=3D"hljs-n=
umber">4</span>
    <span class=3D"hljs-keyword">set</span> rs232standard(readHwByte) <span=
 class=3D"hljs-string">":020000050B00EE"</span>
    <span class=3D"hljs-keyword">set</span> rs232standard(readBootlVer) <sp=
an class=3D"hljs-string">":020000050F00EA"</span>
    <span class=3D"hljs-keyword">set</span> protocol(frameLengthW) <span cl=
ass=3D"hljs-number">128</span>
    <span class=3D"hljs-keyword">set</span> protocol(frameLengthR) <span cl=
ass=3D"hljs-number">16</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowErase) <span =
class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowBlankCheck) <=
span class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowProgram) <spa=
n class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowVerify) <span=
 class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowSpecialBytes)=
 <span class=3D"hljs-number">0</span>
    wm title .deviceErase <span class=3D"hljs-string">"$::deviceArray(name)=
 Erase"</span>
    .deviceErase.f_erase.f_blocks.b_blockErase configure -state normal
    <span class=3D"hljs-keyword">set</span> fReadOnly .main.f_device.f_read=
Only
    frame $fReadOnly -relief groove -borderwidth <span class=3D"hljs-number=
">1</span>
    <span class=3D"hljs-keyword">set</span> fManufId $fReadOnly.f_manufId
    frame $fManufId -relief flat
    <span class=3D"hljs-keyword">set</span> lManufId $fManufId.l_manufId
    label $lManufId -text <span class=3D"hljs-string">"Manufact. Id"</span>=
 -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    <span class=3D"hljs-keyword">set</span> eManufId $fManufId.e_manufId
    entry $eManufId -textvariable ::deviceArray(manufId) -width <span class=
=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eManufId <span class=3D"hljs-string">"Manufacturer code val=
ue"</span>
    pack config $lManufId $eManufId -padx <span class=3D"hljs-number">1</sp=
an> -side left
    pack config $fManufId -side top -ipady <span class=3D"hljs-number">1</s=
pan> -fill both
    <span class=3D"hljs-keyword">set</span> fDeviceIds $fReadOnly.f_deviceI=
ds
    frame $fDeviceIds -relief flat
    <span class=3D"hljs-keyword">set</span> lDeviceIds $fDeviceIds.l_device=
Ids
    label $lDeviceIds -text <span class=3D"hljs-string">"Device Ids"</span>=
 -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    <span class=3D"hljs-keyword">set</span> eDeviceId1 $fDeviceIds.e_device=
Id1
    entry $eDeviceId1 -textvariable ::deviceArray(deviceId1) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId1 <span class=3D"hljs-string">"Family code value"<=
/span>
    <span class=3D"hljs-keyword">set</span> eDeviceId2 $fDeviceIds.e_device=
Id2
    entry $eDeviceId2 -textvariable ::deviceArray(deviceId2) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId2 <span class=3D"hljs-string">"Device name code"</=
span>
    <span class=3D"hljs-keyword">set</span> eDeviceId3 $fDeviceIds.e_device=
Id3
    entry $eDeviceId3 -textvariable ::deviceArray(deviceId3) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId3 <span class=3D"hljs-string">"Device revision num=
ber"</span>
    pack config $lDeviceIds $eDeviceId1 $eDeviceId2 $eDeviceId3 -padx <span=
 class=3D"hljs-number">1</span> -side left
    pack config $fDeviceIds -side top -ipady <span class=3D"hljs-number">1<=
/span> -fill both
    <span class=3D"hljs-keyword">set</span> fDeviceBootIds $fReadOnly.f_dev=
iceBootIds
    frame $fDeviceBootIds -relief flat
    <span class=3D"hljs-keyword">set</span> lDeviceBootIds $fDeviceBootIds.=
l_deviceBootIds
    label $lDeviceBootIds -text <span class=3D"hljs-string">"Device Boot Id=
s"</span> -font $flipFont -anchor w -width <span class=3D"hljs-number">16</=
span>
    setBalloon $lDeviceBootIds <span class=3D"hljs-string">"Boot Ids 1, 2: =
read-only"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceBootId1 $fDeviceBootIds.=
e_deviceBootId1
    entry $eDeviceBootId1 -textvariable ::deviceArray(deviceBootId1) -width=
 <span class=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceBootId1 <span class=3D"hljs-string">"Boot Id 1 value=
"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceBootId2 $fDeviceBootIds.=
e_deviceBootId2
    entry $eDeviceBootId2 -textvariable ::deviceArray(deviceBootId2) -width=
 <span class=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceBootId2 <span class=3D"hljs-string">"Boot Id 2 value=
"</span>
    pack config $lDeviceBootIds $eDeviceBootId1 $eDeviceBootId2 -padx <span=
 class=3D"hljs-number">1</span> -side left
    pack config $fDeviceBootIds -side top -ipady <span class=3D"hljs-number=
">1</span> -fill both
    <span class=3D"hljs-keyword">set</span> fHSB $fReadOnly.f_hsb
    frame $fHSB -relief flat
    <span class=3D"hljs-keyword">set</span> lHSB $fHSB.l_hsb
    label $lHSB -text <span class=3D"hljs-string">"Hardware Byte"</span> -f=
ont $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lHSB <span class=3D"hljs-string">"Hardware Security Byte: r=
ead-only"</span>
    <span class=3D"hljs-keyword">set</span> eHSB $fHSB.e_hsb
    entry $eHSB -textvariable ::deviceArray(hsb) -width <span class=3D"hljs=
-number">3</span> -font $flipFont -state disabled
    setBalloon $eHSB <span class=3D"hljs-string">"Hardware Security Byte va=
lue"</span>
    pack config $lHSB $eHSB -padx <span class=3D"hljs-number">1</span> -sid=
e left
    pack config $fHSB -side top -ipady <span class=3D"hljs-number">1</span>=
 -fill both
    <span class=3D"hljs-keyword">set</span> fBootlVer $fReadOnly.f_bootlVer
    frame $fBootlVer -relief flat
    <span class=3D"hljs-keyword">set</span> lBootlVer $fBootlVer.l_bootlVer
    label $lBootlVer -text <span class=3D"hljs-string">"Bootloader Ver."</s=
pan> -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lBootlVer <span class=3D"hljs-string">"Bootloader Version: =
read-only"</span>
    <span class=3D"hljs-keyword">set</span> eBootlVer $fBootlVer.e_bootlVer
    entry $eBootlVer -textvariable ::deviceArray(bootlVer) -width <span cla=
ss=3D"hljs-number">5</span> -font $flipFont -state disabled
    setBalloon $eBootlVer <span class=3D"hljs-string">"Bootloader Version"<=
/span>
    pack config $lBootlVer $eBootlVer -padx <span class=3D"hljs-number">1</=
span> -side left
    pack config $fBootlVer -side top -ipady <span class=3D"hljs-number">1</=
span> -fill both
    pack configure $fReadOnly -side top -padx <span class=3D"hljs-number">5=
</span> -fill both
    <span class=3D"hljs-keyword">set</span> fFuses .main.f_device.f_fuses
    frame $fFuses -relief groove -borderwidth <span class=3D"hljs-number">1=
</span>
    <span class=3D"hljs-keyword">set</span> bOsc $fFuses.b_osc
    checkbutton $bOsc -text <span class=3D"hljs-string">"Osc. B"</span> -fo=
nt $flipFont -<span class=3D"hljs-keyword">variable</span> ::deviceArray(os=
cFuse) -onvalue <span class=3D"hljs-number">0</span> -offvalue <span class=
=3D"hljs-number">1</span> -indicatoron true -state disabled
    setBalloon $bOsc <span class=3D"hljs-string">"Osc. B set : Osc B =3D 0"=
</span>
    <span class=3D"hljs-keyword">set</span> bBLJB $fFuses.b_bljb
    checkbutton $bBLJB -text <span class=3D"hljs-string">"BLJB"</span> -fon=
t $flipFont -<span class=3D"hljs-keyword">variable</span> ::deviceArray(blj=
bFuse) -onvalue <span class=3D"hljs-number">0</span> -offvalue <span class=
=3D"hljs-number">1</span> -indicatoron true -state disabled
    setBalloon $bBLJB <span class=3D"hljs-string">"Boot Loader Jump Bit \nS=
et =3D 0 / Unset =3D 1"</span>
    <span class=3D"hljs-keyword">set</span> bX2 $fFuses.b_x2
    checkbutton $bX2 -text <span class=3D"hljs-string">"X2"</span> -font $f=
lipFont -<span class=3D"hljs-keyword">variable</span> ::deviceArray(x2Fuse)=
 -onvalue <span class=3D"hljs-number">0</span> -offvalue <span class=3D"hlj=
s-number">1</span> -indicatoron true -state disabled
    setBalloon $bX2 <span class=3D"hljs-string">"X2 fuse bit \nSet =3D 0 / =
Unset =3D 1"</span>
    pack config $bOsc $bBLJB $bX2 -side left -anchor w
    pack configure $fFuses -side top -padx <span class=3D"hljs-number">5</s=
pan> -pady <span class=3D"hljs-number">5</span> -fill x
    <span class=3D"hljs-keyword">set</span> f_BSB_SBV .main.f_device.f_bsb_=
sbv
    frame $f_BSB_SBV -relief groove -borderwidth <span class=3D"hljs-number=
">1</span>
    <span class=3D"hljs-keyword">set</span> f_BSB $f_BSB_SBV.f_bsb
    frame $f_BSB -relief flat
    <span class=3D"hljs-keyword">set</span> l_BSB $f_BSB.l_bsb
    label $l_BSB -text <span class=3D"hljs-string">"Device BSB &amp; EB"</s=
pan> -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $l_BSB <span class=3D"hljs-string">"Boot Status Byte &amp; E=
xtra Byte"</span>
    <span class=3D"hljs-keyword">set</span> e_BSB $f_BSB.e_bsb
    entry $e_BSB -textvariable ::deviceArray(bsb) -width <span class=3D"hlj=
s-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0=
</span> -state disabled
    setBalloon $e_BSB <span class=3D"hljs-string">"Actual BSB value"</span>
    <span class=3D"hljs-keyword">set</span> e_EB $f_BSB.e_eb
    entry $e_EB -textvariable ::deviceArray(eb) -width <span class=3D"hljs-=
number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0</=
span> -state disabled
    setBalloon $e_EB <span class=3D"hljs-string">"Actual EB value"</span>
    pack config $l_BSB $e_BSB $e_EB -padx <span class=3D"hljs-number">1</sp=
an> -side left
    pack config $f_BSB -side top -ipady <span class=3D"hljs-number">1</span=
> -fill both
    <span class=3D"hljs-keyword">set</span> f_SBV $f_BSB_SBV.f_sbv
    frame $f_SBV -relief flat
    <span class=3D"hljs-keyword">set</span> l_SBV $f_SBV.l_sbv
    label $l_SBV -text <span class=3D"hljs-string">"Device SBV"</span> -fon=
t $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $l_SBV <span class=3D"hljs-string">"Software Boot Vector"</s=
pan>
    <span class=3D"hljs-keyword">set</span> e_SBV $f_SBV.e_sbv
    entry $e_SBV -textvariable ::deviceArray(sbv) -width <span class=3D"hlj=
s-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0=
</span> -state disabled
    setBalloon $e_SBV <span class=3D"hljs-string">"Actual SBV value"</span>
    <span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-number">0</=
span>} then {
	<span class=3D"hljs-keyword">set</span> bErase $fSBV.b_erase
	button $bErase -bd <span class=3D"hljs-number">3</span> -text <span class=
=3D"hljs-string">"Erase"</span> -font $flipFont -command {cmdsEraseSBVBSB} =
-state disabled -width <span class=3D"hljs-number">5</span>
	setBalloon $bErase <span class=3D"hljs-string">"Resets SBV and BSB\nto def=
ault values"</span>
    }
    pack config $l_SBV $e_SBV -padx <span class=3D"hljs-number">1</span> -s=
ide left
    pack config $f_SBV -side top -ipady <span class=3D"hljs-number">1</span=
> -fill both
    pack configure $f_BSB_SBV -side top -padx <span class=3D"hljs-number">5=
</span> -fill both
    bind $e_SBV &lt;Return&gt; {devcSetDeviceSpecialBytes}
    bind $e_BSB &lt;Return&gt; {devcSetDeviceSpecialBytes}
    <span class=3D"hljs-keyword">set</span> fSSB .main.f_device.f_ssb
    frame $fSSB -relief groove -borderwidth <span class=3D"hljs-number">1</=
span>
    <span class=3D"hljs-keyword">set</span> fInfo $fSSB.f_info
    frame $fInfo -relief flat
    <span class=3D"hljs-keyword">set</span> lSSB $fInfo.l_ssb
    label $lSSB -text <span class=3D"hljs-string">"Device SSB"</span> -font=
 $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lSSB <span class=3D"hljs-string">"Software Security Byte"</=
span>
    <span class=3D"hljs-keyword">set</span> eSSB $fInfo.e_ssb
    entry $eSSB -textvariable ::deviceArray(ssb) -width <span class=3D"hljs=
-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0<=
/span> -state disabled
    setBalloon $eSSB <span class=3D"hljs-string">"Actual SSB value"</span>
    pack config $lSSB $eSSB -padx <span class=3D"hljs-number">1</span> -sid=
e left
    pack config $fInfo -side top
    <span class=3D"hljs-keyword">set</span> fLevel $fSSB.f_level
    frame $fLevel -relief flat
    <span class=3D"hljs-keyword">set</span> bLevel0 $fLevel.b_level0
    radiobutton $bLevel0 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 0"</span> -value <sp=
an class=3D"hljs-number">0</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 0"</span> -state disabled
    setBalloon $bLevel0 <span class=3D"hljs-string">"Security level 0: no s=
ecurity\n (setting to levels 1 and 2 allowed)"</span>
    pack configure $bLevel0 -side left
    <span class=3D"hljs-keyword">set</span> bLevel1 $fLevel.b_level1
    radiobutton $bLevel1 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 1"</span> -value <sp=
an class=3D"hljs-number">1</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 1"</span> -state disabled
    setBalloon $bLevel1 <span class=3D"hljs-string">"Security level 1: no w=
riting allowed\n (setting to level 2 allowed)"</span>
    pack configure $bLevel1 -side left
    <span class=3D"hljs-keyword">set</span> bLevel2 $fLevel.b_level2
    radiobutton $bLevel2 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 2"</span> -value <sp=
an class=3D"hljs-number">2</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 2"</span> -state disabled
    setBalloon $bLevel2 <span class=3D"hljs-string">"Security level 2: neit=
her reading nor writing allowed\n (full chip erase resets security level to=
 0)"</span>
    pack configure $bLevel2 -side left
    pack configure $fInfo -side top -anchor w -ipady <span class=3D"hljs-nu=
mber">2</span> -fill both
    pack configure $fLevel -side top -anchor w -pady <span class=3D"hljs-nu=
mber">5</span> -fill both
    pack configure $fSSB -side top -padx <span class=3D"hljs-number">5</spa=
n> -pady <span class=3D"hljs-number">5</span> -fill both
    <span class=3D"hljs-keyword">set</span> fStartApp .main.f_device.f_star=
tApp
    frame $fStartApp -relief groove -borderwidth <span class=3D"hljs-number=
">1</span>
    button $fStartApp.b_start -text <span class=3D"hljs-string">"Start Appl=
ication"</span> -bd <span class=3D"hljs-number">3</span> -font $flipFont -s=
tate disabled -command {ptclStartAppli $flipStates(withReset)}
    setBalloon $fStartApp.b_start <span class=3D"hljs-string">"Starts appli=
cation at address 0x0000"</span>
    checkbutton $fStartApp.b_reset -text <span class=3D"hljs-string">"With =
Reset"</span> -font $flipFont -<span class=3D"hljs-keyword">variable</span>=
 flipStates(withReset) -indicatoron true -state disabled
    setBalloon $fStartApp.b_reset <span class=3D"hljs-string">"If set, gene=
rates a hardware reset pulse\n  when the Start Application button is presse=
d."</span>
    pack configure $fStartApp.b_start $fStartApp.b_reset -side left -padx <=
span class=3D"hljs-number">5</span> -pady <span class=3D"hljs-number">5</sp=
an>
    pack configure $fStartApp -padx <span class=3D"hljs-number">5</span> -f=
ill both
    <span class=3D"hljs-keyword">set</span> fButtons .main.f_device.f_butto=
ns
    frame $fButtons -relief flat
    pack configure $fButtons -side top
    <span class=3D"hljs-keyword">set</span> bUpdate $fButtons.b_update
    button $bUpdate -bd <span class=3D"hljs-number">3</span> -text <span cl=
ass=3D"hljs-string">"Read"</span> -font $flipFont -command {devcUpdateDevic=
eFrame} -state disabled
    setBalloon $bUpdate <span class=3D"hljs-string">"Reads device special b=
ytes"</span>
    <span class=3D"hljs-keyword">set</span> bWrite $fButtons.b_write
    button $bWrite -bd <span class=3D"hljs-number">3</span> -text <span cla=
ss=3D"hljs-string">"Set"</span> -font $flipFont -command {devcSetDeviceSpec=
ialBytes} -state disabled
    setBalloon $bWrite <span class=3D"hljs-string">"Sets device special byt=
es"</span>
    <span class=3D"hljs-keyword">set</span> bCanConfig $fButtons.b_canconfi=
g
    button $bCanConfig -bd <span class=3D"hljs-number">3</span> -text <span=
 class=3D"hljs-string">"CAN"</span> -font $flipFont -command {cbDboxWakeUp =
.canNodeConfigDbox} -state disabled
    setBalloon $bCanConfig <span class=3D"hljs-string">"Sets a CAN node par=
ameters"</span>
    <span class=3D"hljs-keyword">set</span> bMemorySelect .main.f_buffer.b_=
memSelect
    <span class=3D"hljs-keyword">if</span> {! [winfo exists $bMemorySelect]=
} then {
	button $bMemorySelect -bd <span class=3D"hljs-number">3</span> -text $::de=
viceArray(currentMemoryButton) -font $flipFont -command {cmdsToggleMemory} =
-width <span class=3D"hljs-number">14</span> -state disabled
	setBalloon $bMemorySelect <span class=3D"hljs-string">"FLIP will perform a=
ll operations\n on the selected memory"</span>
    }
    pack config $bUpdate $bWrite -side left -padx <span class=3D"hljs-numbe=
r">15</span>
    pack configure $fButtons -side top -padx <span class=3D"hljs-number">5<=
/span> -pady <span class=3D"hljs-number">15</span> -fill both
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> buildSk=
ipTestList</span> {protocol} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(skipList) <span c=
lass=3D"hljs-string">"  flash-2.23.1  flash-2.25  checksum-5.5  checksum-5.=
6 "</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> buildSk=
ipProcList</span> {} {
    <span class=3D"hljs-keyword">set</span> skipL {}
    <span class=3D"hljs-keyword">return</span> $skipL
}
drawCanNodeConfigDbox
at89c51id2
<span class=3D"hljs-keyword">foreach</span> m $::deviceArray(memoryList) {
    cmdsImportCurrentMemoryNameSpace $m
    cmdsSetMemoryParameters
    initBuffer
}
cmdsImportCurrentMemoryNameSpace FLASH
<span class=3D"hljs-comment">#dbgEndSrc [info script]</span>
<span class=3D"hljs-comment">#dbgBeginSrc [info script]</span>
<span class=3D"hljs-keyword">global</span> projDir
<span class=3D"hljs-keyword">source</span> $projDir/tcl/devices/devices_com=
mon.tcl
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> t89c51r=
b2</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> protcl protocol nAddrBits rs=
232standard canstandard expAnsw testFlag buffer flowButtons flipFont
    <span class=3D"hljs-keyword">set</span> children_List [<span class=3D"h=
ljs-keyword">split</span> [winfo children .main.f_device]]
    <span class=3D"hljs-keyword">foreach</span> item $children_List {
	<span class=3D"hljs-keyword">if</span> {$item !=3D <span class=3D"hljs-str=
ing">".main.f_device.f_deviceName"</span>} then {
	    destroy $item
	}
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">a=
rray</span> exists ::deviceArray]} then {
	<span class=3D"hljs-keyword">array</span> <span class=3D"hljs-keyword">uns=
et</span> ::deviceArray
    }
    <span class=3D"hljs-keyword">set</span> ::deviceArray(name) <span class=
=3D"hljs-string">"AT89C51RB2"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(communicationList=
) RS232
    <span class=3D"hljs-keyword">set</span> ::deviceArray(memoryList) [<spa=
n class=3D"hljs-keyword">list</span> FLASH]
    <span class=3D"hljs-keyword">set</span> ::deviceArray(memoryColor) [<sp=
an class=3D"hljs-keyword">list</span> <span class=3D"hljs-string">"#88a67d"=
</span> <span class=3D"hljs-string">"wheat"</span>]
    <span class=3D"hljs-keyword">set</span> ::deviceArray(currentMemory) <s=
pan class=3D"hljs-string">"FLASH"</span>
    <span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keywo=
rd">eval</span> ::FLASH:: {
	<span class=3D"hljs-keyword">variable</span> deviceArray
	<span class=3D"hljs-keyword">variable</span> buffer
	<span class=3D"hljs-keyword">set</span> deviceArray(memorySize) <span clas=
s=3D"hljs-number">16</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankValue) <span clas=
s=3D"hljs-string">"FF"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erase) <span class=3D"hljs-=
string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(blankCheck) <span class=3D"=
hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseType) <span class=3D"h=
ljs-string">"full"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlocks) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock0) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock0) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock1) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock1) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock2) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock2) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock3) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock3) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock4) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock4) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(progStart) <span class=
=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(displayData) <span cla=
ss=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankCheck) <span clas=
s=3D"hljs-string">"01"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(programData) <span cla=
ss=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">namespace</span> export writeBuffer readBuffe=
r readDeviceArray initBuffer bufferChecksum
    }
    <span class=3D"hljs-keyword">foreach</span> M $::deviceArray(memoryList=
) {
	<span class=3D"hljs-keyword">proc</span> ::${M}::writeBuffer {index data} =
{
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">set</span> buffer($index) $data
	    <span class=3D"hljs-keyword">return</span>
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::readBuffer {index} {
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">return</span> $buffer($index)
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::readDeviceArray {index} {
	    <span class=3D"hljs-keyword">variable</span> deviceArray
	    <span class=3D"hljs-keyword">return</span> $deviceArray($index)
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::initBuffer {} {
	    <span class=3D"hljs-keyword">variable</span> deviceArray
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">global</span> flipStates
	    <span class=3D"hljs-keyword">set</span> max [<span class=3D"hljs-keywo=
rd">expr</span> $deviceArray(memorySize) * <span class=3D"hljs-number">1024=
</span>]
	    <span class=3D"hljs-keyword">if</span> {$flipStates(simul)} then {
		<span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">set=
</span> i <span class=3D"hljs-number">0</span>} {$i &lt; $max} {<span class=
=3D"hljs-keyword">incr</span> i} {
		    <span class=3D"hljs-keyword">set</span> buffer([<span class=3D"hljs-k=
eyword">format</span> %<span class=3D"hljs-number">06</span>X $i]) $deviceA=
rray(blankValue)
		}
	    } else {
		initBuffer_C $max $deviceArray(blankValue)
	    }
	    <span class=3D"hljs-keyword">return</span>
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::bufferChecksum {} {
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">global</span> flipStates
	    <span class=3D"hljs-keyword">set</span> min $buffer(minProgAddr)
	    <span class=3D"hljs-keyword">set</span> max $buffer(maxProgAddr)
	    <span class=3D"hljs-keyword">if</span> {$flipStates(simul)} then {
		<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0x=
CAFEFADE</span>
	    } else {
		<span class=3D"hljs-keyword">return</span> [computeBufferChecksum_C $min =
$max]
	    }
	}
    }
    <span class=3D"hljs-keyword">set</span> ::deviceArray(specialSynchro) <=
span class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(RS232ProtocolsLis=
t) <span class=3D"hljs-string">"Standard Enhanced"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev0) [<span cla=
ss=3D"hljs-keyword">list</span> FF]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev0Test) <span =
class=3D"hljs-string">"FF"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev1) [<span cla=
ss=3D"hljs-keyword">list</span> FE]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev1Test) <span =
class=3D"hljs-string">"FE"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev2) [<span cla=
ss=3D"hljs-keyword">list</span> FC XX]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev2Test) [<span=
 class=3D"hljs-keyword">list</span> FC]
    <span class=3D"hljs-keyword">set</span> expAnsw(readManufId) <span clas=
s=3D"hljs-number">58</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId1) XX
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId2) XX
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId3) XX
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock0) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock1) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock2) <span cla=
ss=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock3) <span cla=
ss=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock4) <span cla=
ss=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> testFlag(readDevBootId1) <span =
class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(readDevBootId2) <span =
class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(sbv) <span class=3D"hl=
js-string">"FC"</span>
    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">=
tcltest</span>::testConstraints(eraseBlockPossible) <span class=3D"hljs-num=
ber">1</span>
    .main.f_device.f_deviceName.l_device configure -text $::deviceArray(nam=
e)
    .main.f_device.f_deviceName configure -relief groove
    <span class=3D"hljs-keyword">set</span> fBlocks .deviceErase.f_erase.f_=
blocks
    <span class=3D"hljs-keyword">set</span> bBlock0 $fBlocks.b_block0
    <span class=3D"hljs-keyword">set</span> bBlock1 $fBlocks.b_block1
    setBalloon $bBlock0 <span class=3D"hljs-string">"Erase memory between 0=
000 and 1FFF"</span>
    setBalloon $bBlock1 <span class=3D"hljs-string">"Erase memory between 2=
000 and 3FFF"</span>
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(sbv)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(sbv) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(bsb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(bsb) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(ssb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(ssb) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(hsb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(hsb) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(eb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(eb) <span class=3D"h=
ljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(deviceBootId1)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(deviceBootId1) <span=
 class=3D"hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(deviceBootId2)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(deviceBootId2) <span=
 class=3D"hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(oscFuse)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(oscFuse) <span class=
=3D"hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(bljbFuse)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(bljbFuse) <span clas=
s=3D"hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(x2Fuse)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(x2Fuse) <span class=
=3D"hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(level)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(level) X
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(eraseType)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(eraseType) <span cla=
ss=3D"hljs-string">"full"</span>
    }
    <span class=3D"hljs-keyword">set</span> nAddrBits <span class=3D"hljs-n=
umber">4</span>
    <span class=3D"hljs-keyword">set</span> rs232standard(readHwByte) <span=
 class=3D"hljs-string">":020000050B00EE"</span>
    <span class=3D"hljs-keyword">set</span> rs232standard(readBootlVer) <sp=
an class=3D"hljs-string">":020000050F00EA"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowErase) <span =
class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowBlankCheck) <=
span class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowProgram) <spa=
n class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowVerify) <span=
 class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowSpecialBytes)=
 <span class=3D"hljs-number">0</span>
    wm title .deviceErase <span class=3D"hljs-string">"$::deviceArray(name)=
 Erase"</span>
    .deviceErase.f_erase.f_blocks.b_blockErase configure -state normal
    <span class=3D"hljs-keyword">set</span> fReadOnly .main.f_device.f_read=
Only
    frame $fReadOnly -relief groove -borderwidth <span class=3D"hljs-number=
">1</span>
    <span class=3D"hljs-keyword">set</span> fManufId $fReadOnly.f_manufId
    frame $fManufId -relief flat
    <span class=3D"hljs-keyword">set</span> lManufId $fManufId.l_manufId
    label $lManufId -text <span class=3D"hljs-string">"Manufact. Id"</span>=
 -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lManufId <span class=3D"hljs-string">"Manufacturer Id: read=
-only"</span>
    <span class=3D"hljs-keyword">set</span> eManufId $fManufId.e_manufId
    entry $eManufId -textvariable ::deviceArray(manufId) -width <span class=
=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eManufId <span class=3D"hljs-string">"Manufacturer Id value=
"</span>
    pack config $lManufId $eManufId -side left
    pack config $fManufId -side top -ipady <span class=3D"hljs-number">1</s=
pan> -fill both
    <span class=3D"hljs-keyword">set</span> fDeviceIds $fReadOnly.f_deviceI=
ds
    frame $fDeviceIds -relief flat
    <span class=3D"hljs-keyword">set</span> lDeviceIds $fDeviceIds.l_device=
Ids
    label $lDeviceIds -text <span class=3D"hljs-string">"Device Ids"</span>=
 -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lDeviceIds <span class=3D"hljs-string">"Ids 1, 2, 3: read-o=
nly"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceId1 $fDeviceIds.e_device=
Id1
    entry $eDeviceId1 -textvariable ::deviceArray(deviceId1) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId1 <span class=3D"hljs-string">"Id 1 value"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceId2 $fDeviceIds.e_device=
Id2
    entry $eDeviceId2 -textvariable ::deviceArray(deviceId2) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId2 <span class=3D"hljs-string">"Id 2 value"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceId3 $fDeviceIds.e_device=
Id3
    entry $eDeviceId3 -textvariable ::deviceArray(deviceId3) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId3 <span class=3D"hljs-string">"Id 3 value"</span>
    pack config $lDeviceIds $eDeviceId1 -side left
    pack config $eDeviceId2 -padx <span class=3D"hljs-number">2</span> -sid=
e left
    pack config $eDeviceId3 -side left
    pack config $fDeviceIds -side top -ipady <span class=3D"hljs-number">1<=
/span> -fill both
    <span class=3D"hljs-keyword">set</span> fDeviceBootIds $fReadOnly.f_dev=
iceBootIds
    frame $fDeviceBootIds -relief flat
    <span class=3D"hljs-keyword">set</span> lDeviceBootIds $fDeviceBootIds.=
l_deviceBootIds
    label $lDeviceBootIds -text <span class=3D"hljs-string">"Device Boot Id=
s"</span> -font $flipFont -anchor w -width <span class=3D"hljs-number">16</=
span>
    setBalloon $lDeviceBootIds <span class=3D"hljs-string">"Boot Ids 1, 2: =
read-only"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceBootId1 $fDeviceBootIds.=
e_deviceBootId1
    entry $eDeviceBootId1 -textvariable ::deviceArray(deviceBootId1) -width=
 <span class=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceBootId1 <span class=3D"hljs-string">"Boot Id 1 value=
"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceBootId2 $fDeviceBootIds.=
e_deviceBootId2
    entry $eDeviceBootId2 -textvariable ::deviceArray(deviceBootId2) -width=
 <span class=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceBootId2 <span class=3D"hljs-string">"Boot Id 2 value=
"</span>
    pack config $lDeviceBootIds $eDeviceBootId1 -side left
    pack config $eDeviceBootId2 -padx <span class=3D"hljs-number">2</span> =
-side left
    pack config $fDeviceBootIds -side top -ipady <span class=3D"hljs-number=
">1</span> -fill both
    <span class=3D"hljs-keyword">set</span> fHSB $fReadOnly.f_hsb
    frame $fHSB -relief flat
    <span class=3D"hljs-keyword">set</span> lHSB $fHSB.l_hsb
    label $lHSB -text <span class=3D"hljs-string">"HSB"</span> -font $flipF=
ont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lHSB <span class=3D"hljs-string">"Hardware Security Byte: r=
ead-only"</span>
    <span class=3D"hljs-keyword">set</span> eHSB $fHSB.e_hsb
    entry $eHSB -textvariable ::deviceArray(hsb) -width <span class=3D"hljs=
-number">3</span> -font $flipFont -state disabled
    setBalloon $eHSB <span class=3D"hljs-string">"Hardware Byte value"</spa=
n>
    pack config $lHSB $eHSB -side left
    pack config $fHSB -side top -ipady <span class=3D"hljs-number">1</span>=
 -fill both
    <span class=3D"hljs-keyword">set</span> fBootlVer $fReadOnly.f_bootlVer
    frame $fBootlVer -relief flat
    <span class=3D"hljs-keyword">set</span> lBootlVer $fBootlVer.l_bootlVer
    label $lBootlVer -text <span class=3D"hljs-string">"Bootloader Ver."</s=
pan> -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lBootlVer <span class=3D"hljs-string">"Bootloader Version: =
read-only"</span>
    <span class=3D"hljs-keyword">set</span> eBootlVer $fBootlVer.e_bootlVer
    entry $eBootlVer -textvariable ::deviceArray(bootlVer) -width <span cla=
ss=3D"hljs-number">5</span> -font $flipFont -state disabled
    setBalloon $eBootlVer <span class=3D"hljs-string">"Bootloader Version"<=
/span>
    pack config $lBootlVer $eBootlVer -side left
    pack config $fBootlVer -side top -ipady <span class=3D"hljs-number">1</=
span> -fill both
    pack configure $fReadOnly -side top -padx <span class=3D"hljs-number">5=
</span> -fill both
    <span class=3D"hljs-keyword">set</span> fFuses .main.f_device.f_fuses
    frame $fFuses -relief groove -borderwidth <span class=3D"hljs-number">1=
</span>
    <span class=3D"hljs-keyword">set</span> bBLJB $fFuses.b_bljb
    checkbutton $bBLJB -text <span class=3D"hljs-string">"BLJB"</span> -fon=
t $flipFont -<span class=3D"hljs-keyword">variable</span> ::deviceArray(blj=
bFuse) -onvalue <span class=3D"hljs-number">0</span> -offvalue <span class=
=3D"hljs-number">1</span> -indicatoron true -state disabled
    setBalloon $bBLJB <span class=3D"hljs-string">"BootLoader Jump Bit set =
: BLJB =3D 0"</span>
    <span class=3D"hljs-keyword">set</span> bX2 $fFuses.b_x2
    checkbutton $bX2 -text <span class=3D"hljs-string">"X2"</span> -font $f=
lipFont -<span class=3D"hljs-keyword">variable</span> ::deviceArray(x2Fuse)=
 -onvalue <span class=3D"hljs-number">0</span> -offvalue <span class=3D"hlj=
s-number">1</span> -indicatoron true -state disabled
    setBalloon $bX2 <span class=3D"hljs-string">"X2 fuse bit \nSet =3D 0 / =
Unset =3D 1"</span>
    pack config $bBLJB $bX2 -side left -anchor w
    pack configure $fFuses -side top -padx <span class=3D"hljs-number">5</s=
pan> -pady <span class=3D"hljs-number">1</span> -fill both
    <span class=3D"hljs-keyword">set</span> f_BSB_SBV .main.f_device.f_bsb_=
sbv
    frame $f_BSB_SBV -relief groove -borderwidth <span class=3D"hljs-number=
">1</span>
    <span class=3D"hljs-keyword">set</span> f_BSB $f_BSB_SBV.f_bsb
    frame $f_BSB -relief flat
    <span class=3D"hljs-keyword">set</span> l_BSB $f_BSB.l_bsb
    label $l_BSB -text <span class=3D"hljs-string">"Device BSB"</span> -fon=
t $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $l_BSB <span class=3D"hljs-string">"Boot Status Byte"</span>
    <span class=3D"hljs-keyword">set</span> e_BSB $f_BSB.e_bsb
    entry $e_BSB -textvariable ::deviceArray(bsb) -width <span class=3D"hlj=
s-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0=
</span> -state disabled
    setBalloon $e_BSB <span class=3D"hljs-string">"Actual BSB value"</span>
    pack config $l_BSB $e_BSB -side left
    pack config $f_BSB -side top -ipady <span class=3D"hljs-number">1</span=
> -fill both
    <span class=3D"hljs-keyword">set</span> f_SBV $f_BSB_SBV.f_sbv
    frame $f_SBV -relief flat
    <span class=3D"hljs-keyword">set</span> l_SBV $f_SBV.l_sbv
    label $l_SBV -text <span class=3D"hljs-string">"Device SBV"</span> -fon=
t $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $l_SBV <span class=3D"hljs-string">"Software Boot Vector"</s=
pan>
    <span class=3D"hljs-keyword">set</span> e_SBV $f_SBV.e_sbv
    entry $e_SBV -textvariable ::deviceArray(sbv) -width <span class=3D"hlj=
s-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0=
</span> -state disabled
    setBalloon $e_SBV <span class=3D"hljs-string">"Actual SBV value"</span>
    <span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-number">0</=
span>} then {
	<span class=3D"hljs-keyword">set</span> bErase $fSBV.b_erase
	button $bErase -bd <span class=3D"hljs-number">3</span> -text <span class=
=3D"hljs-string">"Erase"</span> -font $flipFont -command {cmdsEraseSBVBSB} =
-state disabled -width <span class=3D"hljs-number">5</span>
	setBalloon $bErase <span class=3D"hljs-string">"Resets SBV and BSB\nto def=
ault values"</span>
    }
    pack config $l_SBV $e_SBV -side left
    pack config $f_SBV -side top -ipady <span class=3D"hljs-number">1</span=
> -fill both
    pack configure $f_BSB_SBV -side top -padx <span class=3D"hljs-number">5=
</span> -fill both
    bind $e_SBV &lt;Return&gt; {devcSetDeviceSpecialBytes}
    bind $e_BSB &lt;Return&gt; {devcSetDeviceSpecialBytes}
    <span class=3D"hljs-keyword">set</span> fSSB .main.f_device.f_ssb
    frame $fSSB -relief groove -borderwidth <span class=3D"hljs-number">1</=
span>
    <span class=3D"hljs-keyword">set</span> fInfo $fSSB.f_info
    frame $fInfo -relief flat
    <span class=3D"hljs-keyword">set</span> lSSB $fInfo.l_ssb
    label $lSSB -text <span class=3D"hljs-string">"Device SSB"</span> -font=
 $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lSSB <span class=3D"hljs-string">"Software Security Byte"</=
span>
    <span class=3D"hljs-keyword">set</span> eSSB $fInfo.e_ssb
    entry $eSSB -textvariable ::deviceArray(ssb) -width <span class=3D"hljs=
-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0<=
/span> -state disabled
    setBalloon $eSSB <span class=3D"hljs-string">"Actual SSB value"</span>
    pack config $lSSB $eSSB -side left
    pack config $fInfo -side top
    <span class=3D"hljs-keyword">set</span> fLevel0 $fSSB.f_level0
    frame $fLevel0 -relief flat
    <span class=3D"hljs-keyword">set</span> bLevel0 $fLevel0.b_level0
    radiobutton $bLevel0 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 0"</span> -value <sp=
an class=3D"hljs-number">0</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 0"</span> -state disabled
    setBalloon $bLevel0 <span class=3D"hljs-string">"Security level 0: no s=
ecurity\n (setting to levels 1 and 2 allowed)"</span>
    pack configure $bLevel0 -side left
    <span class=3D"hljs-keyword">set</span> fLevel1 $fSSB.f_level1
    frame $fLevel1 -relief flat
    <span class=3D"hljs-keyword">set</span> bLevel1 $fLevel1.b_level1
    radiobutton $bLevel1 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 1"</span> -value <sp=
an class=3D"hljs-number">1</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 1"</span> -state disabled
    setBalloon $bLevel1 <span class=3D"hljs-string">"Security level 1: no w=
riting allowed\n (setting to level 2 allowed)"</span>
    pack configure $bLevel1 -side left
    <span class=3D"hljs-keyword">set</span> fLevel2 $fSSB.f_level2
    frame $fLevel2 -relief flat
    <span class=3D"hljs-keyword">set</span> bLevel2 $fLevel2.b_level2
    radiobutton $bLevel2 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 2"</span> -value <sp=
an class=3D"hljs-number">2</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 2"</span> -state disabled
    setBalloon $bLevel2 <span class=3D"hljs-string">"Security level 2: no r=
eading/writing allowed\n (full chip erase resets security level to 0)"</spa=
n>
    pack configure $bLevel2 -side left
    pack configure $fInfo -side top -anchor w -ipady <span class=3D"hljs-nu=
mber">1</span> -fill both
    pack configure $fInfo $fLevel0 $fLevel1 $fLevel2 -side top -anchor w -f=
ill both
    pack configure $fSSB -side top -padx <span class=3D"hljs-number">5</spa=
n> -pady <span class=3D"hljs-number">1</span> -fill both
    <span class=3D"hljs-keyword">set</span> fStartApp .main.f_device.f_star=
tApp
    frame $fStartApp -relief groove -borderwidth <span class=3D"hljs-number=
">1</span>
    button $fStartApp.b_start -text <span class=3D"hljs-string">"Start Appl=
ication"</span> -bd <span class=3D"hljs-number">3</span> -font $flipFont -s=
tate disabled -command {ptclStartAppli $flipStates(withReset)}
    setBalloon $fStartApp.b_start <span class=3D"hljs-string">"Starts appli=
cation at address 0x0000"</span>
    checkbutton $fStartApp.b_reset -text <span class=3D"hljs-string">"With =
Reset"</span> -font $flipFont -<span class=3D"hljs-keyword">variable</span>=
 flipStates(withReset) -indicatoron true -state disabled
    setBalloon $fStartApp.b_reset <span class=3D"hljs-string">"If set, gene=
rates a hardware reset pulse\n  when the Start Application button is presse=
d."</span>
    pack configure $fStartApp.b_start $fStartApp.b_reset -side left -padx <=
span class=3D"hljs-number">5</span> -pady <span class=3D"hljs-number">5</sp=
an>
    pack configure $fStartApp -padx <span class=3D"hljs-number">5</span> -f=
ill both
    <span class=3D"hljs-keyword">set</span> fButtons .main.f_device.f_butto=
ns
    frame $fButtons -relief flat
    <span class=3D"hljs-keyword">set</span> bUpdate $fButtons.b_update
    button $bUpdate -bd <span class=3D"hljs-number">3</span> -text <span cl=
ass=3D"hljs-string">"Read"</span> -font $flipFont -command {devcUpdateDevic=
eFrame} -state disabled
    setBalloon $bUpdate <span class=3D"hljs-string">"Reads device special b=
ytes"</span>
    <span class=3D"hljs-keyword">set</span> bWrite $fButtons.b_write
    button $bWrite -bd <span class=3D"hljs-number">3</span> -text <span cla=
ss=3D"hljs-string">"Set"</span> -font $flipFont -command {devcSetDeviceSpec=
ialBytes} -state disabled
    setBalloon $bWrite <span class=3D"hljs-string">"Sets device special byt=
es"</span>
    pack config $bUpdate $bWrite -side left -padx <span class=3D"hljs-numbe=
r">10</span>
    <span class=3D"hljs-keyword">catch</span> [destroy .main.f_buffer.b_mem=
Select]
    pack configure $fButtons -side top -padx <span class=3D"hljs-number">35=
</span> -pady <span class=3D"hljs-number">5</span> -fill both
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> buildSk=
ipTestList</span> {protocol} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(skipList) <span c=
lass=3D"hljs-string">"  xaf-1.5  xaf-1.6  xaf-1.13  xaf-1.14  xaf-1.21  xaf=
-1.22  xaf-1.28  flash-2.23  flash-2.24  flash-2.25  flash-2.26  flash-2.27=
  flash-2.28  flash-2.29  flash-2.30  checksum-5.4  checksum-5.5  checksum-=
5.6 "</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> buildSk=
ipProcList</span> {} {
    <span class=3D"hljs-keyword">set</span> skipL {}
    <span class=3D"hljs-keyword">return</span> $skipL
}
t89c51rb2
<span class=3D"hljs-keyword">foreach</span> m $::deviceArray(memoryList) {
    cmdsImportCurrentMemoryNameSpace $m
    cmdsSetMemoryParameters
    initBuffer
}
cmdsImportCurrentMemoryNameSpace FLASH
<span class=3D"hljs-comment">#dbgEndSrc [info script]</span>
<span class=3D"hljs-comment">#dbgBeginSrc [info script]</span>
<span class=3D"hljs-keyword">global</span> projDir
<span class=3D"hljs-keyword">source</span> $projDir/tcl/devices/devices_com=
mon.tcl
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> t89c51r=
c2</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> protcl protocol nAddrBits rs=
232standard canstandard expAnsw testFlag buffer flowButtons flipFont
    <span class=3D"hljs-keyword">set</span> children_List [<span class=3D"h=
ljs-keyword">split</span> [winfo children .main.f_device]]
    <span class=3D"hljs-keyword">foreach</span> item $children_List {
	<span class=3D"hljs-keyword">if</span> {$item !=3D <span class=3D"hljs-str=
ing">".main.f_device.f_deviceName"</span>} then {
	    destroy $item
	}
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">a=
rray</span> exists ::deviceArray]} then {
	<span class=3D"hljs-keyword">array</span> <span class=3D"hljs-keyword">uns=
et</span> ::deviceArray
    }
    <span class=3D"hljs-keyword">set</span> ::deviceArray(name) <span class=
=3D"hljs-string">"AT89C51RC2"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(communicationList=
) RS232
    <span class=3D"hljs-keyword">set</span> ::deviceArray(memoryList) [<spa=
n class=3D"hljs-keyword">list</span> FLASH]
    <span class=3D"hljs-keyword">set</span> ::deviceArray(memoryColor) [<sp=
an class=3D"hljs-keyword">list</span> <span class=3D"hljs-string">"#88a67d"=
</span> <span class=3D"hljs-string">"wheat"</span>]
    <span class=3D"hljs-keyword">set</span> ::deviceArray(currentMemory) <s=
pan class=3D"hljs-string">"FLASH"</span>
    <span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keywo=
rd">eval</span> ::FLASH:: {
	<span class=3D"hljs-keyword">variable</span> deviceArray
	<span class=3D"hljs-keyword">variable</span> buffer
	<span class=3D"hljs-keyword">set</span> deviceArray(memorySize) <span clas=
s=3D"hljs-number">32</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankValue) <span clas=
s=3D"hljs-string">"FF"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erase) <span class=3D"hljs-=
string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(blankCheck) <span class=3D"=
hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseType) <span class=3D"h=
ljs-string">"full"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlocks) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock0) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock0) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock1) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock1) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock2) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock2) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock3) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock3) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock4) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock4) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(progStart) <span class=
=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(displayData) <span cla=
ss=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankCheck) <span clas=
s=3D"hljs-string">"01"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(programData) <span cla=
ss=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">namespace</span> export writeBuffer readBuffe=
r readDeviceArray initBuffer bufferChecksum
    }
    <span class=3D"hljs-keyword">foreach</span> M $::deviceArray(memoryList=
) {
	<span class=3D"hljs-keyword">proc</span> ::${M}::writeBuffer {index data} =
{
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">set</span> buffer($index) $data
	    <span class=3D"hljs-keyword">return</span>
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::readBuffer {index} {
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">return</span> $buffer($index)
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::readDeviceArray {index} {
	    <span class=3D"hljs-keyword">variable</span> deviceArray
	    <span class=3D"hljs-keyword">return</span> $deviceArray($index)
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::initBuffer {} {
	    <span class=3D"hljs-keyword">variable</span> deviceArray
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">global</span> flipStates
	    <span class=3D"hljs-keyword">set</span> max [<span class=3D"hljs-keywo=
rd">expr</span> $deviceArray(memorySize) * <span class=3D"hljs-number">1024=
</span>]
	    <span class=3D"hljs-keyword">if</span> {$flipStates(simul)} then {
		<span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">set=
</span> i <span class=3D"hljs-number">0</span>} {$i &lt; $max} {<span class=
=3D"hljs-keyword">incr</span> i} {
		    <span class=3D"hljs-keyword">set</span> buffer([<span class=3D"hljs-k=
eyword">format</span> %<span class=3D"hljs-number">06</span>X $i]) $deviceA=
rray(blankValue)
		}
	    } else {
		initBuffer_C $max $deviceArray(blankValue)
	    }
	    <span class=3D"hljs-keyword">return</span>
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::bufferChecksum {} {
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">global</span> flipStates
	    <span class=3D"hljs-keyword">set</span> min $buffer(minProgAddr)
	    <span class=3D"hljs-keyword">set</span> max $buffer(maxProgAddr)
	    <span class=3D"hljs-keyword">if</span> {$flipStates(simul)} then {
		<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0x=
CAFEFADE</span>
	    } else {
		<span class=3D"hljs-keyword">return</span> [computeBufferChecksum_C $min =
$max]
	    }
	}
    }
    <span class=3D"hljs-keyword">set</span> ::deviceArray(specialSynchro) <=
span class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(RS232ProtocolsLis=
t) <span class=3D"hljs-string">"Standard Enhanced"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev0) [<span cla=
ss=3D"hljs-keyword">list</span> FF]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev0Test) <span =
class=3D"hljs-string">"FF"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev1) [<span cla=
ss=3D"hljs-keyword">list</span> FE]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev1Test) <span =
class=3D"hljs-string">"FE"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev2) [<span cla=
ss=3D"hljs-keyword">list</span> FC XX]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev2Test) [<span=
 class=3D"hljs-keyword">list</span> FC]
    <span class=3D"hljs-keyword">set</span> expAnsw(readManufId) <span clas=
s=3D"hljs-number">58</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId1) XX
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId2) XX
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId3) XX
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock0) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock1) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock2) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock3) <span cla=
ss=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock4) <span cla=
ss=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> testFlag(readDevBootId1) <span =
class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(readDevBootId2) <span =
class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(sbv) <span class=3D"hl=
js-string">"FC"</span>
    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">=
tcltest</span>::testConstraints(eraseBlockPossible) <span class=3D"hljs-num=
ber">1</span>
    .main.f_device.f_deviceName.l_device configure -text $::deviceArray(nam=
e)
    .main.f_device.f_deviceName configure -relief groove
    <span class=3D"hljs-keyword">set</span> fBlocks .deviceErase.f_erase.f_=
blocks
    <span class=3D"hljs-keyword">set</span> bBlock0 $fBlocks.b_block0
    <span class=3D"hljs-keyword">set</span> bBlock1 $fBlocks.b_block1
    <span class=3D"hljs-keyword">set</span> bBlock2 $fBlocks.b_block2
    setBalloon $bBlock0 <span class=3D"hljs-string">"Erase memory between 0=
000 and 1FFF"</span>
    setBalloon $bBlock1 <span class=3D"hljs-string">"Erase memory between 2=
000 and 3FFF"</span>
    setBalloon $bBlock2 <span class=3D"hljs-string">"Erase memory between 4=
000 and 7FFF"</span>
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(sbv)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(sbv) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(bsb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(bsb) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(ssb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(ssb) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(hsb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(hsb) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(eb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(eb) <span class=3D"h=
ljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(deviceBootId1)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(deviceBootId1) <span=
 class=3D"hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(deviceBootId2)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(deviceBootId2) <span=
 class=3D"hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(oscFuse)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(oscFuse) <span class=
=3D"hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(bljbFuse)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(bljbFuse) <span clas=
s=3D"hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(x2Fuse)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(x2Fuse) <span class=
=3D"hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(level)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(level) X
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(eraseType)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(eraseType) <span cla=
ss=3D"hljs-string">"full"</span>
    }
    <span class=3D"hljs-keyword">set</span> nAddrBits <span class=3D"hljs-n=
umber">4</span>
    <span class=3D"hljs-keyword">set</span> rs232standard(readHwByte) <span=
 class=3D"hljs-string">":020000050B00EE"</span>
    <span class=3D"hljs-keyword">set</span> rs232standard(readBootlVer) <sp=
an class=3D"hljs-string">":020000050F00EA"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowErase) <span =
class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowBlankCheck) <=
span class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowProgram) <spa=
n class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowVerify) <span=
 class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowSpecialBytes)=
 <span class=3D"hljs-number">0</span>
    wm title .deviceErase <span class=3D"hljs-string">"$::deviceArray(name)=
 Erase"</span>
    .deviceErase.f_erase.f_blocks.b_blockErase configure -state normal
    <span class=3D"hljs-keyword">set</span> fReadOnly .main.f_device.f_read=
Only
    frame $fReadOnly -relief groove -borderwidth <span class=3D"hljs-number=
">1</span>
    <span class=3D"hljs-keyword">set</span> fManufId $fReadOnly.f_manufId
    frame $fManufId -relief flat
    <span class=3D"hljs-keyword">set</span> lManufId $fManufId.l_manufId
    label $lManufId -text <span class=3D"hljs-string">"Manufact. Id"</span>=
 -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lManufId <span class=3D"hljs-string">"Manufacturer Id: read=
-only"</span>
    <span class=3D"hljs-keyword">set</span> eManufId $fManufId.e_manufId
    entry $eManufId -textvariable ::deviceArray(manufId) -width <span class=
=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eManufId <span class=3D"hljs-string">"Manufacturer Id value=
"</span>
    pack config $lManufId $eManufId -side left
    pack config $fManufId -side top -ipady <span class=3D"hljs-number">1</s=
pan> -fill both
    <span class=3D"hljs-keyword">set</span> fDeviceIds $fReadOnly.f_deviceI=
ds
    frame $fDeviceIds -relief flat
    <span class=3D"hljs-keyword">set</span> lDeviceIds $fDeviceIds.l_device=
Ids
    label $lDeviceIds -text <span class=3D"hljs-string">"Device Ids"</span>=
 -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lDeviceIds <span class=3D"hljs-string">"Ids 1, 2, 3: read-o=
nly"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceId1 $fDeviceIds.e_device=
Id1
    entry $eDeviceId1 -textvariable ::deviceArray(deviceId1) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId1 <span class=3D"hljs-string">"Id 1 value"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceId2 $fDeviceIds.e_device=
Id2
    entry $eDeviceId2 -textvariable ::deviceArray(deviceId2) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId2 <span class=3D"hljs-string">"Id 2 value"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceId3 $fDeviceIds.e_device=
Id3
    entry $eDeviceId3 -textvariable ::deviceArray(deviceId3) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId3 <span class=3D"hljs-string">"Id 3 value"</span>
    pack config $lDeviceIds $eDeviceId1 -side left
    pack config $eDeviceId2 -padx <span class=3D"hljs-number">2</span> -sid=
e left
    pack config $eDeviceId3 -side left
    pack config $fDeviceIds -side top -ipady <span class=3D"hljs-number">1<=
/span> -fill both
    <span class=3D"hljs-keyword">set</span> fDeviceBootIds $fReadOnly.f_dev=
iceBootIds
    frame $fDeviceBootIds -relief flat
    <span class=3D"hljs-keyword">set</span> lDeviceBootIds $fDeviceBootIds.=
l_deviceBootIds
    label $lDeviceBootIds -text <span class=3D"hljs-string">"Device Boot Id=
s"</span> -font $flipFont -anchor w -width <span class=3D"hljs-number">16</=
span>
    setBalloon $lDeviceBootIds <span class=3D"hljs-string">"Boot Ids 1, 2: =
read-only"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceBootId1 $fDeviceBootIds.=
e_deviceBootId1
    entry $eDeviceBootId1 -textvariable ::deviceArray(deviceBootId1) -width=
 <span class=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceBootId1 <span class=3D"hljs-string">"Boot Id 1 value=
"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceBootId2 $fDeviceBootIds.=
e_deviceBootId2
    entry $eDeviceBootId2 -textvariable ::deviceArray(deviceBootId2) -width=
 <span class=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceBootId2 <span class=3D"hljs-string">"Boot Id 2 value=
"</span>
    pack config $lDeviceBootIds $eDeviceBootId1 -side left
    pack config $eDeviceBootId2 -padx <span class=3D"hljs-number">2</span> =
-side left
    pack config $fDeviceBootIds -side top -ipady <span class=3D"hljs-number=
">1</span> -fill both
    <span class=3D"hljs-keyword">set</span> fHSB $fReadOnly.f_hsb
    frame $fHSB -relief flat
    <span class=3D"hljs-keyword">set</span> lHSB $fHSB.l_hsb
    label $lHSB -text <span class=3D"hljs-string">"HSB"</span> -font $flipF=
ont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lHSB <span class=3D"hljs-string">"Hardware Security Byte: r=
ead-only"</span>
    <span class=3D"hljs-keyword">set</span> eHSB $fHSB.e_hsb
    entry $eHSB -textvariable ::deviceArray(hsb) -width <span class=3D"hljs=
-number">3</span> -font $flipFont -state disabled
    setBalloon $eHSB <span class=3D"hljs-string">"Hardware Byte value"</spa=
n>
    pack config $lHSB $eHSB -side left
    pack config $fHSB -side top -ipady <span class=3D"hljs-number">1</span>=
 -fill both
    <span class=3D"hljs-keyword">set</span> fBootlVer $fReadOnly.f_bootlVer
    frame $fBootlVer -relief flat
    <span class=3D"hljs-keyword">set</span> lBootlVer $fBootlVer.l_bootlVer
    label $lBootlVer -text <span class=3D"hljs-string">"Bootloader Ver."</s=
pan> -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lBootlVer <span class=3D"hljs-string">"Bootloader Version: =
read-only"</span>
    <span class=3D"hljs-keyword">set</span> eBootlVer $fBootlVer.e_bootlVer
    entry $eBootlVer -textvariable ::deviceArray(bootlVer) -width <span cla=
ss=3D"hljs-number">5</span> -font $flipFont -state disabled
    setBalloon $eBootlVer <span class=3D"hljs-string">"Bootloader Version"<=
/span>
    pack config $lBootlVer $eBootlVer -side left
    pack config $fBootlVer -side top -ipady <span class=3D"hljs-number">1</=
span> -fill both
    pack configure $fReadOnly -side top -padx <span class=3D"hljs-number">5=
</span> -fill both
    <span class=3D"hljs-keyword">set</span> fFuses .main.f_device.f_fuses
    frame $fFuses -relief groove -borderwidth <span class=3D"hljs-number">1=
</span>
    <span class=3D"hljs-keyword">set</span> bBLJB $fFuses.b_bljb
    checkbutton $bBLJB -text <span class=3D"hljs-string">"BLJB"</span> -fon=
t $flipFont -<span class=3D"hljs-keyword">variable</span> ::deviceArray(blj=
bFuse) -onvalue <span class=3D"hljs-number">0</span> -offvalue <span class=
=3D"hljs-number">1</span> -indicatoron true -state disabled
    setBalloon $bBLJB <span class=3D"hljs-string">"BootLoader Jump Bit set =
: BLJB =3D 0"</span>
    <span class=3D"hljs-keyword">set</span> bX2 $fFuses.b_x2
    checkbutton $bX2 -text <span class=3D"hljs-string">"X2"</span> -font $f=
lipFont -<span class=3D"hljs-keyword">variable</span> ::deviceArray(x2Fuse)=
 -onvalue <span class=3D"hljs-number">0</span> -offvalue <span class=3D"hlj=
s-number">1</span> -indicatoron true -state disabled
    setBalloon $bX2 <span class=3D"hljs-string">"X2 fuse bit \nSet =3D 0 / =
Unset =3D 1"</span>
    pack config $bBLJB $bX2 -side left -anchor w
    pack configure $fFuses -side top -padx <span class=3D"hljs-number">5</s=
pan> -pady <span class=3D"hljs-number">1</span> -fill both
    <span class=3D"hljs-keyword">set</span> f_BSB_SBV .main.f_device.f_bsb_=
sbv
    frame $f_BSB_SBV -relief groove -borderwidth <span class=3D"hljs-number=
">1</span>
    <span class=3D"hljs-keyword">set</span> f_BSB $f_BSB_SBV.f_bsb
    frame $f_BSB -relief flat
    <span class=3D"hljs-keyword">set</span> l_BSB $f_BSB.l_bsb
    label $l_BSB -text <span class=3D"hljs-string">"Device BSB"</span> -fon=
t $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $l_BSB <span class=3D"hljs-string">"Boot Status Byte"</span>
    <span class=3D"hljs-keyword">set</span> e_BSB $f_BSB.e_bsb
    entry $e_BSB -textvariable ::deviceArray(bsb) -width <span class=3D"hlj=
s-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0=
</span> -state disabled
    setBalloon $e_BSB <span class=3D"hljs-string">"Actual BSB value"</span>
    pack config $l_BSB $e_BSB -side left
    pack config $f_BSB -side top -ipady <span class=3D"hljs-number">1</span=
> -fill both
    <span class=3D"hljs-keyword">set</span> f_SBV $f_BSB_SBV.f_sbv
    frame $f_SBV -relief flat
    <span class=3D"hljs-keyword">set</span> l_SBV $f_SBV.l_sbv
    label $l_SBV -text <span class=3D"hljs-string">"Device SBV"</span> -fon=
t $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $l_SBV <span class=3D"hljs-string">"Software Boot Vector"</s=
pan>
    <span class=3D"hljs-keyword">set</span> e_SBV $f_SBV.e_sbv
    entry $e_SBV -textvariable ::deviceArray(sbv) -width <span class=3D"hlj=
s-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0=
</span> -state disabled
    setBalloon $e_SBV <span class=3D"hljs-string">"Actual SBV value"</span>
    <span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-number">0</=
span>} then {
	<span class=3D"hljs-keyword">set</span> bErase $fSBV.b_erase
	button $bErase -bd <span class=3D"hljs-number">3</span> -text <span class=
=3D"hljs-string">"Erase"</span> -font $flipFont -command {cmdsEraseSBVBSB} =
-state disabled -width <span class=3D"hljs-number">5</span>
	setBalloon $bErase <span class=3D"hljs-string">"Resets SBV and BSB\nto def=
ault values"</span>
    }
    pack config $l_SBV $e_SBV -side left
    pack config $f_SBV -side top -ipady <span class=3D"hljs-number">1</span=
> -fill both
    pack configure $f_BSB_SBV -side top -padx <span class=3D"hljs-number">5=
</span> -fill both
    bind $e_SBV &lt;Return&gt; {devcSetDeviceSpecialBytes}
    bind $e_BSB &lt;Return&gt; {devcSetDeviceSpecialBytes}
    <span class=3D"hljs-keyword">set</span> fSSB .main.f_device.f_ssb
    frame $fSSB -relief groove -borderwidth <span class=3D"hljs-number">1</=
span>
    <span class=3D"hljs-keyword">set</span> fInfo $fSSB.f_info
    frame $fInfo -relief flat
    <span class=3D"hljs-keyword">set</span> lSSB $fInfo.l_ssb
    label $lSSB -text <span class=3D"hljs-string">"Device SSB"</span> -font=
 $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lSSB <span class=3D"hljs-string">"Software Security Byte"</=
span>
    <span class=3D"hljs-keyword">set</span> eSSB $fInfo.e_ssb
    entry $eSSB -textvariable ::deviceArray(ssb) -width <span class=3D"hljs=
-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0<=
/span> -state disabled
    setBalloon $eSSB <span class=3D"hljs-string">"Actual SSB value"</span>
    pack config $lSSB $eSSB -side left
    pack config $fInfo -side top
    <span class=3D"hljs-keyword">set</span> fLevel0 $fSSB.f_level0
    frame $fLevel0 -relief flat
    <span class=3D"hljs-keyword">set</span> bLevel0 $fLevel0.b_level0
    radiobutton $bLevel0 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 0"</span> -value <sp=
an class=3D"hljs-number">0</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 0"</span> -state disabled
    setBalloon $bLevel0 <span class=3D"hljs-string">"Security level 0: no s=
ecurity\n (setting to levels 1 and 2 allowed)"</span>
    pack configure $bLevel0 -side left
    <span class=3D"hljs-keyword">set</span> fLevel1 $fSSB.f_level1
    frame $fLevel1 -relief flat
    <span class=3D"hljs-keyword">set</span> bLevel1 $fLevel1.b_level1
    radiobutton $bLevel1 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 1"</span> -value <sp=
an class=3D"hljs-number">1</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 1"</span> -state disabled
    setBalloon $bLevel1 <span class=3D"hljs-string">"Security level 1: no w=
riting allowed\n (setting to level 2 allowed)"</span>
    pack configure $bLevel1 -side left
    <span class=3D"hljs-keyword">set</span> fLevel2 $fSSB.f_level2
    frame $fLevel2 -relief flat
    <span class=3D"hljs-keyword">set</span> bLevel2 $fLevel2.b_level2
    radiobutton $bLevel2 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 2"</span> -value <sp=
an class=3D"hljs-number">2</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 2"</span> -state disabled
    setBalloon $bLevel2 <span class=3D"hljs-string">"Security level 2: no r=
eading/writing allowed\n (full chip erase resets security level to 0)"</spa=
n>
    pack configure $bLevel2 -side left
    pack configure $fInfo -side top -anchor w -ipady <span class=3D"hljs-nu=
mber">1</span> -fill both
    pack configure $fInfo $fLevel0 $fLevel1 $fLevel2 -side top -anchor w -f=
ill both
    pack configure $fSSB -side top -padx <span class=3D"hljs-number">5</spa=
n> -pady <span class=3D"hljs-number">1</span> -fill both
    <span class=3D"hljs-keyword">set</span> fStartApp .main.f_device.f_star=
tApp
    frame $fStartApp -relief groove -borderwidth <span class=3D"hljs-number=
">1</span>
    button $fStartApp.b_start -text <span class=3D"hljs-string">"Start Appl=
ication"</span> -bd <span class=3D"hljs-number">3</span> -font $flipFont -s=
tate disabled -command {ptclStartAppli $flipStates(withReset)}
    setBalloon $fStartApp.b_start <span class=3D"hljs-string">"Starts appli=
cation at address 0x0000"</span>
    checkbutton $fStartApp.b_reset -text <span class=3D"hljs-string">"With =
Reset"</span> -font $flipFont -<span class=3D"hljs-keyword">variable</span>=
 flipStates(withReset) -indicatoron true -state disabled
    setBalloon $fStartApp.b_reset <span class=3D"hljs-string">"If set, gene=
rates a hardware reset pulse\n  when the Start Application button is presse=
d."</span>
    pack configure $fStartApp.b_start $fStartApp.b_reset -side left -padx <=
span class=3D"hljs-number">5</span> -pady <span class=3D"hljs-number">5</sp=
an>
    pack configure $fStartApp -padx <span class=3D"hljs-number">5</span> -f=
ill both
    <span class=3D"hljs-keyword">set</span> fButtons .main.f_device.f_butto=
ns
    frame $fButtons -relief flat
    <span class=3D"hljs-keyword">set</span> bUpdate $fButtons.b_update
    button $bUpdate -bd <span class=3D"hljs-number">3</span> -text <span cl=
ass=3D"hljs-string">"Read"</span> -font $flipFont -command {devcUpdateDevic=
eFrame} -state disabled
    setBalloon $bUpdate <span class=3D"hljs-string">"Reads device special b=
ytes"</span>
    <span class=3D"hljs-keyword">set</span> bWrite $fButtons.b_write
    button $bWrite -bd <span class=3D"hljs-number">3</span> -text <span cla=
ss=3D"hljs-string">"Set"</span> -font $flipFont -command {devcSetDeviceSpec=
ialBytes} -state disabled
    setBalloon $bWrite <span class=3D"hljs-string">"Sets device special byt=
es"</span>
    pack config $bUpdate $bWrite -side left -padx <span class=3D"hljs-numbe=
r">10</span>
    <span class=3D"hljs-keyword">catch</span> [destroy .main.f_buffer.b_mem=
Select]
    pack configure $fButtons -side top -padx <span class=3D"hljs-number">35=
</span> -pady <span class=3D"hljs-number">5</span> -fill both
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> buildSk=
ipTestList</span> {protocol} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(skipList) <span c=
lass=3D"hljs-string">"  xaf-1.5  xaf-1.6  xaf-1.13  xaf-1.14  xaf-1.21  xaf=
-1.22  xaf-1.28  flash-2.23.1  flash-2.26  flash-2.27  flash-2.28  flash-2.=
29  flash-2.30  checksum-5.5  checksum-5.6 "</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> buildSk=
ipProcList</span> {} {
    <span class=3D"hljs-keyword">set</span> skipL {}
    <span class=3D"hljs-keyword">return</span> $skipL
}
t89c51rc2
<span class=3D"hljs-keyword">foreach</span> m $::deviceArray(memoryList) {
    cmdsImportCurrentMemoryNameSpace $m
    cmdsSetMemoryParameters
    initBuffer
}
cmdsImportCurrentMemoryNameSpace FLASH
<span class=3D"hljs-comment">#dbgEndSrc [info script]</span>
<span class=3D"hljs-comment">#dbgBeginSrc [info script]</span>
<span class=3D"hljs-keyword">global</span> projDir
<span class=3D"hljs-keyword">source</span> $projDir/tcl/devices/devices_com=
mon.tcl
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> at89c51=
rd2</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> protcl protocol nAddrBits fl=
ipFont rs232standard canstandard expAnsw testFlag buffer flowButtons flipSt=
ates
    <span class=3D"hljs-keyword">set</span> children_List [<span class=3D"h=
ljs-keyword">split</span> [winfo children .main.f_device]]
    <span class=3D"hljs-keyword">foreach</span> item $children_List {
	<span class=3D"hljs-keyword">if</span> {$item !=3D <span class=3D"hljs-str=
ing">".main.f_device.f_deviceName"</span>} then {
	    destroy $item
	}
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">a=
rray</span> exists ::deviceArray]} then {
	<span class=3D"hljs-keyword">array</span> <span class=3D"hljs-keyword">uns=
et</span> ::deviceArray
    }
    <span class=3D"hljs-keyword">set</span> ::deviceArray(name) <span class=
=3D"hljs-string">"AT89C51RD2"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(communicationList=
) <span class=3D"hljs-string">"RS232"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(memoryList) [<spa=
n class=3D"hljs-keyword">list</span> FLASH EEPROM]
    <span class=3D"hljs-keyword">set</span> ::deviceArray(memoryButtonList)=
 [<span class=3D"hljs-keyword">list</span> <span class=3D"hljs-string">"Sel=
ect EEPROM"</span> <span class=3D"hljs-string">"Select FLASH"</span>]
    <span class=3D"hljs-keyword">set</span> ::deviceArray(memoryColor) [<sp=
an class=3D"hljs-keyword">list</span> <span class=3D"hljs-string">"#88a67d"=
</span> <span class=3D"hljs-string">"wheat"</span>]
    <span class=3D"hljs-keyword">set</span> ::deviceArray(currentMemory) <s=
pan class=3D"hljs-string">"FLASH"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(currentMemoryButt=
on) <span class=3D"hljs-string">"Select EEPROM"</span>
    <span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keywo=
rd">eval</span> ::FLASH:: {
	<span class=3D"hljs-keyword">variable</span> deviceArray
	<span class=3D"hljs-keyword">variable</span> buffer
	<span class=3D"hljs-keyword">set</span> deviceArray(memorySize) <span clas=
s=3D"hljs-number">64</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankValue) <span clas=
s=3D"hljs-string">"FF"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erase) <span class=3D"hljs-=
string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(blankCheck) <span class=3D"=
hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseType) <span class=3D"h=
ljs-string">"full"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlocks) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock0) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock0) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock1) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock1) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock2) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock2) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock3) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock3) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock4) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock4) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(displayData) <span cla=
ss=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankCheck) <span clas=
s=3D"hljs-string">"01"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(programData) <span cla=
ss=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">namespace</span> export writeBuffer readBuffe=
r readDeviceArray initBuffer bufferChecksum
    }
    <span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keywo=
rd">eval</span> ::EEPROM:: {
	<span class=3D"hljs-keyword">variable</span> deviceArray
	<span class=3D"hljs-keyword">variable</span> buffer
	<span class=3D"hljs-keyword">set</span> deviceArray(memorySize) <span clas=
s=3D"hljs-number">2</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankValue) <span clas=
s=3D"hljs-string">"FF"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erase) <span class=3D"hljs-=
string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(blankCheck) <span class=3D"=
hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseType) <span class=3D"h=
ljs-string">"full"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlocks) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock0) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock0) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock1) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock1) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock2) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock2) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock3) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock3) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock4) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock4) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(displayData) <span cla=
ss=3D"hljs-string">"02"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankCheck) <span clas=
s=3D"hljs-string">"XX"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(programData) <span cla=
ss=3D"hljs-string">"07"</span>
	<span class=3D"hljs-keyword">namespace</span> export writeBuffer readBuffe=
r readDeviceArray initBuffer bufferChecksum
    }
    <span class=3D"hljs-keyword">foreach</span> M $::deviceArray(memoryList=
) {
	<span class=3D"hljs-keyword">proc</span> ::${M}::writeBuffer {index data} =
{
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">set</span> buffer($index) $data
	    <span class=3D"hljs-keyword">return</span>
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::readBuffer {index} {
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">return</span> $buffer($index)
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::readDeviceArray {index} {
	    <span class=3D"hljs-keyword">variable</span> deviceArray
	    <span class=3D"hljs-keyword">return</span> $deviceArray($index)
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::initBuffer {} {
	    <span class=3D"hljs-keyword">variable</span> deviceArray
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">global</span> flipStates
	    <span class=3D"hljs-keyword">set</span> max [<span class=3D"hljs-keywo=
rd">expr</span> $deviceArray(memorySize) * <span class=3D"hljs-number">1024=
</span>]
	    <span class=3D"hljs-keyword">if</span> {$flipStates(simul)} then {
		<span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">set=
</span> i <span class=3D"hljs-number">0</span>} {$i &lt; $max} {<span class=
=3D"hljs-keyword">incr</span> i} {
		    <span class=3D"hljs-keyword">set</span> buffer([<span class=3D"hljs-k=
eyword">format</span> %<span class=3D"hljs-number">06</span>X $i]) $deviceA=
rray(blankValue)
		}
	    } else {
		initBuffer_C $max $deviceArray(blankValue)
	    }
	    <span class=3D"hljs-keyword">return</span>
	}
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::F=
LASH::bufferChecksum</span> {} {
	<span class=3D"hljs-keyword">variable</span> buffer
	<span class=3D"hljs-keyword">global</span> flipStates
	<span class=3D"hljs-keyword">set</span> min $buffer(minProgAddr)
	<span class=3D"hljs-keyword">set</span> max $buffer(maxProgAddr)
	<span class=3D"hljs-keyword">if</span> {$flipStates(simul)} then {
	    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number"=
>0xCAFEFADE</span>
	} else {
	    <span class=3D"hljs-keyword">return</span> [computeBufferChecksum_C $m=
in $max]
	}
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::E=
EPROM::bufferChecksum</span> {} {
	<span class=3D"hljs-keyword">variable</span> buffer
	<span class=3D"hljs-keyword">global</span> flipStates
	<span class=3D"hljs-keyword">set</span> min $buffer(minProgAddr)
	<span class=3D"hljs-keyword">set</span> max $buffer(maxProgAddr)
	<span class=3D"hljs-keyword">if</span> {$flipStates(simul)} then {
	    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number"=
>0xDEADBEEF</span>
	} else {
	    <span class=3D"hljs-keyword">return</span> [computeBufferChecksum_C $m=
in $max]
	}
    }
    <span class=3D"hljs-keyword">set</span> ::deviceArray(jumpAdd) <span cl=
ass=3D"hljs-string">"0000"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(specialSynchro) <=
span class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(RS232ProtocolsLis=
t) <span class=3D"hljs-string">"Standard"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(CANProtocolsList)=
 <span class=3D"hljs-string">"Standard Enhanced"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev0) [<span cla=
ss=3D"hljs-keyword">list</span> FF]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev0Test) <span =
class=3D"hljs-string">"FF"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev1) [<span cla=
ss=3D"hljs-keyword">list</span> FE]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev1Test) <span =
class=3D"hljs-string">"FE"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev2) [<span cla=
ss=3D"hljs-keyword">list</span> FC XX]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev2Test) <span =
class=3D"hljs-string">"FC"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readManufId) <span clas=
s=3D"hljs-number">58</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId1) XX
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId2) XX
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId3) XX
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock0) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock1) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock2) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock3) <span cla=
ss=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock4) <span cla=
ss=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> testFlag(readDevBootId1) <span =
class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(readDevBootId2) <span =
class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(sbv) <span class=3D"hl=
js-string">"FC"</span>
    <span class=3D"hljs-keyword">set</span> fBlocks .deviceErase.f_erase.f_=
blocks
    <span class=3D"hljs-keyword">set</span> bBlock0 $fBlocks.b_block0
    <span class=3D"hljs-keyword">set</span> bBlock1 $fBlocks.b_block1
    <span class=3D"hljs-keyword">set</span> bBlock2 $fBlocks.b_block2
    <span class=3D"hljs-keyword">set</span> bBlock3 $fBlocks.b_block3
    <span class=3D"hljs-keyword">set</span> bBlock4 $fBlocks.b_block4
    setBalloon $bBlock0 <span class=3D"hljs-string">"Erase memory between 0=
000 and 1FFF"</span>
    setBalloon $bBlock1 <span class=3D"hljs-string">"Erase memory between 2=
000 and 3FFF"</span>
    setBalloon $bBlock2 <span class=3D"hljs-string">"Erase memory between 4=
000 and 7FFF"</span>
    $bBlock3 configure -state disabled
    $bBlock4 configure -state disabled
    .main.f_device.f_deviceName.l_device configure -text $::deviceArray(nam=
e)
    .main.f_device.f_deviceName configure -relief groove
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(sbv)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(sbv) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(bsb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(bsb) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(ssb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(ssb) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(hsb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(hsb) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(eb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(eb) <span class=3D"h=
ljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(deviceBootId1)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(deviceBootId1) <span=
 class=3D"hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(deviceBootId2)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(deviceBootId2) <span=
 class=3D"hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(oscFuse)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(oscFuse) <span class=
=3D"hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(bljbFuse)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(bljbFuse) <span clas=
s=3D"hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(x2Fuse)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(x2Fuse) <span class=
=3D"hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(level)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(level) X
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(eraseType)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(eraseType) <span cla=
ss=3D"hljs-string">"full"</span>
    }
    <span class=3D"hljs-keyword">set</span> nAddrBits <span class=3D"hljs-n=
umber">4</span>
    <span class=3D"hljs-keyword">set</span> rs232standard(readHwByte) <span=
 class=3D"hljs-string">":020000050B00EE"</span>
    <span class=3D"hljs-keyword">set</span> rs232standard(readBootlVer) <sp=
an class=3D"hljs-string">":020000050F00EA"</span>
    <span class=3D"hljs-keyword">set</span> protocol(frameLengthW) <span cl=
ass=3D"hljs-number">128</span>
    <span class=3D"hljs-keyword">set</span> protocol(frameLengthR) <span cl=
ass=3D"hljs-number">16</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowErase) <span =
class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowBlankCheck) <=
span class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowProgram) <spa=
n class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowVerify) <span=
 class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowSpecialBytes)=
 <span class=3D"hljs-number">0</span>
    wm title .deviceErase <span class=3D"hljs-string">"$::deviceArray(name)=
 Erase"</span>
    .deviceErase.f_erase.f_blocks.b_blockErase configure -state normal
    <span class=3D"hljs-keyword">set</span> fReadOnly .main.f_device.f_read=
Only
    frame $fReadOnly -relief groove -borderwidth <span class=3D"hljs-number=
">1</span>
    <span class=3D"hljs-keyword">set</span> fManufId $fReadOnly.f_manufId
    frame $fManufId -relief flat
    <span class=3D"hljs-keyword">set</span> lManufId $fManufId.l_manufId
    label $lManufId -text <span class=3D"hljs-string">"Manufact. Id"</span>=
 -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    <span class=3D"hljs-keyword">set</span> eManufId $fManufId.e_manufId
    entry $eManufId -textvariable ::deviceArray(manufId) -width <span class=
=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eManufId <span class=3D"hljs-string">"Manufacturer code val=
ue"</span>
    pack config $lManufId $eManufId -padx <span class=3D"hljs-number">1</sp=
an> -side left
    pack config $fManufId -side top -ipady <span class=3D"hljs-number">1</s=
pan> -fill both
    <span class=3D"hljs-keyword">set</span> fDeviceIds $fReadOnly.f_deviceI=
ds
    frame $fDeviceIds -relief flat
    <span class=3D"hljs-keyword">set</span> lDeviceIds $fDeviceIds.l_device=
Ids
    label $lDeviceIds -text <span class=3D"hljs-string">"Device Ids"</span>=
 -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    <span class=3D"hljs-keyword">set</span> eDeviceId1 $fDeviceIds.e_device=
Id1
    entry $eDeviceId1 -textvariable ::deviceArray(deviceId1) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId1 <span class=3D"hljs-string">"Family code value"<=
/span>
    <span class=3D"hljs-keyword">set</span> eDeviceId2 $fDeviceIds.e_device=
Id2
    entry $eDeviceId2 -textvariable ::deviceArray(deviceId2) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId2 <span class=3D"hljs-string">"Device name code"</=
span>
    <span class=3D"hljs-keyword">set</span> eDeviceId3 $fDeviceIds.e_device=
Id3
    entry $eDeviceId3 -textvariable ::deviceArray(deviceId3) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId3 <span class=3D"hljs-string">"Device revision num=
ber"</span>
    pack config $lDeviceIds $eDeviceId1 $eDeviceId2 $eDeviceId3 -padx <span=
 class=3D"hljs-number">1</span> -side left
    pack config $fDeviceIds -side top -ipady <span class=3D"hljs-number">1<=
/span> -fill both
    <span class=3D"hljs-keyword">set</span> fDeviceBootIds $fReadOnly.f_dev=
iceBootIds
    frame $fDeviceBootIds -relief flat
    <span class=3D"hljs-keyword">set</span> lDeviceBootIds $fDeviceBootIds.=
l_deviceBootIds
    label $lDeviceBootIds -text <span class=3D"hljs-string">"Device Boot Id=
s"</span> -font $flipFont -anchor w -width <span class=3D"hljs-number">16</=
span>
    setBalloon $lDeviceBootIds <span class=3D"hljs-string">"Boot Ids 1, 2: =
read-only"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceBootId1 $fDeviceBootIds.=
e_deviceBootId1
    entry $eDeviceBootId1 -textvariable ::deviceArray(deviceBootId1) -width=
 <span class=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceBootId1 <span class=3D"hljs-string">"Boot Id 1 value=
"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceBootId2 $fDeviceBootIds.=
e_deviceBootId2
    entry $eDeviceBootId2 -textvariable ::deviceArray(deviceBootId2) -width=
 <span class=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceBootId2 <span class=3D"hljs-string">"Boot Id 2 value=
"</span>
    pack config $lDeviceBootIds $eDeviceBootId1 $eDeviceBootId2 -padx <span=
 class=3D"hljs-number">1</span> -side left
    pack config $fDeviceBootIds -side top -ipady <span class=3D"hljs-number=
">1</span> -fill both
    <span class=3D"hljs-keyword">set</span> fHSB $fReadOnly.f_hsb
    frame $fHSB -relief flat
    <span class=3D"hljs-keyword">set</span> lHSB $fHSB.l_hsb
    label $lHSB -text <span class=3D"hljs-string">"Hardware Byte"</span> -f=
ont $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lHSB <span class=3D"hljs-string">"Hardware Security Byte: r=
ead-only"</span>
    <span class=3D"hljs-keyword">set</span> eHSB $fHSB.e_hsb
    entry $eHSB -textvariable ::deviceArray(hsb) -width <span class=3D"hljs=
-number">3</span> -font $flipFont -state disabled
    setBalloon $eHSB <span class=3D"hljs-string">"Hardware Security Byte va=
lue"</span>
    pack config $lHSB $eHSB -padx <span class=3D"hljs-number">1</span> -sid=
e left
    pack config $fHSB -side top -ipady <span class=3D"hljs-number">1</span>=
 -fill both
    <span class=3D"hljs-keyword">set</span> fBootlVer $fReadOnly.f_bootlVer
    frame $fBootlVer -relief flat
    <span class=3D"hljs-keyword">set</span> lBootlVer $fBootlVer.l_bootlVer
    label $lBootlVer -text <span class=3D"hljs-string">"Bootloader Ver."</s=
pan> -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lBootlVer <span class=3D"hljs-string">"Bootloader Version: =
read-only"</span>
    <span class=3D"hljs-keyword">set</span> eBootlVer $fBootlVer.e_bootlVer
    entry $eBootlVer -textvariable ::deviceArray(bootlVer) -width <span cla=
ss=3D"hljs-number">5</span> -font $flipFont -state disabled
    setBalloon $eBootlVer <span class=3D"hljs-string">"Bootloader Version"<=
/span>
    pack config $lBootlVer $eBootlVer -padx <span class=3D"hljs-number">1</=
span> -side left
    pack config $fBootlVer -side top -ipady <span class=3D"hljs-number">1</=
span> -fill both
    pack configure $fReadOnly -side top -padx <span class=3D"hljs-number">5=
</span> -fill both
    <span class=3D"hljs-keyword">set</span> fFuses .main.f_device.f_fuses
    frame $fFuses -relief groove -borderwidth <span class=3D"hljs-number">1=
</span>
    <span class=3D"hljs-keyword">set</span> bOsc $fFuses.b_osc
    checkbutton $bOsc -text <span class=3D"hljs-string">"Osc. B"</span> -fo=
nt $flipFont -<span class=3D"hljs-keyword">variable</span> ::deviceArray(os=
cFuse) -onvalue <span class=3D"hljs-number">0</span> -offvalue <span class=
=3D"hljs-number">1</span> -indicatoron true -state disabled
    setBalloon $bOsc <span class=3D"hljs-string">"Osc. B set : Osc B =3D 0"=
</span>
    <span class=3D"hljs-keyword">set</span> bBLJB $fFuses.b_bljb
    checkbutton $bBLJB -text <span class=3D"hljs-string">"BLJB"</span> -fon=
t $flipFont -<span class=3D"hljs-keyword">variable</span> ::deviceArray(blj=
bFuse) -onvalue <span class=3D"hljs-number">0</span> -offvalue <span class=
=3D"hljs-number">1</span> -indicatoron true -state disabled
    setBalloon $bBLJB <span class=3D"hljs-string">"Boot Loader Jump Bit \nS=
et =3D 0 / Unset =3D 1"</span>
    <span class=3D"hljs-keyword">set</span> bX2 $fFuses.b_x2
    checkbutton $bX2 -text <span class=3D"hljs-string">"X2"</span> -font $f=
lipFont -<span class=3D"hljs-keyword">variable</span> ::deviceArray(x2Fuse)=
 -onvalue <span class=3D"hljs-number">0</span> -offvalue <span class=3D"hlj=
s-number">1</span> -indicatoron true -state disabled
    setBalloon $bX2 <span class=3D"hljs-string">"X2 fuse bit \nSet =3D 0 / =
Unset =3D 1"</span>
    pack config $bBLJB $bX2 -side left -anchor w
    pack configure $fFuses -side top -padx <span class=3D"hljs-number">5</s=
pan> -pady <span class=3D"hljs-number">5</span> -fill x
    <span class=3D"hljs-keyword">set</span> f_BSB_SBV .main.f_device.f_bsb_=
sbv
    frame $f_BSB_SBV -relief groove -borderwidth <span class=3D"hljs-number=
">1</span>
    <span class=3D"hljs-keyword">set</span> f_BSB $f_BSB_SBV.f_bsb
    frame $f_BSB -relief flat
    <span class=3D"hljs-keyword">set</span> l_BSB $f_BSB.l_bsb
    label $l_BSB -text <span class=3D"hljs-string">"Device BSB &amp; EB"</s=
pan> -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $l_BSB <span class=3D"hljs-string">"Boot Status Byte &amp; E=
xtra Byte"</span>
    <span class=3D"hljs-keyword">set</span> e_BSB $f_BSB.e_bsb
    entry $e_BSB -textvariable ::deviceArray(bsb) -width <span class=3D"hlj=
s-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0=
</span> -state disabled
    setBalloon $e_BSB <span class=3D"hljs-string">"Actual BSB value"</span>
    <span class=3D"hljs-keyword">set</span> e_EB $f_BSB.e_eb
    entry $e_EB -textvariable ::deviceArray(eb) -width <span class=3D"hljs-=
number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0</=
span> -state disabled
    setBalloon $e_EB <span class=3D"hljs-string">"Actual EB value"</span>
    pack config $l_BSB $e_BSB $e_EB -padx <span class=3D"hljs-number">1</sp=
an> -side left
    pack config $f_BSB -side top -ipady <span class=3D"hljs-number">1</span=
> -fill both
    <span class=3D"hljs-keyword">set</span> f_SBV $f_BSB_SBV.f_sbv
    frame $f_SBV -relief flat
    <span class=3D"hljs-keyword">set</span> l_SBV $f_SBV.l_sbv
    label $l_SBV -text <span class=3D"hljs-string">"Device SBV"</span> -fon=
t $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $l_SBV <span class=3D"hljs-string">"Software Boot Vector"</s=
pan>
    <span class=3D"hljs-keyword">set</span> e_SBV $f_SBV.e_sbv
    entry $e_SBV -textvariable ::deviceArray(sbv) -width <span class=3D"hlj=
s-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0=
</span> -state disabled
    setBalloon $e_SBV <span class=3D"hljs-string">"Actual SBV value"</span>
    <span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-number">0</=
span>} then {
	<span class=3D"hljs-keyword">set</span> bErase $fSBV.b_erase
	button $bErase -bd <span class=3D"hljs-number">3</span> -text <span class=
=3D"hljs-string">"Erase"</span> -font $flipFont -command {cmdsEraseSBVBSB} =
-state disabled -width <span class=3D"hljs-number">5</span>
	setBalloon $bErase <span class=3D"hljs-string">"Resets SBV and BSB\nto def=
ault values"</span>
    }
    pack config $l_SBV $e_SBV -padx <span class=3D"hljs-number">1</span> -s=
ide left
    pack config $f_SBV -side top -ipady <span class=3D"hljs-number">1</span=
> -fill both
    pack configure $f_BSB_SBV -side top -padx <span class=3D"hljs-number">5=
</span> -fill both
    bind $e_SBV &lt;Return&gt; {devcSetDeviceSpecialBytes}
    bind $e_BSB &lt;Return&gt; {devcSetDeviceSpecialBytes}
    <span class=3D"hljs-keyword">set</span> fSSB .main.f_device.f_ssb
    frame $fSSB -relief groove -borderwidth <span class=3D"hljs-number">1</=
span>
    <span class=3D"hljs-keyword">set</span> fInfo $fSSB.f_info
    frame $fInfo -relief flat
    <span class=3D"hljs-keyword">set</span> lSSB $fInfo.l_ssb
    label $lSSB -text <span class=3D"hljs-string">"Device SSB"</span> -font=
 $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lSSB <span class=3D"hljs-string">"Software Security Byte"</=
span>
    <span class=3D"hljs-keyword">set</span> eSSB $fInfo.e_ssb
    entry $eSSB -textvariable ::deviceArray(ssb) -width <span class=3D"hljs=
-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0<=
/span> -state disabled
    setBalloon $eSSB <span class=3D"hljs-string">"Actual SSB value"</span>
    pack config $lSSB $eSSB -padx <span class=3D"hljs-number">1</span> -sid=
e left
    pack config $fInfo -side top
    <span class=3D"hljs-keyword">set</span> fLevel $fSSB.f_level
    frame $fLevel -relief flat
    <span class=3D"hljs-keyword">set</span> bLevel0 $fLevel.b_level0
    radiobutton $bLevel0 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 0"</span> -value <sp=
an class=3D"hljs-number">0</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 0"</span> -state disabled
    setBalloon $bLevel0 <span class=3D"hljs-string">"Security level 0: no s=
ecurity\n (setting to levels 1 and 2 allowed)"</span>
    pack configure $bLevel0 -side left
    <span class=3D"hljs-keyword">set</span> bLevel1 $fLevel.b_level1
    radiobutton $bLevel1 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 1"</span> -value <sp=
an class=3D"hljs-number">1</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 1"</span> -state disabled
    setBalloon $bLevel1 <span class=3D"hljs-string">"Security level 1: no w=
riting allowed\n (setting to level 2 allowed)"</span>
    pack configure $bLevel1 -side left
    <span class=3D"hljs-keyword">set</span> bLevel2 $fLevel.b_level2
    radiobutton $bLevel2 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 2"</span> -value <sp=
an class=3D"hljs-number">2</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 2"</span> -state disabled
    setBalloon $bLevel2 <span class=3D"hljs-string">"Security level 2: neit=
her reading nor writing allowed\n (full chip erase resets security level to=
 0)"</span>
    pack configure $bLevel2 -side left
    pack configure $fInfo -side top -anchor w -ipady <span class=3D"hljs-nu=
mber">2</span> -fill both
    pack configure $fLevel -side top -anchor w -pady <span class=3D"hljs-nu=
mber">5</span> -fill both
    pack configure $fSSB -side top -padx <span class=3D"hljs-number">5</spa=
n> -pady <span class=3D"hljs-number">5</span> -fill both
    <span class=3D"hljs-keyword">set</span> fStartApp .main.f_device.f_star=
tApp
    frame $fStartApp -relief groove -borderwidth <span class=3D"hljs-number=
">1</span>
    button $fStartApp.b_start -text <span class=3D"hljs-string">"Start Appl=
ication"</span> -bd <span class=3D"hljs-number">3</span> -font $flipFont -s=
tate disabled -command {ptclStartAppli $flipStates(withReset)}
    setBalloon $fStartApp.b_start <span class=3D"hljs-string">"Starts appli=
cation at address 0x0000"</span>
    checkbutton $fStartApp.b_reset -text <span class=3D"hljs-string">"With =
Reset"</span> -font $flipFont -<span class=3D"hljs-keyword">variable</span>=
 flipStates(withReset) -indicatoron true -state disabled
    setBalloon $fStartApp.b_reset <span class=3D"hljs-string">"If set, gene=
rates a hardware reset pulse\n  when the Start Application button is presse=
d."</span>
    pack configure $fStartApp.b_start $fStartApp.b_reset -side left -padx <=
span class=3D"hljs-number">5</span> -pady <span class=3D"hljs-number">5</sp=
an>
    pack configure $fStartApp -padx <span class=3D"hljs-number">5</span> -f=
ill both
    <span class=3D"hljs-keyword">set</span> fButtons .main.f_device.f_butto=
ns
    frame $fButtons -relief flat
    pack configure $fButtons -side top
    <span class=3D"hljs-keyword">set</span> bUpdate $fButtons.b_update
    button $bUpdate -bd <span class=3D"hljs-number">3</span> -text <span cl=
ass=3D"hljs-string">"Read"</span> -font $flipFont -command {devcUpdateDevic=
eFrame} -state disabled
    setBalloon $bUpdate <span class=3D"hljs-string">"Reads device special b=
ytes"</span>
    <span class=3D"hljs-keyword">set</span> bWrite $fButtons.b_write
    button $bWrite -bd <span class=3D"hljs-number">3</span> -text <span cla=
ss=3D"hljs-string">"Set"</span> -font $flipFont -command {devcSetDeviceSpec=
ialBytes} -state disabled
    setBalloon $bWrite <span class=3D"hljs-string">"Sets device special byt=
es"</span>
    <span class=3D"hljs-keyword">set</span> bCanConfig $fButtons.b_canconfi=
g
    button $bCanConfig -bd <span class=3D"hljs-number">3</span> -text <span=
 class=3D"hljs-string">"CAN"</span> -font $flipFont -command {cbDboxWakeUp =
.canNodeConfigDbox} -state disabled
    setBalloon $bCanConfig <span class=3D"hljs-string">"Sets a CAN node par=
ameters"</span>
    pack config $bUpdate $bWrite -side left -padx <span class=3D"hljs-numbe=
r">15</span>
    pack configure $fButtons -side top -padx <span class=3D"hljs-number">5<=
/span> -pady <span class=3D"hljs-number">15</span> -fill both
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> buildSk=
ipTestList</span> {protocol} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(skipList) <span c=
lass=3D"hljs-string">"  flash-2.23.1  flash-2.25  checksum-5.5  checksum-5.=
6 "</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> buildSk=
ipProcList</span> {} {
    <span class=3D"hljs-keyword">set</span> skipL {}
    <span class=3D"hljs-keyword">return</span> $skipL
}
drawCanNodeConfigDbox
at89c51rd2
<span class=3D"hljs-keyword">foreach</span> m $::deviceArray(memoryList) {
    cmdsImportCurrentMemoryNameSpace $m
    cmdsSetMemoryParameters
    initBuffer
}
cmdsImportCurrentMemoryNameSpace FLASH
<span class=3D"hljs-comment">#dbgEndSrc [info script]</span>
<span class=3D"hljs-comment">#dbgBeginSrc [info script]</span>
<span class=3D"hljs-keyword">global</span> projDir
<span class=3D"hljs-keyword">source</span> $projDir/tcl/devices/devices_com=
mon.tcl
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> t89c51s=
nd1</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> protcl protocol nAddrBits fl=
ipFont rs232standard canstandard expAnsw testFlag buffer flowButtons flipSt=
ates
    <span class=3D"hljs-keyword">set</span> children_List [<span class=3D"h=
ljs-keyword">split</span> [winfo children .main.f_device]]
    <span class=3D"hljs-keyword">foreach</span> item $children_List {
	<span class=3D"hljs-keyword">if</span> {$item !=3D <span class=3D"hljs-str=
ing">".main.f_device.f_deviceName"</span>} then {
	    destroy $item
	}
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">a=
rray</span> exists ::deviceArray]} then {
	<span class=3D"hljs-keyword">array</span> <span class=3D"hljs-keyword">uns=
et</span> ::deviceArray
    }
    <span class=3D"hljs-keyword">set</span> ::deviceArray(name) <span class=
=3D"hljs-string">"AT89C51SND1"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(communicationList=
) <span class=3D"hljs-string">"RS232 USB"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(memoryList) [<spa=
n class=3D"hljs-keyword">list</span> FLASH]
    <span class=3D"hljs-keyword">set</span> ::deviceArray(memoryColor) [<sp=
an class=3D"hljs-keyword">list</span> <span class=3D"hljs-string">"#88a67d"=
</span> <span class=3D"hljs-string">"wheat"</span>]
    <span class=3D"hljs-keyword">set</span> ::deviceArray(currentMemory) <s=
pan class=3D"hljs-string">"FLASH"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(usb_dfu_default_p=
roduct_id) <span class=3D"hljs-number">0x2FFF</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(startAppliFailAdd=
r) <span class=3D"hljs-number">0X001C</span>
    <span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keywo=
rd">eval</span> ::FLASH:: {
	<span class=3D"hljs-keyword">variable</span> deviceArray
	<span class=3D"hljs-keyword">variable</span> buffer
	<span class=3D"hljs-keyword">set</span> deviceArray(memorySize) <span clas=
s=3D"hljs-number">64</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankValue) <span clas=
s=3D"hljs-string">"FF"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erase) <span class=3D"hljs-=
string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(blankCheck) <span class=3D"=
hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseType) <span class=3D"h=
ljs-string">"full"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlocks) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock0) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock0) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock1) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock1) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock2) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock2) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock3) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock3) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock4) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock4) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(progStart) <span class=
=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(displayData) <span cla=
ss=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankCheck) <span clas=
s=3D"hljs-string">"01"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(programData) <span cla=
ss=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">namespace</span> export writeBuffer readBuffe=
r readDeviceArray initBuffer bufferChecksum
    }
    <span class=3D"hljs-keyword">foreach</span> M $::deviceArray(memoryList=
) {
	<span class=3D"hljs-keyword">proc</span> ::${M}::writeBuffer {index data} =
{
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">set</span> buffer($index) $data
	    <span class=3D"hljs-keyword">return</span>
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::readBuffer {index} {
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">return</span> $buffer($index)
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::readDeviceArray {index} {
	    <span class=3D"hljs-keyword">variable</span> deviceArray
	    <span class=3D"hljs-keyword">return</span> $deviceArray($index)
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::initBuffer {} {
	    <span class=3D"hljs-keyword">variable</span> deviceArray
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">global</span> flipStates
	    <span class=3D"hljs-keyword">set</span> max [<span class=3D"hljs-keywo=
rd">expr</span> $deviceArray(memorySize) * <span class=3D"hljs-number">1024=
</span>]
	    <span class=3D"hljs-keyword">if</span> {$flipStates(simul)} then {
		<span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">set=
</span> i <span class=3D"hljs-number">0</span>} {$i &lt; $max} {<span class=
=3D"hljs-keyword">incr</span> i} {
		    <span class=3D"hljs-keyword">set</span> buffer([<span class=3D"hljs-k=
eyword">format</span> %<span class=3D"hljs-number">06</span>X $i]) $deviceA=
rray(blankValue)
		}
	    } else {
		initBuffer_C $max $deviceArray(blankValue)
	    }
	    <span class=3D"hljs-keyword">return</span>
	}
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::F=
LASH::bufferChecksum</span> {} {
	<span class=3D"hljs-keyword">variable</span> buffer
	<span class=3D"hljs-keyword">global</span> flipStates
	<span class=3D"hljs-keyword">set</span> min $buffer(minProgAddr)
	<span class=3D"hljs-keyword">set</span> max $buffer(maxProgAddr)
	<span class=3D"hljs-keyword">if</span> {$flipStates(simul)} then {
	    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number"=
>0xCAFEFADE</span>
	} else {
	    <span class=3D"hljs-keyword">return</span> [computeBufferChecksum_C $m=
in $max]
	}
    }
    <span class=3D"hljs-keyword">set</span> ::deviceArray(jumpAdd) <span cl=
ass=3D"hljs-string">"0000"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(specialSynchro) <=
span class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(RS232ProtocolsLis=
t) <span class=3D"hljs-string">"Standard Enhanced"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(nnbConnect) <span=
 class=3D"hljs-string">"FF"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(nnbProg) <span cl=
ass=3D"hljs-string">"XX"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(crisConnect) <spa=
n class=3D"hljs-string">"00"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(crisProg) <span c=
lass=3D"hljs-string">"XX"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(btc1) <span class=
=3D"hljs-string">"XX"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(btc2) <span class=
=3D"hljs-string">"XX"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(btc3) <span class=
=3D"hljs-string">"XX"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev0) [<span cla=
ss=3D"hljs-keyword">list</span> FF]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev0Test) <span =
class=3D"hljs-string">"FF"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev1) [<span cla=
ss=3D"hljs-keyword">list</span> FE]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev1Test) <span =
class=3D"hljs-string">"FE"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev2Test) <span =
class=3D"hljs-string">"FC"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev2) [<span cla=
ss=3D"hljs-keyword">list</span> FC XX]
    <span class=3D"hljs-keyword">set</span> expAnsw(readManufId) <span clas=
s=3D"hljs-number">58</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId1) XX
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId2) XX
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId3) XX
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock0) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock1) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock2) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock3) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock4) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(readDevBootId1) <span =
class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(readDevBootId2) <span =
class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(sbv) <span class=3D"hl=
js-string">"F0"</span>
    <span class=3D"hljs-keyword">set</span> fBlocks .deviceErase.f_erase.f_=
blocks
    <span class=3D"hljs-keyword">set</span> bBlock0 $fBlocks.b_block0
    <span class=3D"hljs-keyword">set</span> bBlock1 $fBlocks.b_block1
    <span class=3D"hljs-keyword">set</span> bBlock2 $fBlocks.b_block2
    <span class=3D"hljs-keyword">set</span> bBlock3 $fBlocks.b_block3
    <span class=3D"hljs-keyword">set</span> bBlock4 $fBlocks.b_block4
    setBalloon $bBlock0 <span class=3D"hljs-string">"Erase memory between 0=
000 and 1FFF"</span>
    setBalloon $bBlock1 <span class=3D"hljs-string">"Erase memory between 2=
000 and 3FFF"</span>
    setBalloon $bBlock2 <span class=3D"hljs-string">"Erase memory between 4=
000 and 7FFF"</span>
    setBalloon $bBlock3 <span class=3D"hljs-string">"Erase memory between 8=
000 and BFFF"</span>
    setBalloon $bBlock4 <span class=3D"hljs-string">"Erase memory between C=
000 and FFFF"</span>
    .main.f_device.f_deviceName.l_device configure -text $::deviceArray(nam=
e)
    .main.f_device.f_deviceName configure -relief groove
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(sbv)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(sbv) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(bsb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(bsb) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(ssb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(ssb) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(hsb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(hsb) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(eb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(eb) <span class=3D"h=
ljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(deviceBootId1)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(deviceBootId1) <span=
 class=3D"hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(deviceBootId2)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(deviceBootId2) <span=
 class=3D"hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(bljbFuse)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(bljbFuse) <span clas=
s=3D"hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(x2Fuse)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(x2Fuse) <span class=
=3D"hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(level)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(level) X
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(eraseType)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(eraseType) <span cla=
ss=3D"hljs-string">"full"</span>
    }
    <span class=3D"hljs-keyword">set</span> nAddrBits <span class=3D"hljs-n=
umber">4</span>
    <span class=3D"hljs-keyword">set</span> rs232standard(readHwByte) <span=
 class=3D"hljs-string">":020000050B00EE"</span>
    <span class=3D"hljs-keyword">set</span> rs232standard(readBootlVer) <sp=
an class=3D"hljs-string">":020000050F00EA"</span>
    <span class=3D"hljs-keyword">set</span> protocol(frameLengthW) <span cl=
ass=3D"hljs-number">128</span>
    <span class=3D"hljs-keyword">set</span> protocol(frameLengthR) <span cl=
ass=3D"hljs-number">128</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowErase) <span =
class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowBlankCheck) <=
span class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowProgram) <spa=
n class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowVerify) <span=
 class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowSpecialBytes)=
 <span class=3D"hljs-number">0</span>
    wm title .deviceErase <span class=3D"hljs-string">"$::deviceArray(name)=
 Erase"</span>
    .deviceErase.f_erase.f_blocks.b_blockErase configure -state normal
    <span class=3D"hljs-keyword">set</span> fReadOnly .main.f_device.f_read=
Only
    frame $fReadOnly -relief groove -borderwidth <span class=3D"hljs-number=
">1</span>
    <span class=3D"hljs-keyword">set</span> fManufId $fReadOnly.f_manufId
    frame $fManufId -relief flat
    <span class=3D"hljs-keyword">set</span> lManufId $fManufId.l_manufId
    label $lManufId -text <span class=3D"hljs-string">"Manufact. Id"</span>=
 -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    <span class=3D"hljs-keyword">set</span> eManufId $fManufId.e_manufId
    entry $eManufId -textvariable ::deviceArray(manufId) -width <span class=
=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eManufId <span class=3D"hljs-string">"Manufacturer code val=
ue"</span>
    pack config $lManufId $eManufId -padx <span class=3D"hljs-number">1</sp=
an> -side left
    pack config $fManufId -side top -ipady <span class=3D"hljs-number">1</s=
pan> -fill both
    <span class=3D"hljs-keyword">set</span> fDeviceIds $fReadOnly.f_deviceI=
ds
    frame $fDeviceIds -relief flat
    <span class=3D"hljs-keyword">set</span> lDeviceIds $fDeviceIds.l_device=
Ids
    label $lDeviceIds -text <span class=3D"hljs-string">"Device Ids"</span>=
 -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    <span class=3D"hljs-keyword">set</span> eDeviceId1 $fDeviceIds.e_device=
Id1
    entry $eDeviceId1 -textvariable ::deviceArray(deviceId1) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId1 <span class=3D"hljs-string">"Family code value"<=
/span>
    <span class=3D"hljs-keyword">set</span> eDeviceId2 $fDeviceIds.e_device=
Id2
    entry $eDeviceId2 -textvariable ::deviceArray(deviceId2) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId2 <span class=3D"hljs-string">"Device name code"</=
span>
    <span class=3D"hljs-keyword">set</span> eDeviceId3 $fDeviceIds.e_device=
Id3
    entry $eDeviceId3 -textvariable ::deviceArray(deviceId3) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId3 <span class=3D"hljs-string">"Device revision num=
ber"</span>
    pack config $lDeviceIds $eDeviceId1 $eDeviceId2 $eDeviceId3 -padx <span=
 class=3D"hljs-number">1</span> -side left
    pack config $fDeviceIds -side top -ipady <span class=3D"hljs-number">1<=
/span> -fill both
    <span class=3D"hljs-keyword">set</span> fDeviceBootIds $fReadOnly.f_dev=
iceBootIds
    frame $fDeviceBootIds -relief flat
    <span class=3D"hljs-keyword">set</span> lDeviceBootIds $fDeviceBootIds.=
l_deviceBootIds
    label $lDeviceBootIds -text <span class=3D"hljs-string">"Device Boot Id=
s"</span> -font $flipFont -anchor w -width <span class=3D"hljs-number">16</=
span>
    setBalloon $lDeviceBootIds <span class=3D"hljs-string">"Boot Ids 1, 2: =
read-only"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceBootId1 $fDeviceBootIds.=
e_deviceBootId1
    entry $eDeviceBootId1 -textvariable ::deviceArray(deviceBootId1) -width=
 <span class=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceBootId1 <span class=3D"hljs-string">"Boot Id 1 value=
"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceBootId2 $fDeviceBootIds.=
e_deviceBootId2
    entry $eDeviceBootId2 -textvariable ::deviceArray(deviceBootId2) -width=
 <span class=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceBootId2 <span class=3D"hljs-string">"Boot Id 2 value=
"</span>
    pack config $lDeviceBootIds $eDeviceBootId1 $eDeviceBootId2 -padx <span=
 class=3D"hljs-number">1</span> -side left
    pack config $fDeviceBootIds -side top -ipady <span class=3D"hljs-number=
">1</span> -fill both
    <span class=3D"hljs-keyword">set</span> fHSB $fReadOnly.f_hsb
    frame $fHSB -relief flat
    <span class=3D"hljs-keyword">set</span> lHSB $fHSB.l_hsb
    label $lHSB -text <span class=3D"hljs-string">"Hardware Byte"</span> -f=
ont $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lHSB <span class=3D"hljs-string">"Hardware Security Byte: r=
ead-only"</span>
    <span class=3D"hljs-keyword">set</span> eHSB $fHSB.e_hsb
    entry $eHSB -textvariable ::deviceArray(hsb) -width <span class=3D"hljs=
-number">3</span> -font $flipFont -state disabled
    setBalloon $eHSB <span class=3D"hljs-string">"Hardware Security Byte va=
lue"</span>
    pack config $lHSB $eHSB -padx <span class=3D"hljs-number">1</span> -sid=
e left
    pack config $fHSB -side top -ipady <span class=3D"hljs-number">1</span>=
 -fill both
    <span class=3D"hljs-keyword">set</span> fBootlVer $fReadOnly.f_bootlVer
    frame $fBootlVer -relief flat
    <span class=3D"hljs-keyword">set</span> lBootlVer $fBootlVer.l_bootlVer
    label $lBootlVer -text <span class=3D"hljs-string">"Bootloader Ver."</s=
pan> -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lBootlVer <span class=3D"hljs-string">"Bootloader Version: =
read-only"</span>
    <span class=3D"hljs-keyword">set</span> eBootlVer $fBootlVer.e_bootlVer
    entry $eBootlVer -textvariable ::deviceArray(bootlVer) -width <span cla=
ss=3D"hljs-number">5</span> -font $flipFont -state disabled
    setBalloon $eBootlVer <span class=3D"hljs-string">"Bootloader Version"<=
/span>
    pack config $lBootlVer $eBootlVer -padx <span class=3D"hljs-number">1</=
span> -side left
    pack config $fBootlVer -side top -ipady <span class=3D"hljs-number">1</=
span> -fill both
    pack configure $fReadOnly -side top -padx <span class=3D"hljs-number">5=
</span> -fill both
    <span class=3D"hljs-keyword">set</span> fFuses .main.f_device.f_fuses
    frame $fFuses -relief groove -borderwidth <span class=3D"hljs-number">1=
</span>
    <span class=3D"hljs-keyword">set</span> bBLJB $fFuses.b_bljb
    checkbutton $bBLJB -text <span class=3D"hljs-string">"BLJB"</span> -fon=
t $flipFont -<span class=3D"hljs-keyword">variable</span> ::deviceArray(blj=
bFuse) -onvalue <span class=3D"hljs-number">0</span> -offvalue <span class=
=3D"hljs-number">1</span> -indicatoron true -state disabled
    setBalloon $bBLJB <span class=3D"hljs-string">"Boot Loader Jump Bit \nS=
et =3D 0 / Unset =3D 1"</span>
    <span class=3D"hljs-keyword">set</span> bX2 $fFuses.b_x2
    checkbutton $bX2 -text <span class=3D"hljs-string">"X2"</span> -font $f=
lipFont -<span class=3D"hljs-keyword">variable</span> ::deviceArray(x2Fuse)=
 -onvalue <span class=3D"hljs-number">0</span> -offvalue <span class=3D"hlj=
s-number">1</span> -indicatoron true -state disabled
    setBalloon $bX2 <span class=3D"hljs-string">"X2 fuse bit \nSet =3D 0 / =
Unset =3D 1"</span>
    pack config $bBLJB $bX2 -side left -padx <span class=3D"hljs-number">10=
</span> -anchor w
    pack configure $fFuses -side top -padx <span class=3D"hljs-number">5</s=
pan> -pady <span class=3D"hljs-number">5</span> -fill x
    <span class=3D"hljs-keyword">set</span> f_BSB_SBV .main.f_device.f_bsb_=
sbv
    frame $f_BSB_SBV -relief groove -borderwidth <span class=3D"hljs-number=
">1</span>
    <span class=3D"hljs-keyword">set</span> f_BSB $f_BSB_SBV.f_bsb
    frame $f_BSB -relief flat
    <span class=3D"hljs-keyword">set</span> l_BSB $f_BSB.l_bsb
    label $l_BSB -text <span class=3D"hljs-string">"Device BSB"</span> -fon=
t $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $l_BSB <span class=3D"hljs-string">"Boot Status Byte"</span>
    <span class=3D"hljs-keyword">set</span> e_BSB $f_BSB.e_bsb
    entry $e_BSB -textvariable ::deviceArray(bsb) -width <span class=3D"hlj=
s-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0=
</span> -state disabled
    setBalloon $e_BSB <span class=3D"hljs-string">"Actual BSB value"</span>
    <span class=3D"hljs-keyword">set</span> e_EB $f_BSB.e_eb
    entry $e_EB -textvariable ::deviceArray(eb) -width <span class=3D"hljs-=
number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0</=
span> -state disabled
    setBalloon $e_EB <span class=3D"hljs-string">"Actual EB value"</span>
    pack config $l_BSB $e_BSB -padx <span class=3D"hljs-number">1</span> -s=
ide left
    pack config $f_BSB -side top -ipady <span class=3D"hljs-number">1</span=
> -fill both
    <span class=3D"hljs-keyword">set</span> f_SBV $f_BSB_SBV.f_sbv
    frame $f_SBV -relief flat
    <span class=3D"hljs-keyword">set</span> l_SBV $f_SBV.l_sbv
    label $l_SBV -text <span class=3D"hljs-string">"Device SBV"</span> -fon=
t $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $l_SBV <span class=3D"hljs-string">"Software Boot Vector"</s=
pan>
    <span class=3D"hljs-keyword">set</span> e_SBV $f_SBV.e_sbv
    entry $e_SBV -textvariable ::deviceArray(sbv) -width <span class=3D"hlj=
s-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0=
</span> -state disabled
    setBalloon $e_SBV <span class=3D"hljs-string">"Actual SBV value"</span>
    <span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-number">0</=
span>} then {
	<span class=3D"hljs-keyword">set</span> bErase $fSBV.b_erase
	button $bErase -bd <span class=3D"hljs-number">3</span> -text <span class=
=3D"hljs-string">"Erase"</span> -font $flipFont -command {cmdsEraseSBVBSB} =
-state disabled -width <span class=3D"hljs-number">5</span>
	setBalloon $bErase <span class=3D"hljs-string">"Resets SBV and BSB\nto def=
ault values"</span>
    }
    pack config $l_SBV $e_SBV -padx <span class=3D"hljs-number">1</span> -s=
ide left
    pack config $f_SBV -side top -ipady <span class=3D"hljs-number">1</span=
> -fill both
    pack configure $f_BSB_SBV -side top -padx <span class=3D"hljs-number">5=
</span> -fill both
    bind $e_SBV &lt;Return&gt; {devcSetDeviceSpecialBytes}
    bind $e_BSB &lt;Return&gt; {devcSetDeviceSpecialBytes}
    <span class=3D"hljs-keyword">set</span> fSSB .main.f_device.f_ssb
    frame $fSSB -relief groove -borderwidth <span class=3D"hljs-number">1</=
span>
    <span class=3D"hljs-keyword">set</span> fInfo $fSSB.f_info
    frame $fInfo -relief flat
    <span class=3D"hljs-keyword">set</span> lSSB $fInfo.l_ssb
    label $lSSB -text <span class=3D"hljs-string">"Device SSB"</span> -font=
 $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lSSB <span class=3D"hljs-string">"Software Security Byte"</=
span>
    <span class=3D"hljs-keyword">set</span> eSSB $fInfo.e_ssb
    entry $eSSB -textvariable ::deviceArray(ssb) -width <span class=3D"hljs=
-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0<=
/span> -state disabled
    setBalloon $eSSB <span class=3D"hljs-string">"Actual SSB value"</span>
    pack config $lSSB $eSSB -padx <span class=3D"hljs-number">1</span> -sid=
e left
    pack config $fInfo -side top
    <span class=3D"hljs-keyword">set</span> fLevel $fSSB.f_level
    frame $fLevel -relief flat
    <span class=3D"hljs-keyword">set</span> bLevel0 $fLevel.b_level0
    radiobutton $bLevel0 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 0"</span> -value <sp=
an class=3D"hljs-number">0</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 0"</span> -state disabled
    setBalloon $bLevel0 <span class=3D"hljs-string">"Security level 0: no s=
ecurity\n (setting to levels 1 and 2 allowed)"</span>
    pack configure $bLevel0 -side left
    <span class=3D"hljs-keyword">set</span> bLevel1 $fLevel.b_level1
    radiobutton $bLevel1 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 1"</span> -value <sp=
an class=3D"hljs-number">1</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 1"</span> -state disabled
    setBalloon $bLevel1 <span class=3D"hljs-string">"Security level 1: no w=
riting allowed\n (setting to level 2 allowed)"</span>
    pack configure $bLevel1 -side left
    <span class=3D"hljs-keyword">set</span> bLevel2 $fLevel.b_level2
    radiobutton $bLevel2 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 2"</span> -value <sp=
an class=3D"hljs-number">2</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 2"</span> -state disabled
    setBalloon $bLevel2 <span class=3D"hljs-string">"Security level 2: neit=
her reading nor writing allowed\n (full chip erase resets security level to=
 0)"</span>
    pack configure $bLevel2 -side left
    pack configure $fInfo -side top -anchor w -ipady <span class=3D"hljs-nu=
mber">2</span> -fill both
    pack configure $fLevel -side top -anchor w -pady <span class=3D"hljs-nu=
mber">5</span> -fill both
    pack configure $fSSB -side top -padx <span class=3D"hljs-number">5</spa=
n> -pady <span class=3D"hljs-number">5</span> -fill both
    <span class=3D"hljs-keyword">set</span> fStartApp .main.f_device.f_star=
tApp
    frame $fStartApp -relief groove -borderwidth <span class=3D"hljs-number=
">1</span>
    button $fStartApp.b_start -text <span class=3D"hljs-string">"Start Appl=
ication"</span> -bd <span class=3D"hljs-number">3</span> -font $flipFont -s=
tate disabled -command {ptclStartAppli $flipStates(withReset)}
    setBalloon $fStartApp.b_start <span class=3D"hljs-string">"Starts appli=
cation at address 0x0000"</span>
    checkbutton $fStartApp.b_reset -text <span class=3D"hljs-string">"With =
Reset"</span> -font $flipFont -<span class=3D"hljs-keyword">variable</span>=
 flipStates(withReset) -indicatoron true -state disabled
    setBalloon $fStartApp.b_reset <span class=3D"hljs-string">"If set, gene=
rates a hardware reset pulse\n  when the Start Application button is presse=
d."</span>
    pack configure $fStartApp.b_start $fStartApp.b_reset -side left -padx <=
span class=3D"hljs-number">5</span> -pady <span class=3D"hljs-number">5</sp=
an>
    pack configure $fStartApp -padx <span class=3D"hljs-number">5</span> -f=
ill both
    <span class=3D"hljs-keyword">set</span> fButtons .main.f_device.f_butto=
ns
    frame $fButtons -relief flat
    pack configure $fButtons -side top
    <span class=3D"hljs-keyword">set</span> bUpdate $fButtons.b_update
    button $bUpdate -bd <span class=3D"hljs-number">3</span> -text <span cl=
ass=3D"hljs-string">"Read"</span> -font $flipFont -command {devcUpdateDevic=
eFrame} -state disabled
    setBalloon $bUpdate <span class=3D"hljs-string">"Reads device special b=
ytes"</span>
    <span class=3D"hljs-keyword">set</span> bWrite $fButtons.b_write
    button $bWrite -bd <span class=3D"hljs-number">3</span> -text <span cla=
ss=3D"hljs-string">"Set"</span> -font $flipFont -command {devcSetDeviceSpec=
ialBytes} -state disabled
    setBalloon $bWrite <span class=3D"hljs-string">"Sets device special byt=
es"</span>
    <span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-number">0</=
span>} then {
	<span class=3D"hljs-keyword">set</span> bMemorySelect .main.f_buffer.b_mem=
Select
	<span class=3D"hljs-keyword">if</span> {! [winfo exists $bMemorySelect]} t=
hen {
	    button $bMemorySelect -bd <span class=3D"hljs-number">3</span> -text $=
::deviceArray(currentMemory) -font $flipFont -command {cmdsToggleMemory} -w=
idth <span class=3D"hljs-number">8</span> -state disabled
	    setBalloon $bMemorySelect <span class=3D"hljs-string">"FLIP will perfo=
rm all operations\n on the selected memory"</span>
	}
    }
    pack config $bUpdate $bWrite -side left -padx <span class=3D"hljs-numbe=
r">15</span>
    pack configure $fButtons -side top -padx <span class=3D"hljs-number">5<=
/span> -pady <span class=3D"hljs-number">15</span> -fill both
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> buildSk=
ipTestList</span> {protocol} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">switch</span> $protocol {
    USB_DFU {
	    <span class=3D"hljs-keyword">set</span> ::deviceArray(skipList) <span =
class=3D"hljs-string">"  xaf-1.5  xaf-1.6  xaf-1.13  xaf-1.14  xaf-1.21  xa=
f-1.22  xaf-1.28  flash-2.23.1  flash-2.25 "</span>
	}
    RS232Standard {
	    <span class=3D"hljs-keyword">set</span> ::deviceArray(skipList) <span =
class=3D"hljs-string">"  xaf-1.5  xaf-1.6  xaf-1.13  xaf-1.14  xaf-1.21  xa=
f-1.22  xaf-1.28  flash-2.23.1  flash-2.25 "</span>
	}
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> buildSk=
ipProcList</span> {} {
    <span class=3D"hljs-keyword">set</span> skipL {}
    <span class=3D"hljs-keyword">return</span> $skipL
}
t89c51snd1
<span class=3D"hljs-keyword">foreach</span> m $::deviceArray(memoryList) {
    cmdsImportCurrentMemoryNameSpace $m
    cmdsSetMemoryParameters
    initBuffer
}
cmdsImportCurrentMemoryNameSpace FLASH
<span class=3D"hljs-comment">#dbgEndSrc [info script]</span>
<span class=3D"hljs-comment">#dbgBeginSrc [info script]</span>
<span class=3D"hljs-keyword">global</span> projDir
<span class=3D"hljs-keyword">source</span> $projDir/tcl/devices/devices_com=
mon.tcl
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> at8xc51=
22</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> protcl protocol nAddrBits rs=
232standard canstandard expAnsw testFlag buffer flowButtons flipFont
    <span class=3D"hljs-keyword">set</span> children_List [<span class=3D"h=
ljs-keyword">split</span> [winfo children .main.f_device]]
    <span class=3D"hljs-keyword">foreach</span> item $children_List {
	<span class=3D"hljs-keyword">if</span> {$item !=3D <span class=3D"hljs-str=
ing">".main.f_device.f_deviceName"</span>} then {
	    destroy $item
	}
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">a=
rray</span> exists ::deviceArray]} then {
	<span class=3D"hljs-keyword">array</span> <span class=3D"hljs-keyword">uns=
et</span> ::deviceArray
    }
<span class=3D"hljs-comment">    #dbgShowInfo [array names ::deviceArray]</=
span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(name) <span class=
=3D"hljs-string">"AT8XC5122"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(communicationList=
) <span class=3D"hljs-string">"RS232 USB"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(memoryList) [<spa=
n class=3D"hljs-keyword">list</span> FLASH]
    <span class=3D"hljs-keyword">set</span> ::deviceArray(memoryColor) [<sp=
an class=3D"hljs-keyword">list</span> <span class=3D"hljs-string">"#88a67d"=
</span> <span class=3D"hljs-string">"wheat"</span>]
    <span class=3D"hljs-keyword">set</span> ::deviceArray(currentMemory) <s=
pan class=3D"hljs-string">"FLASH"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(usb_dfu_default_p=
roduct_id) <span class=3D"hljs-number">0x2FFE</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(startAppliTest) {=
<span class=3D"hljs-number">43</span> D1 <span class=3D"hljs-number">08</sp=
an> <span class=3D"hljs-number">74</span> F8 <span class=3D"hljs-number">75=
</span> <span class=3D"hljs-number">83</span> <span class=3D"hljs-number">0=
0</span> <span class=3D"hljs-number">75</span> <span class=3D"hljs-number">=
82</span> <span class=3D"hljs-number">11</span> F0 <span class=3D"hljs-numb=
er">53</span> \
	    D1 F7 <span class=3D"hljs-number">75</span> <span class=3D"hljs-number=
">83</span> <span class=3D"hljs-number">00</span> <span class=3D"hljs-numbe=
r">75</span> <span class=3D"hljs-number">82</span> <span class=3D"hljs-numb=
er">00</span> E4 <span class=3D"hljs-number">73</span> <span class=3D"hljs-=
number">02</span> <span class=3D"hljs-number">00</span> <span class=3D"hljs=
-number">00</span>}
    <span class=3D"hljs-keyword">set</span> ::deviceArray(startAppliFailAdd=
r) <span class=3D"hljs-number">0X0011</span>
    <span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keywo=
rd">eval</span> ::FLASH:: {
	<span class=3D"hljs-keyword">variable</span> buffer
	<span class=3D"hljs-keyword">variable</span> deviceArray
	<span class=3D"hljs-keyword">set</span> deviceArray(memorySize) <span clas=
s=3D"hljs-number">32</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(cramSize) <span class=
=3D"hljs-number">32</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankValue) <span clas=
s=3D"hljs-string">"FF"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erase) <span class=3D"hljs-=
string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(blankCheck) <span class=3D"=
hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseType) <span class=3D"h=
ljs-string">"full"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlocks) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock0) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock0) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock1) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock1) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock2) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock2) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock3) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock3) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock4) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock4) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(progStart) <span class=
=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(displayData) <span cla=
ss=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankCheck) <span clas=
s=3D"hljs-string">"01"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(programData) <span cla=
ss=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">namespace</span> export writeBuffer readBuffe=
r readDeviceArray initBuffer bufferChecksum
    }
    <span class=3D"hljs-keyword">foreach</span> M $::deviceArray(memoryList=
) {
	<span class=3D"hljs-keyword">proc</span> ::${M}::writeBuffer {index data} =
{
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">set</span> buffer($index) $data
	    <span class=3D"hljs-keyword">return</span>
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::readBuffer {index} {
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">return</span> $buffer($index)
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::readDeviceArray {index} {
	    <span class=3D"hljs-keyword">variable</span> deviceArray
	    <span class=3D"hljs-keyword">return</span> $deviceArray($index)
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::initBuffer {} {
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">global</span> flipStates
	    <span class=3D"hljs-keyword">variable</span> deviceArray
	    <span class=3D"hljs-keyword">set</span> max [<span class=3D"hljs-keywo=
rd">expr</span> $deviceArray(memorySize) * <span class=3D"hljs-number">1024=
</span>]
	    <span class=3D"hljs-keyword">if</span> {$flipStates(simul)} then {
		<span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">set=
</span> i <span class=3D"hljs-number">0</span>} {$i &lt; $max} {<span class=
=3D"hljs-keyword">incr</span> i} {
		    <span class=3D"hljs-keyword">set</span> buffer([<span class=3D"hljs-k=
eyword">format</span> %<span class=3D"hljs-number">06</span>X $i]) $deviceA=
rray(blankValue)
		}
	    } else {
		initBuffer_C $max $deviceArray(blankValue)
	    }
	    <span class=3D"hljs-keyword">return</span>
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::bufferChecksum {} {
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">global</span> flipStates
	    <span class=3D"hljs-keyword">set</span> min $buffer(minProgAddr)
	    <span class=3D"hljs-keyword">set</span> max $buffer(maxProgAddr)
	    <span class=3D"hljs-keyword">if</span> {$flipStates(simul)} then {
		<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0x=
CAFEFADE</span>
	    } else {
		<span class=3D"hljs-keyword">return</span> [computeBufferChecksum_C $min =
$max]
	    }
	}
    }
    <span class=3D"hljs-keyword">set</span> ::deviceArray(specialSynchro) <=
span class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(RS232ProtocolsLis=
t) <span class=3D"hljs-string">"Standard Enhanced"</span>
    <span class=3D"hljs-keyword">set</span> protocol(frameLengthW) <span cl=
ass=3D"hljs-number">64</span>
    <span class=3D"hljs-keyword">set</span> protocol(frameLengthR) <span cl=
ass=3D"hljs-number">64</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev0) [<span cla=
ss=3D"hljs-keyword">list</span> FF BF <span class=3D"hljs-number">7</span>F=
 <span class=3D"hljs-number">3</span>F]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev0Test) <span =
class=3D"hljs-string">"0F"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev1) [<span cla=
ss=3D"hljs-keyword">list</span> FE BE <span class=3D"hljs-number">7</span>E=
 <span class=3D"hljs-number">3</span>E]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev1Test) <span =
class=3D"hljs-string">"0E"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev2) [<span cla=
ss=3D"hljs-keyword">list</span> FC BC <span class=3D"hljs-number">7</span>C=
 <span class=3D"hljs-number">3</span>C XX]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev2Test) <span =
class=3D"hljs-string">"0C"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readManufId) <span clas=
s=3D"hljs-number">58</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId1) D7
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId2) FC
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId3) FF
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock0) <span cla=
ss=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock1) <span cla=
ss=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock2) <span cla=
ss=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock3) <span cla=
ss=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock4) <span cla=
ss=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> testFlag(readDevBootId1) <span =
class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(readDevBootId2) <span =
class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(sbv) <span class=3D"hl=
js-string">"FC"</span>
    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">=
tcltest</span>::testConstraints(eraseBlockPossible) <span class=3D"hljs-num=
ber">0</span>
    .main.f_device.f_deviceName.l_device configure -text $::deviceArray(nam=
e)
    .main.f_device.f_deviceName configure -relief groove
    <span class=3D"hljs-keyword">set</span> fBlocks .deviceErase.f_erase.f_=
blocks
    <span class=3D"hljs-keyword">set</span> bBlock0 $fBlocks.b_block0
    <span class=3D"hljs-keyword">set</span> bBlock1 $fBlocks.b_block1
    <span class=3D"hljs-keyword">set</span> bBlock2 $fBlocks.b_block2
    <span class=3D"hljs-keyword">set</span> bBlock3 $fBlocks.b_block3
    <span class=3D"hljs-keyword">set</span> bBlock4 $fBlocks.b_block4
    setBalloon $bBlock0 <span class=3D"hljs-string">"Erase memory between 0=
000 and 1FFF"</span>
    setBalloon $bBlock1 <span class=3D"hljs-string">"Erase memory between 2=
000 and 3FFF"</span>
    setBalloon $bBlock2 <span class=3D"hljs-string">"Erase memory between 4=
000 and 7FFF"</span>
    setBalloon $bBlock3 <span class=3D"hljs-string">"Erase memory between 8=
000 and BFFF"</span>
    setBalloon $bBlock4 <span class=3D"hljs-string">"Erase memory between C=
000 and FFFF"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(bootlVer) <span c=
lass=3D"hljs-string">"XX"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(deviceBootId1) <s=
pan class=3D"hljs-string">"XX"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(deviceBootId2) <s=
pan class=3D"hljs-string">"XX"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(ssb) <span class=
=3D"hljs-string">"XX"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(level) <span clas=
s=3D"hljs-string">"X"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(eraseType) <span =
class=3D"hljs-string">"full"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(crc) <span class=
=3D"hljs-string">"XXXX"</span>
    <span class=3D"hljs-keyword">set</span> nAddrBits <span class=3D"hljs-n=
umber">4</span>
    <span class=3D"hljs-keyword">set</span> rs232standard(readHwByte) <span=
 class=3D"hljs-string">":020000050703EF"</span>
    <span class=3D"hljs-keyword">set</span> rs232standard(readBootlVer) <sp=
an class=3D"hljs-string">":020000050F00EA"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowErase) <span =
class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowBlankCheck) <=
span class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowProgram) <spa=
n class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowVerify) <span=
 class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowSpecialBytes)=
 <span class=3D"hljs-number">0</span>
    wm title .deviceErase <span class=3D"hljs-string">"$::deviceArray(name)=
 Erase"</span>
    <span class=3D"hljs-keyword">set</span> fReadOnly .main.f_device.f_read=
Only
    frame $fReadOnly -relief groove -borderwidth <span class=3D"hljs-number=
">1</span>
    <span class=3D"hljs-keyword">set</span> fBootlVer $fReadOnly.f_bootlVer
    frame $fBootlVer -relief flat
    <span class=3D"hljs-keyword">set</span> lBootlVer $fBootlVer.l_bootlVer
    label $lBootlVer -text <span class=3D"hljs-string">"Bootloader Ver."</s=
pan> -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lBootlVer <span class=3D"hljs-string">"Bootloader Version: =
read-only"</span>
    <span class=3D"hljs-keyword">set</span> eBootlVer $fBootlVer.e_bootlVer
    entry $eBootlVer -textvariable ::deviceArray(bootlVer) -width <span cla=
ss=3D"hljs-number">5</span> -font $flipFont -state disabled
    setBalloon $eBootlVer <span class=3D"hljs-string">"Bootloader Version"<=
/span>
    pack config $lBootlVer $eBootlVer -side left
    pack config $fBootlVer -side top -ipady <span class=3D"hljs-number">5</=
span> -fill both
    pack configure $fReadOnly -side top -padx <span class=3D"hljs-number">5=
</span> -pady <span class=3D"hljs-number">5</span> -fill both
    <span class=3D"hljs-keyword">set</span> fDeviceBootIds $fReadOnly.f_dev=
iceBootIds
    frame $fDeviceBootIds -relief flat
    <span class=3D"hljs-keyword">set</span> lDeviceBootIds $fDeviceBootIds.=
l_deviceBootIds
    label $lDeviceBootIds -text <span class=3D"hljs-string">"Device Boot Id=
s"</span> -font $flipFont -anchor w -width <span class=3D"hljs-number">16</=
span>
    setBalloon $lDeviceBootIds <span class=3D"hljs-string">"Boot Ids 1, 2: =
read-only"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceBootId1 $fDeviceBootIds.=
e_deviceBootId1
    entry $eDeviceBootId1 -textvariable ::deviceArray(deviceBootId1) -width=
 <span class=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceBootId1 <span class=3D"hljs-string">"Boot Id 1 value=
"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceBootId2 $fDeviceBootIds.=
e_deviceBootId2
    entry $eDeviceBootId2 -textvariable ::deviceArray(deviceBootId2) -width=
 <span class=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceBootId2 <span class=3D"hljs-string">"Boot Id 2 value=
"</span>
    pack config $lDeviceBootIds $eDeviceBootId1 -side left
    pack config $eDeviceBootId2 -padx <span class=3D"hljs-number">2</span> =
-side left
    pack config $fDeviceBootIds -side top -ipady <span class=3D"hljs-number=
">1</span> -fill both
    <span class=3D"hljs-keyword">set</span> fCRC .main.f_device.f_crc
    frame $fCRC -relief groove -bd <span class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> bCRC $fCRC.b_crc
    button $bCRC -bd <span class=3D"hljs-number">3</span> -text <span class=
=3D"hljs-string">"CRC"</span> -font $flipFont -command {storeAndDisplayCRC =
[<span class=3D"hljs-keyword">format</span> %<span class=3D"hljs-number">06=
</span>X [<span class=3D"hljs-keyword">expr</span> [readDeviceArray memoryS=
ize] * <span class=3D"hljs-number">1024</span> - <span class=3D"hljs-number=
">3</span>]]} -state normal
    setBalloon $bCRC <span class=3D"hljs-string">"Launches a CRC calculatio=
n"</span>
    <span class=3D"hljs-keyword">set</span> eCRC $fCRC.e_crc
    entry $eCRC -textvariable ::deviceArray(crc) -width <span class=3D"hljs=
-number">5</span> -font $flipFont -takefocus <span class=3D"hljs-number">0<=
/span> -state disabled
    setBalloon $eCRC <span class=3D"hljs-string">"CRC actual value"</span>
    pack configure $bCRC $eCRC -side left -padx <span class=3D"hljs-number"=
>10</span>
    pack configure $fCRC -side top -padx <span class=3D"hljs-number">5</spa=
n> -pady <span class=3D"hljs-number">5</span> -ipady <span class=3D"hljs-nu=
mber">5</span> -fill both
    frame .main.f_device.f_dummy -height <span class=3D"hljs-number">220</s=
pan>
    pack .main.f_device.f_dummy
    <span class=3D"hljs-keyword">set</span> fButtons .main.f_device.f_butto=
ns
    frame $fButtons -relief flat
    <span class=3D"hljs-keyword">set</span> bUpdate $fButtons.b_update
    button $bUpdate -bd <span class=3D"hljs-number">3</span> -text <span cl=
ass=3D"hljs-string">"Read"</span> -font $flipFont -command {devcUpdateDevic=
eFrame} -state disabled
    setBalloon $bUpdate <span class=3D"hljs-string">"Reads device special b=
ytes"</span>
    <span class=3D"hljs-keyword">set</span> bWrite $fButtons.b_write
    button $bWrite -bd <span class=3D"hljs-number">3</span> -text <span cla=
ss=3D"hljs-string">"Set"</span> -font $flipFont -command {devcSetDeviceSpec=
ialBytes} -state disabled
    setBalloon $bWrite <span class=3D"hljs-string">"Sets device special byt=
es"</span>
    <span class=3D"hljs-keyword">set</span> bExec $fButtons.b_exec
    button $bExec -bd <span class=3D"hljs-number">3</span> -text <span clas=
s=3D"hljs-string">"Start Application"</span> -font $flipFont -command {ptcl=
StartAppli <span class=3D"hljs-number">0</span>} -state disabled
    setBalloon $bExec <span class=3D"hljs-string">"Starts application at ad=
dress 0x0000"</span>
    pack config $bExec -side left -padx <span class=3D"hljs-number">5</span=
>
    <span class=3D"hljs-keyword">catch</span> [destroy .main.f_buffer.b_mem=
Select]
    pack configure $fButtons -side top -padx <span class=3D"hljs-number">10=
</span> -pady <span class=3D"hljs-number">10</span> -fill both
    pack forget .main.f_flow.f_operations.b_specialBytes
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> buildSk=
ipTestList</span> {protocol} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(skipList) <span c=
lass=3D"hljs-string">"  xaf-1.*  flash-2.*  fuse-3.*  specific-4.4  specifi=
c-4.5  specific-4.6  specific-4.7  specific-4.8  specific-4.9  specific-4.1=
0  specific-4.11  specific-4.12  specific-4.13  specific-4.14  specific-4.1=
5  specific-4.16  specific-4.17  checksum-5.1  checksum-5.1  checksum-5.2  =
checksum-5.3  checksum-5.4  checksum-5.5  checksum-5.6  checksum-5.7  check=
sum-5.8  checksum-5.9  checksum-5.10  checksum-5.11  checksum-5.12  checksu=
m-5.13  checksum-5.14  checksum-5.15 \
      checksum-5.16  checksum-5.18  checksum-5.19  checksum-5.20  checksum-=
5.21  checksum-5.22  checksum-5.23  checksum-5.24  checksum-5.25  checksum-=
5.27  checksum-5.30  checksum-5.31  eeprom-* "</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> buildSk=
ipProcList</span> {} {
    <span class=3D"hljs-keyword">set</span> skipL [<span class=3D"hljs-keyw=
ord">list</span> ptclReadManufId ptclReadDeviceId1 ptclReadDeviceId2 ptclRe=
adDeviceId3 ptclReadHwByte ptclReadSBV ptclReadBSB ptclReadSSB ptclReadEB p=
tclReadBTC1 ptclReadBTC2 ptclReadBTC3 ptclReadNNB ptclReadCRIS ptclReadPort=
sConfig updateBypassBitsDisplay]
    <span class=3D"hljs-keyword">return</span> $skipL
}
at8xc5122
<span class=3D"hljs-keyword">foreach</span> m $::deviceArray(memoryList) {
    cmdsImportCurrentMemoryNameSpace $m
    cmdsSetMemoryParameters
    initBuffer
}
cmdsImportCurrentMemoryNameSpace FLASH
<span class=3D"hljs-comment">#dbgEndSrc [info script]  #dbgBeginSrc [info s=
cript]</span>
<span class=3D"hljs-keyword">global</span> projDir
<span class=3D"hljs-keyword">source</span> $projDir/tcl/devices/devices_com=
mon.tcl
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> lu2000<=
/span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> protcl protocol nAddrBits fl=
ipFont rs232standard canstandard expAnsw testFlag buffer flowButtons flipSt=
ates
    <span class=3D"hljs-keyword">set</span> children_List [<span class=3D"h=
ljs-keyword">split</span> [winfo children .main.f_device]]
    <span class=3D"hljs-keyword">foreach</span> item $children_List {
	<span class=3D"hljs-keyword">if</span> {$item !=3D <span class=3D"hljs-str=
ing">".main.f_device.f_deviceName"</span>} then {
	    destroy $item
	}
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">a=
rray</span> exists ::deviceArray]} then {
	<span class=3D"hljs-keyword">array</span> <span class=3D"hljs-keyword">uns=
et</span> ::deviceArray
    }
    <span class=3D"hljs-keyword">set</span> ::deviceArray(name) <span class=
=3D"hljs-string">"LU2000"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(communicationList=
) <span class=3D"hljs-string">"RS232"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(memoryList) [<spa=
n class=3D"hljs-keyword">list</span> FLASH]
    <span class=3D"hljs-keyword">set</span> ::deviceArray(memoryColor) [<sp=
an class=3D"hljs-keyword">list</span> <span class=3D"hljs-string">"#88a67d"=
</span> <span class=3D"hljs-string">"wheat"</span>]
    <span class=3D"hljs-keyword">set</span> ::deviceArray(currentMemory) <s=
pan class=3D"hljs-string">"FLASH"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(usb_dfu_default_p=
roduct_id) <span class=3D"hljs-number">0x2FFF</span>
    <span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keywo=
rd">eval</span> ::FLASH:: {
	<span class=3D"hljs-keyword">variable</span> deviceArray
	<span class=3D"hljs-keyword">variable</span> buffer
	<span class=3D"hljs-keyword">set</span> deviceArray(memorySize) <span clas=
s=3D"hljs-number">64</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankValue) <span clas=
s=3D"hljs-string">"FF"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erase) <span class=3D"hljs-=
string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(blankCheck) <span class=3D"=
hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseType) <span class=3D"h=
ljs-string">"full"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlocks) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock0) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock0) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock1) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock1) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock2) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock2) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock3) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock3) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock4) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock4) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(progStart) <span class=
=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(displayData) <span cla=
ss=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankCheck) <span clas=
s=3D"hljs-string">"01"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(programData) <span cla=
ss=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">namespace</span> export writeBuffer readBuffe=
r readDeviceArray initBuffer bufferChecksum
    }
    <span class=3D"hljs-keyword">foreach</span> M $::deviceArray(memoryList=
) {
	<span class=3D"hljs-keyword">proc</span> ::${M}::writeBuffer {index data} =
{
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">set</span> buffer($index) $data
	    <span class=3D"hljs-keyword">return</span>
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::readBuffer {index} {
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">return</span> $buffer($index)
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::readDeviceArray {index} {
	    <span class=3D"hljs-keyword">variable</span> deviceArray
	    <span class=3D"hljs-keyword">return</span> $deviceArray($index)
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::initBuffer {} {
	    <span class=3D"hljs-keyword">variable</span> deviceArray
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">global</span> flipStates
	    <span class=3D"hljs-keyword">set</span> max [<span class=3D"hljs-keywo=
rd">expr</span> $deviceArray(memorySize) * <span class=3D"hljs-number">1024=
</span>]
	    <span class=3D"hljs-keyword">if</span> {$flipStates(simul)} then {
		<span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">set=
</span> i <span class=3D"hljs-number">0</span>} {$i &lt; $max} {<span class=
=3D"hljs-keyword">incr</span> i} {
		    <span class=3D"hljs-keyword">set</span> buffer([<span class=3D"hljs-k=
eyword">format</span> %<span class=3D"hljs-number">06</span>X $i]) $deviceA=
rray(blankValue)
		}
	    } else {
		initBuffer_C $max $deviceArray(blankValue)
	    }
	    <span class=3D"hljs-keyword">return</span>
	}
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::F=
LASH::bufferChecksum</span> {} {
	<span class=3D"hljs-keyword">variable</span> buffer
	<span class=3D"hljs-keyword">global</span> flipStates
	<span class=3D"hljs-keyword">set</span> min $buffer(minProgAddr)
	<span class=3D"hljs-keyword">set</span> max $buffer(maxProgAddr)
	<span class=3D"hljs-keyword">if</span> {$flipStates(simul)} then {
	    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number"=
>0xCAFEFADE</span>
	} else {
	    <span class=3D"hljs-keyword">return</span> [computeBufferChecksum_C $m=
in $max]
	}
    }
    <span class=3D"hljs-keyword">set</span> ::deviceArray(jumpAdd) <span cl=
ass=3D"hljs-string">"0000"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(specialSynchro) <=
span class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(RS232ProtocolsLis=
t) <span class=3D"hljs-string">"Standard Enhanced"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev0) [<span cla=
ss=3D"hljs-keyword">list</span> FF]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev0Test) <span =
class=3D"hljs-string">"FF"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev1) [<span cla=
ss=3D"hljs-keyword">list</span> FE]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev1Test) <span =
class=3D"hljs-string">"FE"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev2Test) <span =
class=3D"hljs-string">"FC"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev2) [<span cla=
ss=3D"hljs-keyword">list</span> FC XX]
    <span class=3D"hljs-keyword">set</span> expAnsw(readManufId) <span clas=
s=3D"hljs-number">58</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId1) XX
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId2) XX
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId3) XX
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock0) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock1) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock2) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock3) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock4) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(readDevBootId1) <span =
class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(readDevBootId2) <span =
class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(sbv) <span class=3D"hl=
js-string">"F8"</span>
    <span class=3D"hljs-keyword">set</span> fBlocks .deviceErase.f_erase.f_=
blocks
    <span class=3D"hljs-keyword">set</span> bBlock0 $fBlocks.b_block0
    <span class=3D"hljs-keyword">set</span> bBlock1 $fBlocks.b_block1
    <span class=3D"hljs-keyword">set</span> bBlock2 $fBlocks.b_block2
    <span class=3D"hljs-keyword">set</span> bBlock3 $fBlocks.b_block3
    <span class=3D"hljs-keyword">set</span> bBlock4 $fBlocks.b_block4
    setBalloon $bBlock0 <span class=3D"hljs-string">"Erase memory between 0=
000 and 1FFF"</span>
    setBalloon $bBlock1 <span class=3D"hljs-string">"Erase memory between 2=
000 and 3FFF"</span>
    setBalloon $bBlock2 <span class=3D"hljs-string">"Erase memory between 4=
000 and 7FFF"</span>
    setBalloon $bBlock3 <span class=3D"hljs-string">"Erase memory between 8=
000 and BFFF"</span>
    setBalloon $bBlock4 <span class=3D"hljs-string">"Erase memory between C=
000 and FFFF"</span>
    .main.f_device.f_deviceName.l_device configure -text $::deviceArray(nam=
e)
    .main.f_device.f_deviceName configure -relief groove
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(sbv)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(sbv) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(bsb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(bsb) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(ssb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(ssb) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(hsb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(hsb) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(eb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(eb) <span class=3D"h=
ljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(deviceBootId1)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(deviceBootId1) <span=
 class=3D"hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(deviceBootId2)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(deviceBootId2) <span=
 class=3D"hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(selBootFuse)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(selBootFuse) <span c=
lass=3D"hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(bljbFuse)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(bljbFuse) <span clas=
s=3D"hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(x2Fuse)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(x2Fuse) <span class=
=3D"hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(level)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(level) X
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(eraseType)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(eraseType) <span cla=
ss=3D"hljs-string">"full"</span>
    }
    <span class=3D"hljs-keyword">set</span> nAddrBits <span class=3D"hljs-n=
umber">4</span>
    <span class=3D"hljs-keyword">set</span> rs232standard(readHwByte) <span=
 class=3D"hljs-string">":020000050B00EE"</span>
    <span class=3D"hljs-keyword">set</span> rs232standard(readBootlVer) <sp=
an class=3D"hljs-string">":020000050F00EA"</span>
    <span class=3D"hljs-keyword">set</span> protocol(frameLengthW) <span cl=
ass=3D"hljs-number">128</span>
    <span class=3D"hljs-keyword">set</span> protocol(frameLengthR) <span cl=
ass=3D"hljs-number">16</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowErase) <span =
class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowBlankCheck) <=
span class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowProgram) <spa=
n class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowVerify) <span=
 class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowSpecialBytes)=
 <span class=3D"hljs-number">0</span>
    wm title .deviceErase <span class=3D"hljs-string">"$::deviceArray(name)=
 Erase"</span>
    .deviceErase.f_erase.f_blocks.b_blockErase configure -state normal
    <span class=3D"hljs-keyword">set</span> fReadOnly .main.f_device.f_read=
Only
    frame $fReadOnly -relief groove -borderwidth <span class=3D"hljs-number=
">1</span>
    <span class=3D"hljs-keyword">set</span> fManufId $fReadOnly.f_manufId
    frame $fManufId -relief flat
    <span class=3D"hljs-keyword">set</span> lManufId $fManufId.l_manufId
    label $lManufId -text <span class=3D"hljs-string">"Manufact. Id"</span>=
 -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    <span class=3D"hljs-keyword">set</span> eManufId $fManufId.e_manufId
    entry $eManufId -textvariable ::deviceArray(manufId) -width <span class=
=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eManufId <span class=3D"hljs-string">"Manufacturer code val=
ue"</span>
    pack config $lManufId $eManufId -padx <span class=3D"hljs-number">1</sp=
an> -side left
    pack config $fManufId -side top -ipady <span class=3D"hljs-number">1</s=
pan> -fill both
    <span class=3D"hljs-keyword">set</span> fDeviceIds $fReadOnly.f_deviceI=
ds
    frame $fDeviceIds -relief flat
    <span class=3D"hljs-keyword">set</span> lDeviceIds $fDeviceIds.l_device=
Ids
    label $lDeviceIds -text <span class=3D"hljs-string">"Device Ids"</span>=
 -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    <span class=3D"hljs-keyword">set</span> eDeviceId1 $fDeviceIds.e_device=
Id1
    entry $eDeviceId1 -textvariable ::deviceArray(deviceId1) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId1 <span class=3D"hljs-string">"Family code value"<=
/span>
    <span class=3D"hljs-keyword">set</span> eDeviceId2 $fDeviceIds.e_device=
Id2
    entry $eDeviceId2 -textvariable ::deviceArray(deviceId2) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId2 <span class=3D"hljs-string">"Device name code"</=
span>
    <span class=3D"hljs-keyword">set</span> eDeviceId3 $fDeviceIds.e_device=
Id3
    entry $eDeviceId3 -textvariable ::deviceArray(deviceId3) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId3 <span class=3D"hljs-string">"Device revision num=
ber"</span>
    pack config $lDeviceIds $eDeviceId1 $eDeviceId2 $eDeviceId3 -padx <span=
 class=3D"hljs-number">1</span> -side left
    pack config $fDeviceIds -side top -ipady <span class=3D"hljs-number">1<=
/span> -fill both
    <span class=3D"hljs-keyword">set</span> fDeviceBootIds $fReadOnly.f_dev=
iceBootIds
    frame $fDeviceBootIds -relief flat
    <span class=3D"hljs-keyword">set</span> lDeviceBootIds $fDeviceBootIds.=
l_deviceBootIds
    label $lDeviceBootIds -text <span class=3D"hljs-string">"Device Boot Id=
s"</span> -font $flipFont -anchor w -width <span class=3D"hljs-number">16</=
span>
    setBalloon $lDeviceBootIds <span class=3D"hljs-string">"Boot Ids 1, 2: =
read-only"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceBootId1 $fDeviceBootIds.=
e_deviceBootId1
    entry $eDeviceBootId1 -textvariable ::deviceArray(deviceBootId1) -width=
 <span class=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceBootId1 <span class=3D"hljs-string">"Boot Id 1 value=
"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceBootId2 $fDeviceBootIds.=
e_deviceBootId2
    entry $eDeviceBootId2 -textvariable ::deviceArray(deviceBootId2) -width=
 <span class=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceBootId2 <span class=3D"hljs-string">"Boot Id 2 value=
"</span>
    pack config $lDeviceBootIds $eDeviceBootId1 $eDeviceBootId2 -padx <span=
 class=3D"hljs-number">1</span> -side left
    pack config $fDeviceBootIds -side top -ipady <span class=3D"hljs-number=
">1</span> -fill both
    <span class=3D"hljs-keyword">set</span> fHSB $fReadOnly.f_hsb
    frame $fHSB -relief flat
    <span class=3D"hljs-keyword">set</span> lHSB $fHSB.l_hsb
    label $lHSB -text <span class=3D"hljs-string">"Hardware Byte"</span> -f=
ont $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lHSB <span class=3D"hljs-string">"Hardware Security Byte: r=
ead-only"</span>
    <span class=3D"hljs-keyword">set</span> eHSB $fHSB.e_hsb
    entry $eHSB -textvariable ::deviceArray(hsb) -width <span class=3D"hljs=
-number">3</span> -font $flipFont -state disabled
    setBalloon $eHSB <span class=3D"hljs-string">"Hardware Security Byte va=
lue"</span>
    pack config $lHSB $eHSB -padx <span class=3D"hljs-number">1</span> -sid=
e left
    pack config $fHSB -side top -ipady <span class=3D"hljs-number">1</span>=
 -fill both
    <span class=3D"hljs-keyword">set</span> fBootlVer $fReadOnly.f_bootlVer
    frame $fBootlVer -relief flat
    <span class=3D"hljs-keyword">set</span> lBootlVer $fBootlVer.l_bootlVer
    label $lBootlVer -text <span class=3D"hljs-string">"Bootloader Ver."</s=
pan> -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lBootlVer <span class=3D"hljs-string">"Bootloader Version: =
read-only"</span>
    <span class=3D"hljs-keyword">set</span> eBootlVer $fBootlVer.e_bootlVer
    entry $eBootlVer -textvariable ::deviceArray(bootlVer) -width <span cla=
ss=3D"hljs-number">5</span> -font $flipFont -state disabled
    setBalloon $eBootlVer <span class=3D"hljs-string">"Bootloader Version"<=
/span>
    pack config $lBootlVer $eBootlVer -padx <span class=3D"hljs-number">1</=
span> -side left
    pack config $fBootlVer -side top -ipady <span class=3D"hljs-number">1</=
span> -fill both
    pack configure $fReadOnly -side top -padx <span class=3D"hljs-number">5=
</span> -fill both
    <span class=3D"hljs-keyword">set</span> fFuses .main.f_device.f_fuses
    frame $fFuses -relief groove -borderwidth <span class=3D"hljs-number">1=
</span>
    <span class=3D"hljs-keyword">set</span> bSelBoot $fFuses.b_selboot
    checkbutton $bSelBoot -text <span class=3D"hljs-string">"SELBOOT"</span=
> -font $flipFont -<span class=3D"hljs-keyword">variable</span> ::deviceArr=
ay(selBootFuse) -onvalue <span class=3D"hljs-number">0</span> -offvalue <sp=
an class=3D"hljs-number">1</span> -indicatoron true -state disabled
    setBalloon $bSelBoot <span class=3D"hljs-string">"Boot Select Bit \nSet=
 =3D 0 / Unset =3D 1"</span>
    <span class=3D"hljs-keyword">set</span> bBLJB $fFuses.b_bljb
    checkbutton $bBLJB -text <span class=3D"hljs-string">"BLJB"</span> -fon=
t $flipFont -<span class=3D"hljs-keyword">variable</span> ::deviceArray(blj=
bFuse) -onvalue <span class=3D"hljs-number">0</span> -offvalue <span class=
=3D"hljs-number">1</span> -indicatoron true -state disabled
    setBalloon $bBLJB <span class=3D"hljs-string">"Boot Loader Jump Bit \nS=
et =3D 0 / Unset =3D 1"</span>
    <span class=3D"hljs-keyword">set</span> bX2 $fFuses.b_x2
    checkbutton $bX2 -text <span class=3D"hljs-string">"X2"</span> -font $f=
lipFont -<span class=3D"hljs-keyword">variable</span> ::deviceArray(x2Fuse)=
 -onvalue <span class=3D"hljs-number">0</span> -offvalue <span class=3D"hlj=
s-number">1</span> -indicatoron true -state disabled
    setBalloon $bX2 <span class=3D"hljs-string">"X2 fuse bit \nSet =3D 0 / =
Unset =3D 1"</span>
    pack config $bSelBoot $bBLJB $bX2 -side left -padx <span class=3D"hljs-=
number">3</span> -anchor w
    pack configure $fFuses -side top -padx <span class=3D"hljs-number">5</s=
pan> -pady <span class=3D"hljs-number">5</span> -fill x
    <span class=3D"hljs-keyword">set</span> f_BSB_SBV .main.f_device.f_bsb_=
sbv
    frame $f_BSB_SBV -relief groove -borderwidth <span class=3D"hljs-number=
">1</span>
    <span class=3D"hljs-keyword">set</span> f_BSB $f_BSB_SBV.f_bsb
    frame $f_BSB -relief flat
    <span class=3D"hljs-keyword">set</span> l_BSB $f_BSB.l_bsb
    label $l_BSB -text <span class=3D"hljs-string">"Device BSB"</span> -fon=
t $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $l_BSB <span class=3D"hljs-string">"Boot Status Byte"</span>
    <span class=3D"hljs-keyword">set</span> e_BSB $f_BSB.e_bsb
    entry $e_BSB -textvariable ::deviceArray(bsb) -width <span class=3D"hlj=
s-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0=
</span> -state disabled
    setBalloon $e_BSB <span class=3D"hljs-string">"Actual BSB value"</span>
    <span class=3D"hljs-keyword">set</span> e_EB $f_BSB.e_eb
    entry $e_EB -textvariable ::deviceArray(eb) -width <span class=3D"hljs-=
number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0</=
span> -state disabled
    setBalloon $e_EB <span class=3D"hljs-string">"Actual EB value"</span>
    pack config $l_BSB $e_BSB -padx <span class=3D"hljs-number">1</span> -s=
ide left
    pack config $f_BSB -side top -ipady <span class=3D"hljs-number">1</span=
> -fill both
    <span class=3D"hljs-keyword">set</span> f_SBV $f_BSB_SBV.f_sbv
    frame $f_SBV -relief flat
    <span class=3D"hljs-keyword">set</span> l_SBV $f_SBV.l_sbv
    label $l_SBV -text <span class=3D"hljs-string">"Device SBV"</span> -fon=
t $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $l_SBV <span class=3D"hljs-string">"Software Boot Vector"</s=
pan>
    <span class=3D"hljs-keyword">set</span> e_SBV $f_SBV.e_sbv
    entry $e_SBV -textvariable ::deviceArray(sbv) -width <span class=3D"hlj=
s-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0=
</span> -state disabled
    setBalloon $e_SBV <span class=3D"hljs-string">"Actual SBV value"</span>
    <span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-number">0</=
span>} then {
	<span class=3D"hljs-keyword">set</span> bErase $fSBV.b_erase
	button $bErase -bd <span class=3D"hljs-number">3</span> -text <span class=
=3D"hljs-string">"Erase"</span> -font $flipFont -command {cmdsEraseSBVBSB} =
-state disabled -width <span class=3D"hljs-number">5</span>
	setBalloon $bErase <span class=3D"hljs-string">"Resets SBV and BSB\nto def=
ault values"</span>
    }
    pack config $l_SBV $e_SBV -padx <span class=3D"hljs-number">1</span> -s=
ide left
    pack config $f_SBV -side top -ipady <span class=3D"hljs-number">1</span=
> -fill both
    pack configure $f_BSB_SBV -side top -padx <span class=3D"hljs-number">5=
</span> -fill both
    bind $e_SBV &lt;Return&gt; {devcSetDeviceSpecialBytes}
    bind $e_BSB &lt;Return&gt; {devcSetDeviceSpecialBytes}
    <span class=3D"hljs-keyword">set</span> fSSB .main.f_device.f_ssb
    frame $fSSB -relief groove -borderwidth <span class=3D"hljs-number">1</=
span>
    <span class=3D"hljs-keyword">set</span> fInfo $fSSB.f_info
    frame $fInfo -relief flat
    <span class=3D"hljs-keyword">set</span> lSSB $fInfo.l_ssb
    label $lSSB -text <span class=3D"hljs-string">"Device SSB"</span> -font=
 $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lSSB <span class=3D"hljs-string">"Software Security Byte"</=
span>
    <span class=3D"hljs-keyword">set</span> eSSB $fInfo.e_ssb
    entry $eSSB -textvariable ::deviceArray(ssb) -width <span class=3D"hljs=
-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0<=
/span> -state disabled
    setBalloon $eSSB <span class=3D"hljs-string">"Actual SSB value"</span>
    pack config $lSSB $eSSB -padx <span class=3D"hljs-number">1</span> -sid=
e left
    pack config $fInfo -side top
    <span class=3D"hljs-keyword">set</span> fLevel $fSSB.f_level
    frame $fLevel -relief flat
    <span class=3D"hljs-keyword">set</span> bLevel0 $fLevel.b_level0
    radiobutton $bLevel0 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 0"</span> -value <sp=
an class=3D"hljs-number">0</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 0"</span> -state disabled
    setBalloon $bLevel0 <span class=3D"hljs-string">"Security level 0: no s=
ecurity\n (setting to levels 1 and 2 allowed)"</span>
    pack configure $bLevel0 -side left
    <span class=3D"hljs-keyword">set</span> bLevel1 $fLevel.b_level1
    radiobutton $bLevel1 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 1"</span> -value <sp=
an class=3D"hljs-number">1</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 1"</span> -state disabled
    setBalloon $bLevel1 <span class=3D"hljs-string">"Security level 1: no w=
riting allowed\n (setting to level 2 allowed)"</span>
    pack configure $bLevel1 -side left
    <span class=3D"hljs-keyword">set</span> bLevel2 $fLevel.b_level2
    radiobutton $bLevel2 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 2"</span> -value <sp=
an class=3D"hljs-number">2</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 2"</span> -state disabled
    setBalloon $bLevel2 <span class=3D"hljs-string">"Security level 2: neit=
her reading nor writing allowed\n (full chip erase resets security level to=
 0)"</span>
    pack configure $bLevel2 -side left
    pack configure $fInfo -side top -anchor w -ipady <span class=3D"hljs-nu=
mber">2</span> -fill both
    pack configure $fLevel -side top -anchor w -pady <span class=3D"hljs-nu=
mber">5</span> -fill both
    pack configure $fSSB -side top -padx <span class=3D"hljs-number">5</spa=
n> -pady <span class=3D"hljs-number">5</span> -fill both
    <span class=3D"hljs-keyword">set</span> fStartApp .main.f_device.f_star=
tApp
    frame $fStartApp -relief groove -borderwidth <span class=3D"hljs-number=
">1</span>
    button $fStartApp.b_start -text <span class=3D"hljs-string">"Start Appl=
ication"</span> -bd <span class=3D"hljs-number">3</span> -font $flipFont -s=
tate disabled -command {ptclStartAppli $flipStates(withReset)}
    setBalloon $fStartApp.b_start <span class=3D"hljs-string">"Starts appli=
cation at address 0x0000"</span>
    checkbutton $fStartApp.b_reset -text <span class=3D"hljs-string">"With =
Reset"</span> -font $flipFont -<span class=3D"hljs-keyword">variable</span>=
 flipStates(withReset) -indicatoron true -state disabled
    setBalloon $fStartApp.b_reset <span class=3D"hljs-string">"If set, gene=
rates a hardware reset pulse\n  when the Start Application button is presse=
d."</span>
    pack configure $fStartApp.b_start $fStartApp.b_reset -side left -padx <=
span class=3D"hljs-number">5</span> -pady <span class=3D"hljs-number">5</sp=
an>
    pack configure $fStartApp -padx <span class=3D"hljs-number">5</span> -f=
ill both
    <span class=3D"hljs-keyword">set</span> fButtons .main.f_device.f_butto=
ns
    frame $fButtons -relief flat
    pack configure $fButtons -side top
    <span class=3D"hljs-keyword">set</span> bUpdate $fButtons.b_update
    button $bUpdate -bd <span class=3D"hljs-number">3</span> -text <span cl=
ass=3D"hljs-string">"Read"</span> -font $flipFont -command {devcUpdateDevic=
eFrame} -state disabled
    setBalloon $bUpdate <span class=3D"hljs-string">"Reads device special b=
ytes"</span>
    <span class=3D"hljs-keyword">set</span> bWrite $fButtons.b_write
    button $bWrite -bd <span class=3D"hljs-number">3</span> -text <span cla=
ss=3D"hljs-string">"Set"</span> -font $flipFont -command {devcSetDeviceSpec=
ialBytes} -state disabled
    setBalloon $bWrite <span class=3D"hljs-string">"Sets device special byt=
es"</span>
    <span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-number">0</=
span>} then {
	<span class=3D"hljs-keyword">set</span> bMemorySelect .main.f_buffer.b_mem=
Select
	<span class=3D"hljs-keyword">if</span> {! [winfo exists $bMemorySelect]} t=
hen {
	    button $bMemorySelect -bd <span class=3D"hljs-number">3</span> -text $=
::deviceArray(currentMemory) -font $flipFont -command {cmdsToggleMemory} -w=
idth <span class=3D"hljs-number">8</span> -state disabled
	    setBalloon $bMemorySelect <span class=3D"hljs-string">"FLIP will perfo=
rm all operations\n on the selected memory"</span>
	}
    }
    pack config $bUpdate $bWrite -side left -padx <span class=3D"hljs-numbe=
r">15</span>
    pack configure $fButtons -side top -padx <span class=3D"hljs-number">5<=
/span> -pady <span class=3D"hljs-number">15</span> -fill both
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> buildSk=
ipTestList</span> {protocol} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">switch</span> $protocol {
    USB_DFU {
	    <span class=3D"hljs-keyword">set</span> ::deviceArray(skipList) <span =
class=3D"hljs-string">"  xaf-1.5  xaf-1.6  xaf-1.13  xaf-1.14  xaf-1.21  xa=
f-1.22  xaf-1.28  flash-2.23.1  flash-2.25 "</span>
	}
    RS232Standard {
	    <span class=3D"hljs-keyword">set</span> ::deviceArray(skipList) <span =
class=3D"hljs-string">"  xaf-1.5  xaf-1.6  xaf-1.13  xaf-1.14  xaf-1.21  xa=
f-1.22  xaf-1.28  flash-2.23.1  flash-2.25 "</span>
	}
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> buildSk=
ipProcList</span> {} {
    <span class=3D"hljs-keyword">set</span> skipL {}
    <span class=3D"hljs-keyword">return</span> $skipL
}
lu2000
<span class=3D"hljs-keyword">foreach</span> m $::deviceArray(memoryList) {
    cmdsImportCurrentMemoryNameSpace $m
    cmdsSetMemoryParameters
    initBuffer
}
cmdsImportCurrentMemoryNameSpace FLASH
<span class=3D"hljs-comment">#dbgEndSrc [info script]</span>
<span class=3D"hljs-comment">#dbgBeginSrc [info script]</span>
<span class=3D"hljs-keyword">global</span> projDir
<span class=3D"hljs-keyword">source</span> $projDir/tcl/devices/devices_com=
mon.tcl
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> t89c51a=
c2</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> protcl protocol nAddrBits fl=
ipFont rs232standard canstandard expAnsw testFlag buffer flowButtons flipSt=
ates
    <span class=3D"hljs-keyword">set</span> children_List [<span class=3D"h=
ljs-keyword">split</span> [winfo children .main.f_device]]
    <span class=3D"hljs-keyword">foreach</span> item $children_List {
	<span class=3D"hljs-keyword">if</span> {$item !=3D <span class=3D"hljs-str=
ing">".main.f_device.f_deviceName"</span>} then {
	    destroy $item
	}
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">a=
rray</span> exists ::deviceArray]} then {
	<span class=3D"hljs-keyword">array</span> <span class=3D"hljs-keyword">uns=
et</span> ::deviceArray
    }
    <span class=3D"hljs-keyword">set</span> ::deviceArray(name) <span class=
=3D"hljs-string">"T89C51AC2"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(communicationList=
) <span class=3D"hljs-string">"RS232"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(memoryList) [<spa=
n class=3D"hljs-keyword">list</span> FLASH EEPROM CUSTOM]
    <span class=3D"hljs-keyword">set</span> ::deviceArray(memoryButtonList)=
 [<span class=3D"hljs-keyword">list</span> <span class=3D"hljs-string">"Sel=
ect EEPROM"</span> <span class=3D"hljs-string">"Select CUSTOM"</span> <span=
 class=3D"hljs-string">"Select FLASH"</span>]
    <span class=3D"hljs-keyword">set</span> ::deviceArray(memoryColor) [<sp=
an class=3D"hljs-keyword">list</span> <span class=3D"hljs-string">"#88a67d"=
</span> <span class=3D"hljs-string">"wheat"</span> <span class=3D"hljs-stri=
ng">"white"</span>]
    <span class=3D"hljs-keyword">set</span> ::deviceArray(currentMemory) <s=
pan class=3D"hljs-string">"FLASH"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(currentMemoryButt=
on) <span class=3D"hljs-string">"Select EEPROM"</span>
    <span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keywo=
rd">eval</span> ::FLASH:: {
	<span class=3D"hljs-keyword">variable</span> deviceArray
	<span class=3D"hljs-keyword">variable</span> buffer
	<span class=3D"hljs-keyword">set</span> deviceArray(memorySize) <span clas=
s=3D"hljs-number">32</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankValue) <span clas=
s=3D"hljs-string">"FF"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erase) <span class=3D"hljs-=
string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(blankCheck) <span class=3D"=
hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseType) <span class=3D"h=
ljs-string">"full"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlocks) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock0) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock0) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock1) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock1) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock2) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock2) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock3) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock3) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock4) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock4) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(displayData) <span cla=
ss=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankCheck) <span clas=
s=3D"hljs-string">"01"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(programData) <span cla=
ss=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">namespace</span> export writeBuffer readBuffe=
r readDeviceArray initBuffer bufferChecksum
    }
    <span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keywo=
rd">eval</span> ::EEPROM:: {
	<span class=3D"hljs-keyword">variable</span> deviceArray
	<span class=3D"hljs-keyword">variable</span> buffer
	<span class=3D"hljs-keyword">set</span> deviceArray(memorySize) <span clas=
s=3D"hljs-number">2</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankValue) <span clas=
s=3D"hljs-string">"FF"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erase) <span class=3D"hljs-=
string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(blankCheck) <span class=3D"=
hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseType) <span class=3D"h=
ljs-string">"full"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlocks) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock0) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock0) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock1) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock1) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock2) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock2) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock3) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock3) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock4) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock4) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(displayData) <span cla=
ss=3D"hljs-string">"02"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankCheck) <span clas=
s=3D"hljs-string">"XX"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(programData) <span cla=
ss=3D"hljs-string">"07"</span>
	<span class=3D"hljs-keyword">namespace</span> export writeBuffer readBuffe=
r readDeviceArray initBuffer bufferChecksum
    }
    <span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keywo=
rd">eval</span> ::CUSTOM:: {
	<span class=3D"hljs-keyword">variable</span> deviceArray
	<span class=3D"hljs-keyword">variable</span> buffer
	<span class=3D"hljs-keyword">set</span> deviceArray(memorySize) <span clas=
s=3D"hljs-number">64</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankValue) <span clas=
s=3D"hljs-string">"FF"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erase) <span class=3D"hljs-=
string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(blankCheck) <span class=3D"=
hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseType) <span class=3D"h=
ljs-string">"full"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlocks) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock0) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock0) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock1) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock1) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock2) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock2) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock3) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock3) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock4) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock4) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(displayData) <span cla=
ss=3D"hljs-string">"03"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankCheck) <span clas=
s=3D"hljs-string">"XX"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(programData) <span cla=
ss=3D"hljs-string">"08"</span>
	<span class=3D"hljs-keyword">namespace</span> export writeBuffer readBuffe=
r readDeviceArray initBuffer bufferChecksum
    }
    <span class=3D"hljs-keyword">foreach</span> M $::deviceArray(memoryList=
) {
	<span class=3D"hljs-keyword">proc</span> ::${M}::writeBuffer {index data} =
{
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">set</span> buffer($index) $data
	    <span class=3D"hljs-keyword">return</span>
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::readBuffer {index} {
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">return</span> $buffer($index)
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::readDeviceArray {index} {
	    <span class=3D"hljs-keyword">variable</span> deviceArray
	    <span class=3D"hljs-keyword">return</span> $deviceArray($index)
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::initBuffer {} {
	    <span class=3D"hljs-keyword">variable</span> deviceArray
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">global</span> flipStates
	    <span class=3D"hljs-keyword">set</span> max [<span class=3D"hljs-keywo=
rd">expr</span> $deviceArray(memorySize) * <span class=3D"hljs-number">1024=
</span>]
	    <span class=3D"hljs-keyword">if</span> {$flipStates(simul)} then {
		<span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">set=
</span> i <span class=3D"hljs-number">0</span>} {$i &lt; $max} {<span class=
=3D"hljs-keyword">incr</span> i} {
		    <span class=3D"hljs-keyword">set</span> buffer([<span class=3D"hljs-k=
eyword">format</span> %<span class=3D"hljs-number">06</span>X $i]) $deviceA=
rray(blankValue)
		}
	    } else {
		initBuffer_C $max $deviceArray(blankValue)
	    }
	    <span class=3D"hljs-keyword">return</span>
	}
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::F=
LASH::bufferChecksum</span> {} {
	<span class=3D"hljs-keyword">variable</span> buffer
	<span class=3D"hljs-keyword">global</span> flipStates
	<span class=3D"hljs-keyword">set</span> min $buffer(minProgAddr)
	<span class=3D"hljs-keyword">set</span> max $buffer(maxProgAddr)
	<span class=3D"hljs-keyword">if</span> {$flipStates(simul)} then {
	    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number"=
>0xCAFEFADE</span>
	} else {
	    <span class=3D"hljs-keyword">return</span> [computeBufferChecksum_C $m=
in $max]
	}
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::E=
EPROM::bufferChecksum</span> {} {
	<span class=3D"hljs-keyword">variable</span> buffer
	<span class=3D"hljs-keyword">global</span> flipStates
	<span class=3D"hljs-keyword">set</span> min $buffer(minProgAddr)
	<span class=3D"hljs-keyword">set</span> max $buffer(maxProgAddr)
	<span class=3D"hljs-keyword">if</span> {$flipStates(simul)} then {
	    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number"=
>0xDEADBEEF</span>
	} else {
	    <span class=3D"hljs-keyword">return</span> [computeBufferChecksum_C $m=
in $max]
	}
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::C=
USTOM::bufferChecksum</span> {} {
	<span class=3D"hljs-keyword">variable</span> buffer
	<span class=3D"hljs-keyword">global</span> flipStates
	<span class=3D"hljs-keyword">set</span> min $buffer(minProgAddr)
	<span class=3D"hljs-keyword">set</span> max $buffer(maxProgAddr)
	<span class=3D"hljs-keyword">if</span> {$flipStates(simul)} then {
	    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number"=
>0xDEADBEEF</span>
	} else {
	    <span class=3D"hljs-keyword">return</span> [computeBufferChecksum_C $m=
in $max]
	}
    }
    <span class=3D"hljs-keyword">set</span> ::deviceArray(jumpAdd) <span cl=
ass=3D"hljs-string">"0000"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(specialSynchro) <=
span class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(RS232ProtocolsLis=
t) <span class=3D"hljs-string">"Standard"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(CANProtocolsList)=
 <span class=3D"hljs-string">"Standard Enhanced"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev0) [<span cla=
ss=3D"hljs-keyword">list</span> FF]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev0Test) <span =
class=3D"hljs-string">"FF"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev1) [<span cla=
ss=3D"hljs-keyword">list</span> FE]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev1Test) <span =
class=3D"hljs-string">"FE"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev2) [<span cla=
ss=3D"hljs-keyword">list</span> FC XX]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev2Test) <span =
class=3D"hljs-string">"FC"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readManufId) <span clas=
s=3D"hljs-number">58</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId1) XX
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId2) XX
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId3) XX
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock0) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock1) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock2) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock3) <span cla=
ss=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock4) <span cla=
ss=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> testFlag(readDevBootId1) <span =
class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(readDevBootId2) <span =
class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(sbv) <span class=3D"hl=
js-string">"FC"</span>
    <span class=3D"hljs-keyword">set</span> fBlocks .deviceErase.f_erase.f_=
blocks
    <span class=3D"hljs-keyword">set</span> bBlock0 $fBlocks.b_block0
    <span class=3D"hljs-keyword">set</span> bBlock1 $fBlocks.b_block1
    <span class=3D"hljs-keyword">set</span> bBlock2 $fBlocks.b_block2
    <span class=3D"hljs-keyword">set</span> bBlock3 $fBlocks.b_block3
    <span class=3D"hljs-keyword">set</span> bBlock4 $fBlocks.b_block4
    setBalloon $bBlock0 <span class=3D"hljs-string">"Erase memory between 0=
000 and 1FFF"</span>
    setBalloon $bBlock1 <span class=3D"hljs-string">"Erase memory between 2=
000 and 3FFF"</span>
    setBalloon $bBlock2 <span class=3D"hljs-string">"Erase memory between 4=
000 and 7FFF"</span>
    $bBlock3 configure -state disabled
    $bBlock4 configure -state disabled
    .main.f_device.f_deviceName.l_device configure -text $::deviceArray(nam=
e)
    .main.f_device.f_deviceName configure -relief groove
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(sbv)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(sbv) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(bsb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(bsb) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(ssb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(ssb) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(hsb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(hsb) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(eb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(eb) <span class=3D"h=
ljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(deviceBootId1)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(deviceBootId1) <span=
 class=3D"hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(deviceBootId2)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(deviceBootId2) <span=
 class=3D"hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(bljbFuse)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(bljbFuse) <span clas=
s=3D"hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(x2Fuse)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(x2Fuse) <span class=
=3D"hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(level)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(level) X
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(eraseType)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(eraseType) <span cla=
ss=3D"hljs-string">"full"</span>
    }
    <span class=3D"hljs-keyword">set</span> nAddrBits <span class=3D"hljs-n=
umber">4</span>
    <span class=3D"hljs-keyword">set</span> rs232standard(readHwByte) <span=
 class=3D"hljs-string">":020000050B00EE"</span>
    <span class=3D"hljs-keyword">set</span> rs232standard(readBootlVer) <sp=
an class=3D"hljs-string">":020000050F00EA"</span>
    <span class=3D"hljs-keyword">set</span> protocol(frameLengthW) <span cl=
ass=3D"hljs-number">128</span>
    <span class=3D"hljs-keyword">set</span> protocol(frameLengthR) <span cl=
ass=3D"hljs-number">16</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowErase) <span =
class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowBlankCheck) <=
span class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowProgram) <spa=
n class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowVerify) <span=
 class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowSpecialBytes)=
 <span class=3D"hljs-number">0</span>
    wm title .deviceErase <span class=3D"hljs-string">"$::deviceArray(name)=
 Erase"</span>
    .deviceErase.f_erase.f_blocks.b_blockErase configure -state normal
    <span class=3D"hljs-keyword">set</span> fReadOnly .main.f_device.f_read=
Only
    frame $fReadOnly -relief groove -borderwidth <span class=3D"hljs-number=
">1</span>
    <span class=3D"hljs-keyword">set</span> fManufId $fReadOnly.f_manufId
    frame $fManufId -relief flat
    <span class=3D"hljs-keyword">set</span> lManufId $fManufId.l_manufId
    label $lManufId -text <span class=3D"hljs-string">"Manufact. Id"</span>=
 -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    <span class=3D"hljs-keyword">set</span> eManufId $fManufId.e_manufId
    entry $eManufId -textvariable ::deviceArray(manufId) -width <span class=
=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eManufId <span class=3D"hljs-string">"Manufacturer code val=
ue"</span>
    pack config $lManufId $eManufId -padx <span class=3D"hljs-number">1</sp=
an> -side left
    pack config $fManufId -side top -ipady <span class=3D"hljs-number">1</s=
pan> -fill both
    <span class=3D"hljs-keyword">set</span> fDeviceIds $fReadOnly.f_deviceI=
ds
    frame $fDeviceIds -relief flat
    <span class=3D"hljs-keyword">set</span> lDeviceIds $fDeviceIds.l_device=
Ids
    label $lDeviceIds -text <span class=3D"hljs-string">"Device Ids"</span>=
 -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    <span class=3D"hljs-keyword">set</span> eDeviceId1 $fDeviceIds.e_device=
Id1
    entry $eDeviceId1 -textvariable ::deviceArray(deviceId1) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId1 <span class=3D"hljs-string">"Family code value"<=
/span>
    <span class=3D"hljs-keyword">set</span> eDeviceId2 $fDeviceIds.e_device=
Id2
    entry $eDeviceId2 -textvariable ::deviceArray(deviceId2) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId2 <span class=3D"hljs-string">"Device name code"</=
span>
    <span class=3D"hljs-keyword">set</span> eDeviceId3 $fDeviceIds.e_device=
Id3
    entry $eDeviceId3 -textvariable ::deviceArray(deviceId3) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId3 <span class=3D"hljs-string">"Device revision num=
ber"</span>
    pack config $lDeviceIds $eDeviceId1 $eDeviceId2 $eDeviceId3 -padx <span=
 class=3D"hljs-number">1</span> -side left
    pack config $fDeviceIds -side top -ipady <span class=3D"hljs-number">1<=
/span> -fill both
    <span class=3D"hljs-keyword">set</span> fDeviceBootIds $fReadOnly.f_dev=
iceBootIds
    frame $fDeviceBootIds -relief flat
    <span class=3D"hljs-keyword">set</span> lDeviceBootIds $fDeviceBootIds.=
l_deviceBootIds
    label $lDeviceBootIds -text <span class=3D"hljs-string">"Device Boot Id=
s"</span> -font $flipFont -anchor w -width <span class=3D"hljs-number">16</=
span>
    setBalloon $lDeviceBootIds <span class=3D"hljs-string">"Boot Ids 1, 2: =
read-only"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceBootId1 $fDeviceBootIds.=
e_deviceBootId1
    entry $eDeviceBootId1 -textvariable ::deviceArray(deviceBootId1) -width=
 <span class=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceBootId1 <span class=3D"hljs-string">"Boot Id 1 value=
"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceBootId2 $fDeviceBootIds.=
e_deviceBootId2
    entry $eDeviceBootId2 -textvariable ::deviceArray(deviceBootId2) -width=
 <span class=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceBootId2 <span class=3D"hljs-string">"Boot Id 2 value=
"</span>
    pack config $lDeviceBootIds $eDeviceBootId1 $eDeviceBootId2 -padx <span=
 class=3D"hljs-number">1</span> -side left
    pack config $fDeviceBootIds -side top -ipady <span class=3D"hljs-number=
">1</span> -fill both
    <span class=3D"hljs-keyword">set</span> fHSB $fReadOnly.f_hsb
    frame $fHSB -relief flat
    <span class=3D"hljs-keyword">set</span> lHSB $fHSB.l_hsb
    label $lHSB -text <span class=3D"hljs-string">"Hardware Byte"</span> -f=
ont $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lHSB <span class=3D"hljs-string">"Hardware Security Byte: r=
ead-only"</span>
    <span class=3D"hljs-keyword">set</span> eHSB $fHSB.e_hsb
    entry $eHSB -textvariable ::deviceArray(hsb) -width <span class=3D"hljs=
-number">3</span> -font $flipFont -state disabled
    setBalloon $eHSB <span class=3D"hljs-string">"Hardware Security Byte va=
lue"</span>
    pack config $lHSB $eHSB -padx <span class=3D"hljs-number">1</span> -sid=
e left
    pack config $fHSB -side top -ipady <span class=3D"hljs-number">1</span>=
 -fill both
    <span class=3D"hljs-keyword">set</span> fBootlVer $fReadOnly.f_bootlVer
    frame $fBootlVer -relief flat
    <span class=3D"hljs-keyword">set</span> lBootlVer $fBootlVer.l_bootlVer
    label $lBootlVer -text <span class=3D"hljs-string">"Bootloader Ver."</s=
pan> -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lBootlVer <span class=3D"hljs-string">"Bootloader Version: =
read-only"</span>
    <span class=3D"hljs-keyword">set</span> eBootlVer $fBootlVer.e_bootlVer
    entry $eBootlVer -textvariable ::deviceArray(bootlVer) -width <span cla=
ss=3D"hljs-number">5</span> -font $flipFont -state disabled
    setBalloon $eBootlVer <span class=3D"hljs-string">"Bootloader Version"<=
/span>
    pack config $lBootlVer $eBootlVer -padx <span class=3D"hljs-number">1</=
span> -side left
    pack config $fBootlVer -side top -ipady <span class=3D"hljs-number">1</=
span> -fill both
    pack configure $fReadOnly -side top -padx <span class=3D"hljs-number">5=
</span> -fill both
    <span class=3D"hljs-keyword">set</span> fFuses .main.f_device.f_fuses
    frame $fFuses -relief groove -borderwidth <span class=3D"hljs-number">1=
</span>
    <span class=3D"hljs-keyword">set</span> bBLJB $fFuses.b_bljb
    checkbutton $bBLJB -text <span class=3D"hljs-string">"BLJB"</span> -fon=
t $flipFont -<span class=3D"hljs-keyword">variable</span> ::deviceArray(blj=
bFuse) -onvalue <span class=3D"hljs-number">0</span> -offvalue <span class=
=3D"hljs-number">1</span> -indicatoron true -state disabled
    setBalloon $bBLJB <span class=3D"hljs-string">"Boot Loader Jump Bit \nS=
et =3D 0 / Unset =3D 1"</span>
    <span class=3D"hljs-keyword">set</span> bX2 $fFuses.b_x2
    checkbutton $bX2 -text <span class=3D"hljs-string">"X2"</span> -font $f=
lipFont -<span class=3D"hljs-keyword">variable</span> ::deviceArray(x2Fuse)=
 -onvalue <span class=3D"hljs-number">0</span> -offvalue <span class=3D"hlj=
s-number">1</span> -indicatoron true -state disabled
    setBalloon $bX2 <span class=3D"hljs-string">"X2 fuse bit \nSet =3D 0 / =
Unset =3D 1"</span>
    pack config $bBLJB $bX2 -side left -padx <span class=3D"hljs-number">10=
</span> -anchor w
    pack configure $fFuses -side top -padx <span class=3D"hljs-number">5</s=
pan> -pady <span class=3D"hljs-number">5</span> -fill x
    <span class=3D"hljs-keyword">set</span> f_BSB_SBV .main.f_device.f_bsb_=
sbv
    frame $f_BSB_SBV -relief groove -borderwidth <span class=3D"hljs-number=
">1</span>
    <span class=3D"hljs-keyword">set</span> f_BSB $f_BSB_SBV.f_bsb
    frame $f_BSB -relief flat
    <span class=3D"hljs-keyword">set</span> l_BSB $f_BSB.l_bsb
    label $l_BSB -text <span class=3D"hljs-string">"Device BSB &amp; EB"</s=
pan> -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $l_BSB <span class=3D"hljs-string">"Boot Status Byte &amp; E=
xtra Byte"</span>
    <span class=3D"hljs-keyword">set</span> e_BSB $f_BSB.e_bsb
    entry $e_BSB -textvariable ::deviceArray(bsb) -width <span class=3D"hlj=
s-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0=
</span> -state disabled
    setBalloon $e_BSB <span class=3D"hljs-string">"Actual BSB value"</span>
    <span class=3D"hljs-keyword">set</span> e_EB $f_BSB.e_eb
    entry $e_EB -textvariable ::deviceArray(eb) -width <span class=3D"hljs-=
number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0</=
span> -state disabled
    setBalloon $e_EB <span class=3D"hljs-string">"Actual EB value"</span>
    pack config $l_BSB $e_BSB $e_EB -padx <span class=3D"hljs-number">1</sp=
an> -side left
    pack config $f_BSB -side top -ipady <span class=3D"hljs-number">1</span=
> -fill both
    <span class=3D"hljs-keyword">set</span> f_SBV $f_BSB_SBV.f_sbv
    frame $f_SBV -relief flat
    <span class=3D"hljs-keyword">set</span> l_SBV $f_SBV.l_sbv
    label $l_SBV -text <span class=3D"hljs-string">"Device SBV"</span> -fon=
t $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $l_SBV <span class=3D"hljs-string">"Software Boot Vector"</s=
pan>
    <span class=3D"hljs-keyword">set</span> e_SBV $f_SBV.e_sbv
    entry $e_SBV -textvariable ::deviceArray(sbv) -width <span class=3D"hlj=
s-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0=
</span> -state disabled
    setBalloon $e_SBV <span class=3D"hljs-string">"Actual SBV value"</span>
    <span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-number">0</=
span>} then {
	<span class=3D"hljs-keyword">set</span> bErase $fSBV.b_erase
	button $bErase -bd <span class=3D"hljs-number">3</span> -text <span class=
=3D"hljs-string">"Erase"</span> -font $flipFont -command {cmdsEraseSBVBSB} =
-state disabled -width <span class=3D"hljs-number">5</span>
	setBalloon $bErase <span class=3D"hljs-string">"Resets SBV and BSB\nto def=
ault values"</span>
    }
    pack config $l_SBV $e_SBV -padx <span class=3D"hljs-number">1</span> -s=
ide left
    pack config $f_SBV -side top -ipady <span class=3D"hljs-number">1</span=
> -fill both
    pack configure $f_BSB_SBV -side top -padx <span class=3D"hljs-number">5=
</span> -fill both
    bind $e_SBV &lt;Return&gt; {devcSetDeviceSpecialBytes}
    bind $e_BSB &lt;Return&gt; {devcSetDeviceSpecialBytes}
    <span class=3D"hljs-keyword">set</span> fSSB .main.f_device.f_ssb
    frame $fSSB -relief groove -borderwidth <span class=3D"hljs-number">1</=
span>
    <span class=3D"hljs-keyword">set</span> fInfo $fSSB.f_info
    frame $fInfo -relief flat
    <span class=3D"hljs-keyword">set</span> lSSB $fInfo.l_ssb
    label $lSSB -text <span class=3D"hljs-string">"Device SSB"</span> -font=
 $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lSSB <span class=3D"hljs-string">"Software Security Byte"</=
span>
    <span class=3D"hljs-keyword">set</span> eSSB $fInfo.e_ssb
    entry $eSSB -textvariable ::deviceArray(ssb) -width <span class=3D"hljs=
-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0<=
/span> -state disabled
    setBalloon $eSSB <span class=3D"hljs-string">"Actual SSB value"</span>
    pack config $lSSB $eSSB -padx <span class=3D"hljs-number">1</span> -sid=
e left
    pack config $fInfo -side top
    <span class=3D"hljs-keyword">set</span> fLevel $fSSB.f_level
    frame $fLevel -relief flat
    <span class=3D"hljs-keyword">set</span> bLevel0 $fLevel.b_level0
    radiobutton $bLevel0 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 0"</span> -value <sp=
an class=3D"hljs-number">0</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 0"</span> -state disabled
    setBalloon $bLevel0 <span class=3D"hljs-string">"Security level 0: no s=
ecurity\n (setting to levels 1 and 2 allowed)"</span>
    pack configure $bLevel0 -side left
    <span class=3D"hljs-keyword">set</span> bLevel1 $fLevel.b_level1
    radiobutton $bLevel1 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 1"</span> -value <sp=
an class=3D"hljs-number">1</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 1"</span> -state disabled
    setBalloon $bLevel1 <span class=3D"hljs-string">"Security level 1: no w=
riting allowed\n (setting to level 2 allowed)"</span>
    pack configure $bLevel1 -side left
    <span class=3D"hljs-keyword">set</span> bLevel2 $fLevel.b_level2
    radiobutton $bLevel2 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 2"</span> -value <sp=
an class=3D"hljs-number">2</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 2"</span> -state disabled
    setBalloon $bLevel2 <span class=3D"hljs-string">"Security level 2: neit=
her reading nor writing allowed\n (full chip erase resets security level to=
 0)"</span>
    pack configure $bLevel2 -side left
    pack configure $fInfo -side top -anchor w -ipady <span class=3D"hljs-nu=
mber">2</span> -fill both
    pack configure $fLevel -side top -anchor w -pady <span class=3D"hljs-nu=
mber">5</span> -fill both
    pack configure $fSSB -side top -padx <span class=3D"hljs-number">5</spa=
n> -pady <span class=3D"hljs-number">5</span> -fill both
    <span class=3D"hljs-keyword">set</span> fStartApp .main.f_device.f_star=
tApp
    frame $fStartApp -relief groove -borderwidth <span class=3D"hljs-number=
">1</span>
    button $fStartApp.b_start -text <span class=3D"hljs-string">"Start Appl=
ication"</span> -bd <span class=3D"hljs-number">3</span> -font $flipFont -s=
tate disabled -command {ptclStartAppli $flipStates(withReset)}
    setBalloon $fStartApp.b_start <span class=3D"hljs-string">"Starts appli=
cation at address 0x0000"</span>
    checkbutton $fStartApp.b_reset -text <span class=3D"hljs-string">"With =
Reset"</span> -font $flipFont -<span class=3D"hljs-keyword">variable</span>=
 flipStates(withReset) -indicatoron true -state disabled
    setBalloon $fStartApp.b_reset <span class=3D"hljs-string">"If set, gene=
rates a hardware reset pulse\n  when the Start Application button is presse=
d."</span>
    pack configure $fStartApp.b_start $fStartApp.b_reset -side left -padx <=
span class=3D"hljs-number">5</span> -pady <span class=3D"hljs-number">5</sp=
an>
    pack configure $fStartApp -padx <span class=3D"hljs-number">5</span> -f=
ill both
    <span class=3D"hljs-keyword">set</span> fButtons .main.f_device.f_butto=
ns
    frame $fButtons -relief flat
    pack configure $fButtons -side top
    <span class=3D"hljs-keyword">set</span> bUpdate $fButtons.b_update
    button $bUpdate -bd <span class=3D"hljs-number">3</span> -text <span cl=
ass=3D"hljs-string">"Read"</span> -font $flipFont -command {devcUpdateDevic=
eFrame} -state disabled
    setBalloon $bUpdate <span class=3D"hljs-string">"Reads device special b=
ytes"</span>
    <span class=3D"hljs-keyword">set</span> bWrite $fButtons.b_write
    button $bWrite -bd <span class=3D"hljs-number">3</span> -text <span cla=
ss=3D"hljs-string">"Set"</span> -font $flipFont -command {devcSetDeviceSpec=
ialBytes} -state disabled
    setBalloon $bWrite <span class=3D"hljs-string">"Sets device special byt=
es"</span>
    <span class=3D"hljs-keyword">set</span> bCanConfig $fButtons.b_canconfi=
g
    button $bCanConfig -bd <span class=3D"hljs-number">3</span> -text <span=
 class=3D"hljs-string">"CAN"</span> -font $flipFont -command {cbDboxWakeUp =
.canNodeConfigDbox} -state disabled
    setBalloon $bCanConfig <span class=3D"hljs-string">"Sets a CAN node par=
ameters"</span>
    <span class=3D"hljs-keyword">set</span> bMemorySelect .main.f_buffer.b_=
memSelect
    <span class=3D"hljs-keyword">if</span> {! [winfo exists $bMemorySelect]=
} then {
	button $bMemorySelect -bd <span class=3D"hljs-number">3</span> -text $::de=
viceArray(currentMemoryButton) -font $flipFont -command {cmdsToggleMemory} =
-width <span class=3D"hljs-number">14</span> -state disabled
	setBalloon $bMemorySelect <span class=3D"hljs-string">"FLIP will perform a=
ll operations\n on the selected memory"</span>
    }
    pack config $bUpdate $bWrite -side left -padx <span class=3D"hljs-numbe=
r">15</span>
    pack configure $fButtons -side top -padx <span class=3D"hljs-number">5<=
/span> -pady <span class=3D"hljs-number">15</span> -fill both
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> buildSk=
ipTestList</span> {protocol} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(skipList) <span c=
lass=3D"hljs-string">"  flash-2.23.1  flash-2.26  flash-2.27  flash-2.28  f=
lash-2.29  flash-2.30  checksum-5.5  checksum-5.6 "</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> buildSk=
ipProcList</span> {} {
    <span class=3D"hljs-keyword">set</span> skipL {}
    <span class=3D"hljs-keyword">return</span> $skipL
}
drawCanNodeConfigDbox
t89c51ac2
<span class=3D"hljs-keyword">foreach</span> m $::deviceArray(memoryList) {
    cmdsImportCurrentMemoryNameSpace $m
    cmdsSetMemoryParameters
    initBuffer
}
cmdsImportCurrentMemoryNameSpace FLASH
<span class=3D"hljs-comment">#dbgEndSrc [info script]</span>
<span class=3D"hljs-comment">#dbgBeginSrc [info script]</span>
<span class=3D"hljs-keyword">global</span> projDir
<span class=3D"hljs-keyword">source</span> $projDir/tcl/devices/devices_com=
mon.tcl
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> t89c51c=
c01</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> protcl protocol nAddrBits fl=
ipFont rs232standard canstandard expAnsw testFlag buffer flowButtons flipSt=
ates
    <span class=3D"hljs-keyword">set</span> children_List [<span class=3D"h=
ljs-keyword">split</span> [winfo children .main.f_device]]
    <span class=3D"hljs-keyword">foreach</span> item $children_List {
	<span class=3D"hljs-keyword">if</span> {$item !=3D <span class=3D"hljs-str=
ing">".main.f_device.f_deviceName"</span>} then {
	    destroy $item
	}
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">a=
rray</span> exists ::deviceArray]} then {
	<span class=3D"hljs-keyword">array</span> <span class=3D"hljs-keyword">uns=
et</span> ::deviceArray
    }
    <span class=3D"hljs-keyword">set</span> ::deviceArray(name) <span class=
=3D"hljs-string">"T89C51CC01"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(communicationList=
) <span class=3D"hljs-string">"CAN RS232"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(memoryList) [<spa=
n class=3D"hljs-keyword">list</span> FLASH EEPROM]
    <span class=3D"hljs-keyword">set</span> ::deviceArray(memoryButtonList)=
 [<span class=3D"hljs-keyword">list</span> <span class=3D"hljs-string">"Sel=
ect EEPROM"</span> <span class=3D"hljs-string">"Select FLASH"</span>]
    <span class=3D"hljs-keyword">set</span> ::deviceArray(memoryColor) [<sp=
an class=3D"hljs-keyword">list</span> <span class=3D"hljs-string">"#88a67d"=
</span> <span class=3D"hljs-string">"wheat"</span>]
    <span class=3D"hljs-keyword">set</span> ::deviceArray(currentMemory) <s=
pan class=3D"hljs-string">"FLASH"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(currentMemoryButt=
on) <span class=3D"hljs-string">"Select EEPROM"</span>
    <span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keywo=
rd">eval</span> ::FLASH:: {
	<span class=3D"hljs-keyword">variable</span> deviceArray
	<span class=3D"hljs-keyword">variable</span> buffer
	<span class=3D"hljs-keyword">set</span> deviceArray(memorySize) <span clas=
s=3D"hljs-number">32</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankValue) <span clas=
s=3D"hljs-string">"FF"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erase) <span class=3D"hljs-=
string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(blankCheck) <span class=3D"=
hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseType) <span class=3D"h=
ljs-string">"full"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlocks) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock0) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock0) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock1) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock1) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock2) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock2) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock3) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock3) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock4) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock4) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(progStart) <span class=
=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(displayData) <span cla=
ss=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankCheck) <span clas=
s=3D"hljs-string">"01"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(programData) <span cla=
ss=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">namespace</span> export writeBuffer readBuffe=
r readDeviceArray initBuffer bufferChecksum
    }
    <span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keywo=
rd">eval</span> ::EEPROM:: {
	<span class=3D"hljs-keyword">variable</span> deviceArray
	<span class=3D"hljs-keyword">variable</span> buffer
	<span class=3D"hljs-keyword">set</span> deviceArray(memorySize) <span clas=
s=3D"hljs-number">2</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankValue) <span clas=
s=3D"hljs-string">"FF"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erase) <span class=3D"hljs-=
string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(blankCheck) <span class=3D"=
hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseType) <span class=3D"h=
ljs-string">"full"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlocks) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock0) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock0) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock1) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock1) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock2) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock2) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock3) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock3) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock4) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock4) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(progStart) <span class=
=3D"hljs-string">"01"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(displayData) <span cla=
ss=3D"hljs-string">"02"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankCheck) <span clas=
s=3D"hljs-string">"XX"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(programData) <span cla=
ss=3D"hljs-string">"07"</span>
	<span class=3D"hljs-keyword">namespace</span> export writeBuffer readBuffe=
r readDeviceArray initBuffer bufferChecksum
    }
    <span class=3D"hljs-keyword">foreach</span> M $::deviceArray(memoryList=
) {
	<span class=3D"hljs-keyword">proc</span> ::${M}::writeBuffer {index data} =
{
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">set</span> buffer($index) $data
	    <span class=3D"hljs-keyword">return</span>
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::readBuffer {index} {
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">return</span> $buffer($index)
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::readDeviceArray {index} {
	    <span class=3D"hljs-keyword">variable</span> deviceArray
	    <span class=3D"hljs-keyword">return</span> $deviceArray($index)
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::initBuffer {} {
	    <span class=3D"hljs-keyword">variable</span> deviceArray
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">global</span> flipStates
	    <span class=3D"hljs-keyword">set</span> max [<span class=3D"hljs-keywo=
rd">expr</span> $deviceArray(memorySize) * <span class=3D"hljs-number">1024=
</span>]
	    <span class=3D"hljs-keyword">if</span> {$flipStates(simul)} then {
		<span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">set=
</span> i <span class=3D"hljs-number">0</span>} {$i &lt; $max} {<span class=
=3D"hljs-keyword">incr</span> i} {
		    <span class=3D"hljs-keyword">set</span> buffer([<span class=3D"hljs-k=
eyword">format</span> %<span class=3D"hljs-number">06</span>X $i]) $deviceA=
rray(blankValue)
		}
	    } else {
		initBuffer_C $max $deviceArray(blankValue)
	    }
	    <span class=3D"hljs-keyword">return</span>
	}
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::F=
LASH::bufferChecksum</span> {} {
	<span class=3D"hljs-keyword">variable</span> buffer
	<span class=3D"hljs-keyword">global</span> flipStates
	<span class=3D"hljs-keyword">set</span> min $buffer(minProgAddr)
	<span class=3D"hljs-keyword">set</span> max $buffer(maxProgAddr)
	<span class=3D"hljs-keyword">if</span> {$flipStates(simul)} then {
	    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number"=
>0xCAFEFADE</span>
	} else {
	    <span class=3D"hljs-keyword">return</span> [computeBufferChecksum_C $m=
in $max]
	}
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::E=
EPROM::bufferChecksum</span> {} {
	<span class=3D"hljs-keyword">variable</span> buffer
	<span class=3D"hljs-keyword">global</span> flipStates
	<span class=3D"hljs-keyword">set</span> min $buffer(minProgAddr)
	<span class=3D"hljs-keyword">set</span> max $buffer(maxProgAddr)
	<span class=3D"hljs-keyword">if</span> {$flipStates(simul)} then {
	    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number"=
>0xDEADBEEF</span>
	} else {
	    <span class=3D"hljs-keyword">return</span> [computeBufferChecksum_C $m=
in $max]
	}
    }
    <span class=3D"hljs-keyword">set</span> ::deviceArray(jumpAdd) <span cl=
ass=3D"hljs-string">"0000"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(specialSynchro) <=
span class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(RS232ProtocolsLis=
t) <span class=3D"hljs-string">"Standard Enhanced"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(CANProtocolsList)=
 <span class=3D"hljs-string">"Standard Enhanced"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(nnbConnect) <span=
 class=3D"hljs-string">"FF"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(nnbProg) <span cl=
ass=3D"hljs-string">"XX"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(crisConnect) <spa=
n class=3D"hljs-string">"00"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(crisProg) <span c=
lass=3D"hljs-string">"XX"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(btc1) <span class=
=3D"hljs-string">"XX"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(btc2) <span class=
=3D"hljs-string">"XX"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(btc3) <span class=
=3D"hljs-string">"XX"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev0) [<span cla=
ss=3D"hljs-keyword">list</span> FF]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev0Test) <span =
class=3D"hljs-string">"FF"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev1) [<span cla=
ss=3D"hljs-keyword">list</span> FE]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev1Test) <span =
class=3D"hljs-string">"FE"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev2Test) <span =
class=3D"hljs-string">"FC"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev2) [<span cla=
ss=3D"hljs-keyword">list</span> FC XX]
    <span class=3D"hljs-keyword">set</span> expAnsw(readManufId) <span clas=
s=3D"hljs-number">58</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId1) XX
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId2) XX
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId3) XX
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock0) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock1) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock2) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock3) <span cla=
ss=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock4) <span cla=
ss=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> testFlag(readDevBootId1) <span =
class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(readDevBootId2) <span =
class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(sbv) <span class=3D"hl=
js-string">"FC"</span>
    <span class=3D"hljs-keyword">set</span> fBlocks .deviceErase.f_erase.f_=
blocks
    <span class=3D"hljs-keyword">set</span> bBlock0 $fBlocks.b_block0
    <span class=3D"hljs-keyword">set</span> bBlock1 $fBlocks.b_block1
    <span class=3D"hljs-keyword">set</span> bBlock2 $fBlocks.b_block2
    <span class=3D"hljs-keyword">set</span> bBlock3 $fBlocks.b_block3
    <span class=3D"hljs-keyword">set</span> bBlock4 $fBlocks.b_block4
    setBalloon $bBlock0 <span class=3D"hljs-string">"Erase memory between 0=
000 and 1FFF"</span>
    setBalloon $bBlock1 <span class=3D"hljs-string">"Erase memory between 2=
000 and 3FFF"</span>
    setBalloon $bBlock2 <span class=3D"hljs-string">"Erase memory between 4=
000 and 7FFF"</span>
    $bBlock3 configure -state disabled
    $bBlock4 configure -state disabled
    .main.f_device.f_deviceName.l_device configure -text $::deviceArray(nam=
e)
    .main.f_device.f_deviceName configure -relief groove
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(sbv)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(sbv) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(bsb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(bsb) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(ssb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(ssb) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(hsb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(hsb) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(eb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(eb) <span class=3D"h=
ljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(deviceBootId1)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(deviceBootId1) <span=
 class=3D"hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(deviceBootId2)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(deviceBootId2) <span=
 class=3D"hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(bljbFuse)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(bljbFuse) <span clas=
s=3D"hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(x2Fuse)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(x2Fuse) <span class=
=3D"hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(level)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(level) X
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(eraseType)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(eraseType) <span cla=
ss=3D"hljs-string">"full"</span>
    }
    <span class=3D"hljs-keyword">set</span> nAddrBits <span class=3D"hljs-n=
umber">4</span>
    <span class=3D"hljs-keyword">set</span> rs232standard(readHwByte) <span=
 class=3D"hljs-string">":020000050B00EE"</span>
    <span class=3D"hljs-keyword">set</span> rs232standard(readBootlVer) <sp=
an class=3D"hljs-string">":020000050F00EA"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowErase) <span =
class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowBlankCheck) <=
span class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowProgram) <spa=
n class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowVerify) <span=
 class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowSpecialBytes)=
 <span class=3D"hljs-number">0</span>
    wm title .deviceErase <span class=3D"hljs-string">"$::deviceArray(name)=
 Erase"</span>
    .deviceErase.f_erase.f_blocks.b_blockErase configure -state normal
    <span class=3D"hljs-keyword">set</span> fReadOnly .main.f_device.f_read=
Only
    frame $fReadOnly -relief groove -borderwidth <span class=3D"hljs-number=
">1</span>
    <span class=3D"hljs-keyword">set</span> fManufId $fReadOnly.f_manufId
    frame $fManufId -relief flat
    <span class=3D"hljs-keyword">set</span> lManufId $fManufId.l_manufId
    label $lManufId -text <span class=3D"hljs-string">"Manufact. Id"</span>=
 -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    <span class=3D"hljs-keyword">set</span> eManufId $fManufId.e_manufId
    entry $eManufId -textvariable ::deviceArray(manufId) -width <span class=
=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eManufId <span class=3D"hljs-string">"Manufacturer code val=
ue"</span>
    pack config $lManufId $eManufId -padx <span class=3D"hljs-number">1</sp=
an> -side left
    pack config $fManufId -side top -ipady <span class=3D"hljs-number">1</s=
pan> -fill both
    <span class=3D"hljs-keyword">set</span> fDeviceIds $fReadOnly.f_deviceI=
ds
    frame $fDeviceIds -relief flat
    <span class=3D"hljs-keyword">set</span> lDeviceIds $fDeviceIds.l_device=
Ids
    label $lDeviceIds -text <span class=3D"hljs-string">"Device Ids"</span>=
 -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    <span class=3D"hljs-keyword">set</span> eDeviceId1 $fDeviceIds.e_device=
Id1
    entry $eDeviceId1 -textvariable ::deviceArray(deviceId1) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId1 <span class=3D"hljs-string">"Family code value"<=
/span>
    <span class=3D"hljs-keyword">set</span> eDeviceId2 $fDeviceIds.e_device=
Id2
    entry $eDeviceId2 -textvariable ::deviceArray(deviceId2) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId2 <span class=3D"hljs-string">"Device name code"</=
span>
    <span class=3D"hljs-keyword">set</span> eDeviceId3 $fDeviceIds.e_device=
Id3
    entry $eDeviceId3 -textvariable ::deviceArray(deviceId3) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId3 <span class=3D"hljs-string">"Device revision num=
ber"</span>
    pack config $lDeviceIds $eDeviceId1 $eDeviceId2 $eDeviceId3 -padx <span=
 class=3D"hljs-number">1</span> -side left
    pack config $fDeviceIds -side top -ipady <span class=3D"hljs-number">1<=
/span> -fill both
    <span class=3D"hljs-keyword">set</span> fDeviceBootIds $fReadOnly.f_dev=
iceBootIds
    frame $fDeviceBootIds -relief flat
    <span class=3D"hljs-keyword">set</span> lDeviceBootIds $fDeviceBootIds.=
l_deviceBootIds
    label $lDeviceBootIds -text <span class=3D"hljs-string">"Device Boot Id=
s"</span> -font $flipFont -anchor w -width <span class=3D"hljs-number">16</=
span>
    setBalloon $lDeviceBootIds <span class=3D"hljs-string">"Boot Ids 1, 2: =
read-only"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceBootId1 $fDeviceBootIds.=
e_deviceBootId1
    entry $eDeviceBootId1 -textvariable ::deviceArray(deviceBootId1) -width=
 <span class=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceBootId1 <span class=3D"hljs-string">"Boot Id 1 value=
"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceBootId2 $fDeviceBootIds.=
e_deviceBootId2
    entry $eDeviceBootId2 -textvariable ::deviceArray(deviceBootId2) -width=
 <span class=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceBootId2 <span class=3D"hljs-string">"Boot Id 2 value=
"</span>
    pack config $lDeviceBootIds $eDeviceBootId1 $eDeviceBootId2 -padx <span=
 class=3D"hljs-number">1</span> -side left
    pack config $fDeviceBootIds -side top -ipady <span class=3D"hljs-number=
">1</span> -fill both
    <span class=3D"hljs-keyword">set</span> fHSB $fReadOnly.f_hsb
    frame $fHSB -relief flat
    <span class=3D"hljs-keyword">set</span> lHSB $fHSB.l_hsb
    label $lHSB -text <span class=3D"hljs-string">"Hardware Byte"</span> -f=
ont $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lHSB <span class=3D"hljs-string">"Hardware Security Byte: r=
ead-only"</span>
    <span class=3D"hljs-keyword">set</span> eHSB $fHSB.e_hsb
    entry $eHSB -textvariable ::deviceArray(hsb) -width <span class=3D"hljs=
-number">3</span> -font $flipFont -state disabled
    setBalloon $eHSB <span class=3D"hljs-string">"Hardware Security Byte va=
lue"</span>
    pack config $lHSB $eHSB -padx <span class=3D"hljs-number">1</span> -sid=
e left
    pack config $fHSB -side top -ipady <span class=3D"hljs-number">1</span>=
 -fill both
    <span class=3D"hljs-keyword">set</span> fBootlVer $fReadOnly.f_bootlVer
    frame $fBootlVer -relief flat
    <span class=3D"hljs-keyword">set</span> lBootlVer $fBootlVer.l_bootlVer
    label $lBootlVer -text <span class=3D"hljs-string">"Bootloader Ver."</s=
pan> -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lBootlVer <span class=3D"hljs-string">"Bootloader Version: =
read-only"</span>
    <span class=3D"hljs-keyword">set</span> eBootlVer $fBootlVer.e_bootlVer
    entry $eBootlVer -textvariable ::deviceArray(bootlVer) -width <span cla=
ss=3D"hljs-number">5</span> -font $flipFont -state disabled
    setBalloon $eBootlVer <span class=3D"hljs-string">"Bootloader Version"<=
/span>
    pack config $lBootlVer $eBootlVer -padx <span class=3D"hljs-number">1</=
span> -side left
    pack config $fBootlVer -side top -ipady <span class=3D"hljs-number">1</=
span> -fill both
    pack configure $fReadOnly -side top -padx <span class=3D"hljs-number">5=
</span> -fill both
    <span class=3D"hljs-keyword">set</span> fFuses .main.f_device.f_fuses
    frame $fFuses -relief groove -borderwidth <span class=3D"hljs-number">1=
</span>
    <span class=3D"hljs-keyword">set</span> bBLJB $fFuses.b_bljb
    checkbutton $bBLJB -text <span class=3D"hljs-string">"BLJB"</span> -fon=
t $flipFont -<span class=3D"hljs-keyword">variable</span> ::deviceArray(blj=
bFuse) -onvalue <span class=3D"hljs-number">0</span> -offvalue <span class=
=3D"hljs-number">1</span> -indicatoron true -state disabled
    setBalloon $bBLJB <span class=3D"hljs-string">"Boot Loader Jump Bit \nS=
et =3D 0 / Unset =3D 1"</span>
    <span class=3D"hljs-keyword">set</span> bX2 $fFuses.b_x2
    checkbutton $bX2 -text <span class=3D"hljs-string">"X2"</span> -font $f=
lipFont -<span class=3D"hljs-keyword">variable</span> ::deviceArray(x2Fuse)=
 -onvalue <span class=3D"hljs-number">0</span> -offvalue <span class=3D"hlj=
s-number">1</span> -indicatoron true -state disabled
    setBalloon $bX2 <span class=3D"hljs-string">"X2 fuse bit \nSet =3D 0 / =
Unset =3D 1"</span>
    pack config $bBLJB $bX2 -side left -padx <span class=3D"hljs-number">10=
</span> -anchor w
    pack configure $fFuses -side top -padx <span class=3D"hljs-number">5</s=
pan> -pady <span class=3D"hljs-number">5</span> -fill x
    <span class=3D"hljs-keyword">set</span> f_BSB_SBV .main.f_device.f_bsb_=
sbv
    frame $f_BSB_SBV -relief groove -borderwidth <span class=3D"hljs-number=
">1</span>
    <span class=3D"hljs-keyword">set</span> f_BSB $f_BSB_SBV.f_bsb
    frame $f_BSB -relief flat
    <span class=3D"hljs-keyword">set</span> l_BSB $f_BSB.l_bsb
    label $l_BSB -text <span class=3D"hljs-string">"Device BSB &amp; EB"</s=
pan> -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $l_BSB <span class=3D"hljs-string">"Boot Status Byte &amp; E=
xtra Byte"</span>
    <span class=3D"hljs-keyword">set</span> e_BSB $f_BSB.e_bsb
    entry $e_BSB -textvariable ::deviceArray(bsb) -width <span class=3D"hlj=
s-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0=
</span> -state disabled
    setBalloon $e_BSB <span class=3D"hljs-string">"Actual BSB value"</span>
    <span class=3D"hljs-keyword">set</span> e_EB $f_BSB.e_eb
    entry $e_EB -textvariable ::deviceArray(eb) -width <span class=3D"hljs-=
number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0</=
span> -state disabled
    setBalloon $e_EB <span class=3D"hljs-string">"Actual EB value"</span>
    pack config $l_BSB $e_BSB $e_EB -padx <span class=3D"hljs-number">1</sp=
an> -side left
    pack config $f_BSB -side top -ipady <span class=3D"hljs-number">1</span=
> -fill both
    <span class=3D"hljs-keyword">set</span> f_SBV $f_BSB_SBV.f_sbv
    frame $f_SBV -relief flat
    <span class=3D"hljs-keyword">set</span> l_SBV $f_SBV.l_sbv
    label $l_SBV -text <span class=3D"hljs-string">"Device SBV"</span> -fon=
t $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $l_SBV <span class=3D"hljs-string">"Software Boot Vector"</s=
pan>
    <span class=3D"hljs-keyword">set</span> e_SBV $f_SBV.e_sbv
    entry $e_SBV -textvariable ::deviceArray(sbv) -width <span class=3D"hlj=
s-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0=
</span> -state disabled
    setBalloon $e_SBV <span class=3D"hljs-string">"Actual SBV value"</span>
    <span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-number">0</=
span>} then {
	<span class=3D"hljs-keyword">set</span> bErase $fSBV.b_erase
	button $bErase -bd <span class=3D"hljs-number">3</span> -text <span class=
=3D"hljs-string">"Erase"</span> -font $flipFont -command {cmdsEraseSBVBSB} =
-state disabled -width <span class=3D"hljs-number">5</span>
	setBalloon $bErase <span class=3D"hljs-string">"Resets SBV and BSB\nto def=
ault values"</span>
    }
    pack config $l_SBV $e_SBV -padx <span class=3D"hljs-number">1</span> -s=
ide left
    pack config $f_SBV -side top -ipady <span class=3D"hljs-number">1</span=
> -fill both
    pack configure $f_BSB_SBV -side top -padx <span class=3D"hljs-number">5=
</span> -fill both
    bind $e_SBV &lt;Return&gt; {devcSetDeviceSpecialBytes}
    bind $e_BSB &lt;Return&gt; {devcSetDeviceSpecialBytes}
    <span class=3D"hljs-keyword">set</span> fSSB .main.f_device.f_ssb
    frame $fSSB -relief groove -borderwidth <span class=3D"hljs-number">1</=
span>
    <span class=3D"hljs-keyword">set</span> fInfo $fSSB.f_info
    frame $fInfo -relief flat
    <span class=3D"hljs-keyword">set</span> lSSB $fInfo.l_ssb
    label $lSSB -text <span class=3D"hljs-string">"Device SSB"</span> -font=
 $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lSSB <span class=3D"hljs-string">"Software Security Byte"</=
span>
    <span class=3D"hljs-keyword">set</span> eSSB $fInfo.e_ssb
    entry $eSSB -textvariable ::deviceArray(ssb) -width <span class=3D"hljs=
-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0<=
/span> -state disabled
    setBalloon $eSSB <span class=3D"hljs-string">"Actual SSB value"</span>
    pack config $lSSB $eSSB -padx <span class=3D"hljs-number">1</span> -sid=
e left
    pack config $fInfo -side top
    <span class=3D"hljs-keyword">set</span> fLevel $fSSB.f_level
    frame $fLevel -relief flat
    <span class=3D"hljs-keyword">set</span> bLevel0 $fLevel.b_level0
    radiobutton $bLevel0 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 0"</span> -value <sp=
an class=3D"hljs-number">0</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 0"</span> -state disabled
    setBalloon $bLevel0 <span class=3D"hljs-string">"Security level 0: no s=
ecurity\n (setting to levels 1 and 2 allowed)"</span>
    pack configure $bLevel0 -side left
    <span class=3D"hljs-keyword">set</span> bLevel1 $fLevel.b_level1
    radiobutton $bLevel1 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 1"</span> -value <sp=
an class=3D"hljs-number">1</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 1"</span> -state disabled
    setBalloon $bLevel1 <span class=3D"hljs-string">"Security level 1: no w=
riting allowed\n (setting to level 2 allowed)"</span>
    pack configure $bLevel1 -side left
    <span class=3D"hljs-keyword">set</span> bLevel2 $fLevel.b_level2
    radiobutton $bLevel2 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 2"</span> -value <sp=
an class=3D"hljs-number">2</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 2"</span> -state disabled
    setBalloon $bLevel2 <span class=3D"hljs-string">"Security level 2: neit=
her reading nor writing allowed\n (full chip erase resets security level to=
 0)"</span>
    pack configure $bLevel2 -side left
    pack configure $fInfo -side top -anchor w -ipady <span class=3D"hljs-nu=
mber">2</span> -fill both
    pack configure $fLevel -side top -anchor w -pady <span class=3D"hljs-nu=
mber">5</span> -fill both
    pack configure $fSSB -side top -padx <span class=3D"hljs-number">5</spa=
n> -pady <span class=3D"hljs-number">5</span> -fill both
    <span class=3D"hljs-keyword">set</span> fStartApp .main.f_device.f_star=
tApp
    frame $fStartApp -relief groove -borderwidth <span class=3D"hljs-number=
">1</span>
    button $fStartApp.b_start -text <span class=3D"hljs-string">"Start Appl=
ication"</span> -bd <span class=3D"hljs-number">3</span> -font $flipFont -s=
tate disabled -command {ptclStartAppli $flipStates(withReset)}
    setBalloon $fStartApp.b_start <span class=3D"hljs-string">"Starts appli=
cation at address 0x0000"</span>
    checkbutton $fStartApp.b_reset -text <span class=3D"hljs-string">"With =
Reset"</span> -font $flipFont -<span class=3D"hljs-keyword">variable</span>=
 flipStates(withReset) -indicatoron true -state disabled
    setBalloon $fStartApp.b_reset <span class=3D"hljs-string">"If set, gene=
rates a hardware reset pulse\n  when the Start Application button is presse=
d."</span>
    pack configure $fStartApp.b_start $fStartApp.b_reset -side left -padx <=
span class=3D"hljs-number">5</span> -pady <span class=3D"hljs-number">5</sp=
an>
    pack configure $fStartApp -padx <span class=3D"hljs-number">5</span> -f=
ill both
    <span class=3D"hljs-keyword">set</span> fButtons .main.f_device.f_butto=
ns
    frame $fButtons -relief flat
    pack configure $fButtons -side top
    <span class=3D"hljs-keyword">set</span> bUpdate $fButtons.b_update
    button $bUpdate -bd <span class=3D"hljs-number">3</span> -text <span cl=
ass=3D"hljs-string">"Read"</span> -font $flipFont -command {devcUpdateDevic=
eFrame} -state disabled
    setBalloon $bUpdate <span class=3D"hljs-string">"Reads device special b=
ytes"</span>
    <span class=3D"hljs-keyword">set</span> bWrite $fButtons.b_write
    button $bWrite -bd <span class=3D"hljs-number">3</span> -text <span cla=
ss=3D"hljs-string">"Set"</span> -font $flipFont -command {devcSetDeviceSpec=
ialBytes} -state disabled
    setBalloon $bWrite <span class=3D"hljs-string">"Sets device special byt=
es"</span>
    <span class=3D"hljs-keyword">set</span> bCanConfig $fButtons.b_canconfi=
g
    button $bCanConfig -bd <span class=3D"hljs-number">3</span> -text <span=
 class=3D"hljs-string">"CAN"</span> -font $flipFont -command {cbDboxWakeUp =
.canNodeConfigDbox} -state disabled
    setBalloon $bCanConfig <span class=3D"hljs-string">"Sets a CAN node par=
ameters"</span>
    <span class=3D"hljs-keyword">set</span> bMemorySelect .main.f_buffer.b_=
memSelect
    <span class=3D"hljs-keyword">if</span> {! [winfo exists $bMemorySelect]=
} then {
	button $bMemorySelect -bd <span class=3D"hljs-number">3</span> -text $::de=
viceArray(currentMemoryButton) -font $flipFont -command {cmdsToggleMemory} =
-width <span class=3D"hljs-number">14</span> -state disabled
	setBalloon $bMemorySelect <span class=3D"hljs-string">"FLIP will perform a=
ll operations\n on the selected memory"</span>
    }
    pack config $bUpdate $bWrite $bCanConfig -side left -padx <span class=
=3D"hljs-number">15</span>
    pack configure $fButtons -side top -padx <span class=3D"hljs-number">5<=
/span> -pady <span class=3D"hljs-number">15</span> -fill both
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> buildSk=
ipTestList</span> {protocol} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">if</span> {$protocol =3D=3D <span class=3D=
"hljs-string">"RS232Standard"</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(skipList) <span clas=
s=3D"hljs-string">"  flash-2.23.1  flash-2.26  flash-2.27  flash-2.28  flas=
h-2.29  flash-2.30  checksum-5.5  checksum-5.6 "</span>
    } elseif {($protocol =3D=3D <span class=3D"hljs-string">"CANStandard"</=
span>) ||($protocol =3D=3D <span class=3D"hljs-string">"rs232can"</span>) |=
|($protocol =3D=3D <span class=3D"hljs-string">"usbcan"</span>) ||($protoco=
l =3D=3D <span class=3D"hljs-string">"canview"</span>)} {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(skipList) <span clas=
s=3D"hljs-string">"  flash-2.23.1  flash-2.26  flash-2.27  flash-2.28  flas=
h-2.29  flash-2.30 "</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> buildSk=
ipProcList</span> {} {
    <span class=3D"hljs-keyword">set</span> skipL {}
    <span class=3D"hljs-keyword">return</span> $skipL
}
drawCanNodeConfigDbox
t89c51cc01
<span class=3D"hljs-keyword">foreach</span> m $::deviceArray(memoryList) {
    cmdsImportCurrentMemoryNameSpace $m
    cmdsSetMemoryParameters
    initBuffer
}
cmdsImportCurrentMemoryNameSpace FLASH
<span class=3D"hljs-comment">#dbgEndSrc [info script]</span>
<span class=3D"hljs-comment">#dbgBeginSrc [info script]</span>
<span class=3D"hljs-keyword">global</span> projDir
<span class=3D"hljs-keyword">source</span> $projDir/tcl/devices/devices_com=
mon.tcl
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> t89c51c=
c02</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> protcl protocol nAddrBits fl=
ipFont rs232standard canstandard expAnsw testFlag buffer flowButtons flipSt=
ates
    <span class=3D"hljs-keyword">set</span> children_List [<span class=3D"h=
ljs-keyword">split</span> [winfo children .main.f_device]]
    <span class=3D"hljs-keyword">foreach</span> item $children_List {
	<span class=3D"hljs-keyword">if</span> {$item !=3D <span class=3D"hljs-str=
ing">".main.f_device.f_deviceName"</span>} then {
	    destroy $item
	}
    }
    <span class=3D"hljs-keyword">set</span> ::deviceArray(name) <span class=
=3D"hljs-string">"T89C51CC02"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(communicationList=
) <span class=3D"hljs-string">"CAN RS232"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(memoryList) [<spa=
n class=3D"hljs-keyword">list</span> FLASH EEPROM]
    <span class=3D"hljs-keyword">set</span> ::deviceArray(memoryButtonList)=
 [<span class=3D"hljs-keyword">list</span> <span class=3D"hljs-string">"Sel=
ect EEPROM"</span> <span class=3D"hljs-string">"Select FLASH"</span>]
    <span class=3D"hljs-keyword">set</span> ::deviceArray(memoryColor) [<sp=
an class=3D"hljs-keyword">list</span> <span class=3D"hljs-string">"#88a67d"=
</span> <span class=3D"hljs-string">"wheat"</span>]
    <span class=3D"hljs-keyword">set</span> ::deviceArray(currentMemory) <s=
pan class=3D"hljs-string">"FLASH"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(currentMemoryButt=
on) <span class=3D"hljs-string">"Select EEPROM"</span>
    <span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keywo=
rd">eval</span> ::FLASH:: {
	<span class=3D"hljs-keyword">variable</span> deviceArray
	<span class=3D"hljs-keyword">variable</span> buffer
	<span class=3D"hljs-keyword">set</span> deviceArray(memorySize) <span clas=
s=3D"hljs-number">16</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankValue) <span clas=
s=3D"hljs-string">"FF"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erase) <span class=3D"hljs-=
string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(blankCheck) <span class=3D"=
hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseType) <span class=3D"h=
ljs-string">"full"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlocks) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock0) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock0) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock1) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock1) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock2) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock2) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock3) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock3) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock4) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock4) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(progStart) <span class=
=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(displayData) <span cla=
ss=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankCheck) <span clas=
s=3D"hljs-string">"01"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(programData) <span cla=
ss=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">namespace</span> export writeBuffer readBuffe=
r readDeviceArray initBuffer bufferChecksum
    }
    <span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keywo=
rd">eval</span> ::EEPROM:: {
	<span class=3D"hljs-keyword">variable</span> deviceArray
	<span class=3D"hljs-keyword">variable</span> buffer
	<span class=3D"hljs-keyword">set</span> deviceArray(memorySize) <span clas=
s=3D"hljs-number">2</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankValue) <span clas=
s=3D"hljs-string">"FF"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erase) <span class=3D"hljs-=
string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(blankCheck) <span class=3D"=
hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseType) <span class=3D"h=
ljs-string">"full"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlocks) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock0) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock0) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock1) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock1) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock2) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock2) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock3) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock3) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock4) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock4) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(progStart) <span class=
=3D"hljs-string">"01"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(displayData) <span cla=
ss=3D"hljs-string">"02"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankCheck) <span clas=
s=3D"hljs-string">"XX"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(programData) <span cla=
ss=3D"hljs-string">"07"</span>
	<span class=3D"hljs-keyword">namespace</span> export writeBuffer readBuffe=
r readDeviceArray initBuffer bufferChecksum
    }
    <span class=3D"hljs-keyword">foreach</span> M $::deviceArray(memoryList=
) {
	<span class=3D"hljs-keyword">proc</span> ::${M}::writeBuffer {index data} =
{
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">set</span> buffer($index) $data
	    <span class=3D"hljs-keyword">return</span>
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::readBuffer {index} {
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">return</span> $buffer($index)
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::readDeviceArray {index} {
	    <span class=3D"hljs-keyword">variable</span> deviceArray
	    <span class=3D"hljs-keyword">return</span> $deviceArray($index)
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::initBuffer {} {
	    <span class=3D"hljs-keyword">variable</span> deviceArray
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">global</span> flipStates
	    <span class=3D"hljs-keyword">set</span> max [<span class=3D"hljs-keywo=
rd">expr</span> $deviceArray(memorySize) * <span class=3D"hljs-number">1024=
</span>]
	    <span class=3D"hljs-keyword">if</span> {$flipStates(simul)} then {
		<span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">set=
</span> i <span class=3D"hljs-number">0</span>} {$i &lt; $max} {<span class=
=3D"hljs-keyword">incr</span> i} {
		    <span class=3D"hljs-keyword">set</span> buffer([<span class=3D"hljs-k=
eyword">format</span> %<span class=3D"hljs-number">06</span>X $i]) $deviceA=
rray(blankValue)
		}
	    } else {
		initBuffer_C $max $deviceArray(blankValue)
	    }
	    <span class=3D"hljs-keyword">return</span>
	}
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::F=
LASH::bufferChecksum</span> {} {
	<span class=3D"hljs-keyword">variable</span> buffer
	<span class=3D"hljs-keyword">global</span> flipStates
	<span class=3D"hljs-keyword">set</span> min $buffer(minProgAddr)
	<span class=3D"hljs-keyword">set</span> max $buffer(maxProgAddr)
	<span class=3D"hljs-keyword">if</span> {$flipStates(simul)} then {
	    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number"=
>0xCAFEFADE</span>
	} else {
	    <span class=3D"hljs-keyword">return</span> [computeBufferChecksum_C $m=
in $max]
	}
    }
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::E=
EPROM::bufferChecksum</span> {} {
	<span class=3D"hljs-keyword">variable</span> buffer
	<span class=3D"hljs-keyword">global</span> flipStates
	<span class=3D"hljs-keyword">set</span> min $buffer(minProgAddr)
	<span class=3D"hljs-keyword">set</span> max $buffer(maxProgAddr)
	<span class=3D"hljs-keyword">if</span> {$flipStates(simul)} then {
	    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number"=
>0xDEADBEEF</span>
	} else {
	    <span class=3D"hljs-keyword">return</span> [computeBufferChecksum_C $m=
in $max]
	}
    }
    <span class=3D"hljs-keyword">set</span> ::deviceArray(jumpAdd) <span cl=
ass=3D"hljs-string">"0000"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(specialSynchro) <=
span class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(RS232ProtocolsLis=
t) <span class=3D"hljs-string">"Standard Enhanced"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(CANProtocolsList)=
 <span class=3D"hljs-string">"Standard Enhanced"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(nnbConnect) <span=
 class=3D"hljs-string">"FF"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(nnbProg) <span cl=
ass=3D"hljs-string">"XX"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(crisConnect) <spa=
n class=3D"hljs-string">"00"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(crisProg) <span c=
lass=3D"hljs-string">"XX"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(btc1) <span class=
=3D"hljs-string">"XX"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(btc2) <span class=
=3D"hljs-string">"XX"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(btc3) <span class=
=3D"hljs-string">"XX"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(p1_config) <span =
class=3D"hljs-string">"XX"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(p3_config) <span =
class=3D"hljs-string">"XX"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(p4_config) <span =
class=3D"hljs-string">"XX"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev0) [<span cla=
ss=3D"hljs-keyword">list</span> FF]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev0Test) <span =
class=3D"hljs-string">"FF"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev1) [<span cla=
ss=3D"hljs-keyword">list</span> FE]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev1Test) <span =
class=3D"hljs-string">"FE"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev2Test) <span =
class=3D"hljs-string">"FC"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev2) [<span cla=
ss=3D"hljs-keyword">list</span> FC XX]
    <span class=3D"hljs-keyword">set</span> expAnsw(readManufId) <span clas=
s=3D"hljs-number">58</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId1) XX
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId2) XX
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId3) XX
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock0) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock1) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock2) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock3) <span cla=
ss=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock4) <span cla=
ss=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> testFlag(readDevBootId1) <span =
class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(readDevBootId2) <span =
class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(sbv) <span class=3D"hl=
js-string">"FC"</span>
    <span class=3D"hljs-keyword">set</span> fBlocks .deviceErase.f_erase.f_=
blocks
    <span class=3D"hljs-keyword">set</span> bBlock0 $fBlocks.b_block0
    <span class=3D"hljs-keyword">set</span> bBlock1 $fBlocks.b_block1
    <span class=3D"hljs-keyword">set</span> bBlock2 $fBlocks.b_block2
    <span class=3D"hljs-keyword">set</span> bBlock3 $fBlocks.b_block3
    <span class=3D"hljs-keyword">set</span> bBlock4 $fBlocks.b_block4
    setBalloon $bBlock0 <span class=3D"hljs-string">"Erase memory between 0=
000 and 1FFF"</span>
    setBalloon $bBlock1 <span class=3D"hljs-string">"Erase memory between 2=
000 and 3FFF"</span>
    setBalloon $bBlock2 <span class=3D"hljs-string">"Erase memory between 4=
000 and 7FFF"</span>
    $bBlock3 configure -state disabled
    $bBlock4 configure -state disabled
    .main.f_device.f_deviceName.l_device configure -text $::deviceArray(nam=
e)
    .main.f_device.f_deviceName configure -relief groove
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(sbv)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(sbv) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(bsb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(bsb) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(ssb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(ssb) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(hsb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(hsb) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(eb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(eb) <span class=3D"h=
ljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(deviceBootId1)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(deviceBootId1) <span=
 class=3D"hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(deviceBootId2)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(deviceBootId2) <span=
 class=3D"hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(bljbFuse)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(bljbFuse) <span clas=
s=3D"hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(x2Fuse)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(x2Fuse) <span class=
=3D"hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(level)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(level) X
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(eraseType)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(eraseType) <span cla=
ss=3D"hljs-string">"full"</span>
    }
    <span class=3D"hljs-keyword">set</span> nAddrBits <span class=3D"hljs-n=
umber">4</span>
    <span class=3D"hljs-keyword">set</span> rs232standard(readHwByte) <span=
 class=3D"hljs-string">":020000050B00EE"</span>
    <span class=3D"hljs-keyword">set</span> rs232standard(readBootlVer) <sp=
an class=3D"hljs-string">":020000050F00EA"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowErase) <span =
class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowBlankCheck) <=
span class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowProgram) <spa=
n class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowVerify) <span=
 class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowSpecialBytes)=
 <span class=3D"hljs-number">0</span>
    wm title .deviceErase <span class=3D"hljs-string">"$::deviceArray(name)=
 Erase"</span>
    .deviceErase.f_erase.f_blocks.b_blockErase configure -state normal
    <span class=3D"hljs-keyword">set</span> fReadOnly .main.f_device.f_read=
Only
    frame $fReadOnly -relief groove -borderwidth <span class=3D"hljs-number=
">1</span>
    <span class=3D"hljs-keyword">set</span> fManufId $fReadOnly.f_manufId
    frame $fManufId -relief flat
    <span class=3D"hljs-keyword">set</span> lManufId $fManufId.l_manufId
    label $lManufId -text <span class=3D"hljs-string">"Manufact. Id"</span>=
 -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    <span class=3D"hljs-keyword">set</span> eManufId $fManufId.e_manufId
    entry $eManufId -textvariable ::deviceArray(manufId) -width <span class=
=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eManufId <span class=3D"hljs-string">"Manufacturer code val=
ue"</span>
    pack config $lManufId $eManufId -padx <span class=3D"hljs-number">1</sp=
an> -side left
    pack config $fManufId -side top -ipady <span class=3D"hljs-number">1</s=
pan> -fill both
    <span class=3D"hljs-keyword">set</span> fDeviceIds $fReadOnly.f_deviceI=
ds
    frame $fDeviceIds -relief flat
    <span class=3D"hljs-keyword">set</span> lDeviceIds $fDeviceIds.l_device=
Ids
    label $lDeviceIds -text <span class=3D"hljs-string">"Device Ids"</span>=
 -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    <span class=3D"hljs-keyword">set</span> eDeviceId1 $fDeviceIds.e_device=
Id1
    entry $eDeviceId1 -textvariable ::deviceArray(deviceId1) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId1 <span class=3D"hljs-string">"Family code value"<=
/span>
    <span class=3D"hljs-keyword">set</span> eDeviceId2 $fDeviceIds.e_device=
Id2
    entry $eDeviceId2 -textvariable ::deviceArray(deviceId2) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId2 <span class=3D"hljs-string">"Device name code"</=
span>
    <span class=3D"hljs-keyword">set</span> eDeviceId3 $fDeviceIds.e_device=
Id3
    entry $eDeviceId3 -textvariable ::deviceArray(deviceId3) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId3 <span class=3D"hljs-string">"Device revision num=
ber"</span>
    pack config $lDeviceIds $eDeviceId1 $eDeviceId2 $eDeviceId3 -padx <span=
 class=3D"hljs-number">1</span> -side left
    pack config $fDeviceIds -side top -ipady <span class=3D"hljs-number">1<=
/span> -fill both
    <span class=3D"hljs-keyword">set</span> fDeviceBootIds $fReadOnly.f_dev=
iceBootIds
    frame $fDeviceBootIds -relief flat
    <span class=3D"hljs-keyword">set</span> lDeviceBootIds $fDeviceBootIds.=
l_deviceBootIds
    label $lDeviceBootIds -text <span class=3D"hljs-string">"Device Boot Id=
s"</span> -font $flipFont -anchor w -width <span class=3D"hljs-number">16</=
span>
    setBalloon $lDeviceBootIds <span class=3D"hljs-string">"Boot Ids 1, 2: =
read-only"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceBootId1 $fDeviceBootIds.=
e_deviceBootId1
    entry $eDeviceBootId1 -textvariable ::deviceArray(deviceBootId1) -width=
 <span class=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceBootId1 <span class=3D"hljs-string">"Boot Id 1 value=
"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceBootId2 $fDeviceBootIds.=
e_deviceBootId2
    entry $eDeviceBootId2 -textvariable ::deviceArray(deviceBootId2) -width=
 <span class=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceBootId2 <span class=3D"hljs-string">"Boot Id 2 value=
"</span>
    pack config $lDeviceBootIds $eDeviceBootId1 $eDeviceBootId2 -padx <span=
 class=3D"hljs-number">1</span> -side left
    pack config $fDeviceBootIds -side top -ipady <span class=3D"hljs-number=
">1</span> -fill both
    <span class=3D"hljs-keyword">set</span> fHSB $fReadOnly.f_hsb
    frame $fHSB -relief flat
    <span class=3D"hljs-keyword">set</span> lHSB $fHSB.l_hsb
    label $lHSB -text <span class=3D"hljs-string">"Hardware Byte"</span> -f=
ont $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lHSB <span class=3D"hljs-string">"Hardware Security Byte: r=
ead-only"</span>
    <span class=3D"hljs-keyword">set</span> eHSB $fHSB.e_hsb
    entry $eHSB -textvariable ::deviceArray(hsb) -width <span class=3D"hljs=
-number">3</span> -font $flipFont -state disabled
    setBalloon $eHSB <span class=3D"hljs-string">"Hardware Security Byte va=
lue"</span>
    pack config $lHSB $eHSB -padx <span class=3D"hljs-number">1</span> -sid=
e left
    pack config $fHSB -side top -ipady <span class=3D"hljs-number">1</span>=
 -fill both
    <span class=3D"hljs-keyword">set</span> fBootlVer $fReadOnly.f_bootlVer
    frame $fBootlVer -relief flat
    <span class=3D"hljs-keyword">set</span> lBootlVer $fBootlVer.l_bootlVer
    label $lBootlVer -text <span class=3D"hljs-string">"Bootloader Ver."</s=
pan> -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lBootlVer <span class=3D"hljs-string">"Bootloader Version: =
read-only"</span>
    <span class=3D"hljs-keyword">set</span> eBootlVer $fBootlVer.e_bootlVer
    entry $eBootlVer -textvariable ::deviceArray(bootlVer) -width <span cla=
ss=3D"hljs-number">5</span> -font $flipFont -state disabled
    setBalloon $eBootlVer <span class=3D"hljs-string">"Bootloader Version"<=
/span>
    pack config $lBootlVer $eBootlVer -padx <span class=3D"hljs-number">1</=
span> -side left
    pack config $fBootlVer -side top -ipady <span class=3D"hljs-number">1</=
span> -fill both
    pack configure $fReadOnly -side top -padx <span class=3D"hljs-number">5=
</span> -fill both
    <span class=3D"hljs-keyword">set</span> fFuses .main.f_device.f_fuses
    frame $fFuses -relief groove -borderwidth <span class=3D"hljs-number">1=
</span>
    <span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-number">0</=
span>} then {
	<span class=3D"hljs-keyword">set</span> bBLJB $fFuses.b_bljb
	checkbutton $bBLJB -text <span class=3D"hljs-string">"BLJB"</span> -font $=
flipFont -<span class=3D"hljs-keyword">variable</span> ::deviceArray(bljbFu=
se) -onvalue <span class=3D"hljs-number">0</span> -offvalue <span class=3D"=
hljs-number">1</span> -indicatoron true -state disabled
	setBalloon $bBLJB <span class=3D"hljs-string">"Boot Loader Jump Bit \nSet =
=3D 0 / Unset =3D 1"</span>
    }
    <span class=3D"hljs-keyword">set</span> bX2 $fFuses.b_x2
    checkbutton $bX2 -text <span class=3D"hljs-string">"X2"</span> -font $f=
lipFont -<span class=3D"hljs-keyword">variable</span> ::deviceArray(x2Fuse)=
 -onvalue <span class=3D"hljs-number">0</span> -offvalue <span class=3D"hlj=
s-number">1</span> -indicatoron true -state disabled
    setBalloon $bX2 <span class=3D"hljs-string">"X2 fuse bit \nSet =3D 0 / =
Unset =3D 1"</span>
    <span class=3D"hljs-keyword">set</span> bConfigPorts $fFuses.b_cfgp
    button $bConfigPorts -bd <span class=3D"hljs-number">3</span> -text <sp=
an class=3D"hljs-string">"Configure HW"</span> -font $flipFont -command {cb=
DboxWakeUp .configP1P3P4Window} -state disabled -width <span class=3D"hljs-=
number">13</span>
    setBalloon $bConfigPorts <span class=3D"hljs-string">"Configure Hardwar=
e Conditions"</span>
    pack config $bConfigPorts $bX2 -side left -padx <span class=3D"hljs-num=
ber">5</span> -pady <span class=3D"hljs-number">5</span> -anchor w
    pack configure $fFuses -side top -padx <span class=3D"hljs-number">5</s=
pan> -pady <span class=3D"hljs-number">5</span> -fill x
    <span class=3D"hljs-keyword">set</span> f_BSB_SBV .main.f_device.f_bsb_=
sbv
    frame $f_BSB_SBV -relief groove -borderwidth <span class=3D"hljs-number=
">1</span>
    <span class=3D"hljs-keyword">set</span> f_BSB $f_BSB_SBV.f_bsb
    frame $f_BSB -relief flat
    <span class=3D"hljs-keyword">set</span> l_BSB $f_BSB.l_bsb
    label $l_BSB -text <span class=3D"hljs-string">"Device BSB &amp; EB"</s=
pan> -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $l_BSB <span class=3D"hljs-string">"Boot Status Byte &amp; E=
xtra Byte"</span>
    <span class=3D"hljs-keyword">set</span> e_BSB $f_BSB.e_bsb
    entry $e_BSB -textvariable ::deviceArray(bsb) -width <span class=3D"hlj=
s-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0=
</span> -state disabled
    setBalloon $e_BSB <span class=3D"hljs-string">"Actual BSB value"</span>
    <span class=3D"hljs-keyword">set</span> e_EB $f_BSB.e_eb
    entry $e_EB -textvariable ::deviceArray(eb) -width <span class=3D"hljs-=
number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0</=
span> -state disabled
    setBalloon $e_EB <span class=3D"hljs-string">"Actual EB value"</span>
    pack config $l_BSB $e_BSB $e_EB -padx <span class=3D"hljs-number">1</sp=
an> -side left
    pack config $f_BSB -side top -ipady <span class=3D"hljs-number">1</span=
> -fill both
    <span class=3D"hljs-keyword">set</span> f_SBV $f_BSB_SBV.f_sbv
    frame $f_SBV -relief flat
    <span class=3D"hljs-keyword">set</span> l_SBV $f_SBV.l_sbv
    label $l_SBV -text <span class=3D"hljs-string">"Device SBV"</span> -fon=
t $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $l_SBV <span class=3D"hljs-string">"Software Boot Vector"</s=
pan>
    <span class=3D"hljs-keyword">set</span> e_SBV $f_SBV.e_sbv
    entry $e_SBV -textvariable ::deviceArray(sbv) -width <span class=3D"hlj=
s-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0=
</span> -state disabled
    setBalloon $e_SBV <span class=3D"hljs-string">"Actual SBV value"</span>
    <span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-number">0</=
span>} then {
	<span class=3D"hljs-keyword">set</span> bErase $fSBV.b_erase
	button $bErase -bd <span class=3D"hljs-number">3</span> -text <span class=
=3D"hljs-string">"Erase"</span> -font $flipFont -command {cmdsEraseSBVBSB} =
-state disabled -width <span class=3D"hljs-number">5</span>
	setBalloon $bErase <span class=3D"hljs-string">"Resets SBV and BSB\nto def=
ault values"</span>
    }
    pack config $l_SBV $e_SBV -padx <span class=3D"hljs-number">1</span> -s=
ide left
    pack config $f_SBV -side top -ipady <span class=3D"hljs-number">1</span=
> -fill both
    pack configure $f_BSB_SBV -side top -padx <span class=3D"hljs-number">5=
</span> -fill both
    bind $e_SBV &lt;Return&gt; {devcSetDeviceSpecialBytes}
    bind $e_BSB &lt;Return&gt; {devcSetDeviceSpecialBytes}
    <span class=3D"hljs-keyword">set</span> fSSB .main.f_device.f_ssb
    frame $fSSB -relief groove -borderwidth <span class=3D"hljs-number">1</=
span>
    <span class=3D"hljs-keyword">set</span> fInfo $fSSB.f_info
    frame $fInfo -relief flat
    <span class=3D"hljs-keyword">set</span> lSSB $fInfo.l_ssb
    label $lSSB -text <span class=3D"hljs-string">"Device SSB"</span> -font=
 $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lSSB <span class=3D"hljs-string">"Software Security Byte"</=
span>
    <span class=3D"hljs-keyword">set</span> eSSB $fInfo.e_ssb
    entry $eSSB -textvariable ::deviceArray(ssb) -width <span class=3D"hljs=
-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0<=
/span> -state disabled
    setBalloon $eSSB <span class=3D"hljs-string">"Actual SSB value"</span>
    pack config $lSSB $eSSB -padx <span class=3D"hljs-number">1</span> -sid=
e left
    pack config $fInfo -side top
    <span class=3D"hljs-keyword">set</span> fLevel $fSSB.f_level
    frame $fLevel -relief flat
    <span class=3D"hljs-keyword">set</span> bLevel0 $fLevel.b_level0
    radiobutton $bLevel0 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 0"</span> -value <sp=
an class=3D"hljs-number">0</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 0"</span> -state disabled
    setBalloon $bLevel0 <span class=3D"hljs-string">"Security level 0: no s=
ecurity\n (setting to levels 1 and 2 allowed)"</span>
    pack configure $bLevel0 -side left
    <span class=3D"hljs-keyword">set</span> bLevel1 $fLevel.b_level1
    radiobutton $bLevel1 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 1"</span> -value <sp=
an class=3D"hljs-number">1</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 1"</span> -state disabled
    setBalloon $bLevel1 <span class=3D"hljs-string">"Security level 1: no w=
riting allowed\n (setting to level 2 allowed)"</span>
    pack configure $bLevel1 -side left
    <span class=3D"hljs-keyword">set</span> bLevel2 $fLevel.b_level2
    radiobutton $bLevel2 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 2"</span> -value <sp=
an class=3D"hljs-number">2</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 2"</span> -state disabled
    setBalloon $bLevel2 <span class=3D"hljs-string">"Security level 2: neit=
her reading nor writing allowed\n (full chip erase resets security level to=
 0)"</span>
    pack configure $bLevel2 -side left
    pack configure $fInfo -side top -anchor w -ipady <span class=3D"hljs-nu=
mber">2</span> -fill both
    pack configure $fLevel -side top -anchor w -pady <span class=3D"hljs-nu=
mber">5</span> -fill both
    pack configure $fSSB -side top -padx <span class=3D"hljs-number">5</spa=
n> -pady <span class=3D"hljs-number">5</span> -fill both
    <span class=3D"hljs-keyword">set</span> fStartApp .main.f_device.f_star=
tApp
    frame $fStartApp -relief groove -borderwidth <span class=3D"hljs-number=
">1</span>
    button $fStartApp.b_start -text <span class=3D"hljs-string">"Start Appl=
ication"</span> -bd <span class=3D"hljs-number">3</span> -font $flipFont -s=
tate disabled -command {ptclStartAppli $flipStates(withReset)}
    setBalloon $fStartApp.b_start <span class=3D"hljs-string">"Starts appli=
cation at address 0x0000"</span>
    checkbutton $fStartApp.b_reset -text <span class=3D"hljs-string">"With =
Reset"</span> -font $flipFont -<span class=3D"hljs-keyword">variable</span>=
 flipStates(withReset) -indicatoron true -state disabled
    setBalloon $fStartApp.b_reset <span class=3D"hljs-string">"If set, gene=
rates a hardware reset pulse\n  when the Start Application button is presse=
d."</span>
    pack configure $fStartApp.b_start $fStartApp.b_reset -side left -padx <=
span class=3D"hljs-number">5</span> -pady <span class=3D"hljs-number">5</sp=
an>
    pack configure $fStartApp -padx <span class=3D"hljs-number">5</span> -f=
ill both
    <span class=3D"hljs-keyword">set</span> fButtons .main.f_device.f_butto=
ns
    frame $fButtons -relief flat
    pack configure $fButtons -side top
    <span class=3D"hljs-keyword">set</span> bUpdate $fButtons.b_update
    button $bUpdate -bd <span class=3D"hljs-number">3</span> -text <span cl=
ass=3D"hljs-string">"Read"</span> -font $flipFont -command {devcUpdateDevic=
eFrame} -state disabled
    setBalloon $bUpdate <span class=3D"hljs-string">"Reads device special b=
ytes"</span>
    <span class=3D"hljs-keyword">set</span> bWrite $fButtons.b_write
    button $bWrite -bd <span class=3D"hljs-number">3</span> -text <span cla=
ss=3D"hljs-string">"Set"</span> -font $flipFont -command {devcSetDeviceSpec=
ialBytes} -state disabled
    setBalloon $bWrite <span class=3D"hljs-string">"Sets device special byt=
es"</span>
    <span class=3D"hljs-keyword">set</span> bCanConfig $fButtons.b_canconfi=
g
    button $bCanConfig -bd <span class=3D"hljs-number">3</span> -text <span=
 class=3D"hljs-string">"CAN"</span> -font $flipFont -command {cbDboxWakeUp =
.canNodeConfigDbox} -state disabled
    setBalloon $bCanConfig <span class=3D"hljs-string">"Sets a CAN node par=
ameters"</span>
    <span class=3D"hljs-keyword">set</span> bMemorySelect .main.f_buffer.b_=
memSelect
    <span class=3D"hljs-keyword">if</span> {! [winfo exists $bMemorySelect]=
} then {
	button $bMemorySelect -bd <span class=3D"hljs-number">3</span> -text $::de=
viceArray(currentMemoryButton) -font $flipFont -command {cmdsToggleMemory} =
-width <span class=3D"hljs-number">14</span> -state disabled
	setBalloon $bMemorySelect <span class=3D"hljs-string">"FLIP will perform a=
ll operations\n on the selected memory"</span>
    }
    pack config $bUpdate $bWrite $bCanConfig -side left -padx <span class=
=3D"hljs-number">15</span>
    pack configure $fButtons -side top -padx <span class=3D"hljs-number">5<=
/span> -pady <span class=3D"hljs-number">15</span> -fill both
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> buildSk=
ipTestList</span> {protocol} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">if</span> {$protocol =3D=3D <span class=3D=
"hljs-string">"RS232Standard"</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(skipList) <span clas=
s=3D"hljs-string">"  flash-2.23  flash-2.24  flash-2.25  flash-2.26  flash-=
2.27  flash-2.28  flash-2.29  flash-2.30  checksum-5.4  checksum-5.5  check=
sum-5.6  checksum-5.13  checksum-5.14 "</span>
    } elseif {($protocol =3D=3D <span class=3D"hljs-string">"CANStandard"</=
span>) ||($protocol =3D=3D <span class=3D"hljs-string">"rs232can"</span>)} =
{
	<span class=3D"hljs-keyword">set</span> ::deviceArray(skipList) <span clas=
s=3D"hljs-string">"  flash-2.23  flash-2.24  flash-2.25  flash-2.26  flash-=
2.27  flash-2.28  flash-2.29  flash-2.30 "</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> buildSk=
ipProcList</span> {} {
    <span class=3D"hljs-keyword">set</span> skipL {}
    <span class=3D"hljs-keyword">return</span> $skipL
}
drawCanNodeConfigDbox
drawP1P3P4ConfigDbox
t89c51cc02
<span class=3D"hljs-keyword">foreach</span> m $::deviceArray(memoryList) {
    cmdsImportCurrentMemoryNameSpace $m
    cmdsSetMemoryParameters
    initBuffer
}
cmdsImportCurrentMemoryNameSpace FLASH
<span class=3D"hljs-comment">#dbgEndSrc [info script]</span>
<span class=3D"hljs-comment">#dbgBeginSrc [info script]</span>
<span class=3D"hljs-keyword">global</span> projDir
<span class=3D"hljs-keyword">source</span> $projDir/tcl/devices/devices_com=
mon.tcl
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> t89c51i=
b2</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> protcl protocol nAddrBits rs=
232standard canstandard expAnsw testFlag buffer flowButtons flipFont
    <span class=3D"hljs-keyword">set</span> children_List [<span class=3D"h=
ljs-keyword">split</span> [winfo children .main.f_device]]
    <span class=3D"hljs-keyword">foreach</span> item $children_List {
	<span class=3D"hljs-keyword">if</span> {$item !=3D <span class=3D"hljs-str=
ing">".main.f_device.f_deviceName"</span>} then {
	    destroy $item
	}
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">a=
rray</span> exists ::deviceArray]} then {
	<span class=3D"hljs-keyword">array</span> <span class=3D"hljs-keyword">uns=
et</span> ::deviceArray
    }
    <span class=3D"hljs-keyword">set</span> ::deviceArray(name) <span class=
=3D"hljs-string">"T89C51IB2"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(communicationList=
) RS232
    <span class=3D"hljs-keyword">set</span> ::deviceArray(memoryList) [<spa=
n class=3D"hljs-keyword">list</span> FLASH]
    <span class=3D"hljs-keyword">set</span> ::deviceArray(memoryColor) [<sp=
an class=3D"hljs-keyword">list</span> <span class=3D"hljs-string">"#88a67d"=
</span>]
    <span class=3D"hljs-keyword">set</span> ::deviceArray(currentMemory) <s=
pan class=3D"hljs-string">"FLASH"</span>
    <span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keywo=
rd">eval</span> ::FLASH:: {
	<span class=3D"hljs-keyword">variable</span> deviceArray
	<span class=3D"hljs-keyword">variable</span> buffer
	<span class=3D"hljs-keyword">set</span> deviceArray(memorySize) <span clas=
s=3D"hljs-number">16</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankValue) <span clas=
s=3D"hljs-string">"FF"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erase) <span class=3D"hljs-=
string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(blankCheck) <span class=3D"=
hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseType) <span class=3D"h=
ljs-string">"full"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlocks) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock0) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock0) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock1) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock1) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock2) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock2) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock3) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock3) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock4) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock4) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(progStart) <span class=
=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(displayData) <span cla=
ss=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankCheck) <span clas=
s=3D"hljs-string">"01"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(programData) <span cla=
ss=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">namespace</span> export writeBuffer readBuffe=
r readDeviceArray initBuffer bufferChecksum
    }
    <span class=3D"hljs-keyword">foreach</span> M $::deviceArray(memoryList=
) {
	<span class=3D"hljs-keyword">proc</span> ::${M}::writeBuffer {index data} =
{
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">set</span> buffer($index) $data
	    <span class=3D"hljs-keyword">return</span>
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::readBuffer {index} {
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">return</span> $buffer($index)
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::readDeviceArray {index} {
	    <span class=3D"hljs-keyword">variable</span> deviceArray
	    <span class=3D"hljs-keyword">return</span> $deviceArray($index)
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::initBuffer {} {
	    <span class=3D"hljs-keyword">variable</span> deviceArray
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">global</span> flipStates
	    <span class=3D"hljs-keyword">set</span> max [<span class=3D"hljs-keywo=
rd">expr</span> $deviceArray(memorySize) * <span class=3D"hljs-number">1024=
</span>]
	    <span class=3D"hljs-keyword">if</span> {$flipStates(simul)} then {
		<span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">set=
</span> i <span class=3D"hljs-number">0</span>} {$i &lt; $max} {<span class=
=3D"hljs-keyword">incr</span> i} {
		    <span class=3D"hljs-keyword">set</span> buffer([<span class=3D"hljs-k=
eyword">format</span> %<span class=3D"hljs-number">06</span>X $i]) $deviceA=
rray(blankValue)
		}
	    } else {
		initBuffer_C $max $deviceArray(blankValue)
	    }
	    <span class=3D"hljs-keyword">return</span>
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::bufferChecksum {} {
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">global</span> flipStates
	    <span class=3D"hljs-keyword">set</span> min $buffer(minProgAddr)
	    <span class=3D"hljs-keyword">set</span> max $buffer(maxProgAddr)
	    <span class=3D"hljs-keyword">if</span> {$flipStates(simul)} then {
		<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0x=
CAFEFADE</span>
	    } else {
		<span class=3D"hljs-keyword">return</span> [computeBufferChecksum_C $min =
$max]
	    }
	}
    }
    <span class=3D"hljs-keyword">set</span> ::deviceArray(specialSynchro) <=
span class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(RS232ProtocolsLis=
t) <span class=3D"hljs-string">"Standard Enhanced"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev0) [<span cla=
ss=3D"hljs-keyword">list</span> FF]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev0Test) <span =
class=3D"hljs-string">"FF"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev1) [<span cla=
ss=3D"hljs-keyword">list</span> FE]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev1Test) <span =
class=3D"hljs-string">"FE"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev2) [<span cla=
ss=3D"hljs-keyword">list</span> FC XX]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev2Test) [<span=
 class=3D"hljs-keyword">list</span> FC]
    <span class=3D"hljs-keyword">set</span> expAnsw(readManufId) <span clas=
s=3D"hljs-number">58</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId1) XX
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId2) XX
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId3) XX
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock0) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock1) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock2) <span cla=
ss=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock3) <span cla=
ss=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock4) <span cla=
ss=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> testFlag(readDevBootId1) <span =
class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(readDevBootId2) <span =
class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(sbv) <span class=3D"hl=
js-string">"FC"</span>
    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">=
tcltest</span>::testConstraints(eraseBlockPossible) <span class=3D"hljs-num=
ber">1</span>
    .main.f_device.f_deviceName.l_device configure -text $::deviceArray(nam=
e)
    .main.f_device.f_deviceName configure -relief groove
    <span class=3D"hljs-keyword">set</span> fBlocks .deviceErase.f_erase.f_=
blocks
    <span class=3D"hljs-keyword">set</span> bBlock0 $fBlocks.b_block0
    <span class=3D"hljs-keyword">set</span> bBlock1 $fBlocks.b_block1
    setBalloon $bBlock0 <span class=3D"hljs-string">"Erase memory between 0=
000 and 1FFF"</span>
    setBalloon $bBlock1 <span class=3D"hljs-string">"Erase memory between 2=
000 and 3FFF"</span>
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(sbv)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(sbv) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(bsb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(bsb) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(ssb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(ssb) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(hsb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(hsb) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(eb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(eb) <span class=3D"h=
ljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(deviceBootId1)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(deviceBootId1) <span=
 class=3D"hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(deviceBootId2)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(deviceBootId2) <span=
 class=3D"hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(oscFuse)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(oscFuse) <span class=
=3D"hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(bljbFuse)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(bljbFuse) <span clas=
s=3D"hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(x2Fuse)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(x2Fuse) <span class=
=3D"hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(level)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(level) X
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(eraseType)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(eraseType) <span cla=
ss=3D"hljs-string">"full"</span>
    }
    <span class=3D"hljs-keyword">set</span> nAddrBits <span class=3D"hljs-n=
umber">4</span>
    <span class=3D"hljs-keyword">set</span> rs232standard(readHwByte) <span=
 class=3D"hljs-string">":020000050B00EE"</span>
    <span class=3D"hljs-keyword">set</span> rs232standard(readBootlVer) <sp=
an class=3D"hljs-string">":020000050F00EA"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowErase) <span =
class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowBlankCheck) <=
span class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowProgram) <spa=
n class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowVerify) <span=
 class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowSpecialBytes)=
 <span class=3D"hljs-number">0</span>
    wm title .deviceErase <span class=3D"hljs-string">"$::deviceArray(name)=
 Erase"</span>
    .deviceErase.f_erase.f_blocks.b_blockErase configure -state normal
    <span class=3D"hljs-keyword">set</span> fReadOnly .main.f_device.f_read=
Only
    frame $fReadOnly -relief groove -borderwidth <span class=3D"hljs-number=
">1</span>
    <span class=3D"hljs-keyword">set</span> fManufId $fReadOnly.f_manufId
    frame $fManufId -relief flat
    <span class=3D"hljs-keyword">set</span> lManufId $fManufId.l_manufId
    label $lManufId -text <span class=3D"hljs-string">"Manufact. Id"</span>=
 -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lManufId <span class=3D"hljs-string">"Manufacturer Id: read=
-only"</span>
    <span class=3D"hljs-keyword">set</span> eManufId $fManufId.e_manufId
    entry $eManufId -textvariable ::deviceArray(manufId) -width <span class=
=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eManufId <span class=3D"hljs-string">"Manufacturer Id value=
"</span>
    pack config $lManufId $eManufId -side left
    pack config $fManufId -side top -ipady <span class=3D"hljs-number">1</s=
pan> -fill both
    <span class=3D"hljs-keyword">set</span> fDeviceIds $fReadOnly.f_deviceI=
ds
    frame $fDeviceIds -relief flat
    <span class=3D"hljs-keyword">set</span> lDeviceIds $fDeviceIds.l_device=
Ids
    label $lDeviceIds -text <span class=3D"hljs-string">"Device Ids"</span>=
 -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lDeviceIds <span class=3D"hljs-string">"Ids 1, 2, 3: read-o=
nly"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceId1 $fDeviceIds.e_device=
Id1
    entry $eDeviceId1 -textvariable ::deviceArray(deviceId1) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId1 <span class=3D"hljs-string">"Id 1 value"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceId2 $fDeviceIds.e_device=
Id2
    entry $eDeviceId2 -textvariable ::deviceArray(deviceId2) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId2 <span class=3D"hljs-string">"Id 2 value"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceId3 $fDeviceIds.e_device=
Id3
    entry $eDeviceId3 -textvariable ::deviceArray(deviceId3) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId3 <span class=3D"hljs-string">"Id 3 value"</span>
    pack config $lDeviceIds $eDeviceId1 -side left
    pack config $eDeviceId2 -padx <span class=3D"hljs-number">2</span> -sid=
e left
    pack config $eDeviceId3 -side left
    pack config $fDeviceIds -side top -ipady <span class=3D"hljs-number">1<=
/span> -fill both
    <span class=3D"hljs-keyword">set</span> fDeviceBootIds $fReadOnly.f_dev=
iceBootIds
    frame $fDeviceBootIds -relief flat
    <span class=3D"hljs-keyword">set</span> lDeviceBootIds $fDeviceBootIds.=
l_deviceBootIds
    label $lDeviceBootIds -text <span class=3D"hljs-string">"Device Boot Id=
s"</span> -font $flipFont -anchor w -width <span class=3D"hljs-number">16</=
span>
    setBalloon $lDeviceBootIds <span class=3D"hljs-string">"Boot Ids 1, 2: =
read-only"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceBootId1 $fDeviceBootIds.=
e_deviceBootId1
    entry $eDeviceBootId1 -textvariable ::deviceArray(deviceBootId1) -width=
 <span class=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceBootId1 <span class=3D"hljs-string">"Boot Id 1 value=
"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceBootId2 $fDeviceBootIds.=
e_deviceBootId2
    entry $eDeviceBootId2 -textvariable ::deviceArray(deviceBootId2) -width=
 <span class=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceBootId2 <span class=3D"hljs-string">"Boot Id 2 value=
"</span>
    pack config $lDeviceBootIds $eDeviceBootId1 -side left
    pack config $eDeviceBootId2 -padx <span class=3D"hljs-number">2</span> =
-side left
    pack config $fDeviceBootIds -side top -ipady <span class=3D"hljs-number=
">1</span> -fill both
    <span class=3D"hljs-keyword">set</span> fHSB $fReadOnly.f_hsb
    frame $fHSB -relief flat
    <span class=3D"hljs-keyword">set</span> lHSB $fHSB.l_hsb
    label $lHSB -text <span class=3D"hljs-string">"HSB"</span> -font $flipF=
ont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lHSB <span class=3D"hljs-string">"Hardware Security Byte: r=
ead-only"</span>
    <span class=3D"hljs-keyword">set</span> eHSB $fHSB.e_hsb
    entry $eHSB -textvariable ::deviceArray(hsb) -width <span class=3D"hljs=
-number">3</span> -font $flipFont -state disabled
    setBalloon $eHSB <span class=3D"hljs-string">"Hardware Byte value"</spa=
n>
    pack config $lHSB $eHSB -side left
    pack config $fHSB -side top -ipady <span class=3D"hljs-number">1</span>=
 -fill both
    <span class=3D"hljs-keyword">set</span> fBootlVer $fReadOnly.f_bootlVer
    frame $fBootlVer -relief flat
    <span class=3D"hljs-keyword">set</span> lBootlVer $fBootlVer.l_bootlVer
    label $lBootlVer -text <span class=3D"hljs-string">"Bootloader Ver."</s=
pan> -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lBootlVer <span class=3D"hljs-string">"Bootloader Version: =
read-only"</span>
    <span class=3D"hljs-keyword">set</span> eBootlVer $fBootlVer.e_bootlVer
    entry $eBootlVer -textvariable ::deviceArray(bootlVer) -width <span cla=
ss=3D"hljs-number">5</span> -font $flipFont -state disabled
    setBalloon $eBootlVer <span class=3D"hljs-string">"Bootloader Version"<=
/span>
    pack config $lBootlVer $eBootlVer -side left
    pack config $fBootlVer -side top -ipady <span class=3D"hljs-number">1</=
span> -fill both
    pack configure $fReadOnly -side top -padx <span class=3D"hljs-number">5=
</span> -fill both
    <span class=3D"hljs-keyword">set</span> fFuses .main.f_device.f_fuses
    frame $fFuses -relief groove -borderwidth <span class=3D"hljs-number">1=
</span>
    <span class=3D"hljs-keyword">set</span> bOsc $fFuses.b_osc
    checkbutton $bOsc -text <span class=3D"hljs-string">"Osc. B"</span> -fo=
nt $flipFont -<span class=3D"hljs-keyword">variable</span> ::deviceArray(os=
cFuse) -onvalue <span class=3D"hljs-number">0</span> -offvalue <span class=
=3D"hljs-number">1</span> -indicatoron true -state disabled
    setBalloon $bOsc <span class=3D"hljs-string">"Osc. B set : Osc B =3D 0"=
</span>
    <span class=3D"hljs-keyword">set</span> bBLJB $fFuses.b_bljb
    checkbutton $bBLJB -text <span class=3D"hljs-string">"BLJB"</span> -fon=
t $flipFont -<span class=3D"hljs-keyword">variable</span> ::deviceArray(blj=
bFuse) -onvalue <span class=3D"hljs-number">0</span> -offvalue <span class=
=3D"hljs-number">1</span> -indicatoron true -state disabled
    setBalloon $bBLJB <span class=3D"hljs-string">"BootLoader Jump Bit set =
: BLJB =3D 0"</span>
    <span class=3D"hljs-keyword">set</span> bX2 $fFuses.b_x2
    checkbutton $bX2 -text <span class=3D"hljs-string">"X2"</span> -font $f=
lipFont -<span class=3D"hljs-keyword">variable</span> ::deviceArray(x2Fuse)=
 -onvalue <span class=3D"hljs-number">0</span> -offvalue <span class=3D"hlj=
s-number">1</span> -indicatoron true -state disabled
    setBalloon $bX2 <span class=3D"hljs-string">"X2 fuse bit \nSet =3D 0 / =
Unset =3D 1"</span>
    pack config $bOsc $bBLJB $bX2 -side left -anchor w
    pack configure $fFuses -side top -padx <span class=3D"hljs-number">5</s=
pan> -pady <span class=3D"hljs-number">1</span> -fill both
    <span class=3D"hljs-keyword">set</span> f_BSB_SBV .main.f_device.f_bsb_=
sbv
    frame $f_BSB_SBV -relief groove -borderwidth <span class=3D"hljs-number=
">1</span>
    <span class=3D"hljs-keyword">set</span> f_BSB $f_BSB_SBV.f_bsb
    frame $f_BSB -relief flat
    <span class=3D"hljs-keyword">set</span> l_BSB $f_BSB.l_bsb
    label $l_BSB -text <span class=3D"hljs-string">"Device BSB"</span> -fon=
t $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $l_BSB <span class=3D"hljs-string">"Boot Status Byte"</span>
    <span class=3D"hljs-keyword">set</span> e_BSB $f_BSB.e_bsb
    entry $e_BSB -textvariable ::deviceArray(bsb) -width <span class=3D"hlj=
s-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0=
</span> -state disabled
    setBalloon $e_BSB <span class=3D"hljs-string">"Actual BSB value"</span>
    pack config $l_BSB $e_BSB -side left
    pack config $f_BSB -side top -ipady <span class=3D"hljs-number">1</span=
> -fill both
    <span class=3D"hljs-keyword">set</span> f_SBV $f_BSB_SBV.f_sbv
    frame $f_SBV -relief flat
    <span class=3D"hljs-keyword">set</span> l_SBV $f_SBV.l_sbv
    label $l_SBV -text <span class=3D"hljs-string">"Device SBV"</span> -fon=
t $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $l_SBV <span class=3D"hljs-string">"Software Boot Vector"</s=
pan>
    <span class=3D"hljs-keyword">set</span> e_SBV $f_SBV.e_sbv
    entry $e_SBV -textvariable ::deviceArray(sbv) -width <span class=3D"hlj=
s-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0=
</span> -state disabled
    setBalloon $e_SBV <span class=3D"hljs-string">"Actual SBV value"</span>
    <span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-number">0</=
span>} then {
	<span class=3D"hljs-keyword">set</span> bErase $fSBV.b_erase
	button $bErase -bd <span class=3D"hljs-number">3</span> -text <span class=
=3D"hljs-string">"Erase"</span> -font $flipFont -command {cmdsEraseSBVBSB} =
-state disabled -width <span class=3D"hljs-number">5</span>
	setBalloon $bErase <span class=3D"hljs-string">"Resets SBV and BSB\nto def=
ault values"</span>
    }
    pack config $l_SBV $e_SBV -side left
    pack config $f_SBV -side top -ipady <span class=3D"hljs-number">1</span=
> -fill both
    pack configure $f_BSB_SBV -side top -padx <span class=3D"hljs-number">5=
</span> -fill both
    bind $e_SBV &lt;Return&gt; {devcSetDeviceSpecialBytes}
    bind $e_BSB &lt;Return&gt; {devcSetDeviceSpecialBytes}
    <span class=3D"hljs-keyword">set</span> fSSB .main.f_device.f_ssb
    frame $fSSB -relief groove -borderwidth <span class=3D"hljs-number">1</=
span>
    <span class=3D"hljs-keyword">set</span> fInfo $fSSB.f_info
    frame $fInfo -relief flat
    <span class=3D"hljs-keyword">set</span> lSSB $fInfo.l_ssb
    label $lSSB -text <span class=3D"hljs-string">"Device SSB"</span> -font=
 $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lSSB <span class=3D"hljs-string">"Software Security Byte (S=
SB)"</span>
    <span class=3D"hljs-keyword">set</span> eSSB $fInfo.e_ssb
    entry $eSSB -textvariable ::deviceArray(ssb) -width <span class=3D"hljs=
-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0<=
/span> -state disabled
    setBalloon $eSSB <span class=3D"hljs-string">"Actual SSB value"</span>
    pack config $lSSB $eSSB -side left
    pack config $fInfo -side top
    <span class=3D"hljs-keyword">set</span> fLevel0 $fSSB.f_level0
    frame $fLevel0 -relief flat
    <span class=3D"hljs-keyword">set</span> bLevel0 $fLevel0.b_level0
    radiobutton $bLevel0 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 0"</span> -value <sp=
an class=3D"hljs-number">0</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 0"</span> -state disabled
    setBalloon $bLevel0 <span class=3D"hljs-string">"Security level 0: no s=
ecurity\n (setting to levels 1 and 2 allowed)"</span>
    pack configure $bLevel0 -side left
    <span class=3D"hljs-keyword">set</span> fLevel1 $fSSB.f_level1
    frame $fLevel1 -relief flat
    <span class=3D"hljs-keyword">set</span> bLevel1 $fLevel1.b_level1
    radiobutton $bLevel1 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 1"</span> -value <sp=
an class=3D"hljs-number">1</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 1"</span> -state disabled
    setBalloon $bLevel1 <span class=3D"hljs-string">"Security level 1: no w=
riting allowed\n (setting to level 2 allowed)"</span>
    pack configure $bLevel1 -side left
    <span class=3D"hljs-keyword">set</span> fLevel2 $fSSB.f_level2
    frame $fLevel2 -relief flat
    <span class=3D"hljs-keyword">set</span> bLevel2 $fLevel2.b_level2
    radiobutton $bLevel2 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 2"</span> -value <sp=
an class=3D"hljs-number">2</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 2"</span> -state disabled
    setBalloon $bLevel2 <span class=3D"hljs-string">"Security level 2: no r=
eading/writing allowed\n (full chip erase resets security level to 0)"</spa=
n>
    pack configure $bLevel2 -side left
    pack configure $fInfo -side top -anchor w -ipady <span class=3D"hljs-nu=
mber">1</span> -fill both
    pack configure $fInfo $fLevel0 $fLevel1 $fLevel2 -side top -anchor w -f=
ill both
    pack configure $fSSB -side top -padx <span class=3D"hljs-number">5</spa=
n> -pady <span class=3D"hljs-number">1</span> -fill both
    <span class=3D"hljs-keyword">set</span> fButtons .main.f_device.f_butto=
ns
    frame $fButtons -relief flat
    <span class=3D"hljs-keyword">set</span> bUpdate $fButtons.b_update
    button $bUpdate -bd <span class=3D"hljs-number">3</span> -text <span cl=
ass=3D"hljs-string">"Read"</span> -font $flipFont -command {devcUpdateDevic=
eFrame} -state disabled
    setBalloon $bUpdate <span class=3D"hljs-string">"Reads device special b=
ytes"</span>
    <span class=3D"hljs-keyword">set</span> bWrite $fButtons.b_write
    button $bWrite -bd <span class=3D"hljs-number">3</span> -text <span cla=
ss=3D"hljs-string">"Set"</span> -font $flipFont -command {devcSetDeviceSpec=
ialBytes} -state disabled
    setBalloon $bWrite <span class=3D"hljs-string">"Sets device special byt=
es"</span>
    pack config $bUpdate $bWrite -side left -padx <span class=3D"hljs-numbe=
r">10</span>
    <span class=3D"hljs-keyword">catch</span> [destroy .main.f_buffer.b_mem=
Select]
    pack configure $fButtons -side top -padx <span class=3D"hljs-number">35=
</span> -pady <span class=3D"hljs-number">5</span> -fill both
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> buildSk=
ipTestList</span> {protocol} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(skipList) <span c=
lass=3D"hljs-string">"  xaf-1.5  xaf-1.6  xaf-1.13  xaf-1.14  xaf-1.21  xaf=
-1.22  xaf-1.28  flash-2.23  flash-2.24  flash-2.25  flash-2.26  flash-2.27=
  flash-2.28  flash-2.29  flash-2.30  checksum-5.4  checksum-5.5  checksum-=
5.6 "</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> buildSk=
ipProcList</span> {} {
    <span class=3D"hljs-keyword">set</span> skipL {}
    <span class=3D"hljs-keyword">return</span> $skipL
}
t89c51ib2
<span class=3D"hljs-keyword">foreach</span> m $::deviceArray(memoryList) {
    cmdsImportCurrentMemoryNameSpace $m
    cmdsSetMemoryParameters
    initBuffer
}
cmdsImportCurrentMemoryNameSpace FLASH
<span class=3D"hljs-comment">#dbgEndSrc [info script]</span>
<span class=3D"hljs-comment">#dbgBeginSrc [info script]</span>
<span class=3D"hljs-keyword">global</span> projDir
<span class=3D"hljs-keyword">source</span> $projDir/tcl/devices/devices_com=
mon.tcl
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> t89c51i=
c2</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> protcl protocol nAddrBits rs=
232standard canstandard expAnsw testFlag buffer flowButtons flipFont
    <span class=3D"hljs-keyword">set</span> children_List [<span class=3D"h=
ljs-keyword">split</span> [winfo children .main.f_device]]
    <span class=3D"hljs-keyword">foreach</span> item $children_List {
	<span class=3D"hljs-keyword">if</span> {$item !=3D <span class=3D"hljs-str=
ing">".main.f_device.f_deviceName"</span>} then {
	    destroy $item
	}
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">a=
rray</span> exists ::deviceArray]} then {
	<span class=3D"hljs-keyword">array</span> <span class=3D"hljs-keyword">uns=
et</span> ::deviceArray
    }
    <span class=3D"hljs-keyword">set</span> ::deviceArray(name) <span class=
=3D"hljs-string">"T89C51IC2"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(communicationList=
) RS232
    <span class=3D"hljs-keyword">set</span> ::deviceArray(memoryList) [<spa=
n class=3D"hljs-keyword">list</span> FLASH]
    <span class=3D"hljs-keyword">set</span> ::deviceArray(memoryColor) [<sp=
an class=3D"hljs-keyword">list</span> <span class=3D"hljs-string">"#88a67d"=
</span> <span class=3D"hljs-string">"wheat"</span>]
    <span class=3D"hljs-keyword">set</span> ::deviceArray(currentMemory) <s=
pan class=3D"hljs-string">"FLASH"</span>
    <span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keywo=
rd">eval</span> ::FLASH:: {
	<span class=3D"hljs-keyword">variable</span> deviceArray
	<span class=3D"hljs-keyword">variable</span> buffer
	<span class=3D"hljs-keyword">set</span> deviceArray(memorySize) <span clas=
s=3D"hljs-number">32</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankValue) <span clas=
s=3D"hljs-string">"FF"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erase) <span class=3D"hljs-=
string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(blankCheck) <span class=3D"=
hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseType) <span class=3D"h=
ljs-string">"full"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlocks) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock0) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock0) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock1) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock1) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock2) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock2) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock3) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock3) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock4) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock4) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(progStart) <span class=
=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(displayData) <span cla=
ss=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankCheck) <span clas=
s=3D"hljs-string">"01"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(programData) <span cla=
ss=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">namespace</span> export writeBuffer readBuffe=
r readDeviceArray initBuffer bufferChecksum
    }
    <span class=3D"hljs-keyword">foreach</span> M $::deviceArray(memoryList=
) {
	<span class=3D"hljs-keyword">proc</span> ::${M}::writeBuffer {index data} =
{
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">set</span> buffer($index) $data
	    <span class=3D"hljs-keyword">return</span>
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::readBuffer {index} {
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">return</span> $buffer($index)
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::readDeviceArray {index} {
	    <span class=3D"hljs-keyword">variable</span> deviceArray
	    <span class=3D"hljs-keyword">return</span> $deviceArray($index)
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::initBuffer {} {
	    <span class=3D"hljs-keyword">variable</span> deviceArray
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">global</span> flipStates
	    <span class=3D"hljs-keyword">set</span> max [<span class=3D"hljs-keywo=
rd">expr</span> $deviceArray(memorySize) * <span class=3D"hljs-number">1024=
</span>]
	    <span class=3D"hljs-keyword">if</span> {$flipStates(simul)} then {
		<span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">set=
</span> i <span class=3D"hljs-number">0</span>} {$i &lt; $max} {<span class=
=3D"hljs-keyword">incr</span> i} {
		    <span class=3D"hljs-keyword">set</span> buffer([<span class=3D"hljs-k=
eyword">format</span> %<span class=3D"hljs-number">06</span>X $i]) $deviceA=
rray(blankValue)
		}
	    } else {
		initBuffer_C $max $deviceArray(blankValue)
	    }
	    <span class=3D"hljs-keyword">return</span>
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::bufferChecksum {} {
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">global</span> flipStates
	    <span class=3D"hljs-keyword">set</span> min $buffer(minProgAddr)
	    <span class=3D"hljs-keyword">set</span> max $buffer(maxProgAddr)
	    <span class=3D"hljs-keyword">if</span> {$flipStates(simul)} then {
		<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0x=
CAFEFADE</span>
	    } else {
		<span class=3D"hljs-keyword">return</span> [computeBufferChecksum_C $min =
$max]
	    }
	}
    }
    <span class=3D"hljs-keyword">set</span> ::deviceArray(specialSynchro) <=
span class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(RS232ProtocolsLis=
t) <span class=3D"hljs-string">"Standard Enhanced"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev0) [<span cla=
ss=3D"hljs-keyword">list</span> FF]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev0Test) <span =
class=3D"hljs-string">"FF"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev1) [<span cla=
ss=3D"hljs-keyword">list</span> FE]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev1Test) <span =
class=3D"hljs-string">"FE"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev2) [<span cla=
ss=3D"hljs-keyword">list</span> FC XX]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev2Test) [<span=
 class=3D"hljs-keyword">list</span> FC]
    <span class=3D"hljs-keyword">set</span> expAnsw(readManufId) <span clas=
s=3D"hljs-number">58</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId1) XX
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId2) XX
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId3) XX
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock0) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock1) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock2) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock3) <span cla=
ss=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock4) <span cla=
ss=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> testFlag(readDevBootId1) <span =
class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(readDevBootId2) <span =
class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(sbv) <span class=3D"hl=
js-string">"FC"</span>
    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">=
tcltest</span>::testConstraints(eraseBlockPossible) <span class=3D"hljs-num=
ber">1</span>
    .main.f_device.f_deviceName.l_device configure -text $::deviceArray(nam=
e)
    .main.f_device.f_deviceName configure -relief groove
    <span class=3D"hljs-keyword">set</span> fBlocks .deviceErase.f_erase.f_=
blocks
    <span class=3D"hljs-keyword">set</span> bBlock0 $fBlocks.b_block0
    <span class=3D"hljs-keyword">set</span> bBlock1 $fBlocks.b_block1
    <span class=3D"hljs-keyword">set</span> bBlock2 $fBlocks.b_block2
    setBalloon $bBlock0 <span class=3D"hljs-string">"Erase memory between 0=
000 and 1FFF"</span>
    setBalloon $bBlock1 <span class=3D"hljs-string">"Erase memory between 2=
000 and 3FFF"</span>
    setBalloon $bBlock2 <span class=3D"hljs-string">"Erase memory between 4=
000 and 7FFF"</span>
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(sbv)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(sbv) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(bsb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(bsb) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(ssb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(ssb) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(hsb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(hsb) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(eb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(eb) <span class=3D"h=
ljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(deviceBootId1)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(deviceBootId1) <span=
 class=3D"hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(deviceBootId2)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(deviceBootId2) <span=
 class=3D"hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(oscFuse)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(oscFuse) <span class=
=3D"hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(bljbFuse)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(bljbFuse) <span clas=
s=3D"hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(x2Fuse)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(x2Fuse) <span class=
=3D"hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(level)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(level) X
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(eraseType)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(eraseType) <span cla=
ss=3D"hljs-string">"full"</span>
    }
    <span class=3D"hljs-keyword">set</span> nAddrBits <span class=3D"hljs-n=
umber">4</span>
    <span class=3D"hljs-keyword">set</span> rs232standard(readHwByte) <span=
 class=3D"hljs-string">":020000050B00EE"</span>
    <span class=3D"hljs-keyword">set</span> rs232standard(readBootlVer) <sp=
an class=3D"hljs-string">":020000050F00EA"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowErase) <span =
class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowBlankCheck) <=
span class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowProgram) <spa=
n class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowVerify) <span=
 class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowSpecialBytes)=
 <span class=3D"hljs-number">0</span>
    wm title .deviceErase <span class=3D"hljs-string">"$::deviceArray(name)=
 Erase"</span>
    .deviceErase.f_erase.f_blocks.b_blockErase configure -state normal
    <span class=3D"hljs-keyword">set</span> fReadOnly .main.f_device.f_read=
Only
    frame $fReadOnly -relief groove -borderwidth <span class=3D"hljs-number=
">1</span>
    <span class=3D"hljs-keyword">set</span> fManufId $fReadOnly.f_manufId
    frame $fManufId -relief flat
    <span class=3D"hljs-keyword">set</span> lManufId $fManufId.l_manufId
    label $lManufId -text <span class=3D"hljs-string">"Manufact. Id"</span>=
 -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lManufId <span class=3D"hljs-string">"Manufacturer Id: read=
-only"</span>
    <span class=3D"hljs-keyword">set</span> eManufId $fManufId.e_manufId
    entry $eManufId -textvariable ::deviceArray(manufId) -width <span class=
=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eManufId <span class=3D"hljs-string">"Manufacturer Id value=
"</span>
    pack config $lManufId $eManufId -side left
    pack config $fManufId -side top -ipady <span class=3D"hljs-number">1</s=
pan> -fill both
    <span class=3D"hljs-keyword">set</span> fDeviceIds $fReadOnly.f_deviceI=
ds
    frame $fDeviceIds -relief flat
    <span class=3D"hljs-keyword">set</span> lDeviceIds $fDeviceIds.l_device=
Ids
    label $lDeviceIds -text <span class=3D"hljs-string">"Device Ids"</span>=
 -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lDeviceIds <span class=3D"hljs-string">"Ids 1, 2, 3: read-o=
nly"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceId1 $fDeviceIds.e_device=
Id1
    entry $eDeviceId1 -textvariable ::deviceArray(deviceId1) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId1 <span class=3D"hljs-string">"Id 1 value"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceId2 $fDeviceIds.e_device=
Id2
    entry $eDeviceId2 -textvariable ::deviceArray(deviceId2) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId2 <span class=3D"hljs-string">"Id 2 value"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceId3 $fDeviceIds.e_device=
Id3
    entry $eDeviceId3 -textvariable ::deviceArray(deviceId3) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId3 <span class=3D"hljs-string">"Id 3 value"</span>
    pack config $lDeviceIds $eDeviceId1 -side left
    pack config $eDeviceId2 -padx <span class=3D"hljs-number">2</span> -sid=
e left
    pack config $eDeviceId3 -side left
    pack config $fDeviceIds -side top -ipady <span class=3D"hljs-number">1<=
/span> -fill both
    <span class=3D"hljs-keyword">set</span> fDeviceBootIds $fReadOnly.f_dev=
iceBootIds
    frame $fDeviceBootIds -relief flat
    <span class=3D"hljs-keyword">set</span> lDeviceBootIds $fDeviceBootIds.=
l_deviceBootIds
    label $lDeviceBootIds -text <span class=3D"hljs-string">"Device Boot Id=
s"</span> -font $flipFont -anchor w -width <span class=3D"hljs-number">16</=
span>
    setBalloon $lDeviceBootIds <span class=3D"hljs-string">"Boot Ids 1, 2: =
read-only"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceBootId1 $fDeviceBootIds.=
e_deviceBootId1
    entry $eDeviceBootId1 -textvariable ::deviceArray(deviceBootId1) -width=
 <span class=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceBootId1 <span class=3D"hljs-string">"Boot Id 1 value=
"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceBootId2 $fDeviceBootIds.=
e_deviceBootId2
    entry $eDeviceBootId2 -textvariable ::deviceArray(deviceBootId2) -width=
 <span class=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceBootId2 <span class=3D"hljs-string">"Boot Id 2 value=
"</span>
    pack config $lDeviceBootIds $eDeviceBootId1 -side left
    pack config $eDeviceBootId2 -padx <span class=3D"hljs-number">2</span> =
-side left
    pack config $fDeviceBootIds -side top -ipady <span class=3D"hljs-number=
">1</span> -fill both
    <span class=3D"hljs-keyword">set</span> fHSB $fReadOnly.f_hsb
    frame $fHSB -relief flat
    <span class=3D"hljs-keyword">set</span> lHSB $fHSB.l_hsb
    label $lHSB -text <span class=3D"hljs-string">"HSB"</span> -font $flipF=
ont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lHSB <span class=3D"hljs-string">"Hardware Security Byte: r=
ead-only"</span>
    <span class=3D"hljs-keyword">set</span> eHSB $fHSB.e_hsb
    entry $eHSB -textvariable ::deviceArray(hsb) -width <span class=3D"hljs=
-number">3</span> -font $flipFont -state disabled
    setBalloon $eHSB <span class=3D"hljs-string">"Hardware Byte value"</spa=
n>
    pack config $lHSB $eHSB -side left
    pack config $fHSB -side top -ipady <span class=3D"hljs-number">1</span>=
 -fill both
    <span class=3D"hljs-keyword">set</span> fBootlVer $fReadOnly.f_bootlVer
    frame $fBootlVer -relief flat
    <span class=3D"hljs-keyword">set</span> lBootlVer $fBootlVer.l_bootlVer
    label $lBootlVer -text <span class=3D"hljs-string">"Bootloader Ver."</s=
pan> -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lBootlVer <span class=3D"hljs-string">"Bootloader Version: =
read-only"</span>
    <span class=3D"hljs-keyword">set</span> eBootlVer $fBootlVer.e_bootlVer
    entry $eBootlVer -textvariable ::deviceArray(bootlVer) -width <span cla=
ss=3D"hljs-number">5</span> -font $flipFont -state disabled
    setBalloon $eBootlVer <span class=3D"hljs-string">"Bootloader Version"<=
/span>
    pack config $lBootlVer $eBootlVer -side left
    pack config $fBootlVer -side top -ipady <span class=3D"hljs-number">1</=
span> -fill both
    pack configure $fReadOnly -side top -padx <span class=3D"hljs-number">5=
</span> -fill both
    <span class=3D"hljs-keyword">set</span> fFuses .main.f_device.f_fuses
    frame $fFuses -relief groove -borderwidth <span class=3D"hljs-number">1=
</span>
    <span class=3D"hljs-keyword">set</span> bOsc $fFuses.b_osc
    checkbutton $bOsc -text <span class=3D"hljs-string">"Osc. B"</span> -fo=
nt $flipFont -<span class=3D"hljs-keyword">variable</span> ::deviceArray(os=
cFuse) -onvalue <span class=3D"hljs-number">0</span> -offvalue <span class=
=3D"hljs-number">1</span> -indicatoron true -state disabled
    setBalloon $bOsc <span class=3D"hljs-string">"Osc. B set : Osc B =3D 0"=
</span>
    <span class=3D"hljs-keyword">set</span> bBLJB $fFuses.b_bljb
    checkbutton $bBLJB -text <span class=3D"hljs-string">"BLJB"</span> -fon=
t $flipFont -<span class=3D"hljs-keyword">variable</span> ::deviceArray(blj=
bFuse) -onvalue <span class=3D"hljs-number">0</span> -offvalue <span class=
=3D"hljs-number">1</span> -indicatoron true -state disabled
    setBalloon $bBLJB <span class=3D"hljs-string">"BootLoader Jump Bit set =
: BLJB =3D 0"</span>
    <span class=3D"hljs-keyword">set</span> bX2 $fFuses.b_x2
    checkbutton $bX2 -text <span class=3D"hljs-string">"X2"</span> -font $f=
lipFont -<span class=3D"hljs-keyword">variable</span> ::deviceArray(x2Fuse)=
 -onvalue <span class=3D"hljs-number">0</span> -offvalue <span class=3D"hlj=
s-number">1</span> -indicatoron true -state disabled
    setBalloon $bX2 <span class=3D"hljs-string">"X2 fuse bit \nSet =3D 0 / =
Unset =3D 1"</span>
    pack config $bOsc $bBLJB $bX2 -side left -anchor w
    pack configure $fFuses -side top -padx <span class=3D"hljs-number">5</s=
pan> -pady <span class=3D"hljs-number">1</span> -fill both
    <span class=3D"hljs-keyword">set</span> f_BSB_SBV .main.f_device.f_bsb_=
sbv
    frame $f_BSB_SBV -relief groove -borderwidth <span class=3D"hljs-number=
">1</span>
    <span class=3D"hljs-keyword">set</span> f_BSB $f_BSB_SBV.f_bsb
    frame $f_BSB -relief flat
    <span class=3D"hljs-keyword">set</span> l_BSB $f_BSB.l_bsb
    label $l_BSB -text <span class=3D"hljs-string">"Device BSB"</span> -fon=
t $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $l_BSB <span class=3D"hljs-string">"Boot Status Byte"</span>
    <span class=3D"hljs-keyword">set</span> e_BSB $f_BSB.e_bsb
    entry $e_BSB -textvariable ::deviceArray(bsb) -width <span class=3D"hlj=
s-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0=
</span> -state disabled
    setBalloon $e_BSB <span class=3D"hljs-string">"Actual BSB value"</span>
    pack config $l_BSB $e_BSB -side left
    pack config $f_BSB -side top -ipady <span class=3D"hljs-number">1</span=
> -fill both
    <span class=3D"hljs-keyword">set</span> f_SBV $f_BSB_SBV.f_sbv
    frame $f_SBV -relief flat
    <span class=3D"hljs-keyword">set</span> l_SBV $f_SBV.l_sbv
    label $l_SBV -text <span class=3D"hljs-string">"Device SBV"</span> -fon=
t $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $l_SBV <span class=3D"hljs-string">"Software Boot Vector"</s=
pan>
    <span class=3D"hljs-keyword">set</span> e_SBV $f_SBV.e_sbv
    entry $e_SBV -textvariable ::deviceArray(sbv) -width <span class=3D"hlj=
s-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0=
</span> -state disabled
    setBalloon $e_SBV <span class=3D"hljs-string">"Actual SBV value"</span>
    <span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-number">0</=
span>} then {
	<span class=3D"hljs-keyword">set</span> bErase $fSBV.b_erase
	button $bErase -bd <span class=3D"hljs-number">3</span> -text <span class=
=3D"hljs-string">"Erase"</span> -font $flipFont -command {cmdsEraseSBVBSB} =
-state disabled -width <span class=3D"hljs-number">5</span>
	setBalloon $bErase <span class=3D"hljs-string">"Resets SBV and BSB\nto def=
ault values"</span>
    }
    pack config $l_SBV $e_SBV -side left
    pack config $f_SBV -side top -ipady <span class=3D"hljs-number">1</span=
> -fill both
    pack configure $f_BSB_SBV -side top -padx <span class=3D"hljs-number">5=
</span> -fill both
    bind $e_SBV &lt;Return&gt; {devcSetDeviceSpecialBytes}
    bind $e_BSB &lt;Return&gt; {devcSetDeviceSpecialBytes}
    <span class=3D"hljs-keyword">set</span> fSSB .main.f_device.f_ssb
    frame $fSSB -relief groove -borderwidth <span class=3D"hljs-number">1</=
span>
    <span class=3D"hljs-keyword">set</span> fInfo $fSSB.f_info
    frame $fInfo -relief flat
    <span class=3D"hljs-keyword">set</span> lSSB $fInfo.l_ssb
    label $lSSB -text <span class=3D"hljs-string">"Device SSB"</span> -font=
 $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lSSB <span class=3D"hljs-string">"Software Security Byte"</=
span>
    <span class=3D"hljs-keyword">set</span> eSSB $fInfo.e_ssb
    entry $eSSB -textvariable ::deviceArray(ssb) -width <span class=3D"hljs=
-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0<=
/span> -state disabled
    setBalloon $eSSB <span class=3D"hljs-string">"Actual SSB value"</span>
    pack config $lSSB $eSSB -side left
    pack config $fInfo -side top
    <span class=3D"hljs-keyword">set</span> fLevel0 $fSSB.f_level0
    frame $fLevel0 -relief flat
    <span class=3D"hljs-keyword">set</span> bLevel0 $fLevel0.b_level0
    radiobutton $bLevel0 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 0"</span> -value <sp=
an class=3D"hljs-number">0</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 0"</span> -state disabled
    setBalloon $bLevel0 <span class=3D"hljs-string">"Security level 0: no s=
ecurity\n (setting to levels 1 and 2 allowed)"</span>
    pack configure $bLevel0 -side left
    <span class=3D"hljs-keyword">set</span> fLevel1 $fSSB.f_level1
    frame $fLevel1 -relief flat
    <span class=3D"hljs-keyword">set</span> bLevel1 $fLevel1.b_level1
    radiobutton $bLevel1 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 1"</span> -value <sp=
an class=3D"hljs-number">1</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 1"</span> -state disabled
    setBalloon $bLevel1 <span class=3D"hljs-string">"Security level 1: no w=
riting allowed\n (setting to level 2 allowed)"</span>
    pack configure $bLevel1 -side left
    <span class=3D"hljs-keyword">set</span> fLevel2 $fSSB.f_level2
    frame $fLevel2 -relief flat
    <span class=3D"hljs-keyword">set</span> bLevel2 $fLevel2.b_level2
    radiobutton $bLevel2 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 2"</span> -value <sp=
an class=3D"hljs-number">2</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 2"</span> -state disabled
    setBalloon $bLevel2 <span class=3D"hljs-string">"Security level 2: no r=
eading/writing allowed\n (full chip erase resets security level to 0)"</spa=
n>
    pack configure $bLevel2 -side left
    pack configure $fInfo -side top -anchor w -ipady <span class=3D"hljs-nu=
mber">1</span> -fill both
    pack configure $fInfo $fLevel0 $fLevel1 $fLevel2 -side top -anchor w -f=
ill both
    pack configure $fSSB -side top -padx <span class=3D"hljs-number">5</spa=
n> -pady <span class=3D"hljs-number">1</span> -fill both
    <span class=3D"hljs-keyword">set</span> fButtons .main.f_device.f_butto=
ns
    frame $fButtons -relief flat
    <span class=3D"hljs-keyword">set</span> bUpdate $fButtons.b_update
    button $bUpdate -bd <span class=3D"hljs-number">3</span> -text <span cl=
ass=3D"hljs-string">"Read"</span> -font $flipFont -command {devcUpdateDevic=
eFrame} -state disabled
    setBalloon $bUpdate <span class=3D"hljs-string">"Reads device special b=
ytes"</span>
    <span class=3D"hljs-keyword">set</span> bWrite $fButtons.b_write
    button $bWrite -bd <span class=3D"hljs-number">3</span> -text <span cla=
ss=3D"hljs-string">"Set"</span> -font $flipFont -command {devcSetDeviceSpec=
ialBytes} -state disabled
    setBalloon $bWrite <span class=3D"hljs-string">"Sets device special byt=
es"</span>
    pack config $bUpdate $bWrite -side left -padx <span class=3D"hljs-numbe=
r">10</span>
    <span class=3D"hljs-keyword">catch</span> [destroy .main.f_buffer.b_mem=
Select]
    pack configure $fButtons -side top -padx <span class=3D"hljs-number">35=
</span> -pady <span class=3D"hljs-number">5</span> -fill both
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> buildSk=
ipTestList</span> {protocol} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(skipList) <span c=
lass=3D"hljs-string">"
xaf-1.5  xaf-1.6  xaf-1.13  xaf-1.14  xaf-1.21  xaf-1.22  xaf-1.28  flash-2=
.23.1  flash-2.26  flash-2.27  flash-2.28  flash-2.29  flash-2.30  checksum=
-5.5  checksum-5.6 "</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> buildSk=
ipProcList</span> {} {
    <span class=3D"hljs-keyword">set</span> skipL {}
    <span class=3D"hljs-keyword">return</span> $skipL
}
t89c51ic2
<span class=3D"hljs-keyword">foreach</span> m $::deviceArray(memoryList) {
    cmdsImportCurrentMemoryNameSpace $m
    cmdsSetMemoryParameters
    initBuffer
}
cmdsImportCurrentMemoryNameSpace FLASH
<span class=3D"hljs-comment">#dbgEndSrc [info script]</span>
<span class=3D"hljs-comment">#dbgBeginSrc [info script]</span>
<span class=3D"hljs-keyword">global</span> projDir
<span class=3D"hljs-keyword">source</span> $projDir/tcl/devices/devices_com=
mon.tcl
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> t89c51r=
b2</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> protcl protocol nAddrBits rs=
232standard canstandard expAnsw testFlag buffer flowButtons flipFont
    <span class=3D"hljs-keyword">set</span> children_List [<span class=3D"h=
ljs-keyword">split</span> [winfo children .main.f_device]]
    <span class=3D"hljs-keyword">foreach</span> item $children_List {
	<span class=3D"hljs-keyword">if</span> {$item !=3D <span class=3D"hljs-str=
ing">".main.f_device.f_deviceName"</span>} then {
	    destroy $item
	}
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">a=
rray</span> exists ::deviceArray]} then {
	<span class=3D"hljs-keyword">array</span> <span class=3D"hljs-keyword">uns=
et</span> ::deviceArray
    }
    <span class=3D"hljs-keyword">set</span> ::deviceArray(name) <span class=
=3D"hljs-string">"T89C51RB2"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(communicationList=
) RS232
    <span class=3D"hljs-keyword">set</span> ::deviceArray(memoryList) [<spa=
n class=3D"hljs-keyword">list</span> FLASH]
    <span class=3D"hljs-keyword">set</span> ::deviceArray(memoryColor) [<sp=
an class=3D"hljs-keyword">list</span> <span class=3D"hljs-string">"#88a67d"=
</span> <span class=3D"hljs-string">"wheat"</span>]
    <span class=3D"hljs-keyword">set</span> ::deviceArray(currentMemory) <s=
pan class=3D"hljs-string">"FLASH"</span>
    <span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keywo=
rd">eval</span> ::FLASH:: {
	<span class=3D"hljs-keyword">variable</span> deviceArray
	<span class=3D"hljs-keyword">variable</span> buffer
	<span class=3D"hljs-keyword">set</span> deviceArray(memorySize) <span clas=
s=3D"hljs-number">16</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankValue) <span clas=
s=3D"hljs-string">"FF"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erase) <span class=3D"hljs-=
string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(blankCheck) <span class=3D"=
hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseType) <span class=3D"h=
ljs-string">"full"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlocks) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock0) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock0) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock1) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock1) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock2) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock2) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock3) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock3) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock4) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock4) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(progStart) <span class=
=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(displayData) <span cla=
ss=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankCheck) <span clas=
s=3D"hljs-string">"01"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(programData) <span cla=
ss=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">namespace</span> export writeBuffer readBuffe=
r readDeviceArray initBuffer bufferChecksum
    }
    <span class=3D"hljs-keyword">foreach</span> M $::deviceArray(memoryList=
) {
	<span class=3D"hljs-keyword">proc</span> ::${M}::writeBuffer {index data} =
{
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">set</span> buffer($index) $data
	    <span class=3D"hljs-keyword">return</span>
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::readBuffer {index} {
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">return</span> $buffer($index)
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::readDeviceArray {index} {
	    <span class=3D"hljs-keyword">variable</span> deviceArray
	    <span class=3D"hljs-keyword">return</span> $deviceArray($index)
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::initBuffer {} {
	    <span class=3D"hljs-keyword">variable</span> deviceArray
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">global</span> flipStates
	    <span class=3D"hljs-keyword">set</span> max [<span class=3D"hljs-keywo=
rd">expr</span> $deviceArray(memorySize) * <span class=3D"hljs-number">1024=
</span>]
	    <span class=3D"hljs-keyword">if</span> {$flipStates(simul)} then {
		<span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">set=
</span> i <span class=3D"hljs-number">0</span>} {$i &lt; $max} {<span class=
=3D"hljs-keyword">incr</span> i} {
		    <span class=3D"hljs-keyword">set</span> buffer([<span class=3D"hljs-k=
eyword">format</span> %<span class=3D"hljs-number">06</span>X $i]) $deviceA=
rray(blankValue)
		}
	    } else {
		initBuffer_C $max $deviceArray(blankValue)
	    }
	    <span class=3D"hljs-keyword">return</span>
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::bufferChecksum {} {
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">global</span> flipStates
	    <span class=3D"hljs-keyword">set</span> min $buffer(minProgAddr)
	    <span class=3D"hljs-keyword">set</span> max $buffer(maxProgAddr)
	    <span class=3D"hljs-keyword">if</span> {$flipStates(simul)} then {
		<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0x=
CAFEFADE</span>
	    } else {
		<span class=3D"hljs-keyword">return</span> [computeBufferChecksum_C $min =
$max]
	    }
	}
    }
    <span class=3D"hljs-keyword">set</span> ::deviceArray(specialSynchro) <=
span class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(RS232ProtocolsLis=
t) <span class=3D"hljs-string">"Standard Enhanced"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev0) [<span cla=
ss=3D"hljs-keyword">list</span> FF]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev0Test) <span =
class=3D"hljs-string">"FF"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev1) [<span cla=
ss=3D"hljs-keyword">list</span> FE]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev1Test) <span =
class=3D"hljs-string">"FE"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev2) [<span cla=
ss=3D"hljs-keyword">list</span> FC XX]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev2Test) [<span=
 class=3D"hljs-keyword">list</span> FC]
    <span class=3D"hljs-keyword">set</span> expAnsw(readManufId) <span clas=
s=3D"hljs-number">58</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId1) XX
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId2) XX
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId3) XX
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock0) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock1) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock2) <span cla=
ss=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock3) <span cla=
ss=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock4) <span cla=
ss=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> testFlag(readDevBootId1) <span =
class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(readDevBootId2) <span =
class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(sbv) <span class=3D"hl=
js-string">"FC"</span>
    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">=
tcltest</span>::testConstraints(eraseBlockPossible) <span class=3D"hljs-num=
ber">1</span>
    .main.f_device.f_deviceName.l_device configure -text $::deviceArray(nam=
e)
    .main.f_device.f_deviceName configure -relief groove
    <span class=3D"hljs-keyword">set</span> fBlocks .deviceErase.f_erase.f_=
blocks
    <span class=3D"hljs-keyword">set</span> bBlock0 $fBlocks.b_block0
    <span class=3D"hljs-keyword">set</span> bBlock1 $fBlocks.b_block1
    setBalloon $bBlock0 <span class=3D"hljs-string">"Erase memory between 0=
000 and 1FFF"</span>
    setBalloon $bBlock1 <span class=3D"hljs-string">"Erase memory between 2=
000 and 3FFF"</span>
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(sbv)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(sbv) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(bsb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(bsb) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(ssb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(ssb) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(hsb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(hsb) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(eb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(eb) <span class=3D"h=
ljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(deviceBootId1)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(deviceBootId1) <span=
 class=3D"hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(deviceBootId2)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(deviceBootId2) <span=
 class=3D"hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(oscFuse)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(oscFuse) <span class=
=3D"hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(bljbFuse)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(bljbFuse) <span clas=
s=3D"hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(x2Fuse)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(x2Fuse) <span class=
=3D"hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(level)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(level) X
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(eraseType)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(eraseType) <span cla=
ss=3D"hljs-string">"full"</span>
    }
    <span class=3D"hljs-keyword">set</span> nAddrBits <span class=3D"hljs-n=
umber">4</span>
    <span class=3D"hljs-keyword">set</span> rs232standard(readHwByte) <span=
 class=3D"hljs-string">":020000050B00EE"</span>
    <span class=3D"hljs-keyword">set</span> rs232standard(readBootlVer) <sp=
an class=3D"hljs-string">":020000050F00EA"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowErase) <span =
class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowBlankCheck) <=
span class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowProgram) <spa=
n class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowVerify) <span=
 class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowSpecialBytes)=
 <span class=3D"hljs-number">0</span>
    wm title .deviceErase <span class=3D"hljs-string">"$::deviceArray(name)=
 Erase"</span>
    .deviceErase.f_erase.f_blocks.b_blockErase configure -state normal
    <span class=3D"hljs-keyword">set</span> fReadOnly .main.f_device.f_read=
Only
    frame $fReadOnly -relief groove -borderwidth <span class=3D"hljs-number=
">1</span>
    <span class=3D"hljs-keyword">set</span> fManufId $fReadOnly.f_manufId
    frame $fManufId -relief flat
    <span class=3D"hljs-keyword">set</span> lManufId $fManufId.l_manufId
    label $lManufId -text <span class=3D"hljs-string">"Manufact. Id"</span>=
 -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lManufId <span class=3D"hljs-string">"Manufacturer Id: read=
-only"</span>
    <span class=3D"hljs-keyword">set</span> eManufId $fManufId.e_manufId
    entry $eManufId -textvariable ::deviceArray(manufId) -width <span class=
=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eManufId <span class=3D"hljs-string">"Manufacturer Id value=
"</span>
    pack config $lManufId $eManufId -side left
    pack config $fManufId -side top -ipady <span class=3D"hljs-number">1</s=
pan> -fill both
    <span class=3D"hljs-keyword">set</span> fDeviceIds $fReadOnly.f_deviceI=
ds
    frame $fDeviceIds -relief flat
    <span class=3D"hljs-keyword">set</span> lDeviceIds $fDeviceIds.l_device=
Ids
    label $lDeviceIds -text <span class=3D"hljs-string">"Device Ids"</span>=
 -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lDeviceIds <span class=3D"hljs-string">"Ids 1, 2, 3: read-o=
nly"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceId1 $fDeviceIds.e_device=
Id1
    entry $eDeviceId1 -textvariable ::deviceArray(deviceId1) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId1 <span class=3D"hljs-string">"Id 1 value"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceId2 $fDeviceIds.e_device=
Id2
    entry $eDeviceId2 -textvariable ::deviceArray(deviceId2) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId2 <span class=3D"hljs-string">"Id 2 value"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceId3 $fDeviceIds.e_device=
Id3
    entry $eDeviceId3 -textvariable ::deviceArray(deviceId3) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId3 <span class=3D"hljs-string">"Id 3 value"</span>
    pack config $lDeviceIds $eDeviceId1 -side left
    pack config $eDeviceId2 -padx <span class=3D"hljs-number">2</span> -sid=
e left
    pack config $eDeviceId3 -side left
    pack config $fDeviceIds -side top -ipady <span class=3D"hljs-number">1<=
/span> -fill both
    <span class=3D"hljs-keyword">set</span> fDeviceBootIds $fReadOnly.f_dev=
iceBootIds
    frame $fDeviceBootIds -relief flat
    <span class=3D"hljs-keyword">set</span> lDeviceBootIds $fDeviceBootIds.=
l_deviceBootIds
    label $lDeviceBootIds -text <span class=3D"hljs-string">"Device Boot Id=
s"</span> -font $flipFont -anchor w -width <span class=3D"hljs-number">16</=
span>
    setBalloon $lDeviceBootIds <span class=3D"hljs-string">"Boot Ids 1, 2: =
read-only"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceBootId1 $fDeviceBootIds.=
e_deviceBootId1
    entry $eDeviceBootId1 -textvariable ::deviceArray(deviceBootId1) -width=
 <span class=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceBootId1 <span class=3D"hljs-string">"Boot Id 1 value=
"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceBootId2 $fDeviceBootIds.=
e_deviceBootId2
    entry $eDeviceBootId2 -textvariable ::deviceArray(deviceBootId2) -width=
 <span class=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceBootId2 <span class=3D"hljs-string">"Boot Id 2 value=
"</span>
    pack config $lDeviceBootIds $eDeviceBootId1 -side left
    pack config $eDeviceBootId2 -padx <span class=3D"hljs-number">2</span> =
-side left
    pack config $fDeviceBootIds -side top -ipady <span class=3D"hljs-number=
">1</span> -fill both
    <span class=3D"hljs-keyword">set</span> fHSB $fReadOnly.f_hsb
    frame $fHSB -relief flat
    <span class=3D"hljs-keyword">set</span> lHSB $fHSB.l_hsb
    label $lHSB -text <span class=3D"hljs-string">"HSB"</span> -font $flipF=
ont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lHSB <span class=3D"hljs-string">"Hardware Security Byte: r=
ead-only"</span>
    <span class=3D"hljs-keyword">set</span> eHSB $fHSB.e_hsb
    entry $eHSB -textvariable ::deviceArray(hsb) -width <span class=3D"hljs=
-number">3</span> -font $flipFont -state disabled
    setBalloon $eHSB <span class=3D"hljs-string">"Hardware Byte value"</spa=
n>
    pack config $lHSB $eHSB -side left
    pack config $fHSB -side top -ipady <span class=3D"hljs-number">1</span>=
 -fill both
    <span class=3D"hljs-keyword">set</span> fBootlVer $fReadOnly.f_bootlVer
    frame $fBootlVer -relief flat
    <span class=3D"hljs-keyword">set</span> lBootlVer $fBootlVer.l_bootlVer
    label $lBootlVer -text <span class=3D"hljs-string">"Bootloader Ver."</s=
pan> -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lBootlVer <span class=3D"hljs-string">"Bootloader Version: =
read-only"</span>
    <span class=3D"hljs-keyword">set</span> eBootlVer $fBootlVer.e_bootlVer
    entry $eBootlVer -textvariable ::deviceArray(bootlVer) -width <span cla=
ss=3D"hljs-number">5</span> -font $flipFont -state disabled
    setBalloon $eBootlVer <span class=3D"hljs-string">"Bootloader Version"<=
/span>
    pack config $lBootlVer $eBootlVer -side left
    pack config $fBootlVer -side top -ipady <span class=3D"hljs-number">1</=
span> -fill both
    pack configure $fReadOnly -side top -padx <span class=3D"hljs-number">5=
</span> -fill both
    <span class=3D"hljs-keyword">set</span> fFuses .main.f_device.f_fuses
    frame $fFuses -relief groove -borderwidth <span class=3D"hljs-number">1=
</span>
    <span class=3D"hljs-keyword">set</span> bBLJB $fFuses.b_bljb
    checkbutton $bBLJB -text <span class=3D"hljs-string">"BLJB"</span> -fon=
t $flipFont -<span class=3D"hljs-keyword">variable</span> ::deviceArray(blj=
bFuse) -onvalue <span class=3D"hljs-number">0</span> -offvalue <span class=
=3D"hljs-number">1</span> -indicatoron true -state disabled
    setBalloon $bBLJB <span class=3D"hljs-string">"BootLoader Jump Bit set =
: BLJB =3D 0"</span>
    <span class=3D"hljs-keyword">set</span> bX2 $fFuses.b_x2
    checkbutton $bX2 -text <span class=3D"hljs-string">"X2"</span> -font $f=
lipFont -<span class=3D"hljs-keyword">variable</span> ::deviceArray(x2Fuse)=
 -onvalue <span class=3D"hljs-number">0</span> -offvalue <span class=3D"hlj=
s-number">1</span> -indicatoron true -state disabled
    setBalloon $bX2 <span class=3D"hljs-string">"X2 fuse bit \nSet =3D 0 / =
Unset =3D 1"</span>
    pack config $bBLJB $bX2 -side left -anchor w
    pack configure $fFuses -side top -padx <span class=3D"hljs-number">5</s=
pan> -pady <span class=3D"hljs-number">1</span> -fill both
    <span class=3D"hljs-keyword">set</span> f_BSB_SBV .main.f_device.f_bsb_=
sbv
    frame $f_BSB_SBV -relief groove -borderwidth <span class=3D"hljs-number=
">1</span>
    <span class=3D"hljs-keyword">set</span> f_BSB $f_BSB_SBV.f_bsb
    frame $f_BSB -relief flat
    <span class=3D"hljs-keyword">set</span> l_BSB $f_BSB.l_bsb
    label $l_BSB -text <span class=3D"hljs-string">"Device BSB"</span> -fon=
t $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $l_BSB <span class=3D"hljs-string">"Boot Status Byte"</span>
    <span class=3D"hljs-keyword">set</span> e_BSB $f_BSB.e_bsb
    entry $e_BSB -textvariable ::deviceArray(bsb) -width <span class=3D"hlj=
s-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0=
</span> -state disabled
    setBalloon $e_BSB <span class=3D"hljs-string">"Actual BSB value"</span>
    pack config $l_BSB $e_BSB -side left
    pack config $f_BSB -side top -ipady <span class=3D"hljs-number">1</span=
> -fill both
    <span class=3D"hljs-keyword">set</span> f_SBV $f_BSB_SBV.f_sbv
    frame $f_SBV -relief flat
    <span class=3D"hljs-keyword">set</span> l_SBV $f_SBV.l_sbv
    label $l_SBV -text <span class=3D"hljs-string">"Device SBV"</span> -fon=
t $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $l_SBV <span class=3D"hljs-string">"Software Boot Vector"</s=
pan>
    <span class=3D"hljs-keyword">set</span> e_SBV $f_SBV.e_sbv
    entry $e_SBV -textvariable ::deviceArray(sbv) -width <span class=3D"hlj=
s-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0=
</span> -state disabled
    setBalloon $e_SBV <span class=3D"hljs-string">"Actual SBV value"</span>
    <span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-number">0</=
span>} then {
	<span class=3D"hljs-keyword">set</span> bErase $fSBV.b_erase
	button $bErase -bd <span class=3D"hljs-number">3</span> -text <span class=
=3D"hljs-string">"Erase"</span> -font $flipFont -command {cmdsEraseSBVBSB} =
-state disabled -width <span class=3D"hljs-number">5</span>
	setBalloon $bErase <span class=3D"hljs-string">"Resets SBV and BSB\nto def=
ault values"</span>
    }
    pack config $l_SBV $e_SBV -side left
    pack config $f_SBV -side top -ipady <span class=3D"hljs-number">1</span=
> -fill both
    pack configure $f_BSB_SBV -side top -padx <span class=3D"hljs-number">5=
</span> -fill both
    bind $e_SBV &lt;Return&gt; {devcSetDeviceSpecialBytes}
    bind $e_BSB &lt;Return&gt; {devcSetDeviceSpecialBytes}
    <span class=3D"hljs-keyword">set</span> fSSB .main.f_device.f_ssb
    frame $fSSB -relief groove -borderwidth <span class=3D"hljs-number">1</=
span>
    <span class=3D"hljs-keyword">set</span> fInfo $fSSB.f_info
    frame $fInfo -relief flat
    <span class=3D"hljs-keyword">set</span> lSSB $fInfo.l_ssb
    label $lSSB -text <span class=3D"hljs-string">"Device SSB"</span> -font=
 $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lSSB <span class=3D"hljs-string">"Software Security Byte"</=
span>
    <span class=3D"hljs-keyword">set</span> eSSB $fInfo.e_ssb
    entry $eSSB -textvariable ::deviceArray(ssb) -width <span class=3D"hljs=
-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0<=
/span> -state disabled
    setBalloon $eSSB <span class=3D"hljs-string">"Actual SSB value"</span>
    pack config $lSSB $eSSB -side left
    pack config $fInfo -side top
    <span class=3D"hljs-keyword">set</span> fLevel0 $fSSB.f_level0
    frame $fLevel0 -relief flat
    <span class=3D"hljs-keyword">set</span> bLevel0 $fLevel0.b_level0
    radiobutton $bLevel0 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 0"</span> -value <sp=
an class=3D"hljs-number">0</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 0"</span> -state disabled
    setBalloon $bLevel0 <span class=3D"hljs-string">"Security level 0: no s=
ecurity\n (setting to levels 1 and 2 allowed)"</span>
    pack configure $bLevel0 -side left
    <span class=3D"hljs-keyword">set</span> fLevel1 $fSSB.f_level1
    frame $fLevel1 -relief flat
    <span class=3D"hljs-keyword">set</span> bLevel1 $fLevel1.b_level1
    radiobutton $bLevel1 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 1"</span> -value <sp=
an class=3D"hljs-number">1</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 1"</span> -state disabled
    setBalloon $bLevel1 <span class=3D"hljs-string">"Security level 1: no w=
riting allowed\n (setting to level 2 allowed)"</span>
    pack configure $bLevel1 -side left
    <span class=3D"hljs-keyword">set</span> fLevel2 $fSSB.f_level2
    frame $fLevel2 -relief flat
    <span class=3D"hljs-keyword">set</span> bLevel2 $fLevel2.b_level2
    radiobutton $bLevel2 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 2"</span> -value <sp=
an class=3D"hljs-number">2</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 2"</span> -state disabled
    setBalloon $bLevel2 <span class=3D"hljs-string">"Security level 2: no r=
eading/writing allowed\n (full chip erase resets security level to 0)"</spa=
n>
    pack configure $bLevel2 -side left
    pack configure $fInfo -side top -anchor w -ipady <span class=3D"hljs-nu=
mber">1</span> -fill both
    pack configure $fInfo $fLevel0 $fLevel1 $fLevel2 -side top -anchor w -f=
ill both
    pack configure $fSSB -side top -padx <span class=3D"hljs-number">5</spa=
n> -pady <span class=3D"hljs-number">1</span> -fill both
    <span class=3D"hljs-keyword">set</span> fButtons .main.f_device.f_butto=
ns
    frame $fButtons -relief flat
    <span class=3D"hljs-keyword">set</span> bUpdate $fButtons.b_update
    button $bUpdate -bd <span class=3D"hljs-number">3</span> -text <span cl=
ass=3D"hljs-string">"Read"</span> -font $flipFont -command {devcUpdateDevic=
eFrame} -state disabled
    setBalloon $bUpdate <span class=3D"hljs-string">"Reads device special b=
ytes"</span>
    <span class=3D"hljs-keyword">set</span> bWrite $fButtons.b_write
    button $bWrite -bd <span class=3D"hljs-number">3</span> -text <span cla=
ss=3D"hljs-string">"Set"</span> -font $flipFont -command {devcSetDeviceSpec=
ialBytes} -state disabled
    setBalloon $bWrite <span class=3D"hljs-string">"Sets device special byt=
es"</span>
    pack config $bUpdate $bWrite -side left -padx <span class=3D"hljs-numbe=
r">10</span>
    <span class=3D"hljs-keyword">catch</span> [destroy .main.f_buffer.b_mem=
Select]
    pack configure $fButtons -side top -padx <span class=3D"hljs-number">35=
</span> -pady <span class=3D"hljs-number">5</span> -fill both
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> buildSk=
ipTestList</span> {protocol} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(skipList) <span c=
lass=3D"hljs-string">"  xaf-1.5  xaf-1.6  xaf-1.13  xaf-1.14  xaf-1.21  xaf=
-1.22  xaf-1.28  flash-2.23  flash-2.24  flash-2.25  flash-2.26  flash-2.27=
  flash-2.28  flash-2.29  flash-2.30  checksum-5.4  checksum-5.5  checksum-=
5.6 "</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> buildSk=
ipProcList</span> {} {
    <span class=3D"hljs-keyword">set</span> skipL {}
    <span class=3D"hljs-keyword">return</span> $skipL
}
t89c51rb2
<span class=3D"hljs-keyword">foreach</span> m $::deviceArray(memoryList) {
    cmdsImportCurrentMemoryNameSpace $m
    cmdsSetMemoryParameters
    initBuffer
}
cmdsImportCurrentMemoryNameSpace FLASH
<span class=3D"hljs-comment">#dbgEndSrc [info script]</span>
<span class=3D"hljs-comment">#dbgBeginSrc [info script]</span>
<span class=3D"hljs-keyword">global</span> projDir
<span class=3D"hljs-keyword">source</span> $projDir/tcl/devices/devices_com=
mon.tcl
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> t89c51r=
c2</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> protcl protocol nAddrBits rs=
232standard canstandard expAnsw testFlag buffer flowButtons flipFont
    <span class=3D"hljs-keyword">set</span> children_List [<span class=3D"h=
ljs-keyword">split</span> [winfo children .main.f_device]]
    <span class=3D"hljs-keyword">foreach</span> item $children_List {
	<span class=3D"hljs-keyword">if</span> {$item !=3D <span class=3D"hljs-str=
ing">".main.f_device.f_deviceName"</span>} then {
	    destroy $item
	}
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">a=
rray</span> exists ::deviceArray]} then {
	<span class=3D"hljs-keyword">array</span> <span class=3D"hljs-keyword">uns=
et</span> ::deviceArray
    }
    <span class=3D"hljs-keyword">set</span> ::deviceArray(name) <span class=
=3D"hljs-string">"T89C51RC2"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(communicationList=
) RS232
    <span class=3D"hljs-keyword">set</span> ::deviceArray(memoryList) [<spa=
n class=3D"hljs-keyword">list</span> FLASH]
    <span class=3D"hljs-keyword">set</span> ::deviceArray(memoryColor) [<sp=
an class=3D"hljs-keyword">list</span> <span class=3D"hljs-string">"#88a67d"=
</span> <span class=3D"hljs-string">"wheat"</span>]
    <span class=3D"hljs-keyword">set</span> ::deviceArray(currentMemory) <s=
pan class=3D"hljs-string">"FLASH"</span>
    <span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keywo=
rd">eval</span> ::FLASH:: {
	<span class=3D"hljs-keyword">variable</span> deviceArray
	<span class=3D"hljs-keyword">variable</span> buffer
	<span class=3D"hljs-keyword">set</span> deviceArray(memorySize) <span clas=
s=3D"hljs-number">32</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankValue) <span clas=
s=3D"hljs-string">"FF"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erase) <span class=3D"hljs-=
string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(blankCheck) <span class=3D"=
hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseType) <span class=3D"h=
ljs-string">"full"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlocks) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock0) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock0) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock1) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock1) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock2) <span =
class=3D"hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock2) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock3) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock3) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock4) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock4) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(progStart) <span class=
=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(displayData) <span cla=
ss=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankCheck) <span clas=
s=3D"hljs-string">"01"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(programData) <span cla=
ss=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">namespace</span> export writeBuffer readBuffe=
r readDeviceArray initBuffer bufferChecksum
    }
    <span class=3D"hljs-keyword">foreach</span> M $::deviceArray(memoryList=
) {
	<span class=3D"hljs-keyword">proc</span> ::${M}::writeBuffer {index data} =
{
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">set</span> buffer($index) $data
	    <span class=3D"hljs-keyword">return</span>
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::readBuffer {index} {
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">return</span> $buffer($index)
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::readDeviceArray {index} {
	    <span class=3D"hljs-keyword">variable</span> deviceArray
	    <span class=3D"hljs-keyword">return</span> $deviceArray($index)
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::initBuffer {} {
	    <span class=3D"hljs-keyword">variable</span> deviceArray
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">global</span> flipStates
	    <span class=3D"hljs-keyword">set</span> max [<span class=3D"hljs-keywo=
rd">expr</span> $deviceArray(memorySize) * <span class=3D"hljs-number">1024=
</span>]
	    <span class=3D"hljs-keyword">if</span> {$flipStates(simul)} then {
		<span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">set=
</span> i <span class=3D"hljs-number">0</span>} {$i &lt; $max} {<span class=
=3D"hljs-keyword">incr</span> i} {
		    <span class=3D"hljs-keyword">set</span> buffer([<span class=3D"hljs-k=
eyword">format</span> %<span class=3D"hljs-number">06</span>X $i]) $deviceA=
rray(blankValue)
		}
	    } else {
		initBuffer_C $max $deviceArray(blankValue)
	    }
	    <span class=3D"hljs-keyword">return</span>
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::bufferChecksum {} {
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">global</span> flipStates
	    <span class=3D"hljs-keyword">set</span> min $buffer(minProgAddr)
	    <span class=3D"hljs-keyword">set</span> max $buffer(maxProgAddr)
	    <span class=3D"hljs-keyword">if</span> {$flipStates(simul)} then {
		<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0x=
CAFEFADE</span>
	    } else {
		<span class=3D"hljs-keyword">return</span> [computeBufferChecksum_C $min =
$max]
	    }
	}
    }
    <span class=3D"hljs-keyword">set</span> ::deviceArray(specialSynchro) <=
span class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(RS232ProtocolsLis=
t) <span class=3D"hljs-string">"Standard Enhanced"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev0) [<span cla=
ss=3D"hljs-keyword">list</span> FF]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev0Test) <span =
class=3D"hljs-string">"FF"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev1) [<span cla=
ss=3D"hljs-keyword">list</span> FE]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev1Test) <span =
class=3D"hljs-string">"FE"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev2) [<span cla=
ss=3D"hljs-keyword">list</span> FC XX]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev2Test) [<span=
 class=3D"hljs-keyword">list</span> FC]
    <span class=3D"hljs-keyword">set</span> expAnsw(readManufId) <span clas=
s=3D"hljs-number">58</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId1) XX
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId2) XX
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId3) XX
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock0) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock1) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock2) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock3) <span cla=
ss=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock4) <span cla=
ss=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> testFlag(readDevBootId1) <span =
class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(readDevBootId2) <span =
class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> testFlag(sbv) <span class=3D"hl=
js-string">"FC"</span>
    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">=
tcltest</span>::testConstraints(eraseBlockPossible) <span class=3D"hljs-num=
ber">1</span>
    .main.f_device.f_deviceName.l_device configure -text $::deviceArray(nam=
e)
    .main.f_device.f_deviceName configure -relief groove
    <span class=3D"hljs-keyword">set</span> fBlocks .deviceErase.f_erase.f_=
blocks
    <span class=3D"hljs-keyword">set</span> bBlock0 $fBlocks.b_block0
    <span class=3D"hljs-keyword">set</span> bBlock1 $fBlocks.b_block1
    <span class=3D"hljs-keyword">set</span> bBlock2 $fBlocks.b_block2
    setBalloon $bBlock0 <span class=3D"hljs-string">"Erase memory between 0=
000 and 1FFF"</span>
    setBalloon $bBlock1 <span class=3D"hljs-string">"Erase memory between 2=
000 and 3FFF"</span>
    setBalloon $bBlock2 <span class=3D"hljs-string">"Erase memory between 4=
000 and 7FFF"</span>
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(sbv)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(sbv) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(bsb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(bsb) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(ssb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(ssb) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(hsb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(hsb) <span class=3D"=
hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(eb)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(eb) <span class=3D"h=
ljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(deviceBootId1)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(deviceBootId1) <span=
 class=3D"hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(deviceBootId2)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(deviceBootId2) <span=
 class=3D"hljs-string">"XX"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(oscFuse)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(oscFuse) <span class=
=3D"hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(bljbFuse)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(bljbFuse) <span clas=
s=3D"hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(x2Fuse)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(x2Fuse) <span class=
=3D"hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(level)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(level) X
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(eraseType)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(eraseType) <span cla=
ss=3D"hljs-string">"full"</span>
    }
    <span class=3D"hljs-keyword">set</span> nAddrBits <span class=3D"hljs-n=
umber">4</span>
    <span class=3D"hljs-keyword">set</span> rs232standard(readHwByte) <span=
 class=3D"hljs-string">":020000050B00EE"</span>
    <span class=3D"hljs-keyword">set</span> rs232standard(readBootlVer) <sp=
an class=3D"hljs-string">":020000050F00EA"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowErase) <span =
class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowBlankCheck) <=
span class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowProgram) <spa=
n class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowVerify) <span=
 class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowSpecialBytes)=
 <span class=3D"hljs-number">0</span>
    wm title .deviceErase <span class=3D"hljs-string">"$::deviceArray(name)=
 Erase"</span>
    .deviceErase.f_erase.f_blocks.b_blockErase configure -state normal
    <span class=3D"hljs-keyword">set</span> fReadOnly .main.f_device.f_read=
Only
    frame $fReadOnly -relief groove -borderwidth <span class=3D"hljs-number=
">1</span>
    <span class=3D"hljs-keyword">set</span> fManufId $fReadOnly.f_manufId
    frame $fManufId -relief flat
    <span class=3D"hljs-keyword">set</span> lManufId $fManufId.l_manufId
    label $lManufId -text <span class=3D"hljs-string">"Manufact. Id"</span>=
 -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lManufId <span class=3D"hljs-string">"Manufacturer Id: read=
-only"</span>
    <span class=3D"hljs-keyword">set</span> eManufId $fManufId.e_manufId
    entry $eManufId -textvariable ::deviceArray(manufId) -width <span class=
=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eManufId <span class=3D"hljs-string">"Manufacturer Id value=
"</span>
    pack config $lManufId $eManufId -side left
    pack config $fManufId -side top -ipady <span class=3D"hljs-number">1</s=
pan> -fill both
    <span class=3D"hljs-keyword">set</span> fDeviceIds $fReadOnly.f_deviceI=
ds
    frame $fDeviceIds -relief flat
    <span class=3D"hljs-keyword">set</span> lDeviceIds $fDeviceIds.l_device=
Ids
    label $lDeviceIds -text <span class=3D"hljs-string">"Device Ids"</span>=
 -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lDeviceIds <span class=3D"hljs-string">"Ids 1, 2, 3: read-o=
nly"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceId1 $fDeviceIds.e_device=
Id1
    entry $eDeviceId1 -textvariable ::deviceArray(deviceId1) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId1 <span class=3D"hljs-string">"Id 1 value"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceId2 $fDeviceIds.e_device=
Id2
    entry $eDeviceId2 -textvariable ::deviceArray(deviceId2) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId2 <span class=3D"hljs-string">"Id 2 value"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceId3 $fDeviceIds.e_device=
Id3
    entry $eDeviceId3 -textvariable ::deviceArray(deviceId3) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId3 <span class=3D"hljs-string">"Id 3 value"</span>
    pack config $lDeviceIds $eDeviceId1 -side left
    pack config $eDeviceId2 -padx <span class=3D"hljs-number">2</span> -sid=
e left
    pack config $eDeviceId3 -side left
    pack config $fDeviceIds -side top -ipady <span class=3D"hljs-number">1<=
/span> -fill both
    <span class=3D"hljs-keyword">set</span> fDeviceBootIds $fReadOnly.f_dev=
iceBootIds
    frame $fDeviceBootIds -relief flat
    <span class=3D"hljs-keyword">set</span> lDeviceBootIds $fDeviceBootIds.=
l_deviceBootIds
    label $lDeviceBootIds -text <span class=3D"hljs-string">"Device Boot Id=
s"</span> -font $flipFont -anchor w -width <span class=3D"hljs-number">16</=
span>
    setBalloon $lDeviceBootIds <span class=3D"hljs-string">"Boot Ids 1, 2: =
read-only"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceBootId1 $fDeviceBootIds.=
e_deviceBootId1
    entry $eDeviceBootId1 -textvariable ::deviceArray(deviceBootId1) -width=
 <span class=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceBootId1 <span class=3D"hljs-string">"Boot Id 1 value=
"</span>
    <span class=3D"hljs-keyword">set</span> eDeviceBootId2 $fDeviceBootIds.=
e_deviceBootId2
    entry $eDeviceBootId2 -textvariable ::deviceArray(deviceBootId2) -width=
 <span class=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceBootId2 <span class=3D"hljs-string">"Boot Id 2 value=
"</span>
    pack config $lDeviceBootIds $eDeviceBootId1 -side left
    pack config $eDeviceBootId2 -padx <span class=3D"hljs-number">2</span> =
-side left
    pack config $fDeviceBootIds -side top -ipady <span class=3D"hljs-number=
">1</span> -fill both
    <span class=3D"hljs-keyword">set</span> fHSB $fReadOnly.f_hsb
    frame $fHSB -relief flat
    <span class=3D"hljs-keyword">set</span> lHSB $fHSB.l_hsb
    label $lHSB -text <span class=3D"hljs-string">"HSB"</span> -font $flipF=
ont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lHSB <span class=3D"hljs-string">"Hardware Security Byte: r=
ead-only"</span>
    <span class=3D"hljs-keyword">set</span> eHSB $fHSB.e_hsb
    entry $eHSB -textvariable ::deviceArray(hsb) -width <span class=3D"hljs=
-number">3</span> -font $flipFont -state disabled
    setBalloon $eHSB <span class=3D"hljs-string">"Hardware Byte value"</spa=
n>
    pack config $lHSB $eHSB -side left
    pack config $fHSB -side top -ipady <span class=3D"hljs-number">1</span>=
 -fill both
    <span class=3D"hljs-keyword">set</span> fBootlVer $fReadOnly.f_bootlVer
    frame $fBootlVer -relief flat
    <span class=3D"hljs-keyword">set</span> lBootlVer $fBootlVer.l_bootlVer
    label $lBootlVer -text <span class=3D"hljs-string">"Bootloader Ver."</s=
pan> -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lBootlVer <span class=3D"hljs-string">"Bootloader Version: =
read-only"</span>
    <span class=3D"hljs-keyword">set</span> eBootlVer $fBootlVer.e_bootlVer
    entry $eBootlVer -textvariable ::deviceArray(bootlVer) -width <span cla=
ss=3D"hljs-number">5</span> -font $flipFont -state disabled
    setBalloon $eBootlVer <span class=3D"hljs-string">"Bootloader Version"<=
/span>
    pack config $lBootlVer $eBootlVer -side left
    pack config $fBootlVer -side top -ipady <span class=3D"hljs-number">1</=
span> -fill both
    pack configure $fReadOnly -side top -padx <span class=3D"hljs-number">5=
</span> -fill both
    <span class=3D"hljs-keyword">set</span> fFuses .main.f_device.f_fuses
    frame $fFuses -relief groove -borderwidth <span class=3D"hljs-number">1=
</span>
    <span class=3D"hljs-keyword">set</span> bBLJB $fFuses.b_bljb
    checkbutton $bBLJB -text <span class=3D"hljs-string">"BLJB"</span> -fon=
t $flipFont -<span class=3D"hljs-keyword">variable</span> ::deviceArray(blj=
bFuse) -onvalue <span class=3D"hljs-number">0</span> -offvalue <span class=
=3D"hljs-number">1</span> -indicatoron true -state disabled
    setBalloon $bBLJB <span class=3D"hljs-string">"BootLoader Jump Bit set =
: BLJB =3D 0"</span>
    <span class=3D"hljs-keyword">set</span> bX2 $fFuses.b_x2
    checkbutton $bX2 -text <span class=3D"hljs-string">"X2"</span> -font $f=
lipFont -<span class=3D"hljs-keyword">variable</span> ::deviceArray(x2Fuse)=
 -onvalue <span class=3D"hljs-number">0</span> -offvalue <span class=3D"hlj=
s-number">1</span> -indicatoron true -state disabled
    setBalloon $bX2 <span class=3D"hljs-string">"X2 fuse bit \nSet =3D 0 / =
Unset =3D 1"</span>
    pack config $bBLJB $bX2 -side left -anchor w
    pack configure $fFuses -side top -padx <span class=3D"hljs-number">5</s=
pan> -pady <span class=3D"hljs-number">1</span> -fill both
    <span class=3D"hljs-keyword">set</span> f_BSB_SBV .main.f_device.f_bsb_=
sbv
    frame $f_BSB_SBV -relief groove -borderwidth <span class=3D"hljs-number=
">1</span>
    <span class=3D"hljs-keyword">set</span> f_BSB $f_BSB_SBV.f_bsb
    frame $f_BSB -relief flat
    <span class=3D"hljs-keyword">set</span> l_BSB $f_BSB.l_bsb
    label $l_BSB -text <span class=3D"hljs-string">"Device BSB"</span> -fon=
t $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $l_BSB <span class=3D"hljs-string">"Boot Status Byte"</span>
    <span class=3D"hljs-keyword">set</span> e_BSB $f_BSB.e_bsb
    entry $e_BSB -textvariable ::deviceArray(bsb) -width <span class=3D"hlj=
s-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0=
</span> -state disabled
    setBalloon $e_BSB <span class=3D"hljs-string">"Actual BSB value"</span>
    pack config $l_BSB $e_BSB -side left
    pack config $f_BSB -side top -ipady <span class=3D"hljs-number">1</span=
> -fill both
    <span class=3D"hljs-keyword">set</span> f_SBV $f_BSB_SBV.f_sbv
    frame $f_SBV -relief flat
    <span class=3D"hljs-keyword">set</span> l_SBV $f_SBV.l_sbv
    label $l_SBV -text <span class=3D"hljs-string">"Device SBV"</span> -fon=
t $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $l_SBV <span class=3D"hljs-string">"Software Boot Vector"</s=
pan>
    <span class=3D"hljs-keyword">set</span> e_SBV $f_SBV.e_sbv
    entry $e_SBV -textvariable ::deviceArray(sbv) -width <span class=3D"hlj=
s-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0=
</span> -state disabled
    setBalloon $e_SBV <span class=3D"hljs-string">"Actual SBV value"</span>
    <span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-number">0</=
span>} then {
	<span class=3D"hljs-keyword">set</span> bErase $fSBV.b_erase
	button $bErase -bd <span class=3D"hljs-number">3</span> -text <span class=
=3D"hljs-string">"Erase"</span> -font $flipFont -command {cmdsEraseSBVBSB} =
-state disabled -width <span class=3D"hljs-number">5</span>
	setBalloon $bErase <span class=3D"hljs-string">"Resets SBV and BSB\nto def=
ault values"</span>
    }
    pack config $l_SBV $e_SBV -side left
    pack config $f_SBV -side top -ipady <span class=3D"hljs-number">1</span=
> -fill both
    pack configure $f_BSB_SBV -side top -padx <span class=3D"hljs-number">5=
</span> -fill both
    bind $e_SBV &lt;Return&gt; {devcSetDeviceSpecialBytes}
    bind $e_BSB &lt;Return&gt; {devcSetDeviceSpecialBytes}
    <span class=3D"hljs-keyword">set</span> fSSB .main.f_device.f_ssb
    frame $fSSB -relief groove -borderwidth <span class=3D"hljs-number">1</=
span>
    <span class=3D"hljs-keyword">set</span> fInfo $fSSB.f_info
    frame $fInfo -relief flat
    <span class=3D"hljs-keyword">set</span> lSSB $fInfo.l_ssb
    label $lSSB -text <span class=3D"hljs-string">"Device SSB"</span> -font=
 $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lSSB <span class=3D"hljs-string">"Software Security Byte"</=
span>
    <span class=3D"hljs-keyword">set</span> eSSB $fInfo.e_ssb
    entry $eSSB -textvariable ::deviceArray(ssb) -width <span class=3D"hljs=
-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0<=
/span> -state disabled
    setBalloon $eSSB <span class=3D"hljs-string">"Actual SSB value"</span>
    pack config $lSSB $eSSB -side left
    pack config $fInfo -side top
    <span class=3D"hljs-keyword">set</span> fLevel0 $fSSB.f_level0
    frame $fLevel0 -relief flat
    <span class=3D"hljs-keyword">set</span> bLevel0 $fLevel0.b_level0
    radiobutton $bLevel0 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 0"</span> -value <sp=
an class=3D"hljs-number">0</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 0"</span> -state disabled
    setBalloon $bLevel0 <span class=3D"hljs-string">"Security level 0: no s=
ecurity\n (setting to levels 1 and 2 allowed)"</span>
    pack configure $bLevel0 -side left
    <span class=3D"hljs-keyword">set</span> fLevel1 $fSSB.f_level1
    frame $fLevel1 -relief flat
    <span class=3D"hljs-keyword">set</span> bLevel1 $fLevel1.b_level1
    radiobutton $bLevel1 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 1"</span> -value <sp=
an class=3D"hljs-number">1</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 1"</span> -state disabled
    setBalloon $bLevel1 <span class=3D"hljs-string">"Security level 1: no w=
riting allowed\n (setting to level 2 allowed)"</span>
    pack configure $bLevel1 -side left
    <span class=3D"hljs-keyword">set</span> fLevel2 $fSSB.f_level2
    frame $fLevel2 -relief flat
    <span class=3D"hljs-keyword">set</span> bLevel2 $fLevel2.b_level2
    radiobutton $bLevel2 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 2"</span> -value <sp=
an class=3D"hljs-number">2</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 2"</span> -state disabled
    setBalloon $bLevel2 <span class=3D"hljs-string">"Security level 2: no r=
eading/writing allowed\n (full chip erase resets security level to 0)"</spa=
n>
    pack configure $bLevel2 -side left
    pack configure $fInfo -side top -anchor w -ipady <span class=3D"hljs-nu=
mber">1</span> -fill both
    pack configure $fInfo $fLevel0 $fLevel1 $fLevel2 -side top -anchor w -f=
ill both
    pack configure $fSSB -side top -padx <span class=3D"hljs-number">5</spa=
n> -pady <span class=3D"hljs-number">1</span> -fill both
    <span class=3D"hljs-keyword">set</span> fButtons .main.f_device.f_butto=
ns
    frame $fButtons -relief flat
    <span class=3D"hljs-keyword">set</span> bUpdate $fButtons.b_update
    button $bUpdate -bd <span class=3D"hljs-number">3</span> -text <span cl=
ass=3D"hljs-string">"Read"</span> -font $flipFont -command {devcUpdateDevic=
eFrame} -state disabled
    setBalloon $bUpdate <span class=3D"hljs-string">"Reads device special b=
ytes"</span>
    <span class=3D"hljs-keyword">set</span> bWrite $fButtons.b_write
    button $bWrite -bd <span class=3D"hljs-number">3</span> -text <span cla=
ss=3D"hljs-string">"Set"</span> -font $flipFont -command {devcSetDeviceSpec=
ialBytes} -state disabled
    setBalloon $bWrite <span class=3D"hljs-string">"Sets device special byt=
es"</span>
    pack config $bUpdate $bWrite -side left -padx <span class=3D"hljs-numbe=
r">10</span>
    <span class=3D"hljs-keyword">catch</span> [destroy .main.f_buffer.b_mem=
Select]
    pack configure $fButtons -side top -padx <span class=3D"hljs-number">35=
</span> -pady <span class=3D"hljs-number">5</span> -fill both
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> buildSk=
ipTestList</span> {protocol} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(skipList) <span c=
lass=3D"hljs-string">"  xaf-1.5  xaf-1.6  xaf-1.13  xaf-1.14  xaf-1.21  xaf=
-1.22  xaf-1.28  flash-2.23.1  flash-2.26  flash-2.27  flash-2.28  flash-2.=
29  flash-2.30  checksum-5.5  checksum-5.6 "</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> buildSk=
ipProcList</span> {} {
    <span class=3D"hljs-keyword">set</span> skipL {}
    <span class=3D"hljs-keyword">return</span> $skipL
}
t89c51rc2
<span class=3D"hljs-keyword">foreach</span> m $::deviceArray(memoryList) {
    cmdsImportCurrentMemoryNameSpace $m
    cmdsSetMemoryParameters
    initBuffer
}
cmdsImportCurrentMemoryNameSpace FLASH
<span class=3D"hljs-comment">#dbgEndSrc [info script]</span>
<span class=3D"hljs-comment">#dbgBeginSrc [info script]</span>
<span class=3D"hljs-keyword">global</span> projDir
<span class=3D"hljs-keyword">source</span> $projDir/tcl/devices/devices_com=
mon.tcl
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> t89c51r=
d2</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> protcl protocol nAddrBits rs=
232standard canstandard expAnsw testFlag buffer flowButtons flipFont
    <span class=3D"hljs-keyword">set</span> children_List [<span class=3D"h=
ljs-keyword">split</span> [winfo children .main.f_device]]
    <span class=3D"hljs-keyword">foreach</span> item $children_List {
	<span class=3D"hljs-keyword">if</span> {$item !=3D <span class=3D"hljs-str=
ing">".main.f_device.f_deviceName"</span>} then {
	    destroy $item
	}
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">a=
rray</span> exists ::deviceArray]} then {
	<span class=3D"hljs-keyword">array</span> <span class=3D"hljs-keyword">uns=
et</span> ::deviceArray
    }
    <span class=3D"hljs-keyword">set</span> ::deviceArray(name) <span class=
=3D"hljs-string">"T89C51RD2"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(communicationList=
) <span class=3D"hljs-string">"RS232"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(memoryList) [<spa=
n class=3D"hljs-keyword">list</span> FLASH]
    <span class=3D"hljs-keyword">set</span> ::deviceArray(memoryColor) [<sp=
an class=3D"hljs-keyword">list</span> <span class=3D"hljs-string">"#88a67d"=
</span> <span class=3D"hljs-string">"wheat"</span>]
    <span class=3D"hljs-keyword">set</span> ::deviceArray(currentMemory) <s=
pan class=3D"hljs-string">"FLASH"</span>
    <span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keywo=
rd">eval</span> ::FLASH:: {
	<span class=3D"hljs-keyword">variable</span> buffer
	<span class=3D"hljs-keyword">variable</span> deviceArray
	<span class=3D"hljs-keyword">set</span> deviceArray(memorySize) <span clas=
s=3D"hljs-number">63</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankValue) <span clas=
s=3D"hljs-string">"FF"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erase) <span class=3D"hljs-=
string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(blankCheck) <span class=3D"=
hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseType) <span class=3D"h=
ljs-string">"full"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlocks) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock0) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock0) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock1) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock1) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock2) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock2) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock3) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock3) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock4) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock4) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(progStart) <span class=
=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(displayData) <span cla=
ss=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankCheck) <span clas=
s=3D"hljs-string">"01"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(programData) <span cla=
ss=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">namespace</span> export writeBuffer readBuffe=
r readDeviceArray initBuffer bufferChecksum
    }
    <span class=3D"hljs-keyword">foreach</span> M $::deviceArray(memoryList=
) {
	<span class=3D"hljs-keyword">proc</span> ::${M}::writeBuffer {index data} =
{
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">set</span> buffer($index) $data
	    <span class=3D"hljs-keyword">return</span>
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::readBuffer {index} {
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">return</span> $buffer($index)
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::readDeviceArray {index} {
	    <span class=3D"hljs-keyword">variable</span> deviceArray
	    <span class=3D"hljs-keyword">return</span> $deviceArray($index)
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::initBuffer {} {
	    <span class=3D"hljs-keyword">variable</span> deviceArray
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">global</span> flipStates
	    <span class=3D"hljs-keyword">set</span> max [<span class=3D"hljs-keywo=
rd">expr</span> $deviceArray(memorySize) * <span class=3D"hljs-number">1024=
</span>]
	    <span class=3D"hljs-keyword">if</span> {$flipStates(simul)} then {
		<span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">set=
</span> i <span class=3D"hljs-number">0</span>} {$i &lt; $max} {<span class=
=3D"hljs-keyword">incr</span> i} {
		    <span class=3D"hljs-keyword">set</span> buffer([<span class=3D"hljs-k=
eyword">format</span> %<span class=3D"hljs-number">06</span>X $i]) $deviceA=
rray(blankValue)
		}
	    } else {
		initBuffer_C $max $deviceArray(blankValue)
	    }
	    <span class=3D"hljs-keyword">return</span>
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::bufferChecksum {} {
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">global</span> flipStates
	    <span class=3D"hljs-keyword">set</span> min $buffer(minProgAddr)
	    <span class=3D"hljs-keyword">set</span> max $buffer(maxProgAddr)
	    <span class=3D"hljs-keyword">if</span> {$flipStates(simul)} then {
		<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0x=
CAFEFADE</span>
	    } else {
		<span class=3D"hljs-keyword">return</span> [computeBufferChecksum_C $min =
$max]
	    }
	}
    }
    <span class=3D"hljs-keyword">set</span> ::deviceArray(specialSynchro) <=
span class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(RS232ProtocolsLis=
t) <span class=3D"hljs-string">"Standard Enhanced"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev0) [<span cla=
ss=3D"hljs-keyword">list</span> FF]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev0Test) <span =
class=3D"hljs-string">"FF"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev1) [<span cla=
ss=3D"hljs-keyword">list</span> <span class=3D"hljs-number">10</span>]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev1Test) <span =
class=3D"hljs-string">"10"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev2) [<span cla=
ss=3D"hljs-keyword">list</span> <span class=3D"hljs-number">00</span> XX]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev2Test) <span =
class=3D"hljs-string">"00"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readManufId) <span clas=
s=3D"hljs-number">58</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId1) D7
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId2) FC
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId3) FF
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock0) <span cla=
ss=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock1) <span cla=
ss=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock2) <span cla=
ss=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock3) <span cla=
ss=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock4) <span cla=
ss=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> testFlag(readDevBootId1) <span =
class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> testFlag(readDevBootId2) <span =
class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> testFlag(sbv) <span class=3D"hl=
js-string">"FC"</span>
    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">=
tcltest</span>::testConstraints(eraseBlockPossible) <span class=3D"hljs-num=
ber">0</span>
    .main.f_device.f_deviceName.l_device configure -text $::deviceArray(nam=
e)
    .main.f_device.f_deviceName configure -relief groove
    <span class=3D"hljs-keyword">set</span> fBlocks .deviceErase.f_erase.f_=
blocks
    <span class=3D"hljs-keyword">set</span> bBlock0 $fBlocks.b_block0
    <span class=3D"hljs-keyword">set</span> bBlock1 $fBlocks.b_block1
    <span class=3D"hljs-keyword">set</span> bBlock2 $fBlocks.b_block2
    <span class=3D"hljs-keyword">set</span> bBlock3 $fBlocks.b_block3
    <span class=3D"hljs-keyword">set</span> bBlock4 $fBlocks.b_block4
    setBalloon $bBlock0 <span class=3D"hljs-string">"Erase memory between 0=
000 and 1FFF"</span>
    setBalloon $bBlock1 <span class=3D"hljs-string">"Erase memory between 2=
000 and 3FFF"</span>
    setBalloon $bBlock2 <span class=3D"hljs-string">"Erase memory between 4=
000 and 7FFF"</span>
    setBalloon $bBlock3 <span class=3D"hljs-string">"Erase memory between 8=
000 and BFFF"</span>
    setBalloon $bBlock4 <span class=3D"hljs-string">"Erase memory between C=
000 and FFFF"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(manufId) <span cl=
ass=3D"hljs-string">"XX"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(deviceId1) <span =
class=3D"hljs-string">"XX"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(deviceId2) <span =
class=3D"hljs-string">"XX"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(deviceId3) <span =
class=3D"hljs-string">"XX"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(hsb) <span class=
=3D"hljs-string">"XX"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(bootlVer) <span c=
lass=3D"hljs-string">"XX"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(sbv) <span class=
=3D"hljs-string">"XX"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(bsb) <span class=
=3D"hljs-string">"XX"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(ssb) <span class=
=3D"hljs-string">"XX"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(level) <span clas=
s=3D"hljs-string">"X"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(eraseType) <span =
class=3D"hljs-string">"full"</span>
    <span class=3D"hljs-keyword">set</span> nAddrBits <span class=3D"hljs-n=
umber">4</span>
    <span class=3D"hljs-keyword">set</span> rs232standard(readHwByte) <span=
 class=3D"hljs-string">":020000050703EF"</span>
    <span class=3D"hljs-keyword">set</span> rs232standard(readBootlVer) <sp=
an class=3D"hljs-string">":020000050800F1"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowErase) <span =
class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowBlankCheck) <=
span class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowProgram) <spa=
n class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowVerify) <span=
 class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowSpecialBytes)=
 <span class=3D"hljs-number">0</span>
    wm title .deviceErase <span class=3D"hljs-string">"$::deviceArray(name)=
 Erase"</span>
    <span class=3D"hljs-keyword">set</span> fReadOnly .main.f_device.f_read=
Only
    frame $fReadOnly -relief groove -borderwidth <span class=3D"hljs-number=
">1</span>
    <span class=3D"hljs-keyword">set</span> fManufId $fReadOnly.f_manufId
    frame $fManufId -relief flat
    <span class=3D"hljs-keyword">set</span> lManufId $fManufId.l_manufId
    label $lManufId -text <span class=3D"hljs-string">"Manufact. Id"</span>=
 -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lManufId <span class=3D"hljs-string">"Manufacturer Id: read=
-only"</span>
    <span class=3D"hljs-keyword">set</span> eManufId $fManufId.e_manufId
    entry $eManufId -textvariable ::deviceArray(manufId) -width <span class=
=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eManufId <span class=3D"hljs-string">"Manufacturer Id value=
"</span>
    pack config $lManufId $eManufId -side left
    pack config $fManufId -side top -ipady <span class=3D"hljs-number">1</s=
pan> -fill both
    <span class=3D"hljs-keyword">set</span> fDeviceId1 $fReadOnly.f_deviceI=
d1
    frame $fDeviceId1 -relief flat
    <span class=3D"hljs-keyword">set</span> lDeviceId1 $fDeviceId1.l_device=
Id1
    label $lDeviceId1 -text <span class=3D"hljs-string">"Device Id 1"</span=
> -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lDeviceId1 <span class=3D"hljs-string">"Id 1: read-only"</s=
pan>
    <span class=3D"hljs-keyword">set</span> eDeviceId1 $fDeviceId1.e_device=
Id1
    entry $eDeviceId1 -textvariable ::deviceArray(deviceId1) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId1 <span class=3D"hljs-string">"Id 1 value"</span>
    pack config $lDeviceId1 $eDeviceId1 -side left
    pack config $fDeviceId1 -side top -ipady <span class=3D"hljs-number">1<=
/span> -fill both
    <span class=3D"hljs-keyword">set</span> fDeviceId2 $fReadOnly.f_deviceI=
d2
    frame $fDeviceId2 -relief flat
    <span class=3D"hljs-keyword">set</span> lDeviceId2 $fDeviceId2.l_device=
Id2
    label $lDeviceId2 -text <span class=3D"hljs-string">"Device Id 2"</span=
> -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lDeviceId2 <span class=3D"hljs-string">"Id 2: read-only"</s=
pan>
    <span class=3D"hljs-keyword">set</span> eDeviceId2 $fDeviceId2.e_device=
Id2
    entry $eDeviceId2 -textvariable ::deviceArray(deviceId2) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId2 <span class=3D"hljs-string">"Id 2 value"</span>
    pack config $lDeviceId2 $eDeviceId2 -side left
    pack config $fDeviceId2 -side top -ipady <span class=3D"hljs-number">1<=
/span> -fill both
    <span class=3D"hljs-keyword">set</span> fDeviceId3 $fReadOnly.f_deviceI=
d3
    frame $fDeviceId3 -relief flat
    <span class=3D"hljs-keyword">set</span> lDeviceId3 $fDeviceId3.l_device=
Id3
    label $lDeviceId3 -text <span class=3D"hljs-string">"Device Id 3"</span=
> -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lDeviceId3 <span class=3D"hljs-string">"Id 3: read-only"</s=
pan>
    <span class=3D"hljs-keyword">set</span> eDeviceId3 $fDeviceId3.e_device=
Id3
    entry $eDeviceId3 -textvariable ::deviceArray(deviceId3) -width <span c=
lass=3D"hljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eDeviceId3 <span class=3D"hljs-string">"Id 3 value"</span>
    pack config $lDeviceId3 $eDeviceId3 -side left
    pack config $fDeviceId3 -side top -ipady <span class=3D"hljs-number">1<=
/span> -fill both
    <span class=3D"hljs-keyword">set</span> fHwByte $fReadOnly.f_hwByte
    frame $fHwByte -relief flat
    <span class=3D"hljs-keyword">set</span> lHwByte $fHwByte.l_hwByte
    label $lHwByte -text <span class=3D"hljs-string">"Hardware Byte"</span>=
 -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lHwByte <span class=3D"hljs-string">"Hardware Security Byte=
: read-only"</span>
    <span class=3D"hljs-keyword">set</span> eHwByte $fHwByte.e_hwByte
    entry $eHwByte -textvariable ::deviceArray(hsb) -width <span class=3D"h=
ljs-number">3</span> -font $flipFont -state disabled
    setBalloon $eHwByte <span class=3D"hljs-string">"Hardware Byte value"</=
span>
    pack config $lHwByte $eHwByte -side left
    pack config $fHwByte -side top -ipady <span class=3D"hljs-number">1</sp=
an> -fill both
    <span class=3D"hljs-keyword">set</span> fBootlVer $fReadOnly.f_bootlVer
    frame $fBootlVer -relief flat
    <span class=3D"hljs-keyword">set</span> lBootlVer $fBootlVer.l_bootlVer
    label $lBootlVer -text <span class=3D"hljs-string">"Bootloader Ver."</s=
pan> -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lBootlVer <span class=3D"hljs-string">"Bootloader Version: =
read-only"</span>
    <span class=3D"hljs-keyword">set</span> eBootlVer $fBootlVer.e_bootlVer
    entry $eBootlVer -textvariable ::deviceArray(bootlVer) -width <span cla=
ss=3D"hljs-number">5</span> -font $flipFont -state disabled
    setBalloon $eBootlVer <span class=3D"hljs-string">"Bootloader Version"<=
/span>
    pack config $lBootlVer $eBootlVer -side left
    pack config $fBootlVer -side top -ipady <span class=3D"hljs-number">1</=
span> -fill both
    pack configure $fReadOnly -side top -padx <span class=3D"hljs-number">5=
</span> -pady <span class=3D"hljs-number">5</span> -fill both
    <span class=3D"hljs-keyword">set</span> f_BSB_SBV .main.f_device.f_bsb_=
sbv
    frame $f_BSB_SBV -relief groove -borderwidth <span class=3D"hljs-number=
">1</span>
    <span class=3D"hljs-keyword">set</span> f_BSB $f_BSB_SBV.f_bsb
    frame $f_BSB -relief flat
    <span class=3D"hljs-keyword">set</span> l_BSB $f_BSB.l_bsb
    label $l_BSB -text <span class=3D"hljs-string">"Device BSB"</span> -fon=
t $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $l_BSB <span class=3D"hljs-string">"Boot Status Byte"</span>
    <span class=3D"hljs-keyword">set</span> e_BSB $f_BSB.e_bsb
    entry $e_BSB -textvariable ::deviceArray(bsb) -width <span class=3D"hlj=
s-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0=
</span> -state disabled
    setBalloon $e_BSB <span class=3D"hljs-string">"Actual BSB value"</span>
    pack config $l_BSB $e_BSB -side left
    pack config $f_BSB -side top -ipady <span class=3D"hljs-number">1</span=
> -fill both
    <span class=3D"hljs-keyword">set</span> f_SBV $f_BSB_SBV.f_sbv
    frame $f_SBV -relief flat
    <span class=3D"hljs-keyword">set</span> l_SBV $f_SBV.l_sbv
    label $l_SBV -text <span class=3D"hljs-string">"Device SBV"</span> -fon=
t $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $l_SBV <span class=3D"hljs-string">"Software Boot Vector"</s=
pan>
    <span class=3D"hljs-keyword">set</span> e_SBV $f_SBV.e_sbv
    entry $e_SBV -textvariable ::deviceArray(sbv) -width <span class=3D"hlj=
s-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0=
</span> -state disabled
    setBalloon $e_SBV <span class=3D"hljs-string">"Actual SBV value"</span>
    <span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-number">0</=
span>} then {
	<span class=3D"hljs-keyword">set</span> bErase $fSBV.b_erase
	button $bErase -bd <span class=3D"hljs-number">3</span> -text <span class=
=3D"hljs-string">"Erase"</span> -font $flipFont -command {cmdsEraseSBVBSB} =
-state disabled -width <span class=3D"hljs-number">5</span>
	setBalloon $bErase <span class=3D"hljs-string">"Resets SBV and BSB\nto def=
ault values"</span>
    }
    pack config $l_SBV $e_SBV -side left
    pack config $f_SBV -side top -ipady <span class=3D"hljs-number">1</span=
> -fill both
    pack configure $f_BSB_SBV -side top -padx <span class=3D"hljs-number">5=
</span> -fill both
    bind $e_SBV &lt;Return&gt; {devcSetDeviceSpecialBytes}
    bind $e_BSB &lt;Return&gt; {devcSetDeviceSpecialBytes}
    <span class=3D"hljs-keyword">set</span> fSSB .main.f_device.f_ssb
    frame $fSSB -relief groove -borderwidth <span class=3D"hljs-number">1</=
span>
    <span class=3D"hljs-keyword">set</span> fInfo $fSSB.f_info
    frame $fInfo -relief flat
    <span class=3D"hljs-keyword">set</span> lSSB $fInfo.l_ssb
    label $lSSB -text <span class=3D"hljs-string">"Device SSB"</span> -font=
 $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lSSB <span class=3D"hljs-string">"Software Security Byte"</=
span>
    <span class=3D"hljs-keyword">set</span> eSSB $fInfo.e_ssb
    entry $eSSB -textvariable ::deviceArray(ssb) -width <span class=3D"hljs=
-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0<=
/span> -state disabled
    setBalloon $eSSB <span class=3D"hljs-string">"Actual SSB value"</span>
    pack config $lSSB $eSSB -side left
    pack config $fInfo -side top
    <span class=3D"hljs-keyword">set</span> fLevel0 $fSSB.f_level0
    frame $fLevel0 -relief flat
    <span class=3D"hljs-keyword">set</span> bLevel0 $fLevel0.b_level0
    radiobutton $bLevel0 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 0"</span> -value <sp=
an class=3D"hljs-number">0</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 0"</span> -state disabled
    setBalloon $bLevel0 <span class=3D"hljs-string">"Security level 0: no s=
ecurity\n (setting to levels 1 and 2 allowed)"</span>
    pack configure $bLevel0 -side left
    <span class=3D"hljs-keyword">set</span> fLevel1 $fSSB.f_level1
    frame $fLevel1 -relief flat
    <span class=3D"hljs-keyword">set</span> bLevel1 $fLevel1.b_level1
    radiobutton $bLevel1 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 1"</span> -value <sp=
an class=3D"hljs-number">1</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 1"</span> -state disabled
    setBalloon $bLevel1 <span class=3D"hljs-string">"Security level 1: no w=
riting allowed\n (setting to level 2 allowed)"</span>
    pack configure $bLevel1 -side left
    <span class=3D"hljs-keyword">set</span> fLevel2 $fSSB.f_level2
    frame $fLevel2 -relief flat
    <span class=3D"hljs-keyword">set</span> bLevel2 $fLevel2.b_level2
    radiobutton $bLevel2 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 2"</span> -value <sp=
an class=3D"hljs-number">2</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 2"</span> -state disabled
    setBalloon $bLevel2 <span class=3D"hljs-string">"Security level 2: no r=
eading/writing allowed\n (full chip erase resets security level to 0)"</spa=
n>
    pack configure $bLevel2 -side left
    pack configure $fInfo -side top -anchor w -ipady <span class=3D"hljs-nu=
mber">1</span> -fill both
    pack configure $fInfo $fLevel0 $fLevel1 $fLevel2 -side top -anchor w -f=
ill both
    pack configure $fSSB -side top -padx <span class=3D"hljs-number">5</spa=
n> -pady <span class=3D"hljs-number">5</span> -fill both
    <span class=3D"hljs-keyword">set</span> fButtons .main.f_device.f_butto=
ns
    frame $fButtons -relief flat
    <span class=3D"hljs-keyword">set</span> bUpdate $fButtons.b_update
    button $bUpdate -bd <span class=3D"hljs-number">3</span> -text <span cl=
ass=3D"hljs-string">"Read"</span> -font $flipFont -command {devcUpdateDevic=
eFrame} -state disabled
    setBalloon $bUpdate <span class=3D"hljs-string">"Reads device special b=
ytes"</span>
    <span class=3D"hljs-keyword">set</span> bWrite $fButtons.b_write
    button $bWrite -bd <span class=3D"hljs-number">3</span> -text <span cla=
ss=3D"hljs-string">"Set"</span> -font $flipFont -command {devcSetDeviceSpec=
ialBytes} -state disabled
    setBalloon $bWrite <span class=3D"hljs-string">"Sets device special byt=
es"</span>
    pack config $bUpdate $bWrite -side left -padx <span class=3D"hljs-numbe=
r">10</span>
    <span class=3D"hljs-keyword">catch</span> [destroy .main.f_buffer.b_mem=
Select]
    pack configure $fButtons -side top -padx <span class=3D"hljs-number">35=
</span> -pady <span class=3D"hljs-number">10</span> -fill both
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> buildSk=
ipTestList</span> {protocol} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(skipList) <span c=
lass=3D"hljs-string">"  xaf-1.5  xaf-1.6  xaf-1.13  xaf-1.14  xaf-1.21  xaf=
-1.22  xaf-1.28  flash-2.20  flash-2.21  flash-2.22  flash-2.23  flash-2.23=
.1  flash-2.24  flash-2.25  flash-2.26  flash-2.27  flash-2.28  flash-2.29 =
 flash-2.30  specific-4.2  specific-4.3  specific-4.11  specific-4.12  chec=
ksum-5.2  checksum-5.3  checksum-5.4  checksum-5.5  checksum-5.6  checksum-=
5.13  checksum-5.14  checksum-5.15  checksum-5.28  checksum-5.29 "</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> buildSk=
ipProcList</span> {} {
    <span class=3D"hljs-keyword">set</span> skipL {}
    <span class=3D"hljs-keyword">return</span> $skipL
}
t89c51rd2
<span class=3D"hljs-keyword">foreach</span> m $::deviceArray(memoryList) {
    cmdsImportCurrentMemoryNameSpace $m
    cmdsSetMemoryParameters
    initBuffer
}
cmdsImportCurrentMemoryNameSpace FLASH
<span class=3D"hljs-comment">#dbgEndSrc [info script]</span>
<span class=3D"hljs-comment">#dbgBeginSrc [info script]</span>
<span class=3D"hljs-keyword">global</span> projDir
<span class=3D"hljs-keyword">source</span> $projDir/tcl/devices/devices_com=
mon.tcl
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> t8xc512=
1</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> protcl protocol nAddrBits rs=
232standard canstandard expAnsw testFlag buffer flowButtons flipFont
    <span class=3D"hljs-keyword">set</span> children_List [<span class=3D"h=
ljs-keyword">split</span> [winfo children .main.f_device]]
    <span class=3D"hljs-keyword">foreach</span> item $children_List {
	<span class=3D"hljs-keyword">if</span> {$item !=3D <span class=3D"hljs-str=
ing">".main.f_device.f_deviceName"</span>} then {
	    destroy $item
	}
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">a=
rray</span> exists ::deviceArray]} then {
	<span class=3D"hljs-keyword">array</span> <span class=3D"hljs-keyword">uns=
et</span> ::deviceArray
    }
    <span class=3D"hljs-keyword">set</span> ::deviceArray(name) <span class=
=3D"hljs-string">"T8XC5121"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(communicationList=
) <span class=3D"hljs-string">"RS232"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(memoryList) [<spa=
n class=3D"hljs-keyword">list</span> FLASH]
    <span class=3D"hljs-keyword">set</span> ::deviceArray(memoryColor) [<sp=
an class=3D"hljs-keyword">list</span> <span class=3D"hljs-string">"#88a67d"=
</span> <span class=3D"hljs-string">"wheat"</span>]
    <span class=3D"hljs-keyword">set</span> ::deviceArray(currentMemory) <s=
pan class=3D"hljs-string">"FLASH"</span>
    <span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keywo=
rd">eval</span> ::FLASH:: {
	<span class=3D"hljs-keyword">variable</span> deviceArray
	<span class=3D"hljs-keyword">variable</span> buffer
	<span class=3D"hljs-keyword">set</span> deviceArray(memorySize) <span clas=
s=3D"hljs-number">16</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(cramSize) <span class=
=3D"hljs-number">16</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankValue) <span clas=
s=3D"hljs-string">"FF"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erase) <span class=3D"hljs-=
string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(blankCheck) <span class=3D"=
hljs-string">"normal"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseType) <span class=3D"h=
ljs-string">"full"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlocks) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock0) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock0) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock1) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock1) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock2) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock2) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock3) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock3) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> buffer(erasePossibleBlock4) <span =
class=3D"hljs-string">"disabled"</span>
	<span class=3D"hljs-keyword">set</span> buffer(eraseBlock4) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(progStart) <span class=
=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(displayData) <span cla=
ss=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(blankCheck) <span clas=
s=3D"hljs-string">"01"</span>
	<span class=3D"hljs-keyword">set</span> deviceArray(programData) <span cla=
ss=3D"hljs-string">"00"</span>
	<span class=3D"hljs-keyword">namespace</span> export writeBuffer readBuffe=
r readDeviceArray initBuffer bufferChecksum
    }
    <span class=3D"hljs-keyword">foreach</span> M $::deviceArray(memoryList=
) {
	<span class=3D"hljs-keyword">proc</span> ::${M}::writeBuffer {index data} =
{
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">set</span> buffer($index) $data
	    <span class=3D"hljs-keyword">return</span>
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::readBuffer {index} {
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">return</span> $buffer($index)
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::readDeviceArray {index} {
	    <span class=3D"hljs-keyword">variable</span> deviceArray
	    <span class=3D"hljs-keyword">return</span> $deviceArray($index)
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::initBuffer {} {
	    <span class=3D"hljs-keyword">variable</span> deviceArray
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">global</span> flipStates
	    <span class=3D"hljs-keyword">set</span> max [<span class=3D"hljs-keywo=
rd">expr</span> $deviceArray(memorySize) * <span class=3D"hljs-number">1024=
</span>]
	    <span class=3D"hljs-keyword">if</span> {$flipStates(simul)} then {
		<span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">set=
</span> i <span class=3D"hljs-number">0</span>} {$i &lt; $max} {<span class=
=3D"hljs-keyword">incr</span> i} {
		    <span class=3D"hljs-keyword">set</span> buffer([<span class=3D"hljs-k=
eyword">format</span> %<span class=3D"hljs-number">06</span>X $i]) $deviceA=
rray(blankValue)
		}
	    } else {
		initBuffer_C $max $deviceArray(blankValue)
	    }
	    <span class=3D"hljs-keyword">return</span>
	}
	<span class=3D"hljs-keyword">proc</span> ::${M}::bufferChecksum {} {
	    <span class=3D"hljs-keyword">variable</span> buffer
	    <span class=3D"hljs-keyword">global</span> flipStates
	    <span class=3D"hljs-keyword">set</span> min $buffer(minProgAddr)
	    <span class=3D"hljs-keyword">set</span> max $buffer(maxProgAddr)
	    <span class=3D"hljs-keyword">if</span> {$flipStates(simul)} then {
		<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0x=
CAFEFADE</span>
	    } else {
		<span class=3D"hljs-keyword">return</span> [computeBufferChecksum_C $min =
$max]
	    }
	}
    }
    <span class=3D"hljs-keyword">set</span> ::deviceArray(specialSynchro) <=
span class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(RS232ProtocolsLis=
t) <span class=3D"hljs-string">"Standard Enhanced"</span>
    <span class=3D"hljs-keyword">set</span> protocol(frameLengthW) <span cl=
ass=3D"hljs-number">64</span>
    <span class=3D"hljs-keyword">set</span> protocol(frameLengthR) <span cl=
ass=3D"hljs-number">64</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev0) [<span cla=
ss=3D"hljs-keyword">list</span> FF BF <span class=3D"hljs-number">7</span>F=
 <span class=3D"hljs-number">3</span>F]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev0Test) <span =
class=3D"hljs-string">"0F"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev1) [<span cla=
ss=3D"hljs-keyword">list</span> FE BE <span class=3D"hljs-number">7</span>E=
 <span class=3D"hljs-number">3</span>E]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev1Test) <span =
class=3D"hljs-string">"0E"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev2) [<span cla=
ss=3D"hljs-keyword">list</span> FC BC <span class=3D"hljs-number">7</span>C=
 <span class=3D"hljs-number">3</span>C XX]
    <span class=3D"hljs-keyword">set</span> expAnsw(readSSBlev2Test) <span =
class=3D"hljs-string">"0C"</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readManufId) <span clas=
s=3D"hljs-number">58</span>
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId1) D7
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId2) FC
    <span class=3D"hljs-keyword">set</span> expAnsw(readDevId3) FF
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock0) <span cla=
ss=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock1) <span cla=
ss=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock2) <span cla=
ss=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock3) <span cla=
ss=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> testFlag(eraseBlock4) <span cla=
ss=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> testFlag(readDevBootId1) <span =
class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> testFlag(readDevBootId2) <span =
class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> testFlag(sbv) <span class=3D"hl=
js-string">"FC"</span>
    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">=
tcltest</span>::testConstraints(eraseBlockPossible) <span class=3D"hljs-num=
ber">0</span>
    .main.f_device.f_deviceName.l_device configure -text $::deviceArray(nam=
e)
    .main.f_device.f_deviceName configure -relief groove
    <span class=3D"hljs-keyword">set</span> fBlocks .deviceErase.f_erase.f_=
blocks
    <span class=3D"hljs-keyword">set</span> bBlock0 $fBlocks.b_block0
    <span class=3D"hljs-keyword">set</span> bBlock1 $fBlocks.b_block1
    <span class=3D"hljs-keyword">set</span> bBlock2 $fBlocks.b_block2
    <span class=3D"hljs-keyword">set</span> bBlock3 $fBlocks.b_block3
    <span class=3D"hljs-keyword">set</span> bBlock4 $fBlocks.b_block4
    setBalloon $bBlock0 <span class=3D"hljs-string">"Erase memory between 0=
000 and 1FFF"</span>
    setBalloon $bBlock1 <span class=3D"hljs-string">"Erase memory between 2=
000 and 3FFF"</span>
    setBalloon $bBlock2 <span class=3D"hljs-string">"Erase memory between 4=
000 and 7FFF"</span>
    setBalloon $bBlock3 <span class=3D"hljs-string">"Erase memory between 8=
000 and BFFF"</span>
    setBalloon $bBlock4 <span class=3D"hljs-string">"Erase memory between C=
000 and FFFF"</span>
    <span class=3D"hljs-keyword">catch</span> [<span class=3D"hljs-keyword"=
>set</span> ::deviceArray(bootlVer) <span class=3D"hljs-string">"XX"</span>=
]
    <span class=3D"hljs-keyword">catch</span> [<span class=3D"hljs-keyword"=
>set</span> ::deviceArray(ssb) <span class=3D"hljs-string">"XX"</span>]
    <span class=3D"hljs-keyword">catch</span> [<span class=3D"hljs-keyword"=
>set</span> ::deviceArray(level) <span class=3D"hljs-string">"X"</span>]
    <span class=3D"hljs-keyword">catch</span> [<span class=3D"hljs-keyword"=
>set</span> ::deviceArray(eraseType) <span class=3D"hljs-string">"full"</sp=
an>]
    <span class=3D"hljs-keyword">catch</span> [<span class=3D"hljs-keyword"=
>set</span> ::deviceArray(crc) <span class=3D"hljs-string">"XXXX"</span>]
    <span class=3D"hljs-keyword">set</span> nAddrBits <span class=3D"hljs-n=
umber">4</span>
    <span class=3D"hljs-keyword">set</span> rs232standard(readHwByte) <span=
 class=3D"hljs-string">":020000050703EF"</span>
    <span class=3D"hljs-keyword">set</span> rs232standard(readBootlVer) <sp=
an class=3D"hljs-string">":020000050800F1"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowErase) <span =
class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowBlankCheck) <=
span class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowProgram) <spa=
n class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowVerify) <span=
 class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(flowSpecialBytes)=
 <span class=3D"hljs-number">0</span>
    wm title .deviceErase <span class=3D"hljs-string">"$::deviceArray(name)=
 Erase"</span>
    <span class=3D"hljs-keyword">set</span> fReadOnly .main.f_device.f_read=
Only
    frame $fReadOnly -relief groove -borderwidth <span class=3D"hljs-number=
">1</span>
    <span class=3D"hljs-keyword">set</span> fBootlVer $fReadOnly.f_bootlVer
    frame $fBootlVer -relief flat
    <span class=3D"hljs-keyword">set</span> lBootlVer $fBootlVer.l_bootlVer
    label $lBootlVer -text <span class=3D"hljs-string">"Bootloader Ver."</s=
pan> -font $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lBootlVer <span class=3D"hljs-string">"Bootloader Version: =
read-only"</span>
    <span class=3D"hljs-keyword">set</span> eBootlVer $fBootlVer.e_bootlVer
    entry $eBootlVer -textvariable ::deviceArray(bootlVer) -width <span cla=
ss=3D"hljs-number">5</span> -font $flipFont -state disabled
    setBalloon $eBootlVer <span class=3D"hljs-string">"Bootloader Version"<=
/span>
    pack config $lBootlVer $eBootlVer -side left
    pack config $fBootlVer -side top -ipady <span class=3D"hljs-number">5</=
span> -fill both
    pack configure $fReadOnly -side top -padx <span class=3D"hljs-number">5=
</span> -pady <span class=3D"hljs-number">5</span> -fill both
    <span class=3D"hljs-keyword">set</span> fBypass .main.f_device.f_bypass
    frame $fBypass -relief groove -bd <span class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> lBypass $fBypass.l_bypass
    label $lBypass -text <span class=3D"hljs-string">"Bypass Bits"</span> -=
font $flipFont
    <span class=3D"hljs-keyword">set</span> cbBypassUart $fBypass.cb_bypass=
Uart
    checkbutton $cbBypassUart -text <span class=3D"hljs-string">"UART"</spa=
n> -font $flipFont -<span class=3D"hljs-keyword">variable</span> ::deviceAr=
ray(bypassUART) -onvalue <span class=3D"hljs-number">1</span> -offvalue <sp=
an class=3D"hljs-number">0</span> -indicatoron true -state disabled
    setBalloon $cbBypassUart <span class=3D"hljs-string">"UART bypassed whe=
n ON"</span>
    <span class=3D"hljs-keyword">set</span> cbBypassI2c $fBypass.cb_bypassI=
2c
    checkbutton $cbBypassI2c -text <span class=3D"hljs-string">"I2C"</span>=
 -font $flipFont -<span class=3D"hljs-keyword">variable</span> ::deviceArra=
y(bypassI2C) -onvalue <span class=3D"hljs-number">1</span> -offvalue <span =
class=3D"hljs-number">0</span> -indicatoron true -state disabled
    setBalloon $cbBypassI2c <span class=3D"hljs-string">"I2C bypassed when =
ON"</span>
    pack configure $lBypass $cbBypassUart $cbBypassI2c -side top -anchor w
    pack configure $fBypass -side top -padx <span class=3D"hljs-number">5</=
span> -pady <span class=3D"hljs-number">5</span> -ipady <span class=3D"hljs=
-number">5</span> -fill both
    <span class=3D"hljs-keyword">set</span> fSSB .main.f_device.f_ssb
    frame $fSSB -relief groove -borderwidth <span class=3D"hljs-number">1</=
span>
    <span class=3D"hljs-keyword">set</span> fInfo $fSSB.f_info
    frame $fInfo -relief flat
    <span class=3D"hljs-keyword">set</span> lSSB $fInfo.l_ssb
    label $lSSB -text <span class=3D"hljs-string">"Device SSB"</span> -font=
 $flipFont -anchor w -width <span class=3D"hljs-number">16</span>
    setBalloon $lSSB <span class=3D"hljs-string">"Software Security Byte"</=
span>
    <span class=3D"hljs-keyword">set</span> eSSB $fInfo.e_ssb
    entry $eSSB -textvariable ::deviceArray(ssb) -width <span class=3D"hljs=
-number">3</span> -font $flipFont -takefocus <span class=3D"hljs-number">0<=
/span> -state disabled
    setBalloon $eSSB <span class=3D"hljs-string">"Actual SSB value"</span>
    pack config $lSSB $eSSB -side left
    pack config $fInfo -side top
    <span class=3D"hljs-keyword">set</span> fLevel0 $fSSB.f_level0
    frame $fLevel0 -relief flat
    <span class=3D"hljs-keyword">set</span> bLevel0 $fLevel0.b_level0
    radiobutton $bLevel0 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 0"</span> -value <sp=
an class=3D"hljs-number">0</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 0"</span> -state disabled
    setBalloon $bLevel0 <span class=3D"hljs-string">"Security level 0: no s=
ecurity\n (setting to levels 1 and 2 allowed)"</span>
    pack configure $bLevel0 -side left
    <span class=3D"hljs-keyword">set</span> fLevel1 $fSSB.f_level1
    frame $fLevel1 -relief flat
    <span class=3D"hljs-keyword">set</span> bLevel1 $fLevel1.b_level1
    radiobutton $bLevel1 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 1"</span> -value <sp=
an class=3D"hljs-number">1</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 1"</span> -state disabled
    setBalloon $bLevel1 <span class=3D"hljs-string">"Security level 1: no w=
riting allowed\n (setting to level 2 allowed)"</span>
    pack configure $bLevel1 -side left
    <span class=3D"hljs-keyword">set</span> fLevel2 $fSSB.f_level2
    frame $fLevel2 -relief flat
    <span class=3D"hljs-keyword">set</span> bLevel2 $fLevel2.b_level2
    radiobutton $bLevel2 -indicatoron <span class=3D"hljs-number">1</span> =
-<span class=3D"hljs-keyword">variable</span> ::deviceArray(level) -command=
 <span class=3D"hljs-string">"set ::deviceArray(level) 2"</span> -value <sp=
an class=3D"hljs-number">2</span> -font $flipFont -text <span class=3D"hljs=
-string">"Level 2"</span> -state disabled
    setBalloon $bLevel2 <span class=3D"hljs-string">"Security level 2: no r=
eading/writing allowed\n (full chip erase resets security level to 0)"</spa=
n>
    pack configure $bLevel2 -side left
    pack configure $fInfo -side top -anchor w -ipady <span class=3D"hljs-nu=
mber">5</span> -fill both
    pack configure $fInfo $fLevel0 $fLevel1 $fLevel2 -side top -anchor w -f=
ill both
    pack configure $fSSB -side top -padx <span class=3D"hljs-number">5</spa=
n> -pady <span class=3D"hljs-number">5</span> -fill both
    <span class=3D"hljs-keyword">set</span> fCRC .main.f_device.f_crc
    frame $fCRC -relief groove -bd <span class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> bCRC $fCRC.b_crc
    button $bCRC -bd <span class=3D"hljs-number">3</span> -text <span class=
=3D"hljs-string">"CRC"</span> -font $flipFont -command {storeAndDisplayCRC =
[<span class=3D"hljs-keyword">format</span> %<span class=3D"hljs-number">06=
</span>X [<span class=3D"hljs-keyword">expr</span> [readDeviceArray memoryS=
ize] * <span class=3D"hljs-number">1024</span> - <span class=3D"hljs-number=
">3</span>]]} -state disabled
    setBalloon $bCRC <span class=3D"hljs-string">"Launches a CRC calculatio=
n"</span>
    <span class=3D"hljs-keyword">set</span> eCRC $fCRC.e_crc
    entry $eCRC -textvariable ::deviceArray(crc) -width <span class=3D"hljs=
-number">5</span> -font $flipFont -takefocus <span class=3D"hljs-number">0<=
/span> -state disabled
    setBalloon $eCRC <span class=3D"hljs-string">"CRC actual value"</span>
    pack configure $bCRC $eCRC -side left -padx <span class=3D"hljs-number"=
>10</span>
    pack configure $fCRC -side top -padx <span class=3D"hljs-number">5</spa=
n> -pady <span class=3D"hljs-number">5</span> -ipady <span class=3D"hljs-nu=
mber">5</span> -fill both
    <span class=3D"hljs-keyword">set</span> fButtons .main.f_device.f_butto=
ns
    frame $fButtons -relief flat
    <span class=3D"hljs-keyword">set</span> bUpdate $fButtons.b_update
    button $bUpdate -bd <span class=3D"hljs-number">3</span> -text <span cl=
ass=3D"hljs-string">"Read"</span> -font $flipFont -command {devcUpdateDevic=
eFrame} -state disabled
    setBalloon $bUpdate <span class=3D"hljs-string">"Reads device special b=
ytes"</span>
    <span class=3D"hljs-keyword">set</span> bWrite $fButtons.b_write
    button $bWrite -bd <span class=3D"hljs-number">3</span> -text <span cla=
ss=3D"hljs-string">"Set"</span> -font $flipFont -command {devcSetDeviceSpec=
ialBytes} -state disabled
    setBalloon $bWrite <span class=3D"hljs-string">"Sets device special byt=
es"</span>
    <span class=3D"hljs-keyword">set</span> bExec $fButtons.b_exec
    button $bExec -bd <span class=3D"hljs-number">3</span> -text <span clas=
s=3D"hljs-string">"Start Application"</span> -font $flipFont -command {ptcl=
StartAppli <span class=3D"hljs-number">0</span>} -state disabled
    setBalloon $bExec <span class=3D"hljs-string">"Starts application at ad=
dress 0x0000"</span>
    pack config $bUpdate $bWrite $bExec -side left -padx <span class=3D"hlj=
s-number">5</span>
    <span class=3D"hljs-keyword">catch</span> [destroy .main.f_buffer.b_mem=
Select]
    pack configure $fButtons -side top -padx <span class=3D"hljs-number">10=
</span> -pady <span class=3D"hljs-number">10</span> -fill both
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> buildSk=
ipTestList</span> {protocol} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(skipList) <span c=
lass=3D"hljs-string">"  xaf-1.5  xaf-1.6  xaf-1.13  xaf-1.14  xaf-1.21  xaf=
-1.22  xaf-1.28  flash-2.20  flash-2.21  flash-2.22  flash-2.23  flash-2.23=
.1  flash-2.24  flash-2.25  flash-2.26  flash-2.27  flash-2.28  flash-2.29 =
 flash-2.30  specific-4.2  specific-4.3  specific-4.11  specific-4.12  chec=
ksum-5.2  checksum-5.3  checksum-5.4  checksum-5.5  checksum-5.6  checksum-=
5.13  checksum-5.14  checksum-5.15  checksum-5.28  checksum-5.29 "</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> buildSk=
ipProcList</span> {} {
    <span class=3D"hljs-keyword">set</span> skipL [<span class=3D"hljs-keyw=
ord">list</span> ptclReadManufId ptclReadDeviceId1 ptclReadDeviceId2 ptclRe=
adDeviceId3 ptclReadHwByte ptclReadDevBootId1 ptclReadDevBootId2 ptclReadSB=
V ptclReadBSB ptclReadSSB ptclReadEB ptclReadBTC1 ptclReadBTC2 ptclReadBTC3=
 ptclReadNNB ptclReadCRIS ptclReadPortsConfig]
    <span class=3D"hljs-keyword">return</span> $skipL
}
t8xc5121
<span class=3D"hljs-keyword">foreach</span> m $::deviceArray(memoryList) {
    cmdsImportCurrentMemoryNameSpace $m
    cmdsSetMemoryParameters
    initBuffer
}
cmdsImportCurrentMemoryNameSpace FLASH
<span class=3D"hljs-comment">#dbgEndSrc [info script]    #dbgBeginSrc [info=
 script]</span>
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> checkSe=
curityLevel</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> expAnsw flipStates
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">0</span>
    <span class=3D"hljs-keyword">foreach</span> i $expAnsw(readSSBlev0) {
	<span class=3D"hljs-keyword">if</span> {$::deviceArray(ssb) =3D=3D $i} the=
n {
	    <span class=3D"hljs-keyword">set</span> ::deviceArray(level) <span cla=
ss=3D"hljs-number">0</span>
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">1</span>
	}
    }
    <span class=3D"hljs-keyword">foreach</span> i $expAnsw(readSSBlev1) {
	<span class=3D"hljs-keyword">if</span> {$::deviceArray(ssb) =3D=3D $i} the=
n {
	    <span class=3D"hljs-keyword">set</span> ::deviceArray(level) <span cla=
ss=3D"hljs-number">1</span>
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">1</span>
	}
    }
    <span class=3D"hljs-keyword">foreach</span> i $expAnsw(readSSBlev2) {
	<span class=3D"hljs-keyword">if</span> {$::deviceArray(ssb) =3D=3D $i} the=
n {
	    <span class=3D"hljs-keyword">set</span> ::deviceArray(level) <span cla=
ss=3D"hljs-number">2</span>
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">1</span>
	}
    }
    <span class=3D"hljs-keyword">if</span> {! $flipStates(simul)} then {
	<span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"hljs=
-number">0</span>} then {
	    <span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-st=
ring">"The SSB value is not valid."</span>
	    messageBox <span class=3D"hljs-string">"Device Information"</span> <sp=
an class=3D"hljs-keyword">error</span> $message
	}
    } else {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>1</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> devcUpd=
ateDeviceFrame</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> flipStates
    focus .
    <span class=3D"hljs-keyword">set</span> failed <span class=3D"hljs-stri=
ng">"Failed reading special bytes."</span>
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">set</span> L [<span class=3D"hljs-keyword"=
>list</span> ptclReadSSB ptclReadManufId ptclReadDeviceId1 ptclReadDeviceId=
2 ptclReadDeviceId3 ptclReadHwByte ptclReadDevBootId1 ptclReadDevBootId2 pt=
clReadBootlVer updateBypassBitsDisplay ptclReadSBV ptclReadBSB ptclReadEB p=
tclReadBTC1 ptclReadBTC2 ptclReadBTC3 ptclReadNNB ptclReadCRIS ptclReadPort=
sConfig]
<span class=3D"hljs-comment">    #dbgShowInfo "Building the skip list..."</=
span>
    <span class=3D"hljs-keyword">set</span> skipL [buildSkipProcList]
    <span class=3D"hljs-keyword">foreach</span> i $skipL {
	<span class=3D"hljs-keyword">set</span> index [<span class=3D"hljs-keyword=
">lsearch</span> $L $i]
	<span class=3D"hljs-keyword">set</span> L [<span class=3D"hljs-keyword">lr=
eplace</span> $L $index $index <span class=3D"hljs-string">""</span>]
    }
<span class=3D"hljs-comment">    #dbgShowVar "Executed procs list =3D $L"</=
span>
    <span class=3D"hljs-keyword">foreach</span> i $L {
	<span class=3D"hljs-keyword">if</span> {$i !=3D <span class=3D"hljs-string=
">""</span>} then {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
info</span> procs $i] =3D=3D $i} then {
		<span class=3D"hljs-keyword">if</span> {! [$i]} then {
		    <span class=3D"hljs-keyword">break</span>
		} else {
		    <span class=3D"hljs-keyword">update</span> idletasks
		}
	    }
	}
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(deviceBootId1)] &amp;&amp; [<span class=3D"=
hljs-keyword">info</span> exists ::deviceArray(deviceBootId2)]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(bootloaderId) ${::de=
viceArray(deviceBootId2)}${::deviceArray(deviceBootId1)}
    }
    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">=
tcltest</span>::testConstraints(bootloaderId_0001_Only) [<span class=3D"hlj=
s-keyword">string</span> equal $::deviceArray(bootloaderId) <span class=3D"=
hljs-string">"0001"</span>]
    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">=
tcltest</span>::testConstraints(bootloaderId_0002_Only) [<span class=3D"hlj=
s-keyword">string</span> equal $::deviceArray(bootloaderId) <span class=3D"=
hljs-string">"0002"</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> devcSet=
DeviceSpecialBytes</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> protcl loadConfig expAnsw
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">while</span> {<span class=3D"hljs-number">=
1</span>} {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info=
</span> exists ::deviceArray(sbv)]} then {
	    <span class=3D"hljs-keyword">if</span> {![isValidHexaInput $::deviceAr=
ray(sbv)]} then {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
		<span class=3D"hljs-keyword">break</span>
	    }
	    <span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-string">"0=
x$::deviceArray(sbv)"</span> &gt; <span class=3D"hljs-number">0xFF</span>} =
then {
		<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-strin=
g">"The address is out of range."</span>
		messageBox <span class=3D"hljs-string">"Entry Check"</span> warning $mess=
age
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
		<span class=3D"hljs-keyword">break</span>
	    }
	    <span class=3D"hljs-keyword">set</span> ::deviceArray(sbv) [<span clas=
s=3D"hljs-keyword">format</span> %<span class=3D"hljs-number">02</span>X <s=
pan class=3D"hljs-number">0</span>x$::deviceArray(sbv)]
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info=
</span> exists ::deviceArray(bsb)]} then {
	    <span class=3D"hljs-keyword">if</span> {![isValidHexaInput $::deviceAr=
ray(bsb)]} then {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
		<span class=3D"hljs-keyword">break</span>
	    }
	    <span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-string">"0=
x$::deviceArray(bsb)"</span> &gt; <span class=3D"hljs-number">0xFF</span>} =
then {
		<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-strin=
g">"The address is out of range."</span>
		messageBox <span class=3D"hljs-string">"Entry Check"</span> warning $mess=
age
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
		<span class=3D"hljs-keyword">break</span>
	    }
	    <span class=3D"hljs-keyword">set</span> ::deviceArray(bsb) [<span clas=
s=3D"hljs-keyword">format</span> %<span class=3D"hljs-number">02</span>X <s=
pan class=3D"hljs-number">0</span>x$::deviceArray(bsb)]
	}
	<span class=3D"hljs-keyword">if</span> {([<span class=3D"hljs-keyword">inf=
o</span> exists eEB]) &amp;&amp;([winfo exists $eEB])} then {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
info</span> exists ::deviceArray(eb)]} then {
		<span class=3D"hljs-keyword">if</span> {![isValidHexaInput $::deviceArray=
(eb)]} then {
		    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-nu=
mber">0</span>
		    <span class=3D"hljs-keyword">break</span>
		}
		<span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-string">"0x$:=
:deviceArray(eb)"</span> &gt; <span class=3D"hljs-number">0xFF</span>} then=
 {
		    <span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-s=
tring">"The address is out of range."</span>
		    messageBox <span class=3D"hljs-string">"Entry Check"</span> warning $=
message
		    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-nu=
mber">0</span>
		    <span class=3D"hljs-keyword">break</span>
		}
		<span class=3D"hljs-keyword">set</span> ::deviceArray(eb) [<span class=3D=
"hljs-keyword">format</span> %<span class=3D"hljs-number">02</span>X <span =
class=3D"hljs-number">0</span>x$::deviceArray(eb)]
	    }
	}
	focus .
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>1</span>
	<span class=3D"hljs-keyword">if</span> {([<span class=3D"hljs-keyword">inf=
o</span> exist ::deviceArray(ssb)]) &amp;&amp;([<span class=3D"hljs-keyword=
">lsearch</span> -exact [<span class=3D"hljs-keyword">subst</span> $expAnsw=
(readSSBlev0)] $::deviceArray(ssb)] !=3D <span class=3D"hljs-number">-1</sp=
an>)} then {
<span class=3D"hljs-comment">	    #dbgShowInfo "Security level =3D 0 =3D&gt=
; Special bytes changes are possible."</span>
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
info</span> exists ::deviceArray(sbv)]} then {
		<span class=3D"hljs-keyword">set</span> status [ptclWriteSBV $::deviceArr=
ay(sbv)]
		<span class=3D"hljs-keyword">set</span> loadConfig(setSbv) <span class=3D=
"hljs-string">"setupSBV $::deviceArray(sbv)"</span>
		<span class=3D"hljs-keyword">if</span> {$status} then {
		    <span class=3D"hljs-keyword">set</span> p ptclReadSBV
		    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword"=
>info</span> procs $p] =3D=3D $p} then {
			$p
		    }
		}
	    }
	    <span class=3D"hljs-keyword">if</span> {$status} then {
		<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">inf=
o</span> exists ::deviceArray(bsb)]} then {
		    <span class=3D"hljs-keyword">set</span> status [ptclWriteBSB $::devic=
eArray(bsb)]
		    <span class=3D"hljs-keyword">set</span> loadConfig(setBsb) <span clas=
s=3D"hljs-string">"setupBSB $::deviceArray(bsb)"</span>
		    <span class=3D"hljs-keyword">if</span> {$status} then {
			<span class=3D"hljs-keyword">set</span> p ptclReadBSB
			<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">in=
fo</span> procs $p] =3D=3D $p} then {
			    $p
			}
		    }
		}
	    }
	    <span class=3D"hljs-keyword">if</span> {($status) &amp;&amp;([<span cl=
ass=3D"hljs-keyword">info</span> procs ptclWriteEB] =3D=3D <span class=3D"h=
ljs-string">"ptclWriteEB"</span>)} then {
		<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">inf=
o</span> exists ::deviceArray(eb)]} then {
		    <span class=3D"hljs-keyword">set</span> status [ptclWriteEB $::device=
Array(eb)]
		    <span class=3D"hljs-keyword">set</span> loadConfig(setEB) <span class=
=3D"hljs-string">"setupEB $::deviceArray(eb)"</span>
		    <span class=3D"hljs-keyword">if</span> {$status} then {
			<span class=3D"hljs-keyword">set</span> p ptclReadEB
			<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">in=
fo</span> procs $p] =3D=3D $p} then {
			    $p
			}
		    }
		}
	    }
	    <span class=3D"hljs-keyword">if</span> {$status} then {
		<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">inf=
o</span> exists ::deviceArray(oscFuse)]} then {
		    <span class=3D"hljs-keyword">set</span> p ptclWriteOscFuse
		    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword"=
>info</span> procs $p] =3D=3D $p} then {
			<span class=3D"hljs-keyword">set</span> status [$p <span class=3D"hljs-n=
umber">0</span>$::deviceArray(oscFuse)]
			<span class=3D"hljs-keyword">set</span> loadConfig(setOscFuse) <span cla=
ss=3D"hljs-string">"setupOscFuse $::deviceArray(oscFuse)"</span>
		    }
		}
	    }
	    <span class=3D"hljs-keyword">if</span> {$status} then {
		<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">inf=
o</span> exists ::deviceArray(bljbFuse)]} then {
		    <span class=3D"hljs-keyword">set</span> p ptclWriteBLJBFuse
		    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword"=
>info</span> procs $p] =3D=3D $p} then {
			<span class=3D"hljs-keyword">set</span> status [$p <span class=3D"hljs-n=
umber">0</span>$::deviceArray(bljbFuse)]
			<span class=3D"hljs-keyword">set</span> loadConfig(setBljbFuse) <span cl=
ass=3D"hljs-string">"setupBljbFuse $::deviceArray(bljbFuse)"</span>
		    }
		}
	    }
	    <span class=3D"hljs-keyword">if</span> {$status} then {
		<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">inf=
o</span> exists ::deviceArray(x2Fuse)]} then {
		    <span class=3D"hljs-keyword">set</span> p ptclWriteX2Fuse
		    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword"=
>info</span> procs $p] =3D=3D $p} then {
			<span class=3D"hljs-keyword">set</span> status [$p <span class=3D"hljs-n=
umber">0</span>$::deviceArray(x2Fuse)]
			<span class=3D"hljs-keyword">set</span> loadConfig(setX2Fuse) <span clas=
s=3D"hljs-string">"setupX2Fuse $::deviceArray(x2Fuse)"</span>
		    }
		}
	    }
	    <span class=3D"hljs-keyword">if</span> {$status} then {
		<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">inf=
o</span> exists ::deviceArray(x2Fuse)] &amp;&amp; [<span class=3D"hljs-keyw=
ord">info</span> exists ::deviceArray(bljbFuse)]} then {
		    <span class=3D"hljs-keyword">set</span> p ptclWriteHwByte
		    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword"=
>info</span> procs $p] =3D=3D $p} then {
			<span class=3D"hljs-keyword">set</span> status [$p]
		    }
		}
	    }
	    <span class=3D"hljs-keyword">if</span> {$status} then {
		<span class=3D"hljs-keyword">set</span> p ptclReadHwByte
		<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">inf=
o</span> procs $p] =3D=3D $p} then {
		    $p
		}
	    }
	}
	<span class=3D"hljs-keyword">if</span> {$status} then {
<span class=3D"hljs-comment">	    #dbgShowInfo "Status =3D 1"</span>
	    <span class=3D"hljs-keyword">if</span> {$::deviceArray(level) =3D=3D <=
span class=3D"hljs-number">0</span>} then {
		<span class=3D"hljs-keyword">set</span> p ptclReadSSB
		<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">inf=
o</span> procs $p] =3D=3D $p} then {
		    $p
		    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword"=
>info</span> procs <span class=3D"hljs-string">"storeSSBinBuffer"</span>] =
=3D=3D <span class=3D"hljs-string">"storeSSBinBuffer"</span>} then {
			storeSSBinBuffer [<span class=3D"hljs-keyword">format</span> %<span clas=
s=3D"hljs-number">06</span>X [<span class=3D"hljs-keyword">expr</span> [rea=
dDeviceArray memorySize] * <span class=3D"hljs-number">1024</span> - <span =
class=3D"hljs-number">3</span>]]
			storeAndDisplayCRC [<span class=3D"hljs-keyword">format</span> %<span cl=
ass=3D"hljs-number">06</span>X [<span class=3D"hljs-keyword">expr</span> [r=
eadDeviceArray memorySize] * <span class=3D"hljs-number">1024</span> - <spa=
n class=3D"hljs-number">3</span>]]
		    }
		}
	    } elseif {$::deviceArray(level) =3D=3D <span class=3D"hljs-number">1</=
span>} {
		<span class=3D"hljs-keyword">set</span> status [ptclProgSSBlev1]
		<span class=3D"hljs-keyword">set</span> loadConfig(setSsb) <span class=3D=
"hljs-string">"setupSecurityLevel 1"</span>
		<span class=3D"hljs-keyword">if</span> {$status} then {
		    <span class=3D"hljs-keyword">set</span> p ptclReadSSB
		    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword"=
>info</span> procs $p] =3D=3D $p} then {
			$p
			<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">in=
fo</span> procs <span class=3D"hljs-string">"storeSSBinBuffer"</span>] =3D=
=3D <span class=3D"hljs-string">"storeSSBinBuffer"</span>} then {
			    storeSSBinBuffer [<span class=3D"hljs-keyword">format</span> %<span =
class=3D"hljs-number">06</span>X [<span class=3D"hljs-keyword">expr</span> =
[readDeviceArray memorySize] * <span class=3D"hljs-number">1024</span> - <s=
pan class=3D"hljs-number">3</span>]]
			    storeAndDisplayCRC [<span class=3D"hljs-keyword">format</span> %<spa=
n class=3D"hljs-number">06</span>X [<span class=3D"hljs-keyword">expr</span=
> [readDeviceArray memorySize] * <span class=3D"hljs-number">1024</span> - =
<span class=3D"hljs-number">3</span>]]
			}
		    }
		}
	    } elseif {$::deviceArray(level) =3D=3D <span class=3D"hljs-number">2</=
span>} {
		<span class=3D"hljs-keyword">set</span> status [ptclProgSSBlev2]
		<span class=3D"hljs-keyword">set</span> loadConfig(setSsb) <span class=3D=
"hljs-string">"setupSecurityLevel 2"</span>
		<span class=3D"hljs-keyword">if</span> {$status} then {
		    <span class=3D"hljs-keyword">set</span> p ptclReadSSB
		    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword"=
>info</span> procs $p] =3D=3D $p} then {
			$p
			<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">in=
fo</span> procs <span class=3D"hljs-string">"storeSSBinBuffer"</span>] =3D=
=3D <span class=3D"hljs-string">"storeSSBinBuffer"</span>} then {
			    storeSSBinBuffer [<span class=3D"hljs-keyword">format</span> %<span =
class=3D"hljs-number">06</span>X [<span class=3D"hljs-keyword">expr</span> =
[readDeviceArray memorySize] * <span class=3D"hljs-number">1024</span> - <s=
pan class=3D"hljs-number">3</span>]]
			    storeAndDisplayCRC [<span class=3D"hljs-keyword">format</span> %<spa=
n class=3D"hljs-number">06</span>X [<span class=3D"hljs-keyword">expr</span=
> [readDeviceArray memorySize] * <span class=3D"hljs-number">1024</span> - =
<span class=3D"hljs-number">3</span>]]
			}
		    }
		}
	    } else {
		<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-strin=
g">"The device security level value is not correct."</span>
		messageBox <span class=3D"hljs-string">"Device Information"</span> <span =
class=3D"hljs-keyword">error</span> $message
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
		<span class=3D"hljs-keyword">break</span>
	    }
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
info</span> exists ::deviceArray(bypassUART)]} then {
<span class=3D"hljs-comment">		#dbgShowInfo "bypassUART exists"</span>
		<span class=3D"hljs-keyword">if</span> {$::deviceArray(bypassUART) &amp;&=
amp; $::deviceArray(bypassI2C)} then {
		    <span class=3D"hljs-keyword">set</span> bypass <span class=3D"hljs-st=
ring">"both"</span>
		    <span class=3D"hljs-keyword">set</span> status [ptclProgBypass $bypas=
s]
		} elseif {$::deviceArray(bypassUART)} {
		    <span class=3D"hljs-keyword">set</span> bypass <span class=3D"hljs-st=
ring">"uart"</span>
		    <span class=3D"hljs-keyword">set</span> status [ptclProgBypass $bypas=
s]
		} elseif {$::deviceArray(bypassI2C)} {
		    <span class=3D"hljs-keyword">set</span> bypass <span class=3D"hljs-st=
ring">"i2c"</span>
		    <span class=3D"hljs-keyword">set</span> status [ptclProgBypass $bypas=
s]
		} else {
		    <span class=3D"hljs-keyword">set</span> bypass <span class=3D"hljs-st=
ring">"none"</span>
		    <span class=3D"hljs-keyword">set</span> status [ptclProgBypass $bypas=
s]
		}
		<span class=3D"hljs-keyword">set</span> p ptclReadSSB
		<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">inf=
o</span> procs $p] =3D=3D $p} then {
		    $p
		}
	    }
	}
	<span class=3D"hljs-keyword">if</span> {$status} then {
	    log_message <span class=3D"hljs-string">"Special Bytes successfully wr=
itten"</span>
	    actionsLog_message <span class=3D"hljs-string">"Special Bytes successf=
ully written"</span>
	}
	<span class=3D"hljs-keyword">break</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> restore=
SSB</span> {ssb} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> flipStates
    <span class=3D"hljs-keyword">if</span> {[checkSecurityLevel] =3D=3D <sp=
an class=3D"hljs-number">0</span>} then {
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">if</span> {[winfo exists .main.f_device.f_=
bsb_sbv.f_sbv.e_sbv]} then {
	<span class=3D"hljs-keyword">set</span> eSBV .main.f_device.f_bsb_sbv.f_sb=
v.e_sbv
    }
    <span class=3D"hljs-keyword">if</span> {[winfo exists .main.f_device.f_=
bsb_sbv.f_bsb.e_bsb]} then {
	<span class=3D"hljs-keyword">set</span> eBSB .main.f_device.f_bsb_sbv.f_bs=
b.e_bsb
    }
    <span class=3D"hljs-keyword">if</span> {[winfo exists .main.f_device.f_=
bsb_sbv.f_bsb.e_eb]} then {
	<span class=3D"hljs-keyword">set</span> eEB .main.f_device.f_bsb_sbv.f_bsb=
.e_eb
    }
    <span class=3D"hljs-keyword">if</span> {[winfo exists .main.f_device.f_=
sbvbsb.f_bsb.b_erase]} then {
	<span class=3D"hljs-keyword">set</span> bErase .main.f_device.f_sbvbsb.f_b=
sb.b_erase
    }
    <span class=3D"hljs-keyword">foreach</span> i {<span class=3D"hljs-numb=
er">0</span> <span class=3D"hljs-number">1</span> <span class=3D"hljs-numbe=
r">2</span>} {
	<span class=3D"hljs-keyword">set</span> wdgt .main.f_device.f_ssb.f_level$=
i.b_level$i
	<span class=3D"hljs-keyword">if</span> {[winfo exists $wdgt]} then {
	    <span class=3D"hljs-keyword">set</span> bLevel$i $wdgt
	}
    }
    <span class=3D"hljs-keyword">foreach</span> i {<span class=3D"hljs-numb=
er">0</span> <span class=3D"hljs-number">1</span> <span class=3D"hljs-numbe=
r">2</span>} {
	<span class=3D"hljs-keyword">set</span> wdgt .main.f_device.f_ssb.f_level.=
b_level$i
	<span class=3D"hljs-keyword">if</span> {[winfo exists $wdgt]} then {
	    <span class=3D"hljs-keyword">set</span> bLevel$i $wdgt
	}
    }
    <span class=3D"hljs-keyword">if</span> {[winfo exists .main.f_device.f_=
buttons.b_update]} then {
	<span class=3D"hljs-keyword">set</span> bUpdate .main.f_device.f_buttons.b=
_update
    }
    <span class=3D"hljs-keyword">if</span> {[winfo exists .main.f_device.f_=
buttons.b_write]} then {
	<span class=3D"hljs-keyword">set</span> bWrite .main.f_device.f_buttons.b_=
write
    }
    <span class=3D"hljs-keyword">if</span> {[winfo exists .main.f_device.f_=
fuses]} then {
	<span class=3D"hljs-keyword">if</span> {[winfo exists .main.f_device.f_fus=
es.b_osc]} then {
	    <span class=3D"hljs-keyword">set</span> bOsc .main.f_device.f_fuses.b_=
osc
	}
	<span class=3D"hljs-keyword">if</span> {[winfo exists .main.f_device.f_fus=
es.b_bljb]} then {
	    <span class=3D"hljs-keyword">set</span> bBLJB .main.f_device.f_fuses.b=
_bljb
	}
	<span class=3D"hljs-keyword">if</span> {[winfo exists .main.f_device.f_fus=
es.b_x2]} then {
	    <span class=3D"hljs-keyword">set</span> bX2 .main.f_device.f_fuses.b_x=
2
	}
    }
    <span class=3D"hljs-keyword">set</span> buttonList [<span class=3D"hljs=
-keyword">list</span>]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists bErase]} then {
	<span class=3D"hljs-keyword">lappend</span> buttonList $bErase
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists bLevel0]} then {
	<span class=3D"hljs-keyword">lappend</span> buttonList $bLevel0
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists bLevel1]} then {
	<span class=3D"hljs-keyword">lappend</span> buttonList $bLevel1
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists bLevel2]} then {
	<span class=3D"hljs-keyword">lappend</span> buttonList $bLevel2
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists bUpdate]} then {
	<span class=3D"hljs-keyword">lappend</span> buttonList $bUpdate
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists bWrite]} then {
	<span class=3D"hljs-keyword">lappend</span> buttonList $bWrite
    }
    <span class=3D"hljs-keyword">set</span> entryList [<span class=3D"hljs-=
keyword">list</span>]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists eSBV]} then {
	<span class=3D"hljs-keyword">lappend</span> entryList $eSBV
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists eBSB]} then {
	<span class=3D"hljs-keyword">lappend</span> entryList $eBSB
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists eEB]} then {
	<span class=3D"hljs-keyword">lappend</span> entryList $eEB
    }
    <span class=3D"hljs-keyword">set</span> fuseList [<span class=3D"hljs-k=
eyword">list</span>]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists bOsc]} then {
	<span class=3D"hljs-keyword">lappend</span> fuseList $bOsc
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists bBLJB]} then {
	<span class=3D"hljs-keyword">lappend</span> fuseList $bBLJB
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists bX2]} then {
	<span class=3D"hljs-keyword">lappend</span> fuseList $bX2
    }
    <span class=3D"hljs-keyword">if</span> {$::deviceArray(level) =3D=3D <s=
pan class=3D"hljs-number">0</span>} then {
	<span class=3D"hljs-keyword">foreach</span> entry $entryList {
	    <span class=3D"hljs-keyword">if</span> {[winfo exists $entry]} then {
		$entry configure -takefocus <span class=3D"hljs-number">1</span> -state n=
ormal
	    }
	}
	<span class=3D"hljs-keyword">foreach</span> button $buttonList {
	    <span class=3D"hljs-keyword">if</span> {[winfo exists $button]} then {
		$button configure -state normal
	    }
	}
	<span class=3D"hljs-keyword">foreach</span> fuse $fuseList {
	    <span class=3D"hljs-keyword">if</span> {[winfo exists $fuse]} then {
		$fuse configure -state normal
	    }
	}
    } elseif {$::deviceArray(level) =3D=3D <span class=3D"hljs-number">1</s=
pan>} {
	<span class=3D"hljs-keyword">if</span> {([<span class=3D"hljs-keyword">inf=
o</span> exists eSBV]) &amp;&amp;([winfo exists $eSBV])} then {
	    $eSBV configure -takefocus <span class=3D"hljs-number">0</span> -state=
 disabled
	}
	<span class=3D"hljs-keyword">if</span> {([<span class=3D"hljs-keyword">inf=
o</span> exists eBSB]) &amp;&amp;([winfo exists $eBSB])} then {
	    $eBSB configure -takefocus <span class=3D"hljs-number">0</span> -state=
 disabled
	}
	<span class=3D"hljs-keyword">if</span> {([<span class=3D"hljs-keyword">inf=
o</span> exists eHSB]) &amp;&amp;([winfo exists $eHSB])} then {
	    $eHSB configure -takefocus <span class=3D"hljs-number">0</span> -state=
 disabled
	}
	<span class=3D"hljs-keyword">if</span> {([<span class=3D"hljs-keyword">inf=
o</span> exists eEB]) &amp;&amp;([winfo exists $eEB])} then {
	    $eEB configure -takefocus <span class=3D"hljs-number">0</span> -state =
disabled
	}
	<span class=3D"hljs-keyword">if</span> {([<span class=3D"hljs-keyword">inf=
o</span> exists bErase]) &amp;&amp;([winfo exists $bErase])} then {
	    $bErase configure -state disabled
	}
	<span class=3D"hljs-keyword">if</span> {([<span class=3D"hljs-keyword">inf=
o</span> exists bLevel0]) &amp;&amp;([winfo exists $bLevel0])} then {
	    $bLevel0 configure -state disabled
	}
	<span class=3D"hljs-keyword">if</span> {([<span class=3D"hljs-keyword">inf=
o</span> exists bLevel1]) &amp;&amp;([winfo exists $bLevel1])} then {
	    $bLevel1 configure -state normal
	}
	<span class=3D"hljs-keyword">if</span> {([<span class=3D"hljs-keyword">inf=
o</span> exists bLevel2]) &amp;&amp;([winfo exists $bLevel2])} then {
	    $bLevel2 configure -state normal
	}
	<span class=3D"hljs-keyword">if</span> {([<span class=3D"hljs-keyword">inf=
o</span> exists bUpdate]) &amp;&amp;([winfo exists $bUpdate])} then {
	    $bUpdate configure -state normal
	}
	<span class=3D"hljs-keyword">if</span> {([<span class=3D"hljs-keyword">inf=
o</span> exists bWrite]) &amp;&amp;([winfo exists $bWrite])} then {
	    $bWrite configure -state normal
	}
	<span class=3D"hljs-keyword">foreach</span> fuse $fuseList {
	    <span class=3D"hljs-keyword">if</span> {[winfo exists $fuse]} then {
		$fuse configure -state disabled
	    }
	}
    } elseif {$::deviceArray(level) =3D=3D <span class=3D"hljs-number">2</s=
pan>} {
	<span class=3D"hljs-keyword">foreach</span> entry $entryList {
	    <span class=3D"hljs-keyword">if</span> {[winfo exists $entry]} then {
		$entry configure -takefocus <span class=3D"hljs-number">0</span> -state d=
isabled
	    }
	}
	<span class=3D"hljs-keyword">foreach</span> button $buttonList {
	    <span class=3D"hljs-keyword">if</span> {[winfo exists $button]} then {
		$button configure -state disabled
	    }
	}
	<span class=3D"hljs-keyword">foreach</span> fuse $fuseList {
	    <span class=3D"hljs-keyword">if</span> {[winfo exists $fuse]} then {
		$fuse configure -state disabled
	    }
	}
	<span class=3D"hljs-keyword">if</span> {[winfo exists $bLevel2]} then {
	    $bLevel2 configure -state normal
	}
    } else {
	<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-string=
">"Invalid security level value."</span>
	messageBox <span class=3D"hljs-string">"Device Information"</span> <span c=
lass=3D"hljs-keyword">error</span> $message
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">if</span> {$::deviceArray(ssb) =3D=3D <spa=
n class=3D"hljs-string">"XX"</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(level) X
	<span class=3D"hljs-keyword">if</span> {[winfo exists $bLevel2]} then {
	    $bLevel2 configure -state disabled
	}
    }
    <span class=3D"hljs-keyword">if</span> {([<span class=3D"hljs-keyword">=
info</span> exists flipStates(rs232Comm)]) &amp;&amp;([<span class=3D"hljs-=
keyword">info</span> exists eEB])} then {
	<span class=3D"hljs-keyword">if</span> {$flipStates(rs232Comm) =3D=3D <spa=
n class=3D"hljs-string">"on"</span>} then {
	    $eEB configure -state disabled
	}
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">update</span>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> flowBut=
tonsList</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> flowButtons
    <span class=3D"hljs-keyword">set</span> buttonsList [<span class=3D"hlj=
s-keyword">list</span>]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists $flowButtons(bErase)]} then {
	<span class=3D"hljs-keyword">lappend</span> buttonsList $flowButtons(bEras=
e)
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists $flowButtons(bBlankCheck)]} then {
	<span class=3D"hljs-keyword">lappend</span> buttonsList $flowButtons(bBlan=
kCheck)
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists $flowButtons(bProgram)]} then {
	<span class=3D"hljs-keyword">lappend</span> buttonsList $flowButtons(bProg=
ram)
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists $flowButtons(bVerify)]} then {
	<span class=3D"hljs-keyword">lappend</span> buttonsList $flowButtons(bVeri=
fy)
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists $flowButtons(bSpecialBytes)]} then {
	<span class=3D"hljs-keyword">lappend</span> buttonsList $flowButtons(bSpec=
ialBytes)
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $buttonsList
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> setBoot=
lVerDepFeatures</span> {ptcl minorPatch} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> bootloaderVerDependent proto=
col
    <span class=3D"hljs-keyword">if</span> {$ptcl =3D=3D <span class=3D"hlj=
s-string">"RS232_STANDARD"</span>} then {
	<span class=3D"hljs-keyword">set</span> p <span class=3D"hljs-string">"boo=
tlVer"</span>
	<span class=3D"hljs-keyword">if</span> {($::deviceArray(name) =3D=3D <span=
 class=3D"hljs-string">"T89C51CC01"</span>) ||($::deviceArray(name) =3D=3D =
<span class=3D"hljs-string">"T89C51CC02"</span>)} then {
	    <span class=3D"hljs-keyword">set</span> MINORPATCH <span class=3D"hljs=
-number">0x12</span>
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
expr</span> <span class=3D"hljs-number">0</span>x$minorPatch &lt;=3D $MINOR=
PATCH]} then {
<span class=3D"hljs-comment">		#dbgShowInfo "Device is CC01 or CC02 and blV=
ersion &lt;=3D 12"</span>
		<span class=3D"hljs-keyword">set</span> bootloaderVerDependent(eeprom) <s=
pan class=3D"hljs-number">0</span>
		<span class=3D"hljs-keyword">set</span> bootloaderVerDependent(eb) <span =
class=3D"hljs-number">0</span>
		<span class=3D"hljs-keyword">set</span> bootloaderVerDependent(startAppli=
) <span class=3D"hljs-number">0</span>
		<span class=3D"hljs-keyword">set</span> protocol(frameLengthW) <span clas=
s=3D"hljs-number">16</span>
		<span class=3D"hljs-keyword">set</span> protocol(frameLengthR) <span clas=
s=3D"hljs-number">16</span>
	    } else {
<span class=3D"hljs-comment">		#dbgShowInfo "Device is CC01 or CC02 and blV=
ersion &gt; 12"</span>
		<span class=3D"hljs-keyword">set</span> bootloaderVerDependent(eeprom) <s=
pan class=3D"hljs-number">1</span>
		<span class=3D"hljs-keyword">set</span> bootloaderVerDependent(eb) <span =
class=3D"hljs-number">1</span>
		<span class=3D"hljs-keyword">set</span> bootloaderVerDependent(startAppli=
) <span class=3D"hljs-number">1</span>
		<span class=3D"hljs-keyword">set</span> protocol(frameLengthW) <span clas=
s=3D"hljs-number">128</span>
		<span class=3D"hljs-keyword">set</span> protocol(frameLengthR) <span clas=
s=3D"hljs-number">16</span>
	    }
	}
	<span class=3D"hljs-keyword">if</span> {$::deviceArray(name) =3D=3D <span =
class=3D"hljs-string">"T89C51AC2"</span>} then {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
expr</span> <span class=3D"hljs-number">0</span>x$minorPatch &lt;=3D <span =
class=3D"hljs-number">0x12</span>]} then {
		<span class=3D"hljs-keyword">set</span> bootloaderVerDependent(eeprom) <s=
pan class=3D"hljs-number">0</span>
		<span class=3D"hljs-keyword">set</span> bootloaderVerDependent(eb) <span =
class=3D"hljs-number">0</span>
		<span class=3D"hljs-keyword">set</span> bootloaderVerDependent(startAppli=
) <span class=3D"hljs-number">0</span>
		<span class=3D"hljs-keyword">set</span> protocol(frameLengthW) <span clas=
s=3D"hljs-number">16</span>
		<span class=3D"hljs-keyword">set</span> protocol(frameLengthR) <span clas=
s=3D"hljs-number">16</span>
	    } elseif {([<span class=3D"hljs-keyword">expr</span> <span class=3D"hl=
js-number">0</span>x$minorPatch &gt; <span class=3D"hljs-number">0x12</span=
>]) &amp;&amp;([<span class=3D"hljs-keyword">expr</span> <span class=3D"hlj=
s-number">0</span>x$minorPatch &lt;=3D <span class=3D"hljs-number">0x40</sp=
an>])} {
		<span class=3D"hljs-keyword">set</span> bootloaderVerDependent(eeprom) <s=
pan class=3D"hljs-number">1</span>
		<span class=3D"hljs-keyword">set</span> bootloaderVerDependent(eb) <span =
class=3D"hljs-number">1</span>
		<span class=3D"hljs-keyword">set</span> bootloaderVerDependent(startAppli=
) <span class=3D"hljs-number">1</span>
		<span class=3D"hljs-keyword">set</span> protocol(frameLengthW) <span clas=
s=3D"hljs-number">128</span>
		<span class=3D"hljs-keyword">set</span> protocol(frameLengthR) <span clas=
s=3D"hljs-number">16</span>
		<span class=3D"hljs-keyword">set</span> ::deviceArray(memoryList) [<span =
class=3D"hljs-keyword">list</span> FLASH EEPROM]
	    } elseif {[<span class=3D"hljs-keyword">expr</span> <span class=3D"hlj=
s-number">0</span>x$minorPatch &gt; <span class=3D"hljs-number">0x40</span>=
]} {
		<span class=3D"hljs-keyword">set</span> bootloaderVerDependent(eeprom) <s=
pan class=3D"hljs-number">1</span>
		<span class=3D"hljs-keyword">set</span> bootloaderVerDependent(eb) <span =
class=3D"hljs-number">1</span>
		<span class=3D"hljs-keyword">set</span> bootloaderVerDependent(startAppli=
) <span class=3D"hljs-number">1</span>
		<span class=3D"hljs-keyword">set</span> protocol(frameLengthW) <span clas=
s=3D"hljs-number">128</span>
		<span class=3D"hljs-keyword">set</span> protocol(frameLengthR) <span clas=
s=3D"hljs-number">16</span>
		<span class=3D"hljs-keyword">set</span> ::deviceArray(memoryList) [<span =
class=3D"hljs-keyword">list</span> FLASH EEPROM CUSTOM]
	    }
	}
	<span class=3D"hljs-keyword">if</span> {($::deviceArray(name) =3D=3D <span=
 class=3D"hljs-string">"T89C51RC2"</span>) ||($::deviceArray(name) =3D=3D <=
span class=3D"hljs-string">"T89C51RB2"</span>) ||($::deviceArray(name) =3D=
=3D <span class=3D"hljs-string">"T89C51IC2"</span>) ||($::deviceArray(name)=
 =3D=3D <span class=3D"hljs-string">"AT89C51RC2"</span>) ||($::deviceArray(=
name) =3D=3D <span class=3D"hljs-string">"AT89C51RB2"</span>) ||($::deviceA=
rray(name) =3D=3D <span class=3D"hljs-string">"AT89C51IC2"</span>)} then {
	    <span class=3D"hljs-keyword">set</span> MINORPATCH <span class=3D"hljs=
-number">0x11</span>
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
expr</span> <span class=3D"hljs-number">0</span>x$minorPatch &gt; $MINORPAT=
CH]} then {
		<span class=3D"hljs-keyword">set</span> protocol(frameLengthW) <span clas=
s=3D"hljs-number">128</span>
	    } else {
		<span class=3D"hljs-keyword">set</span> protocol(frameLengthW) <span clas=
s=3D"hljs-number">16</span>
	    }
	}
	<span class=3D"hljs-keyword">if</span> {! [<span class=3D"hljs-keyword">in=
fo</span> exists bootloaderVerDependent(p1p3p4_config)]} then {
	    <span class=3D"hljs-keyword">set</span> bootloaderVerDependent(p1p3p4_=
config) <span class=3D"hljs-number">0</span>
	}
	<span class=3D"hljs-keyword">if</span> {$::deviceArray(name) =3D=3D <span =
class=3D"hljs-string">"T89C51CC02"</span>} then {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
expr</span> <span class=3D"hljs-number">0</span>x$minorPatch &lt;=3D <span =
class=3D"hljs-number">0x11</span>]} then {
		<span class=3D"hljs-keyword">set</span> bootloaderVerDependent(p1p3p4_con=
fig) <span class=3D"hljs-number">0</span>
	    } else {
		<span class=3D"hljs-keyword">set</span> bootloaderVerDependent(p1p3p4_con=
fig) <span class=3D"hljs-number">1</span>
	    }
	}
	<span class=3D"hljs-keyword">set</span> c1 [<span class=3D"hljs-keyword">s=
tring</span> index $minorPatch end<span class=3D"hljs-number">-1</span>]
	<span class=3D"hljs-keyword">set</span> c2 [<span class=3D"hljs-keyword">s=
tring</span> index $minorPatch end]
	<span class=3D"hljs-keyword">if</span> {($::deviceArray(name) =3D=3D <span=
 class=3D"hljs-string">"T89C51RD2"</span>)} then {
	    <span class=3D"hljs-keyword">set</span> ::deviceArray($p) <span class=
=3D"hljs-string">"$c1.$c2"</span>
	    <span class=3D"hljs-keyword">set</span> bootloaderVerDependent(eb) <sp=
an class=3D"hljs-number">0</span>
	} else {
	    <span class=3D"hljs-keyword">set</span> ::deviceArray($p) <span class=
=3D"hljs-string">"1.$c1.$c2"</span>
	}
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($p) =3D $::deviceA=
rray($p)"</span>
    } elseif {$ptcl =3D=3D <span class=3D"hljs-string">"CAN"</span>} {
	<span class=3D"hljs-keyword">if</span> {$::deviceArray(name) =3D=3D <span =
class=3D"hljs-string">"T89C51CC02"</span>} then {
	    <span class=3D"hljs-keyword">set</span> bootloaderVerDependent(p1p3p4_=
config) <span class=3D"hljs-number">1</span>
	}
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> storeAn=
dDisplayCRC</span> {loc} {
    <span class=3D"hljs-keyword">set</span> ::deviceArray(crc) [storeCRCinB=
uffer $loc]
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> storeCR=
CinBuffer</span> {loc} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> temp buffer
    cmdsImportCurrentMemoryNameSpace [<span class=3D"hljs-keyword">lindex</=
span> $::deviceArray(memoryList) <span class=3D"hljs-number">0</span>]
    <span class=3D"hljs-keyword">set</span> crc [computeWholeBufferCRC_C $l=
oc [<span class=3D"hljs-keyword">format</span> %<span class=3D"hljs-number"=
>06</span>X [<span class=3D"hljs-keyword">expr</span> <span class=3D"hljs-n=
umber">0</span>X$loc + <span class=3D"hljs-number">1</span>]] [<span class=
=3D"hljs-keyword">format</span> %<span class=3D"hljs-number">06</span>X [<s=
pan class=3D"hljs-keyword">expr</span> <span class=3D"hljs-number">0</span>=
X$loc + <span class=3D"hljs-number">2</span>]]]
    <span class=3D"hljs-keyword">set</span> crc [<span class=3D"hljs-keywor=
d">expr</span> $crc &amp; <span class=3D"hljs-number">0XFFFF</span>]
    <span class=3D"hljs-keyword">set</span> crcHex [<span class=3D"hljs-key=
word">format</span> %<span class=3D"hljs-number">04</span>X $crc]
<span class=3D"hljs-comment">    #dbgShowVar "crcHex =3D $crcHex"</span>
    <span class=3D"hljs-keyword">set</span> addr1 [<span class=3D"hljs-keyw=
ord">format</span> %<span class=3D"hljs-number">06</span>X [<span class=3D"=
hljs-keyword">expr</span> [readDeviceArray memorySize] * <span class=3D"hlj=
s-number">1024</span> - <span class=3D"hljs-number">2</span>]]
    <span class=3D"hljs-keyword">set</span> data1 [<span class=3D"hljs-keyw=
ord">string</span> range $crcHex <span class=3D"hljs-number">2</span> <span=
 class=3D"hljs-number">3</span>]
<span class=3D"hljs-comment">    #dbgShowInfo "Writing $data1 to $addr1"</s=
pan>
    writeBuffer [<span class=3D"hljs-keyword">format</span> %<span class=3D=
"hljs-number">06</span>X [<span class=3D"hljs-keyword">expr</span> [readDev=
iceArray memorySize] * <span class=3D"hljs-number">1024</span> - <span clas=
s=3D"hljs-number">2</span>]] [<span class=3D"hljs-keyword">string</span> ra=
nge $crcHex <span class=3D"hljs-number">2</span> <span class=3D"hljs-number=
">3</span>]
    <span class=3D"hljs-keyword">set</span> addr2 [<span class=3D"hljs-keyw=
ord">format</span> %<span class=3D"hljs-number">06</span>X [<span class=3D"=
hljs-keyword">expr</span> [readDeviceArray memorySize] * <span class=3D"hlj=
s-number">1024</span> - <span class=3D"hljs-number">1</span>]]
    <span class=3D"hljs-keyword">set</span> data2 [<span class=3D"hljs-keyw=
ord">string</span> range $crcHex <span class=3D"hljs-number">0</span> <span=
 class=3D"hljs-number">1</span>]
<span class=3D"hljs-comment">    #dbgShowInfo "Writing $data2 to $addr2"</s=
pan>
    writeBuffer [<span class=3D"hljs-keyword">format</span> %<span class=3D=
"hljs-number">06</span>X [<span class=3D"hljs-keyword">expr</span> [readDev=
iceArray memorySize] * <span class=3D"hljs-number">1024</span> - <span clas=
s=3D"hljs-number">1</span>]] [<span class=3D"hljs-keyword">string</span> ra=
nge $crcHex <span class=3D"hljs-number">0</span> <span class=3D"hljs-number=
">1</span>]
    updateBufferWidget <span class=3D"hljs-number">0.0</span>
    <span class=3D"hljs-keyword">update</span> idletasks
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> ${data2}${data1}
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> readBoo=
tloaderCrcCheck</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> buffer waitTime
<span class=3D"hljs-comment">    #dbgShowVar "RxBuffer =3D $::sio::sioVars(=
RxBuffer)"</span>
    <span class=3D"hljs-keyword">set</span> crcCheck [<span class=3D"hljs-k=
eyword">string</span> index $::sio::sioVars(RxBuffer) end<span class=3D"hlj=
s-number">-2</span>]
<span class=3D"hljs-comment">    #dbgShowVar "crcCheck =3D $crcCheck"</span=
>
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">if</span> {$crcCheck =3D=3D <span class=3D=
"hljs-string">"Z"</span>} then {
	log_message <span class=3D"hljs-string">"Bootloader CRC check FAIL."</span=
>
	<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-string=
">"CRC error."</span>
	messageBox <span class=3D"hljs-string">"Bootloader CRC test"</span> <span =
class=3D"hljs-keyword">error</span> $message
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    } elseif {$crcCheck =3D=3D <span class=3D"hljs-string">"Y"</span>} {
	log_message <span class=3D"hljs-string">"Bootloader CRC check PASS."</span=
>
    } else {
	log_message <span class=3D"hljs-string">"No CRC check status received."</s=
pan>
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-comment">#dbgEndSrc [info script]</span>
<span class=3D"hljs-keyword">global</span> libDir projDir tclTestDir device=
FilesList version flipStates working_active tcl_platform exeDir
<span class=3D"hljs-keyword">set</span> DISK H:
<span class=3D"hljs-keyword">set</span> tclTestDir $DISK/tcl/lib/tcl8<span =
class=3D"hljs-number">.3</span>/tcltest1<span class=3D"hljs-number">.0</spa=
n>
<span class=3D"hljs-comment">#set DISK /mnt/win_data</span>
<span class=3D"hljs-comment">#set tclTestDir /usr/lib/tcl8.3/tcltest1.0</sp=
an>
<span class=3D"hljs-keyword">set</span> exeDir [<span class=3D"hljs-keyword=
">file</span> dirname [<span class=3D"hljs-keyword">info</span> script]]
<span class=3D"hljs-keyword">set</span> libDir $DISK/labo/dev/lib/common/tc=
l
<span class=3D"hljs-keyword">set</span> projDir $DISK/labo/dev/app/flip_dev
<span class=3D"hljs-keyword">set</span> version <span class=3D"hljs-string"=
>"1.8.9"</span>
<span class=3D"hljs-keyword">source</span> $libDir/dbglog.tcl
<span class=3D"hljs-keyword">source</span> $libDir/sio.tcl
<span class=3D"hljs-keyword">source</span> $libDir/splash.tcl
<span class=3D"hljs-keyword">source</span> $libDir/libtcl.tcl
<span class=3D"hljs-keyword">source</span> $libDir/libtk.tcl
<span class=3D"hljs-keyword">source</span> $libDir/about.tcl
<span class=3D"hljs-keyword">source</span> $libDir/progressbar.tcl
<span class=3D"hljs-keyword">source</span> $libDir/htmlview.tcl
<span class=3D"hljs-keyword">source</span> $libDir/rnotebook.tcl
<span class=3D"hljs-keyword">source</span> $libDir/balloon.tcl
<span class=3D"hljs-keyword">source</span> $projDir/tcl/flipgui1.tcl
<span class=3D"hljs-keyword">source</span> $projDir/tcl/flipgui2.tcl
<span class=3D"hljs-keyword">source</span> $projDir/tcl/buffer.tcl
<span class=3D"hljs-keyword">source</span> $projDir/tcl/buffergui.tcl
<span class=3D"hljs-keyword">source</span> $projDir/tcl/commands.tcl
<span class=3D"hljs-keyword">source</span> $projDir/tcl/protocol.tcl
<span class=3D"hljs-keyword">source</span> $projDir/tcl/updategui.tcl
<span class=3D"hljs-keyword">source</span> $projDir/tcl/toolbar.tcl
<span class=3D"hljs-keyword">package</span> require splash
<span class=3D"hljs-keyword">package</span> require sio
<span class=3D"hljs-keyword">namespace</span> import ::sio::*
<span class=3D"hljs-keyword">namespace</span> import ::libtcl::*
<span class=3D"hljs-keyword">namespace</span> import ::libtk::*
<span class=3D"hljs-keyword">namespace</span> import ::about::*
<span class=3D"hljs-keyword">namespace</span> import ::#dbglog::*
<span class=3D"hljs-keyword">namespace</span> import ::htmlview::*
<span class=3D"hljs-keyword">namespace</span> import ::balloon::*
<span class=3D"hljs-keyword">set</span> deviceFilesList [<span class=3D"hlj=
s-keyword">lsort</span> [<span class=3D"hljs-keyword">list</span> T89C51RD2=
.tcl T89C51RB2.tcl T89C51RC2.tcl T89C51IC2.tcl T89C51CC01.tcl T89C51CC02.tc=
l AT89C5115.tcl T89C51AC2.tcl T8XC5121.tcl AT89C51SND1.tcl AT8XC5122.tcl AT=
89C5131.tcl AT89C5132.tcl AT89C51ED2.tcl AT89C51ID2.tcl AT89C51RB2.tcl AT89=
C51RC2.tcl AT89C51RD2.tcl AT89C51IC2.tcl AT89C51CC03.tcl]]
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> addDevi=
ces</span> {} {
    <span class=3D"hljs-keyword">global</span> deviceFilesList
    <span class=3D"hljs-keyword">set</span> deviceFilesList [<span class=3D=
"hljs-keyword">lsort</span> [<span class=3D"hljs-keyword">list</span> T89C5=
1RD2.tcl T89C51RB2.tcl T89C51IB2.tcl T89C51RC2.tcl T89C51IC2.tcl T89C51CC01=
.tcl T89C51CC02.tcl AT89C5115.tcl T89C51AC2.tcl T8XC5121.tcl AT89C51SND1.tc=
l AT8XC5122.tcl AT89C5131.tcl AT89C5132.tcl AT89C51ED2.tcl AT89C51ID2.tcl A=
T89C51RB2.tcl AT89C51RC2.tcl AT89C51RD2.tcl AT89C51IC2.tcl AT89C51CC03.tcl]=
]
    cmdsBuildDeviceList $deviceFilesList
    <span class=3D"hljs-keyword">catch</span> [destroy .deviceSelectDbox]
    drawDeviceSelectDbox
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> addLu20=
00Device</span> {} {
    <span class=3D"hljs-keyword">global</span> deviceFilesList
    <span class=3D"hljs-keyword">set</span> deviceFilesList [<span class=3D=
"hljs-keyword">lsort</span> [<span class=3D"hljs-keyword">list</span> LU200=
0.tcl]]
    cmdsBuildDeviceList $deviceFilesList
    <span class=3D"hljs-keyword">catch</span> [destroy .deviceSelectDbox]
    drawDeviceSelectDbox
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">source</span> $tclTestDir/<span class=3D"hljs-=
keyword">tcltest</span>.tcl
<span class=3D"hljs-keyword">package</span> require <span class=3D"hljs-key=
word">tcltest</span>
<span class=3D"hljs-keyword">namespace</span> import ::<span class=3D"hljs-=
keyword">tcltest</span>::*
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> main</s=
pan> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> flipStates flipFont
    font create serif8 -family fixed -size <span class=3D"hljs-number">8</s=
pan>
    font create helvetf8 -family Helvetica -size <span class=3D"hljs-number=
">8</span>
    font create courierb -family Courier -size <span class=3D"hljs-number">=
10</span> -weight bold
    font create courier -family Courier -size <span class=3D"hljs-number">8=
</span>
    label .dummy -text hi
    <span class=3D"hljs-keyword">set</span> flipFont [.dummy cget -font]
    destroy .dummy
<span class=3D"hljs-comment">    #dbgCtrl on</span>
<span class=3D"hljs-comment">    #dbgShowInfo "Script =3D [info script]"</s=
pan>
<span class=3D"hljs-comment">    #dbgShowInfo "Script =3D [file dirname [in=
fo script]]"</span>
<span class=3D"hljs-comment">    #dbgShowInfo "Script =3D [file rootname [i=
nfo script]]"</span>
    init
    createWindows
    <span class=3D"hljs-keyword">after</span> <span class=3D"hljs-number">2=
00</span>
    ::splash::updateSplash <span class=3D"hljs-string">"Done."</span>
    ::splash::removeSplash
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> init</s=
pan> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> initialDir flipStates buffer=
 baudList canBaudList
    <span class=3D"hljs-keyword">global</span> nAddrBits testArray blankChe=
ckAddr projDir waitTime
    <span class=3D"hljs-keyword">global</span> canProtocol canAcc txQueue r=
xQueue rxQAcc
    <span class=3D"hljs-keyword">global</span> protcl env loadConfig workin=
gDir doTestArray errCode working_active gui color bootloaderVerDependent pr=
ogBar vector serialize
    <span class=3D"hljs-keyword">set</span> vector(slot) <span class=3D"hlj=
s-number">0</span>
    <span class=3D"hljs-keyword">set</span> vector(channel) <span class=3D"=
hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> vector(cancardx) <span class=3D=
"hljs-number">2</span>
<span class=3D"hljs-comment">    # Found in Vector header file.</span>
    <span class=3D"hljs-keyword">set</span> vector(canpari) <span class=3D"=
hljs-number">3</span>
<span class=3D"hljs-comment">    # Found in Vector header file.</span>
    <span class=3D"hljs-keyword">set</span> vector(canac2) <span class=3D"h=
ljs-number">5</span>
<span class=3D"hljs-comment">    # Found in Vector header file.</span>
    <span class=3D"hljs-keyword">set</span> buffer(movecopy) move
    <span class=3D"hljs-keyword">set</span> progBar(cancel) <span class=3D"=
hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> bootloaderVerDependent(version)=
 <span class=3D"hljs-string">"XX"</span>
    <span class=3D"hljs-keyword">set</span> bootloaderVerDependent(eeprom) =
<span class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> bootloaderVerDependent(eb) <spa=
n class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> bootloaderVerDependent(startApp=
li) <span class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> bootloaderVerDependent(p1p3p4_c=
onfig) <span class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> working_active <span class=3D"h=
ljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> flipStates(bufferInInitialState=
) <span class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> flipStates(readBlockSize) <span=
 class=3D"hljs-number">0x400</span>
    <span class=3D"hljs-keyword">set</span> flipStates(connectOnlyRS232) <s=
pan class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> flipStates(withReset) <span cla=
ss=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> flipStates(mssgBox) <span class=
=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> flipStates(simul) <span class=
=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> flipStates(searchFormat) ascii
    <span class=3D"hljs-keyword">set</span> loadConfig(port) <span class=3D=
"hljs-string">""</span>
    <span class=3D"hljs-keyword">set</span> loadConfig(baud) <span class=3D=
"hljs-string">""</span>
    <span class=3D"hljs-keyword">set</span> loadConfig(initComm) <span clas=
s=3D"hljs-string">""</span>
    <span class=3D"hljs-keyword">set</span> loadConfig(parseHex) <span clas=
s=3D"hljs-string">""</span>
    <span class=3D"hljs-keyword">set</span> loadConfig(fullChipErase) <span=
 class=3D"hljs-string">""</span>
    <span class=3D"hljs-keyword">set</span> loadConfig(eraseBlock0) <span c=
lass=3D"hljs-string">""</span>
    <span class=3D"hljs-keyword">set</span> loadConfig(eraseBlock1) <span c=
lass=3D"hljs-string">""</span>
    <span class=3D"hljs-keyword">set</span> loadConfig(eraseBlock2) <span c=
lass=3D"hljs-string">""</span>
    <span class=3D"hljs-keyword">set</span> loadConfig(eraseBlock3) <span c=
lass=3D"hljs-string">""</span>
    <span class=3D"hljs-keyword">set</span> loadConfig(eraseBlock4) <span c=
lass=3D"hljs-string">""</span>
    <span class=3D"hljs-keyword">set</span> loadConfig(blankCheck) <span cl=
ass=3D"hljs-string">""</span>
    <span class=3D"hljs-keyword">set</span> loadConfig(blankCheckStart) <sp=
an class=3D"hljs-string">""</span>
    <span class=3D"hljs-keyword">set</span> loadConfig(blankCheckEnd) <span=
 class=3D"hljs-string">""</span>
    <span class=3D"hljs-keyword">set</span> loadConfig(programDevice) <span=
 class=3D"hljs-string">""</span>
    <span class=3D"hljs-keyword">set</span> loadConfig(verifyDevice) <span =
class=3D"hljs-string">""</span>
    <span class=3D"hljs-keyword">set</span> loadConfig(setSbv) <span class=
=3D"hljs-string">""</span>
    <span class=3D"hljs-keyword">set</span> loadConfig(setBsb) <span class=
=3D"hljs-string">""</span>
    <span class=3D"hljs-keyword">set</span> loadConfig(setSsb) <span class=
=3D"hljs-string">""</span>
    <span class=3D"hljs-keyword">set</span> loadConfig(setOscFuse) <span cl=
ass=3D"hljs-string">""</span>
    <span class=3D"hljs-keyword">set</span> loadConfig(setBljbFuse) <span c=
lass=3D"hljs-string">""</span>
    <span class=3D"hljs-keyword">set</span> loadConfig(setX2Fuse) <span cla=
ss=3D"hljs-string">""</span>
    <span class=3D"hljs-keyword">set</span> initialDir [<span class=3D"hljs=
-keyword">pwd</span>]
    <span class=3D"hljs-keyword">set</span> workingDir [<span class=3D"hljs=
-keyword">pwd</span>]
    <span class=3D"hljs-keyword">set</span> nAddrDigits <span class=3D"hljs=
-number">6</span>
    <span class=3D"hljs-keyword">set</span> baudList [<span class=3D"hljs-k=
eyword">list</span> <span class=3D"hljs-number">115200</span> <span class=
=3D"hljs-number">57600</span> <span class=3D"hljs-number">38400</span> <spa=
n class=3D"hljs-number">19200</span> <span class=3D"hljs-number">9600</span=
> <span class=3D"hljs-number">4800</span> <span class=3D"hljs-number">2400<=
/span> <span class=3D"hljs-number">1200</span>]
    <span class=3D"hljs-keyword">set</span> canBaudList [<span class=3D"hlj=
s-keyword">list</span> <span class=3D"hljs-number">1000</span>k <span class=
=3D"hljs-number">500</span>k <span class=3D"hljs-number">100</span>k]
    <span class=3D"hljs-keyword">set</span> gui(init) <span class=3D"hljs-n=
umber">1</span>
    <span class=3D"hljs-keyword">set</span> gui(erasePossibleBlocks) <span =
class=3D"hljs-string">"disabled"</span>
    <span class=3D"hljs-keyword">set</span> gui(erasePossibleBlock0) <span =
class=3D"hljs-string">"disabled"</span>
    <span class=3D"hljs-keyword">set</span> gui(erasePossibleBlock1) <span =
class=3D"hljs-string">"disabled"</span>
    <span class=3D"hljs-keyword">set</span> gui(erasePossibleBlock2) <span =
class=3D"hljs-string">"disabled"</span>
    <span class=3D"hljs-keyword">set</span> gui(erasePossibleBlock3) <span =
class=3D"hljs-string">"disabled"</span>
    <span class=3D"hljs-keyword">set</span> gui(erasePossibleBlock4) <span =
class=3D"hljs-string">"disabled"</span>
    <span class=3D"hljs-keyword">set</span> gui(sizeType) userDefined
    <span class=3D"hljs-keyword">set</span> gui(uDefSizeValue) <span class=
=3D"hljs-number">64</span>
    <span class=3D"hljs-keyword">set</span> gui(dDepSizeValue) xx
    <span class=3D"hljs-keyword">set</span> gui(sizeValue) $gui(uDefSizeVal=
ue)
    <span class=3D"hljs-keyword">set</span> gui(maxAddr) [<span class=3D"hl=
js-keyword">format</span> <span class=3D"hljs-string">"%06X"</span> [<span =
class=3D"hljs-keyword">expr</span> ($gui(sizeValue) * <span class=3D"hljs-n=
umber">1024</span>) - <span class=3D"hljs-number">1</span>]]
    <span class=3D"hljs-keyword">set</span> gui(blankValueType) userDefined
    <span class=3D"hljs-keyword">set</span> gui(uDefBlankValue) FF
    <span class=3D"hljs-keyword">set</span> gui(dDepBlankValue) xx
    <span class=3D"hljs-keyword">set</span> gui(blankValue) $gui(uDefBlankV=
alue)
    <span class=3D"hljs-keyword">set</span> gui(resetBufferOnLoading) no
    <span class=3D"hljs-keyword">set</span> gui(rangeOnDeviceProg) lastLoad
    <span class=3D"hljs-keyword">set</span> gui(uDefMinProgAddr) <span clas=
s=3D"hljs-number">000000</span>
    <span class=3D"hljs-keyword">set</span> gui(uDefMaxProgAddr) <span clas=
s=3D"hljs-number">00</span>FFFF
    <span class=3D"hljs-keyword">set</span> gui(lastLoadMinProgAddr) <span =
class=3D"hljs-number">000000</span>
    <span class=3D"hljs-keyword">set</span> gui(lastLoadMaxProgAddr) <span =
class=3D"hljs-number">00</span>FFFF
    <span class=3D"hljs-keyword">set</span> gui(minProgAddr) $gui(lastLoadM=
inProgAddr)
    <span class=3D"hljs-keyword">set</span> gui(maxProgAddr) $gui(lastLoadM=
axProgAddr)
    <span class=3D"hljs-keyword">set</span> gui(loadingOffset) <span class=
=3D"hljs-string">"0000"</span>
    <span class=3D"hljs-keyword">set</span> gui(hexFileAddrOffset) <span cl=
ass=3D"hljs-string">"0000"</span>
    <span class=3D"hljs-keyword">set</span> gui(modifyAddress) <span class=
=3D"hljs-string">""</span>
    <span class=3D"hljs-keyword">set</span> gui(modifyData) <span class=3D"=
hljs-string">""</span>
    <span class=3D"hljs-keyword">set</span> gui(numberOfVisibleLines) <span=
 class=3D"hljs-number">24</span>
    <span class=3D"hljs-keyword">set</span> gui(topDisplayedLine) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> gui(bottomDisplayedLine) $gui(n=
umberOfVisibleLines)
    <span class=3D"hljs-keyword">set</span> gui(numberOfLines) [<span class=
=3D"hljs-keyword">expr</span> (<span class=3D"hljs-string">"0x$gui(maxAddr)=
"</span> + <span class=3D"hljs-number">1</span>) / <span class=3D"hljs-numb=
er">16</span>]
    <span class=3D"hljs-keyword">set</span> gui(startFillAddr) $gui(minProg=
Addr)
    <span class=3D"hljs-keyword">set</span> gui(endFillAddr) $gui(maxProgAd=
dr)
    <span class=3D"hljs-keyword">set</span> gui(fillValue) $gui(blankValue)
    <span class=3D"hljs-keyword">set</span> gui(fileLoaded) <span class=3D"=
hljs-string">"no"</span>
    <span class=3D"hljs-keyword">set</span> gui(maxSize) <span class=3D"hlj=
s-number">64</span>
    <span class=3D"hljs-keyword">set</span> gui(infoFormat) <span class=3D"=
hljs-string">"%04X"</span>
    <span class=3D"hljs-keyword">set</span> gui(eraseType) <span class=3D"h=
ljs-string">"full"</span>
    <span class=3D"hljs-keyword">if</span> {! [<span class=3D"hljs-keyword"=
>info</span> exists flipStates(lastloadedCfgFile)]} then {
	<span class=3D"hljs-keyword">set</span> flipStates(lastloadedCfgFile) <spa=
n class=3D"hljs-string">""</span>
    }
    <span class=3D"hljs-keyword">if</span> {$flipStates(lastloadedCfgFile) =
=3D=3D <span class=3D"hljs-string">""</span>} then {
	<span class=3D"hljs-keyword">set</span> gui(flowErase) <span class=3D"hljs=
-number">1</span>
	<span class=3D"hljs-keyword">set</span> gui(flowBlankCheck) <span class=3D=
"hljs-number">1</span>
	<span class=3D"hljs-keyword">set</span> gui(flowProgram) <span class=3D"hl=
js-number">1</span>
	<span class=3D"hljs-keyword">set</span> gui(flowVerify) <span class=3D"hlj=
s-number">1</span>
	<span class=3D"hljs-keyword">set</span> gui(flowStartAppli) <span class=3D=
"hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> gui(flowWithReset) <span class=3D"=
hljs-number">0</span>
    }
    <span class=3D"hljs-keyword">set</span> flipStates(anyComm) off
    <span class=3D"hljs-keyword">set</span> flipStates(rs232Comm) off
    <span class=3D"hljs-keyword">set</span> flipStates(canComm) off
    <span class=3D"hljs-keyword">set</span> flipStates(canNode) <span class=
=3D"hljs-string">"closed"</span>
    <span class=3D"hljs-keyword">set</span> flipStates(usbComm) off
    <span class=3D"hljs-keyword">set</span> flipStates(deviceSelection) dis=
abled
    <span class=3D"hljs-keyword">set</span> flipStates(hexFile) <span class=
=3D"hljs-string">"not loaded"</span>
    <span class=3D"hljs-keyword">set</span> flipStates(hexFileMtime) <span =
class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> flipStates(hexFileName) <span c=
lass=3D"hljs-string">""</span>
    <span class=3D"hljs-keyword">set</span> testArray(nonRegress) <span cla=
ss=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> testArray(protocol) <span class=
=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> testArray(debug) <span class=3D=
"hljs-string">"off"</span>
    <span class=3D"hljs-keyword">set</span> testArray(logFile) <span class=
=3D"hljs-string">"$initialDir/log.txt"</span>
    <span class=3D"hljs-keyword">set</span> doTestArray(xaf) <span class=3D=
"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> doTestArray(flash) <span class=
=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> doTestArray(fuse) <span class=
=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> doTestArray(specific) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> doTestArray(checksum) <span cla=
ss=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> doTestArray(eeprom) <span class=
=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> doTestArray(can) <span class=3D=
"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> blankCheckAddr(start) $gui(minP=
rogAddr)
    <span class=3D"hljs-keyword">set</span> blankCheckAddr(end) $gui(maxPro=
gAddr)
    <span class=3D"hljs-keyword">set</span> ::deviceArray(startReadAddr) <s=
pan class=3D"hljs-string">"000000"</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(endReadAddr) $gui=
(maxAddr)
    <span class=3D"hljs-keyword">set</span> waitTime(standard) <span class=
=3D"hljs-number">3000</span>
    <span class=3D"hljs-keyword">set</span> waitTime(extended) <span class=
=3D"hljs-number">12000</span>
    <span class=3D"hljs-keyword">set</span> protcl <span class=3D"hljs-stri=
ng">"none"</span>
    <span class=3D"hljs-keyword">set</span> bMemorySelect .main.f_buffer.b_=
memSelect
    <span class=3D"hljs-keyword">if</span> {[winfo exists $bMemorySelect]} =
then {
	destroy $bMemorySelect
    }
    <span class=3D"hljs-keyword">if</span> {! [<span class=3D"hljs-keyword"=
>info</span> exists serialize(<span class=3D"hljs-keyword">memory</span>)]}=
 then {
	<span class=3D"hljs-keyword">set</span> serialize(<span class=3D"hljs-keyw=
ord">memory</span>) FLASH
	<span class=3D"hljs-keyword">set</span> serialize(initVal) <span class=3D"=
hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> serialize(nBytes) <span class=3D"h=
ljs-number">1</span>
	<span class=3D"hljs-keyword">set</span> serialize(step) <span class=3D"hlj=
s-number">0</span>
	<span class=3D"hljs-keyword">set</span> serialize(lsbAddr) <span class=3D"=
hljs-number">0x0000</span>
	<span class=3D"hljs-keyword">set</span> serialize(execute) <span class=3D"=
hljs-number">0</span>
	<span class=3D"hljs-keyword">set</span> serialize(do_it) <span class=3D"hl=
js-number">0</span>
	<span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">set<=
/span> i <span class=3D"hljs-number">0</span>} {$i &lt;=3D <span class=3D"h=
ljs-number">63</span>} {<span class=3D"hljs-keyword">incr</span> i} {
	    <span class=3D"hljs-keyword">set</span> ::sn($i) <span class=3D"hljs-n=
umber">0</span>
	}
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> createW=
indows</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> libDir projDir deviceFilesLi=
st screen version color
    <span class=3D"hljs-keyword">global</span> gui
    image create photo mhs -<span class=3D"hljs-keyword">file</span> $projD=
ir/images/flip_splash.gif
    ::splash::createSplash mhs <span class=3D"hljs-string">"Flip $version"<=
/span> <span class=3D"hljs-string">"Copyright (C) 2002, Atmel\n \t         =
 All Rights Reserved."</span> <span class=3D"hljs-string">"Loading User Int=
erface..."</span>
    wm title .splash <span class=3D"hljs-string">"Flip $version"</span>
    <span class=3D"hljs-keyword">after</span> <span class=3D"hljs-number">2=
00</span>
    ::splash::updateSplash <span class=3D"hljs-string">"Drawing Main window=
..."</span>
    drawMainWindow
    cmdsBuildDeviceList $deviceFilesList
    <span class=3D"hljs-keyword">after</span> <span class=3D"hljs-number">2=
00</span>
    ::splash::updateSplash <span class=3D"hljs-string">"Drawing Device Sele=
ction window..."</span>
    drawDeviceSelectDbox
    <span class=3D"hljs-keyword">after</span> <span class=3D"hljs-number">2=
00</span>
    ::splash::updateSplash <span class=3D"hljs-string">"Drawing Device Sele=
ction window..."</span>
    drawPartnersWindow
<span class=3D"hljs-comment">    #after 200</span>
<span class=3D"hljs-comment">    #drawDeviceEraseDbox</span>
    <span class=3D"hljs-keyword">after</span> <span class=3D"hljs-number">2=
00</span>
    ::splash::updateSplash <span class=3D"hljs-string">"Drawing Buffer Opti=
ons window..."</span>
    drawBufferOptionsWindow
    <span class=3D"hljs-keyword">after</span> <span class=3D"hljs-number">2=
00</span>
    ::splash::updateSplash <span class=3D"hljs-string">"Drawing Edit Buffer=
 window..."</span>
    drawBufferEditWindow
    setEditBufferBindings
    <span class=3D"hljs-keyword">after</span> <span class=3D"hljs-number">2=
00</span>
    ::splash::updateSplash <span class=3D"hljs-string">"Drawing Modify Buff=
er window..."</span>
    drawModifyBufferDbox
    <span class=3D"hljs-keyword">after</span> <span class=3D"hljs-number">2=
00</span>
    ::splash::updateSplash <span class=3D"hljs-string">"Drawing Goto Buffer=
 window..."</span>
    drawGotoBufferDbox
    <span class=3D"hljs-keyword">after</span> <span class=3D"hljs-number">2=
00</span>
    ::splash::updateSplash <span class=3D"hljs-string">"Drawing Buffer Fill=
 window..."</span>
    drawBufferFillDBox
    <span class=3D"hljs-keyword">after</span> <span class=3D"hljs-number">2=
00</span>
    ::splash::updateSplash <span class=3D"hljs-string">"Drawing Command win=
dow..."</span>
    drawCommandWindow
    <span class=3D"hljs-keyword">after</span> <span class=3D"hljs-number">2=
00</span>
    ::splash::updateSplash <span class=3D"hljs-string">"Drawing USB window.=
.."</span>
    drawUsbCommDbox
    <span class=3D"hljs-keyword">after</span> <span class=3D"hljs-number">2=
00</span>
    ::splash::updateSplash <span class=3D"hljs-string">"Drawing Search Buff=
er window..."</span>
    drawSearchBufferDbox
    <span class=3D"hljs-keyword">after</span> <span class=3D"hljs-number">2=
00</span>
    ::splash::updateSplash <span class=3D"hljs-string">"Drawing Copy/Move B=
uffer window..."</span>
    drawCopyMoveDbox
    <span class=3D"hljs-keyword">set</span> screen(width) [winfo screenwidt=
h .]
    <span class=3D"hljs-keyword">set</span> screen(height) [winfo screenhei=
ght .]
    <span class=3D"hljs-keyword">set</span> color(systemWindow) [.main.f_fl=
ow.f_operations.b_program cget -selectcolor]
    <span class=3D"hljs-keyword">set</span> gui(flowEraseColor) $color(syst=
emWindow)
    <span class=3D"hljs-keyword">set</span> gui(flowBlankCheckColor) $color=
(systemWindow)
    <span class=3D"hljs-keyword">set</span> gui(flowProgramColor) $color(sy=
stemWindow)
    <span class=3D"hljs-keyword">set</span> gui(flowVerifyColor) $color(sys=
temWindow)
    <span class=3D"hljs-keyword">set</span> gui(flowSpecialBytesColor) $col=
or(systemWindow)
    <span class=3D"hljs-keyword">update</span>
    <span class=3D"hljs-keyword">after</span> <span class=3D"hljs-number">2=
00</span>
    wm deiconify .
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">=
1</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> exitFli=
p</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> flipStates protcl
    <span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-number">0</=
span>} then {
	<span class=3D"hljs-keyword">if</span> {[tk_messageBox -message <span clas=
s=3D"hljs-string">"Exit Flip ?"</span> -type okcancel -icon question -defau=
lt ok -title <span class=3D"hljs-string">"Flip"</span>] !=3D <span class=3D=
"hljs-string">"ok"</span>} then {
	    <span class=3D"hljs-keyword">return</span>
	}
    }
    <span class=3D"hljs-keyword">if</span> {$protcl=3D=3D<span class=3D"hlj=
s-string">"RS232Standard"</span>} then {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info=
</span> exists ::sio::devId]} then {
	    <span class=3D"hljs-keyword">catch</span> [::sio::closeDevice]
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info=
</span> exists ::sio::sioVars(RxBuffer)]} then {
	    <span class=3D"hljs-keyword">catch</span> [<span class=3D"hljs-keyword=
">unset</span> ::sio::sioVars(RxBuffer)]
	}
    } elseif {$protcl=3D=3D<span class=3D"hljs-string">"CANStandard"</span>=
} {
	<span class=3D"hljs-keyword">if</span> {$flipStates(canComm) =3D=3D <span =
class=3D"hljs-string">"on"</span>} then {
	    ptclCancelCANComm
	}
    } elseif {$protcl=3D=3D<span class=3D"hljs-string">"rs232can"</span>} {
	<span class=3D"hljs-keyword">if</span> {$flipStates(canComm) =3D=3D <span =
class=3D"hljs-string">"on"</span>} then {
	    ptclCancelRs232Comm
	}
    }
    createConfigFile
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">exit</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> sim</sp=
an> {} {
    <span class=3D"hljs-keyword">global</span> flipStates
    <span class=3D"hljs-keyword">set</span> flipStates(simul) <span class=
=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">return</span>
}
wm withdraw .
main
<span class=3D"hljs-comment">#dbgShowVar "argv =3D $argv"</span>
<span class=3D"hljs-keyword">if</span> {$argv !=3D <span class=3D"hljs-stri=
ng">""</span>} then {
    <span class=3D"hljs-keyword">set</span> cfgFile [<span class=3D"hljs-ke=
yword">string</span> range $argv <span class=3D"hljs-number">1</span> end<s=
pan class=3D"hljs-number">-1</span>]
    <span class=3D"hljs-keyword">set</span> flipStates(lastloadedCfgFile) $=
cfgFile
    runLastLoadedConfigFile
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> showTra=
ce</span> {Name Index Op} {
    <span class=3D"hljs-keyword">upvar</span> $Name $Name
    <span class=3D"hljs-keyword">if</span> {$Index =3D=3D <span class=3D"hl=
js-string">""</span>} then {
	<span class=3D"hljs-keyword">set</span> fullName $Name
    } else {
	<span class=3D"hljs-keyword">set</span> fullName ${Name}($Index)
    }
    <span class=3D"hljs-keyword">switch</span> $Op {
    r {
	    <span class=3D"hljs-keyword">puts</span> <span class=3D"hljs-string">"=
$fullName was read"</span>
	}
    w {
	    <span class=3D"hljs-keyword">puts</span> <span class=3D"hljs-string">"=
$fullName was written, new value is \"[set $fullName]\""</span>
	}
    u {
	    <span class=3D"hljs-keyword">puts</span> <span class=3D"hljs-string">"=
$fullName was unset"</span>
	}
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> drawCan=
NodeConfigDbox</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> flipFont
    <span class=3D"hljs-keyword">set</span> w .canNodeConfigDbox
    <span class=3D"hljs-keyword">if</span> {[winfo exists $w]} then {
<span class=3D"hljs-comment">	#dbgShowInfo "$w already exists =3D&gt; retur=
n"</span>
<span class=3D"hljs-comment">	#dbgEndProc [info level [info level]]</span>
	<span class=3D"hljs-keyword">return</span>
    }
    toplevel $w -class Dialog
    wm title $w <span class=3D"hljs-string">"CAN Node Configuration"</span>
    wm resizable $w <span class=3D"hljs-number">0</span> <span class=3D"hlj=
s-number">0</span>
    wm geometry $w +[<span class=3D"hljs-keyword">expr</span> [winfo x .]+<=
span class=3D"hljs-number">100</span>]+[<span class=3D"hljs-keyword">expr</=
span> [winfo y .]+<span class=3D"hljs-number">100</span>]
    wm protocol $w WM_DELETE_WINDOW <span class=3D"hljs-string">"wm withdra=
w $w"</span>
    wm withdraw $w
    <span class=3D"hljs-keyword">set</span> fTop .canNodeConfigDbox.f_top
    frame $fTop -relief raised -bd <span class=3D"hljs-number">2</span>
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D<span class=3D=
"hljs-number">5</span>} {<span class=3D"hljs-keyword">incr</span> i} {
	<span class=3D"hljs-keyword">set</span> f$i $fTop.f_$i
	<span class=3D"hljs-keyword">set</span> j f$i
	frame [<span class=3D"hljs-keyword">subst</span> $$j] -width <span class=
=3D"hljs-number">150</span> -relief groove -bd <span class=3D"hljs-number">=
2</span>
    }
    <span class=3D"hljs-keyword">set</span> fb .canNodeConfigDbox.f_b
    frame $fb
    label $f1.l_node -text <span class=3D"hljs-string">"Node :"</span> -anc=
hor w -font $flipFont -width <span class=3D"hljs-number">7</span>
    entry $f1.e_node -textvariable ::deviceArray(nnbProg) -font $flipFont -=
state normal -width <span class=3D"hljs-number">4</span>
    pack configure $f1.l_node $f1.e_node -side left -padx <span class=3D"hl=
js-number">5</span> -pady <span class=3D"hljs-number">5</span>
    label $f2.l_cris -text <span class=3D"hljs-string">"CRIS :"</span> -anc=
hor w -font $flipFont -width <span class=3D"hljs-number">7</span>
    entry $f2.e_cris -textvariable ::deviceArray(crisProg) -font $flipFont =
-state normal -width <span class=3D"hljs-number">4</span>
    pack configure $f2.l_cris $f2.e_cris -side left -padx <span class=3D"hl=
js-number">5</span> -pady <span class=3D"hljs-number">5</span>
    label $f3.l_btc1 -text <span class=3D"hljs-string">"BTC_1 :"</span> -an=
chor w -font $flipFont -width <span class=3D"hljs-number">7</span>
    entry $f3.e_btc1 -textvariable ::deviceArray(btc1) -font $flipFont -sta=
te normal -width <span class=3D"hljs-number">4</span>
    pack configure $f3.l_btc1 $f3.e_btc1 -side left -padx <span class=3D"hl=
js-number">5</span> -pady <span class=3D"hljs-number">5</span>
    label $f4.l_btc1 -text <span class=3D"hljs-string">"BTC_2 :"</span> -an=
chor w -font $flipFont -width <span class=3D"hljs-number">7</span>
    entry $f4.e_btc1 -textvariable ::deviceArray(btc2) -font $flipFont -sta=
te normal -width <span class=3D"hljs-number">4</span>
    pack configure $f4.l_btc1 $f4.e_btc1 -side left -padx <span class=3D"hl=
js-number">5</span> -pady <span class=3D"hljs-number">5</span>
    label $f5.l_btc1 -text <span class=3D"hljs-string">"BTC_3 :"</span> -an=
chor w -font $flipFont -width <span class=3D"hljs-number">7</span>
    entry $f5.e_btc1 -textvariable ::deviceArray(btc3) -font $flipFont -sta=
te normal -width <span class=3D"hljs-number">4</span>
    pack configure $f5.l_btc1 $f5.e_btc1 -side left -padx <span class=3D"hl=
js-number">5</span> -pady <span class=3D"hljs-number">5</span>
    pack configure $f1 $f2 $f3 $f4 $f5 -side top -padx <span class=3D"hljs-=
number">30</span> -pady <span class=3D"hljs-number">5</span> -fill x
    button $fb.b_read -text <span class=3D"hljs-string">"Read"</span> -font=
 $flipFont -command {ptclReadCanConfig} -bd <span class=3D"hljs-number">3</=
span> -state normal
    button $fb.b_set -text <span class=3D"hljs-string">"Set"</span> -font $=
flipFont -command {ptclSetCanConfig} -bd <span class=3D"hljs-number">3</spa=
n> -state normal
    button $fb.b_cancel -text <span class=3D"hljs-string">"Cancel"</span> -=
font $flipFont -command <span class=3D"hljs-string">"wm withdraw $w"</span>=
 -bd <span class=3D"hljs-number">2</span> -state normal
    pack $fb.b_read $fb.b_set $fb.b_cancel -padx <span class=3D"hljs-number=
">10</span> -side left
    pack configure $fTop -padx <span class=3D"hljs-number">5</span> -pady <=
span class=3D"hljs-number">5</span>
    pack configure $fb -pady <span class=3D"hljs-number">10</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> drawP1P=
3P4ConfigDbox</span> {} {
    <span class=3D"hljs-keyword">global</span> flipFont
    <span class=3D"hljs-keyword">set</span> w .configP1P3P4Window
    <span class=3D"hljs-keyword">if</span> {[winfo exists $w]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    toplevel $w -class Dialog
    wm title $w <span class=3D"hljs-string">"Hardware Conditions Setup"</sp=
an>
    wm resizable $w <span class=3D"hljs-number">0</span> <span class=3D"hlj=
s-number">0</span>
    wm geometry $w +[<span class=3D"hljs-keyword">expr</span> [winfo x .]+<=
span class=3D"hljs-number">100</span>]+[<span class=3D"hljs-keyword">expr</=
span> [winfo y .]+<span class=3D"hljs-number">100</span>]
    wm protocol $w WM_DELETE_WINDOW <span class=3D"hljs-string">"wm withdra=
w $w"</span>
    wm withdraw $w
    <span class=3D"hljs-keyword">set</span> fTop $w.f_top
    frame $fTop -relief raised -bd <span class=3D"hljs-number">2</span>
    <span class=3D"hljs-keyword">foreach</span> i {p1 p3 p4} {
	<span class=3D"hljs-keyword">set</span> f$i $fTop.f_$i
	<span class=3D"hljs-keyword">set</span> j f$i
	frame [<span class=3D"hljs-keyword">subst</span> $$j] -width <span class=
=3D"hljs-number">150</span> -relief flat
    }
    <span class=3D"hljs-keyword">set</span> fb $w.f_b
    frame $fb
    <span class=3D"hljs-keyword">foreach</span> i {p1 p3 p4} j {<span class=
=3D"hljs-string">"P1 Config"</span> <span class=3D"hljs-string">"P3 Config"=
</span> <span class=3D"hljs-string">"P4 Config"</span>} {
	<span class=3D"hljs-keyword">set</span> k f$i
	label [<span class=3D"hljs-keyword">subst</span> $$k].l_$i -text $j -ancho=
r w -font $flipFont -width <span class=3D"hljs-number">10</span>
	entry [<span class=3D"hljs-keyword">subst</span> $$k].e_$i -textvariable :=
:deviceArray(${i}_config) -font $flipFont -state normal -width <span class=
=3D"hljs-number">3</span>
	pack configure [<span class=3D"hljs-keyword">subst</span> $$k].l_$i [<span=
 class=3D"hljs-keyword">subst</span> $$k].e_$i -side left -padx <span class=
=3D"hljs-number">5</span> -pady <span class=3D"hljs-number">5</span>
	pack configure [<span class=3D"hljs-keyword">subst</span> $$k]
    }
    button $fb.b_read -text <span class=3D"hljs-string">"Read"</span> -font=
 $flipFont -command {ptclReadPortsConfig} -bd <span class=3D"hljs-number">3=
</span> -state normal
    button $fb.b_set -text <span class=3D"hljs-string">"Set"</span> -font $=
flipFont -command {ptclSetPortsConfig} -bd <span class=3D"hljs-number">3</s=
pan> -state normal
    button $fb.b_cancel -text <span class=3D"hljs-string">"Cancel"</span> -=
font $flipFont -command <span class=3D"hljs-string">"wm withdraw $w"</span>=
 -bd <span class=3D"hljs-number">2</span> -state normal
    pack $fb.b_read $fb.b_set $fb.b_cancel -padx <span class=3D"hljs-number=
">10</span> -side left
    pack configure $fTop -padx <span class=3D"hljs-number">5</span> -pady <=
span class=3D"hljs-number">5</span> -expand <span class=3D"hljs-number">1</=
span> -fill both
    pack configure $fb -pady <span class=3D"hljs-number">10</span>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> drawOsc=
illatorConfigDbox</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> flipFont
    <span class=3D"hljs-keyword">set</span> w .configOscWindow
    <span class=3D"hljs-keyword">if</span> {[winfo exists $w]} then {
<span class=3D"hljs-comment">	#dbgShowInfo "$w already exists =3D&gt; retur=
n"</span>
<span class=3D"hljs-comment">	#dbgEndProc [info level [info level]]</span>
	<span class=3D"hljs-keyword">return</span>
    }
    toplevel $w -class Dialog
    wm title $w <span class=3D"hljs-string">"Oscillator Control"</span>
    wm resizable $w <span class=3D"hljs-number">0</span> <span class=3D"hlj=
s-number">0</span>
    wm geometry $w +[<span class=3D"hljs-keyword">expr</span> [winfo x .]+<=
span class=3D"hljs-number">100</span>]+[<span class=3D"hljs-keyword">expr</=
span> [winfo y .]+<span class=3D"hljs-number">100</span>]
    wm protocol $w WM_DELETE_WINDOW <span class=3D"hljs-string">"wm withdra=
w $w"</span>
    wm withdraw $w
    <span class=3D"hljs-keyword">set</span> fTop $w.f_top
    frame $fTop -relief raised -bd <span class=3D"hljs-number">2</span>
    <span class=3D"hljs-keyword">set</span> frb $fTop.f_rb
    frame $frb
    <span class=3D"hljs-keyword">set</span> fb $w.f_b
    frame $fb
    <span class=3D"hljs-keyword">set</span> bOsc32 $frb.b_osc32
    radiobutton $bOsc32 -indicatoron <span class=3D"hljs-number">1</span> -=
<span class=3D"hljs-keyword">variable</span> ::deviceArray(oscCtrl) -value =
<span class=3D"hljs-number">3</span> -font $flipFont -text <span class=3D"h=
ljs-string">"32 MHz"</span> -anchor w
    <span class=3D"hljs-keyword">set</span> bOsc16 $frb.b_osc16
    radiobutton $bOsc16 -indicatoron <span class=3D"hljs-number">1</span> -=
<span class=3D"hljs-keyword">variable</span> ::deviceArray(oscCtrl) -value =
<span class=3D"hljs-number">2</span> -font $flipFont -text <span class=3D"h=
ljs-string">"16 MHz"</span> -anchor w
    <span class=3D"hljs-keyword">set</span> bOsc8 $frb.b_osc8
    radiobutton $bOsc8 -indicatoron <span class=3D"hljs-number">1</span> -<=
span class=3D"hljs-keyword">variable</span> ::deviceArray(oscCtrl) -value <=
span class=3D"hljs-number">1</span> -font $flipFont -text <span class=3D"hl=
js-string">"8 MHz"</span> -anchor w
    pack configure $bOsc32 $bOsc16 $bOsc8 -anchor w -side top
    button $fb.b_read -text <span class=3D"hljs-string">"Read"</span> -font=
 $flipFont -command {ptclReadHwByte} -bd <span class=3D"hljs-number">3</spa=
n> -state normal
    button $fb.b_set -text <span class=3D"hljs-string">"Set"</span> -font $=
flipFont -command {ptclWriteHwByte} -bd <span class=3D"hljs-number">3</span=
> -state normal
    button $fb.b_cancel -text <span class=3D"hljs-string">"Cancel"</span> -=
font $flipFont -command <span class=3D"hljs-string">"wm withdraw $w"</span>=
 -bd <span class=3D"hljs-number">2</span> -state normal
    pack $fb.b_read $fb.b_set $fb.b_cancel -padx <span class=3D"hljs-number=
">10</span> -side left
    pack configure $frb
    pack configure $fTop -padx <span class=3D"hljs-number">5</span> -pady <=
span class=3D"hljs-number">5</span> -expand <span class=3D"hljs-number">1</=
span> -fill both
    pack configure $fb -pady <span class=3D"hljs-number">10</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> popupCo=
mmMenu</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> geoInfo [winfo geometry .]
    <span class=3D"hljs-keyword">set</span> w [winfo width .]
    <span class=3D"hljs-keyword">set</span> h [winfo height .]
    <span class=3D"hljs-keyword">set</span> xTopLeft [winfo x .]
    <span class=3D"hljs-keyword">set</span> yTopLeft [winfo y .]
    tk_popup .menubar.settings.comm [<span class=3D"hljs-keyword">expr</spa=
n> [winfo x .] + <span class=3D"hljs-number">55</span>] [<span class=3D"hlj=
s-keyword">expr</span> [winfo y .] + <span class=3D"hljs-number">90</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> drawMai=
nWindow</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> flipStates PROMPT projDir pr=
ot version flipFont
    <span class=3D"hljs-keyword">global</span> canProtocol gui
    wm title . <span class=3D"hljs-string">"Atmel - Flip $version"</span>
    wm resizable . <span class=3D"hljs-number">0</span> <span class=3D"hljs=
-number">0</span>
    wm protocol . WM_DELETE_WINDOW { exitFlip }
    menu .menubar -type menubar
    . configure -menu .menubar
    <span class=3D"hljs-keyword">set</span> MainItemsList <span class=3D"hl=
js-string">"File Buffer Device Settings Help"</span>
    <span class=3D"hljs-keyword">foreach</span> Item $MainItemsList {
	<span class=3D"hljs-keyword">set</span> SubMenu [<span class=3D"hljs-keywo=
rd">string</span> tolower $Item]
	.menubar add cascade -label $Item -menu .menubar.$SubMenu -underline <span=
 class=3D"hljs-number">0</span> -font $flipFont
    }
    <span class=3D"hljs-keyword">set</span> f <span class=3D"hljs-string">"=
file"</span>
    menu .menubar.$f -tearoff no
    .menubar.$f add command -label <span class=3D"hljs-string">"Load HEX...=
"</span> -command {cbParseHexFile} -underline <span class=3D"hljs-number">0=
</span> -font $flipFont -state disabled
    .menubar.$f add command -label <span class=3D"hljs-string">"Save HEX As=
..."</span> -command {cbWriteHexFile} -underline <span class=3D"hljs-number=
">0</span> -font $flipFont -state disabled
    .menubar.$f add separator
    .menubar.$f add command -label <span class=3D"hljs-string">"Read Config=
uration File..."</span> -command {cmdsLoadConfig} -accelerator <span class=
=3D"hljs-string">"F4"</span> -underline <span class=3D"hljs-number">0</span=
> -font $flipFont
    .menubar.$f add command -label <span class=3D"hljs-string">"Execute Con=
figuration File"</span> -command {runLastLoadedConfigFile} -accelerator <sp=
an class=3D"hljs-string">"F5"</span> -underline <span class=3D"hljs-number"=
>0</span> -font $flipFont -state disabled
    .menubar.$f add command -label <span class=3D"hljs-string">"Save Config=
uration As..."</span> -command {cbSaveConfig} -underline <span class=3D"hlj=
s-number">5</span> -font $flipFont -state disabled
    .menubar.$f add separator
    .menubar.$f add command -label <span class=3D"hljs-string">"Exit"</span=
> -command {exitFlip} -underline <span class=3D"hljs-number">1</span> -font=
 $flipFont
    <span class=3D"hljs-keyword">set</span> b <span class=3D"hljs-string">"=
buffer"</span>
    menu .menubar.$b -tearoff no
    .menubar.$b add command -label <span class=3D"hljs-string">"Edit"</span=
> -command {cbDboxWakeUp .bufferEditWindow} -underline <span class=3D"hljs-=
number">0</span> -font $flipFont -state disabled
    .menubar.$b add command -label <span class=3D"hljs-string">"Options"</s=
pan> -command {cbOnBufferOptions} -underline <span class=3D"hljs-number">0<=
/span> -font $flipFont -state disabled
    <span class=3D"hljs-keyword">set</span> d <span class=3D"hljs-string">"=
device"</span>
    menu .menubar.$d -tearoff no
    .menubar.$d add command -label <span class=3D"hljs-string">"Select..."<=
/span> -accelerator <span class=3D"hljs-string">"F2"</span> -command {cbDbo=
xWakeUp .deviceSelectDbox} -underline <span class=3D"hljs-number">0</span> =
-font $flipFont
    .menubar.$d add separator
    .menubar.$d add command -label <span class=3D"hljs-string">"Erase..."</=
span> -command {cbDboxWakeUp .deviceErase} -underline <span class=3D"hljs-n=
umber">0</span> -font $flipFont -state $flipStates(deviceSelection)
    .menubar.$d add command -label <span class=3D"hljs-string">"Blank Check=
..."</span> -command {cbDboxWakeUp .blankCheckDBox} -underline <span class=
=3D"hljs-number">0</span> -font $flipFont -state $flipStates(deviceSelectio=
n)
    .menubar.$d add command -label <span class=3D"hljs-string">"Read..."</s=
pan> -command {cbDboxWakeUp .deviceReadDBox} -underline <span class=3D"hljs=
-number">0</span> -font $flipFont -state $flipStates(deviceSelection)
    .menubar.$d add command -label <span class=3D"hljs-string">"Program"</s=
pan> -command {cmdsDeviceProgram} -underline <span class=3D"hljs-number">0<=
/span> -font $flipFont -state $flipStates(deviceSelection)
    .menubar.$d add command -label <span class=3D"hljs-string">"Verify"</sp=
an> -command {cmdsDeviceVerify} -underline <span class=3D"hljs-number">0</s=
pan> -font $flipFont -state $flipStates(deviceSelection)
    <span class=3D"hljs-keyword">set</span> t <span class=3D"hljs-string">"=
settings"</span>
    <span class=3D"hljs-keyword">set</span> c <span class=3D"hljs-string">"=
comm"</span>
    menu .menubar.$t -tearoff no
    .menubar.$t add cascade -label <span class=3D"hljs-string">"Communicati=
on        F3"</span> -menu .menubar.$t.$c -underline <span class=3D"hljs-nu=
mber">0</span> -font $flipFont
    .menubar.$t add command -label <span class=3D"hljs-string">"Command Win=
dow..."</span> -command {cbDboxWakeUp .cmdWindow} -underline <span class=3D=
"hljs-number">8</span> -font $flipFont
    menu .menubar.$t.$c -tearoff no
    .menubar.$t.$c add command -label <span class=3D"hljs-string">"RS232"</=
span> -state disabled -command {initProtocol <span class=3D"hljs-string">"R=
S232Standard"</span>
	cbDboxWakeUp .rs232CommDbox} -underline <span class=3D"hljs-number">0</spa=
n> -font $flipFont
    .menubar.$t.$c add cascade -label <span class=3D"hljs-string">"CAN"</sp=
an> -state disabled -menu .menubar.$t.$c.select -underline <span class=3D"h=
ljs-number">0</span> -font $flipFont
    .menubar.$t.$c add cascade -label <span class=3D"hljs-string">"USB"</sp=
an> -state disabled -command {initProtocol <span class=3D"hljs-string">"USB=
_DFU"</span>
	cbDboxWakeUp .usbCommDbox} -underline <span class=3D"hljs-number">0</span>=
 -font $flipFont
    menu .menubar.$t.$c.select -tearoff no
    .menubar.$t.$c.select add command -label <span class=3D"hljs-string">"A=
TMEL RS232"</span> -state normal -command {<span class=3D"hljs-keyword">set=
</span> canProtocol(hardware) <span class=3D"hljs-string">"ATMEL_RS232"</sp=
an>
	initProtocol <span class=3D"hljs-string">"rs232can"</span>
	cbDboxWakeUp .rs232canSetup
	updateGUI onCANDongleSelection} -underline <span class=3D"hljs-number">0</=
span> -font $flipFont
    .menubar.$t.$c.select add command -label <span class=3D"hljs-string">"R=
M CANview"</span> -state normal -command {<span class=3D"hljs-keyword">set<=
/span> canProtocol(hardware) <span class=3D"hljs-string">"CANVIEW"</span>
	initProtocol <span class=3D"hljs-string">"canview"</span>
	cbDboxWakeUp .rs232canSetup
	updateGUI onCANDongleSelection} -underline <span class=3D"hljs-number">0</=
span> -font $flipFont
    .menubar.$t.$c.select add separator
    .menubar.$t.$c.select add cascade -label <span class=3D"hljs-string">"V=
ECTOR"</span> -state normal -menu .menubar.$t.$c.select.vector -underline <=
span class=3D"hljs-number">0</span> -font $flipFont
    .menubar.$t.$c.select add command -label <span class=3D"hljs-string">"I=
XXAT CANdy"</span> -state normal -command {<span class=3D"hljs-keyword">set=
</span> canProtocol(hardware) <span class=3D"hljs-string">"CANDY"</span>
	initProtocol <span class=3D"hljs-string">"CANStandard"</span>
	cbDboxWakeUp .canSetup
	updateGUI onCANDongleSelection} -underline <span class=3D"hljs-number">0</=
span> -font $flipFont
    .menubar.$t.$c.select add command -label <span class=3D"hljs-string">"P=
EAK PCAN-DONGLE"</span> -state normal -command {<span class=3D"hljs-keyword=
">set</span> canProtocol(hardware) <span class=3D"hljs-string">"PEAK"</span=
>
	initProtocol <span class=3D"hljs-string">"CANStandard"</span>
	cbDboxWakeUp .canSetup
	updateGUI onCANDongleSelection} -underline <span class=3D"hljs-number">0</=
span> -font $flipFont
    .menubar.$t.$c.select add separator
    .menubar.$t.$c.select add command -label <span class=3D"hljs-string">"A=
TMEL USB"</span> -state normal -command {<span class=3D"hljs-keyword">set</=
span> canProtocol(hardware) <span class=3D"hljs-string">"ATMEL_USB"</span>
	initProtocol <span class=3D"hljs-string">"usbcan"</span>
	cbDboxWakeUp .canSetup
	updateGUI onCANDongleSelection} -underline <span class=3D"hljs-number">0</=
span> -font $flipFont -state disabled
    .menubar.$t.$c.select add command -label <span class=3D"hljs-string">"S=
YSTEC USBCAN"</span> -state normal -command {<span class=3D"hljs-keyword">s=
et</span> canProtocol(hardware) <span class=3D"hljs-string">"SYSTEC"</span>
	initProtocol <span class=3D"hljs-string">"CANStandard"</span>
	cbDboxWakeUp .canSetup
	updateGUI onCANDongleSelection} -underline <span class=3D"hljs-number">0</=
span> -font $flipFont
    menu .menubar.$t.$c.select.vector -tearoff no
    <span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-number">0</=
span>} then {
	.menubar.$t.$c.select.vector add command -label <span class=3D"hljs-string=
">"CANac2"</span> -state normal -command {<span class=3D"hljs-keyword">set<=
/span> canProtocol(hardware) <span class=3D"hljs-string">"CANAC2"</span>
	    initProtocol <span class=3D"hljs-string">"CANStandard"</span>
	    cbDboxWakeUp .canSetup
	    <span class=3D"hljs-keyword">set</span> vector(hwType) $vector(canac2)
	    updateGUI onCANDongleSelection} -underline <span class=3D"hljs-number"=
>3</span> -font $flipFont
    }
    .menubar.$t.$c.select.vector add command -label <span class=3D"hljs-str=
ing">"CANcardX"</span> -state normal -command {<span class=3D"hljs-keyword"=
>set</span> canProtocol(hardware) <span class=3D"hljs-string">"CANCARDX"</s=
pan>
	initProtocol <span class=3D"hljs-string">"CANStandard"</span>
	cbDboxWakeUp .canSetup
	<span class=3D"hljs-keyword">set</span> vector(hwType) $vector(cancardx)
	updateGUI onCANDongleSelection} -underline <span class=3D"hljs-number">3</=
span> -font $flipFont
    .menubar.$t.$c.select.vector add command -label <span class=3D"hljs-str=
ing">"CANpari"</span> -state normal -command {<span class=3D"hljs-keyword">=
set</span> canProtocol(hardware) <span class=3D"hljs-string">"CANPARI"</spa=
n>
	initProtocol <span class=3D"hljs-string">"CANStandard"</span>
	cbDboxWakeUp .canSetup
	<span class=3D"hljs-keyword">set</span> vector(hwType) $vector(canpari)
	updateGUI onCANDongleSelection} -underline <span class=3D"hljs-number">3</=
span> -font $flipFont
    menu .menubar.help -tearoff no
    .menubar.help add command -label <span class=3D"hljs-string">"Contents.=
.."</span> -accelerator <span class=3D"hljs-string">"F1"</span> -command {h=
tmlView <span class=3D"hljs-string">"Help"</span> ./doc/flip_um.htm} -under=
line <span class=3D"hljs-number">0</span> -font $flipFont
    .menubar.help add separator
    .menubar.help add command -label <span class=3D"hljs-string">"About Fli=
p..."</span> -command {displayAbout} -underline <span class=3D"hljs-number"=
>0</span> -font $flipFont
    .menubar.help add command -label <span class=3D"hljs-string">"Third Par=
ty Vendors..."</span> -command {cbDboxWakeUp .partners} -underline <span cl=
ass=3D"hljs-number">0</span> -font $flipFont
    frame .main -relief sunken -bd <span class=3D"hljs-number">1</span>
    createMainToolBar
    <span class=3D"hljs-keyword">set</span> h1 <span class=3D"hljs-number">=
410</span>
    <span class=3D"hljs-keyword">set</span> w1 <span class=3D"hljs-number">=
190</span>
    frame .main.topRow
    frame .main.bottomRow
    frame .main.f_flow -borderwidth <span class=3D"hljs-number">2</span> -r=
elief groove -height $h1 -width $w1
    frame .main.f_buffer -borderwidth <span class=3D"hljs-number">2</span> =
-relief groove -height $h1 -width $w1
    frame .main.f_device -borderwidth <span class=3D"hljs-number">2</span> =
-relief groove -height $h1 -width [<span class=3D"hljs-keyword">expr</span>=
 $w1 + <span class=3D"hljs-number">30</span>]
    <span class=3D"hljs-keyword">set</span> ff .main.f_flow
    label $ff.l_flow -text <span class=3D"hljs-string">"Operations Flow"</s=
pan> -font $flipFont -relief groove -bd <span class=3D"hljs-number">2</span=
>
    setBalloon $ff.l_flow <span class=3D"hljs-string">"Define operations to=
 be performed"</span>
    <span class=3D"hljs-keyword">set</span> fOperations $ff.f_operations
    frame $fOperations -relief flat
    <span class=3D"hljs-keyword">set</span> bErase $fOperations.b_erase
    checkbutton $bErase -text <span class=3D"hljs-string">"Erase"</span> -f=
ont $flipFont -<span class=3D"hljs-keyword">variable</span> gui(flowErase) =
-onvalue <span class=3D"hljs-number">1</span> -offvalue <span class=3D"hljs=
-number">0</span> -indicatoron true -state disabled -command {writeBuffer f=
lowErase $gui(flowErase)}
    setBalloon $bErase <span class=3D"hljs-string">"Check the Erase dialog =
box for\n erasing boundaries."</span>
    <span class=3D"hljs-keyword">set</span> bBlankCheck $fOperations.b_blan=
kCheck
    checkbutton $bBlankCheck -text <span class=3D"hljs-string">"Blank Check=
"</span> -font $flipFont -<span class=3D"hljs-keyword">variable</span> gui(=
flowBlankCheck) -onvalue <span class=3D"hljs-number">1</span> -offvalue <sp=
an class=3D"hljs-number">0</span> -command {writeBuffer flowBlankCheck $gui=
(flowBlankCheck)} -indicatoron true -state disabled
    setBalloon $bBlankCheck <span class=3D"hljs-string">"Check the Blank Ch=
eck dialog box\n for blank checking boundaries."</span>
    <span class=3D"hljs-keyword">set</span> bProgram $fOperations.b_program
    checkbutton $bProgram -text <span class=3D"hljs-string">"Program"</span=
> -font $flipFont -<span class=3D"hljs-keyword">variable</span> gui(flowPro=
gram) -onvalue <span class=3D"hljs-number">1</span> -offvalue <span class=
=3D"hljs-number">0</span> -command {writeBuffer flowProgram $gui(flowProgra=
m)} -indicatoron true -state disabled
    setBalloon $bProgram <span class=3D"hljs-string">"Device memory program=
ming:\n see the address range in the Buffer Information frame."</span>
    <span class=3D"hljs-keyword">set</span> bVerify $fOperations.b_verify
    checkbutton $bVerify -text <span class=3D"hljs-string">"Verify"</span> =
-font $flipFont -<span class=3D"hljs-keyword">variable</span> gui(flowVerif=
y) -onvalue <span class=3D"hljs-number">1</span> -offvalue <span class=3D"h=
ljs-number">0</span> -command {writeBuffer flowVerify $gui(flowVerify)} -in=
dicatoron true -state disabled
    setBalloon $bVerify <span class=3D"hljs-string">"Device memory verifica=
tion:\n see the address range in the Buffer Information frame."</span>
    <span class=3D"hljs-keyword">set</span> bSpecialBytes $fOperations.b_sp=
ecialBytes
    checkbutton $bSpecialBytes -text <span class=3D"hljs-string">"Set Speci=
al Bytes"</span> -font $flipFont -<span class=3D"hljs-keyword">variable</sp=
an> gui(flowSpecialBytes) -onvalue <span class=3D"hljs-number">1</span> -of=
fvalue <span class=3D"hljs-number">0</span> -command {writeBuffer flowSpeci=
alBytes $gui(flowSpecialBytes)} -indicatoron true -state disabled
    setBalloon $bSpecialBytes <span class=3D"hljs-string">"Set device speci=
al bytes:\n see selected values in the device frame."</span>
    pack configure $bErase $bBlankCheck $bProgram $bVerify $bSpecialBytes -=
anchor w -pady <span class=3D"hljs-number">15</span>
    <span class=3D"hljs-keyword">set</span> fButtons $ff.f_buttons
    frame $fButtons -relief flat
    <span class=3D"hljs-keyword">set</span> bRun $fButtons.b_run
    button $bRun -text <span class=3D"hljs-string">"Run"</span> -font $flip=
Font -bd <span class=3D"hljs-number">3</span> -font $flipFont -command {cmd=
sRunOperations} -state disabled
    setBalloon $bRun <span class=3D"hljs-string">"Performs selected operati=
ons"</span>
    <span class=3D"hljs-keyword">set</span> bClear $fButtons.b_clear
    button $bClear -text <span class=3D"hljs-string">"Clear"</span> -font $=
flipFont -bd <span class=3D"hljs-number">3</span> -font $flipFont -command =
{cmdsClearOperations <span class=3D"hljs-number">0</span>} -state disabled
    setBalloon $bClear <span class=3D"hljs-string">"Clears operations selec=
tion"</span>
    pack configure $bRun $bClear -side left -padx <span class=3D"hljs-numbe=
r">10</span>
    pack config $ff.l_flow -side top -pady <span class=3D"hljs-number">5</s=
pan> -ipadx <span class=3D"hljs-number">10</span>
    pack configure $fOperations -side top -pady <span class=3D"hljs-number"=
>15</span>
    pack configure $fButtons -side top -pady <span class=3D"hljs-number">5<=
/span>
    pack propagate $ff <span class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> fb .main.f_buffer
    label $fb.l_bufferInfoTitle -text <span class=3D"hljs-string">"Buffer I=
nformation"</span> -font $flipFont -relief groove -bd <span class=3D"hljs-n=
umber">2</span>
    setBalloon $fb.l_bufferInfoTitle <span class=3D"hljs-string">"Buffer in=
formation"</span>
    pack config $fb.l_bufferInfoTitle -side top -pady <span class=3D"hljs-n=
umber">5</span> -ipadx <span class=3D"hljs-number">10</span>
    label $fb.l_bufferSize -text <span class=3D"hljs-string">"Size:\t$gui(s=
izeValue) Kbytes"</span> -font $flipFont
    setBalloon $fb.l_bufferSize <span class=3D"hljs-string">"Buffer size"</=
span>
    pack config $fb.l_bufferSize -side top -anchor w -padx <span class=3D"h=
ljs-number">5</span>
    label $fb.l_bufferBlank -text <span class=3D"hljs-string">"Blank:\t$gui=
(blankValue)"</span> -font $flipFont
    setBalloon $fb.l_bufferBlank <span class=3D"hljs-string">"Blank value u=
sed on buffer reset"</span>
    pack config $fb.l_bufferBlank -side top -anchor w -padx <span class=3D"=
hljs-number">5</span>
    label $fb.l_range -text <span class=3D"hljs-string">"Range:\t[format $g=
ui(infoFormat) 0x$gui(minProgAddr)] - [format $gui(infoFormat) 0x$gui(maxPr=
ogAddr)]"</span> -font $flipFont -fg blue
    setBalloon $fb.l_range <span class=3D"hljs-string">"Address range used =
for \n Program and Verify operations."</span>
    pack config $fb.l_range -side top -anchor w -padx <span class=3D"hljs-n=
umber">5</span>
    frame $fb.f_checkSum
    label $fb.f_checkSum.l_title -text <span class=3D"hljs-string">"Checksu=
m:"</span> -font $flipFont -fg blue
    setBalloon $fb.f_checkSum.l_title <span class=3D"hljs-string">"Buffer c=
hecksum"</span>
    label $fb.f_checkSum.l_cksum -text <span class=3D"hljs-string">""</span=
> -font $flipFont -fg blue
    setBalloon $fb.f_checkSum.l_cksum <span class=3D"hljs-string">"Calculat=
ion is made on the above address range"</span>
    pack config $fb.f_checkSum.l_title -side left -padx <span class=3D"hljs=
-number">5</span>
    pack config $fb.f_checkSum.l_cksum -side left
    pack config $fb.f_checkSum -side top -fill x
    label $fb.l_offset -text <span class=3D"hljs-string">"Offset:\t[format =
$gui(infoFormat) 0x$gui(loadingOffset)]"</span> -font $flipFont
    setBalloon $fb.l_offset <span class=3D"hljs-string">"Offset applied to =
read addresses on file load"</span>
    pack config $fb.l_offset -side top -anchor w -padx <span class=3D"hljs-=
number">5</span>
    <span class=3D"hljs-keyword">if</span> {$gui(resetBufferOnLoading) =3D=
=3D <span class=3D"hljs-string">"yes"</span>} then {
	label $fb.l_bufferReset -text <span class=3D"hljs-string">"Reset Before Lo=
ading"</span> -font $flipFont
    } else {
	label $fb.l_bufferReset -text <span class=3D"hljs-string">"No Reset Before=
 Loading"</span> -font $flipFont
    }
    setBalloon $fb.l_bufferReset <span class=3D"hljs-string">"Reset/no buff=
er reset before file load"</span>
    pack config $fb.l_bufferReset -side top -anchor w -padx <span class=3D"=
hljs-number">5</span>
    frame $fb.f_separator -height <span class=3D"hljs-number">2</span> -rel=
ief groove -bd <span class=3D"hljs-number">2</span>
    pack config $fb.f_separator -side top -fill x -padx <span class=3D"hljs=
-number">10</span> -pady <span class=3D"hljs-number">10</span>
    frame $fb.f_hexFile
    label $fb.f_hexFile.l_title -text <span class=3D"hljs-string">"HEX File=
:"</span> -font $flipFont
    setBalloon $fb.f_hexFile.l_title <span class=3D"hljs-string">"Last load=
ed HEX file"</span>
    label $fb.f_hexFile.l_fileN -text <span class=3D"hljs-string">"none"</s=
pan> -font $flipFont
    setBalloon $fb.f_hexFile.l_fileN <span class=3D"hljs-string">"Last load=
ed HEX file"</span>
    frame $fb.f_serialNum
    label $fb.f_serialNum.l_title -text <span class=3D"hljs-string">"Serial=
 Number:"</span> -font $flipFont
    label $fb.f_serialNum.l_number -text <span class=3D"hljs-string">""</sp=
an> -font $flipFont
    image create photo logo_company -<span class=3D"hljs-keyword">file</spa=
n> $projDir/images/atmel_rvb.gif
    frame $fb.f_hexFileSize
    frame $fb.f_hexFileSize.space -width <span class=3D"hljs-number">50</sp=
an>
    frame $fb.f_hexFileSize.title
    frame $fb.f_companyLogo -width <span class=3D"hljs-number">50</span> -h=
eight <span class=3D"hljs-number">80</span> -relief flat
    label $fb.f_companyLogo.l_companyLogo -image logo_company
    pack $fb.f_companyLogo.l_companyLogo
    label $fb.f_hexFileSize.l_title -text <span class=3D"hljs-string">"    =
     "</span> -font $flipFont
    setBalloon $fb.f_hexFileSize.l_title <span class=3D"hljs-string">"Hex f=
ile size"</span>
    label $fb.f_hexFileSize.title.l_fileS -text <span class=3D"hljs-string"=
>""</span> -font $flipFont
    setBalloon $fb.f_hexFileSize.title.l_fileS <span class=3D"hljs-string">=
"HEX file size"</span>
    pack config $fb.f_hexFile.l_title -side left -padx <span class=3D"hljs-=
number">5</span>
    pack config $fb.f_hexFile.l_fileN -side left
    pack config $fb.f_hexFile -side top -fill x
    pack config $fb.f_hexFileSize.title.l_fileS -side left
    pack config $fb.f_hexFileSize.space -side left -padx <span class=3D"hlj=
s-number">5</span>
    pack config $fb.f_hexFileSize.title -side left
    pack config $fb.f_hexFileSize -side top -fill x
    pack config $fb.f_serialNum.l_title -side top -padx <span class=3D"hljs=
-number">5</span> -anchor w
    pack config $fb.f_serialNum.l_number -side top
    pack config $fb.f_serialNum -side top -fill x
    pack config $fb.f_companyLogo -side top -fill x -pady <span class=3D"hl=
js-number">30</span> -padx <span class=3D"hljs-number">10</span>
    pack propagate $fb <span class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> fd .main.f_device.f_deviceName
    frame $fd -bd <span class=3D"hljs-number">2</span> -relief groove -heig=
ht <span class=3D"hljs-number">20</span> -width <span class=3D"hljs-number"=
>160</span>
    label $fd.l_device -text <span class=3D"hljs-string">"No device selecte=
d"</span> -font $flipFont
    setBalloon $fd <span class=3D"hljs-string">"Device frame:\n values show=
n are actual values"</span>
    pack config $fd.l_device -side top
    pack config $fd -side top -pady <span class=3D"hljs-number">5</span>
    pack propagate $fd <span class=3D"hljs-number">0</span>
    pack .main.toolbar -pady <span class=3D"hljs-number">2</span> -anchor w
    pack .main.f_flow -side left -padx <span class=3D"hljs-number">10</span=
> -pady <span class=3D"hljs-number">5</span>
    pack .main.f_buffer -side left -pady <span class=3D"hljs-number">5</spa=
n>
    pack .main.f_device -side left -padx <span class=3D"hljs-number">10</sp=
an> -pady <span class=3D"hljs-number">5</span>
    pack propagate .main.f_flow <span class=3D"hljs-number">0</span>
    pack propagate .main.f_buffer
    pack propagate .main.f_device <span class=3D"hljs-number">0</span>
    drawStatusBar
    pack config .main -fill x -side top
    log_message <span class=3D"hljs-string">"Device &gt; Select..."</span>
    bind . &lt;F1&gt; {htmlView <span class=3D"hljs-string">"Help"</span> .=
/doc/flip_um.htm}
    bind . &lt;F2&gt; {cbDboxWakeUp .deviceSelectDbox}
    bind . &lt;F4&gt; {cmdsLoadConfig}
    bind . &lt;F5&gt; {runLastLoadedConfigFile}
    bind . &lt;F9&gt; {#dbgCtrl on }
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D <span class=
=3D"hljs-number">9</span>} {<span class=3D"hljs-keyword">incr</span> i} {
	bind . &lt;Alt-F$i&gt; {doNothing}
	bind . &lt;Control-F$i&gt; {doNothing}
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> doNothi=
ng</span> {} {
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> drawSta=
tusBar</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> flipFont
    <span class=3D"hljs-keyword">set</span> f .f_status
    frame $f -borderwidth <span class=3D"hljs-number">0</span>
    label $f.l_message -relief sunken -anchor w -borderwidth <span class=3D=
"hljs-number">1</span> -height <span class=3D"hljs-number">1</span> -text <=
span class=3D"hljs-string">""</span> -font $flipFont -bg white -width <span=
 class=3D"hljs-number">35</span>
    label $f.l_comm -relief sunken -anchor w -borderwidth <span class=3D"hl=
js-number">1</span> -height <span class=3D"hljs-number">1</span> -text <spa=
n class=3D"hljs-string">"Comm. OFF"</span> -font $flipFont -width <span cla=
ss=3D"hljs-number">30</span>
    setBalloon $f.l_comm <span class=3D"hljs-string">"Communication informa=
tion:\n port / baudrate / ..."</span>
    <span class=3D"hljs-keyword">set</span> pBar [::progressbar::progressba=
r $f.pb -width <span class=3D"hljs-number">280</span> -color grey -shape fl=
at]
    pack config $f.l_message -side left -padx <span class=3D"hljs-number">1=
</span> -pady <span class=3D"hljs-number">1</span> -expand <span class=3D"h=
ljs-number">0</span> -fill x
    pack config $pBar -side left -pady <span class=3D"hljs-number">1</span>
    pack $f.l_comm -side right -padx <span class=3D"hljs-number">1</span> -=
pady <span class=3D"hljs-number">1</span>
    pack propagate $f.l_message <span class=3D"hljs-number">0</span>
    pack config $f -fill x -side bottom
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> drawPro=
gressBarDbox</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> progBar flipFont
    <span class=3D"hljs-keyword">set</span> w .progressBarDbox
    <span class=3D"hljs-keyword">if</span> {[winfo exists $w]} then {
	destroy $w
    }
    toplevel $w -class Dialog
    wm title $w <span class=3D"hljs-string">"Running..."</span>
    wm resizable $w <span class=3D"hljs-number">0</span> <span class=3D"hlj=
s-number">0</span>
    wm protocol $w WM_DELETE_WINDOW <span class=3D"hljs-string">"wm withdra=
w $w"</span>
    wm withdraw $w
    label $w.l_actionOnGoing -relief flat -anchor w -text <span class=3D"hl=
js-string">""</span> -font $flipFont
    label $w.l_percent -relief flat -width <span class=3D"hljs-number">20</=
span> -borderwidth <span class=3D"hljs-number">1</span> -text <span class=
=3D"hljs-string">""</span> -font $flipFont
    <span class=3D"hljs-keyword">set</span> pBar [::progressbar::progressba=
r $w.pb -width <span class=3D"hljs-number">300</span>]
    frame $w.f_extraSpace -relief flat -height <span class=3D"hljs-number">=
20</span>
    button $w.b_cancel -bd <span class=3D"hljs-number">1</span> -text <span=
 class=3D"hljs-string">"Cancel"</span> -font $flipFont -bd <span class=3D"h=
ljs-number">2</span> -command <span class=3D"hljs-string">"closeProgBarWind=
ow;  set progBar(cancel) 1"</span>
    pack config $w.l_actionOnGoing $w.l_percent -side top -fill x -pady <sp=
an class=3D"hljs-number">10</span>
    pack $pBar $w.f_extraSpace -side top
    pack config $w.b_cancel -side top -pady <span class=3D"hljs-number">5</=
span>
    <span class=3D"hljs-keyword">set</span> progBar(cancel) <span class=3D"=
hljs-number">0</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> cmdInte=
rp</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> projDir
    <span class=3D"hljs-keyword">interp</span> create interact
    interact alias h displayGeneralHelp
    interact alias hlp displayGeneralHelp
    interact alias help displayGeneralHelp
    interact alias H displayGeneralHelp
    interact alias HLP displayGeneralHelp
    interact alias HELP displayGeneralHelp
    interact alias Help displayGeneralHelp
    interact alias Hlp displayGeneralHelp
    interact alias sos displayGeneralHelp
    interact alias SOS displayGeneralHelp
    interact alias Sos displayGeneralHelp
    interact alias <span class=3D"hljs-string">"?"</span> displayGeneralHel=
p
    interact alias man displayGeneralHelp
    interact alias cmds displayCommandsHelp
    interact alias bdata bufferData
    interact alias bopt bufferOptions
    interact alias tst drawTestSelectionDbox
    interact alias #dbgOn #dbgCtrl on
    interact alias #dbgOff #dbgCtrl off
    interact alias timers cbDboxWakeUp .timersDBox
    interact alias crc storeCRCinBuffer
    interact alias <span class=3D"hljs-keyword">puts</span> #dbgShowInfo
    interact alias uc addDevices
    interact alias lu2000 addLu2000Device
    interact alias ptclSendFrame ptclSendFrame
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> display=
CommandsHelp</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    actionsLog_message <span class=3D"hljs-string">""</span>
    actionsLog_message <span class=3D"hljs-string">"_______________________=
________________________"</span>
    actionsLog_message <span class=3D"hljs-string">""</span>
    actionsLog_message <span class=3D"hljs-string">"\tC O M M A N D S      =
H E L P"</span>
    actionsLog_message <span class=3D"hljs-string">"_______________________=
________________________"</span>
    actionsLog_message <span class=3D"hljs-string">"bdata Lo Hi\tdisplays b=
uffer data within specified address range."</span>
    actionsLog_message <span class=3D"hljs-string">"bopt\t\tdisplays buffer=
 options."</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> display=
GeneralHelp</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    actionsLog_message <span class=3D"hljs-string">""</span>
    actionsLog_message <span class=3D"hljs-string">"_______________________=
________________________"</span>
    actionsLog_message <span class=3D"hljs-string">""</span>
    actionsLog_message <span class=3D"hljs-string">"\tG E N E R A L      H =
E L P"</span>
    actionsLog_message <span class=3D"hljs-string">"_______________________=
________________________"</span>
    actionsLog_message <span class=3D"hljs-string">"#dbgOn\t\topens the deb=
ug window."</span>
    actionsLog_message <span class=3D"hljs-string">"#dbgOff\t\tcloses the d=
ebug window."</span>
    actionsLog_message <span class=3D"hljs-string">"tst\t\topens the tests =
setup dialog box."</span>
    actionsLog_message <span class=3D"hljs-string">"timers\t\topens the tim=
e out timers setup dialog box."</span>
    actionsLog_message <span class=3D"hljs-string">"cmds\t\tdisplays help o=
n commands."</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> drawCom=
mandWindow</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> PROMPT flipFont
    <span class=3D"hljs-keyword">set</span> w .cmdWindow
    <span class=3D"hljs-keyword">if</span> {[winfo exists $w]} then {
	destroy $w
    }
    toplevel $w -class Dialog
    wm title $w <span class=3D"hljs-string">"Command"</span>
    wm resizable $w <span class=3D"hljs-number">0</span> <span class=3D"hlj=
s-number">0</span>
    wm protocol $w WM_DELETE_WINDOW <span class=3D"hljs-string">"wm withdra=
w $w"</span>
    wm withdraw $w
    <span class=3D"hljs-keyword">set</span> fl $w.f_actionsLog
    frame $fl -height <span class=3D"hljs-number">80</span>
    text $fl.text -yscrollcommand <span class=3D"hljs-string">"$fl.scroll s=
et"</span> -insertofftime <span class=3D"hljs-number">0</span> -height <spa=
n class=3D"hljs-number">20</span> -width <span class=3D"hljs-number">100</s=
pan> -background #ffff9f
    scrollbar $fl.scroll -command <span class=3D"hljs-string">"$fl.text yvi=
ew"</span>
    <span class=3D"hljs-keyword">set</span> fb $w.f_button
    frame $fb
    button $fb.b_ok -text <span class=3D"hljs-string">"Dismiss"</span> -com=
mand <span class=3D"hljs-string">"wm withdraw $w"</span> -bd <span class=3D=
"hljs-number">3</span> -font $flipFont
    setBalloon $fb.b_ok <span class=3D"hljs-string">"Closes the command win=
dow"</span>
    pack configure $fl.scroll -side right -fill y -pady <span class=3D"hljs=
-number">5</span>
    pack configure $fl.text -side left -fill x -pady <span class=3D"hljs-nu=
mber">5</span>
    pack configure $fb.b_ok -side top -pady <span class=3D"hljs-number">5</=
span>
    pack config $fl $fb -side top
    focus $fl.text
    bind $fl.text &lt;Key&gt; {
	<span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-string">"%K"</=
span> =3D=3D <span class=3D"hljs-string">"BackSpace"</span>} then {
	    <span class=3D"hljs-keyword">if</span> [%W compare insert &lt;=3D boun=
dary] then <span class=3D"hljs-keyword">break</span>
	} elseif {<span class=3D"hljs-string">"%K"</span> =3D=3D <span class=3D"hl=
js-string">"Right"</span> || <span class=3D"hljs-string">"%K"</span> =3D=3D=
 <span class=3D"hljs-string">"Left"</span> || <span class=3D"hljs-string">"=
%K"</span> =3D=3D <span class=3D"hljs-string">"Up"</span> || <span class=3D=
"hljs-string">"%K"</span> =3D=3D <span class=3D"hljs-string">"Down"</span> =
|| <span class=3D"hljs-string">"%K"</span> =3D=3D <span class=3D"hljs-strin=
g">"Prior"</span> || <span class=3D"hljs-string">"%K"</span> =3D=3D <span c=
lass=3D"hljs-string">"Next"</span>} {
	    <span class=3D"hljs-keyword">continue</span>
	} elseif [%W compare insert &lt; boundary] {
	    %W mark <span class=3D"hljs-keyword">set</span> insert {end <span clas=
s=3D"hljs-number">-1</span>char}
	}
	%W see {insert linestart}
	%W see insert
    }
    cmdInterp
    bind $fl.text &lt;Key-Return&gt; {
	<span class=3D"hljs-keyword">if</span> {[%W compare insert &lt; boundary]}=
 then {
	    %W mark <span class=3D"hljs-keyword">set</span> insert {end <span clas=
s=3D"hljs-number">-1</span>char}
	}
	doCommand %W
	<span class=3D"hljs-keyword">break</span>
    }
    bind $w &lt;Key-Escape&gt; {
	wm withdraw .cmdWindow
    }
    <span class=3D"hljs-keyword">set</span> PROMPT <span class=3D"hljs-stri=
ng">"&gt; "</span>
    startNewCommandLine $fl.text
    $fl.text mark gravity boundary left
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> drawTes=
tSelectionDbox</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> testArray flipFont protcl do=
TestArray
    <span class=3D"hljs-keyword">set</span> w .testSelectionDbox
    <span class=3D"hljs-keyword">if</span> {[winfo exists $w]} then {
	destroy $w
    }
    toplevel $w -class Dialog
    wm title $w <span class=3D"hljs-string">"Tests Selection"</span>
    wm resizable $w <span class=3D"hljs-number">0</span> <span class=3D"hlj=
s-number">0</span>
    wm protocol $w WM_DELETE_WINDOW <span class=3D"hljs-string">"wm withdra=
w $w"</span>
    wm withdraw $w
    <span class=3D"hljs-keyword">set</span> checkbuttfr $w.f_buttons
    frame $checkbuttfr -relief groove -bd <span class=3D"hljs-number">2</sp=
an>
    checkbutton $checkbuttfr.b_appli -text <span class=3D"hljs-string">"FLI=
P non regression tests"</span> -<span class=3D"hljs-keyword">variable</span=
> testArray(nonRegress) -font $flipFont
    setBalloon $checkbuttfr.b_appli <span class=3D"hljs-string">"GUI and in=
ternal procedures tests"</span>
    checkbutton $checkbuttfr.b_protocol -text <span class=3D"hljs-string">"=
$protcl protocol non regression tests"</span> -<span class=3D"hljs-keyword"=
>variable</span> testArray(protocol) -command {updateGUI onProtocolTestSele=
ction} -font $flipFont
    setBalloon $checkbuttfr.b_protocol <span class=3D"hljs-string">"Protoco=
l specific tests"</span>
    checkbutton $checkbuttfr.b_debugWindow -text <span class=3D"hljs-string=
">"Debug Window"</span> -<span class=3D"hljs-keyword">variable</span> testA=
rray(debug) -command {updateGUI onTestDebugChanged} -onvalue <span class=3D=
"hljs-string">"on"</span> -offvalue <span class=3D"hljs-string">"off"</span=
> -font $flipFont
    setBalloon $checkbuttfr.b_debugWindow <span class=3D"hljs-string">"Show=
s debug window"</span>
    pack config $checkbuttfr.b_appli $checkbuttfr.b_protocol $checkbuttfr.b=
_debugWindow -side top -anchor w
    <span class=3D"hljs-keyword">set</span> filesfr $w.f_files
    frame $filesfr -relief groove -bd <span class=3D"hljs-number">2</span>
    <span class=3D"hljs-keyword">set</span> skipTestsFr $w.f_skip
    frame $skipTestsFr -relief groove -bd <span class=3D"hljs-number">2</sp=
an>
    <span class=3D"hljs-keyword">if</span> {$protcl =3D=3D <span class=3D"h=
ljs-string">"RS232Standard"</span>} then {
	checkbutton $skipTestsFr.b_skip1 -text <span class=3D"hljs-string">"XAF te=
sts"</span> -<span class=3D"hljs-keyword">variable</span> doTestArray(xaf) =
-font $flipFont
	checkbutton $skipTestsFr.b_skip2 -text <span class=3D"hljs-string">"FLASH =
tests"</span> -<span class=3D"hljs-keyword">variable</span> doTestArray(fla=
sh) -font $flipFont
	checkbutton $skipTestsFr.b_skip3 -text <span class=3D"hljs-string">"FUSE t=
ests"</span> -<span class=3D"hljs-keyword">variable</span> doTestArray(fuse=
) -font $flipFont
	checkbutton $skipTestsFr.b_skip4 -text <span class=3D"hljs-string">"SPECIF=
IC tests"</span> -<span class=3D"hljs-keyword">variable</span> doTestArray(=
specific) -font $flipFont
	checkbutton $skipTestsFr.b_skip5 -text <span class=3D"hljs-string">"CHECKS=
UM tests"</span> -<span class=3D"hljs-keyword">variable</span> doTestArray(=
checksum) -font $flipFont
	checkbutton $skipTestsFr.b_skip6 -text <span class=3D"hljs-string">"EEPROM=
 tests"</span> -<span class=3D"hljs-keyword">variable</span> doTestArray(ee=
prom) -font $flipFont
	pack config $skipTestsFr.b_skip1 $skipTestsFr.b_skip2 $skipTestsFr.b_skip3=
 $skipTestsFr.b_skip4 $skipTestsFr.b_skip5 $skipTestsFr.b_skip6 -side top -=
anchor w
    } elseif {($protcl =3D=3D <span class=3D"hljs-string">"CANStandard"</sp=
an>) ||($protcl =3D=3D <span class=3D"hljs-string">"canview"</span>) ||($pr=
otcl =3D=3D <span class=3D"hljs-string">"usbcan"</span>)} {
	checkbutton $skipTestsFr.b_skip1 -text <span class=3D"hljs-string">"XAF te=
sts"</span> -<span class=3D"hljs-keyword">variable</span> doTestArray(xaf) =
-font $flipFont
	checkbutton $skipTestsFr.b_skip2 -text <span class=3D"hljs-string">"FLASH =
tests"</span> -<span class=3D"hljs-keyword">variable</span> doTestArray(fla=
sh) -font $flipFont
	checkbutton $skipTestsFr.b_skip3 -text <span class=3D"hljs-string">"FUSE t=
ests"</span> -<span class=3D"hljs-keyword">variable</span> doTestArray(fuse=
) -font $flipFont
	checkbutton $skipTestsFr.b_skip4 -text <span class=3D"hljs-string">"SPECIF=
IC tests"</span> -<span class=3D"hljs-keyword">variable</span> doTestArray(=
specific) -font $flipFont
	checkbutton $skipTestsFr.b_skip5 -text <span class=3D"hljs-string">"CAN te=
sts"</span> -<span class=3D"hljs-keyword">variable</span> doTestArray(can) =
-font $flipFont
	checkbutton $skipTestsFr.b_skip6 -text <span class=3D"hljs-string">"EEPROM=
 tests"</span> -<span class=3D"hljs-keyword">variable</span> doTestArray(ee=
prom) -font $flipFont
	pack config $skipTestsFr.b_skip1 $skipTestsFr.b_skip2 $skipTestsFr.b_skip3=
 $skipTestsFr.b_skip4 $skipTestsFr.b_skip5 $skipTestsFr.b_skip6 -side top -=
anchor w
    } elseif {$protcl =3D=3D <span class=3D"hljs-string">"rs232can"</span>}=
 {
	checkbutton $skipTestsFr.b_skip1 -text <span class=3D"hljs-string">"XAF te=
sts"</span> -<span class=3D"hljs-keyword">variable</span> doTestArray(xaf) =
-font $flipFont
	checkbutton $skipTestsFr.b_skip2 -text <span class=3D"hljs-string">"FLASH =
tests"</span> -<span class=3D"hljs-keyword">variable</span> doTestArray(fla=
sh) -font $flipFont
	checkbutton $skipTestsFr.b_skip3 -text <span class=3D"hljs-string">"FUSE t=
ests"</span> -<span class=3D"hljs-keyword">variable</span> doTestArray(fuse=
) -font $flipFont
	checkbutton $skipTestsFr.b_skip4 -text <span class=3D"hljs-string">"SPECIF=
IC tests"</span> -<span class=3D"hljs-keyword">variable</span> doTestArray(=
specific) -font $flipFont
	checkbutton $skipTestsFr.b_skip5 -text <span class=3D"hljs-string">"CAN te=
sts"</span> -<span class=3D"hljs-keyword">variable</span> doTestArray(can) =
-font $flipFont
	checkbutton $skipTestsFr.b_skip6 -text <span class=3D"hljs-string">"EEPROM=
 tests"</span> -<span class=3D"hljs-keyword">variable</span> doTestArray(ee=
prom) -font $flipFont
	pack config $skipTestsFr.b_skip1 $skipTestsFr.b_skip2 $skipTestsFr.b_skip3=
 $skipTestsFr.b_skip4 $skipTestsFr.b_skip5 $skipTestsFr.b_skip6 -side top -=
anchor w
    } elseif {$protcl =3D=3D <span class=3D"hljs-string">"USB_DFU"</span>} =
{
	checkbutton $skipTestsFr.b_skip1 -text <span class=3D"hljs-string">"XAF te=
sts"</span> -<span class=3D"hljs-keyword">variable</span> doTestArray(xaf) =
-font $flipFont
	checkbutton $skipTestsFr.b_skip2 -text <span class=3D"hljs-string">"FLASH =
tests"</span> -<span class=3D"hljs-keyword">variable</span> doTestArray(fla=
sh) -font $flipFont
	checkbutton $skipTestsFr.b_skip3 -text <span class=3D"hljs-string">"FUSE t=
ests"</span> -<span class=3D"hljs-keyword">variable</span> doTestArray(fuse=
) -font $flipFont
	checkbutton $skipTestsFr.b_skip4 -text <span class=3D"hljs-string">"SPECIF=
IC tests"</span> -<span class=3D"hljs-keyword">variable</span> doTestArray(=
specific) -font $flipFont
	checkbutton $skipTestsFr.b_skip5 -text <span class=3D"hljs-string">"EEPROM=
 tests"</span> -<span class=3D"hljs-keyword">variable</span> doTestArray(ee=
prom) -font $flipFont
	pack config $skipTestsFr.b_skip1 $skipTestsFr.b_skip2 $skipTestsFr.b_skip3=
 $skipTestsFr.b_skip4 $skipTestsFr.b_skip5 -side top -anchor w
    }
    <span class=3D"hljs-keyword">set</span> logfr $filesfr.f_log
    frame $logfr -width <span class=3D"hljs-number">300</span>
    label $logfr.l_log -text <span class=3D"hljs-string">"Tests Log File:"<=
/span> -width <span class=3D"hljs-number">15</span> -font $flipFont
    setBalloon $logfr.l_log <span class=3D"hljs-string">"File where tests r=
esults will be logged"</span>
    entry $logfr.e_log -textvariable testArray(logFile) -width <span class=
=3D"hljs-number">30</span> -font $flipFont
    setBalloon $logfr.e_log <span class=3D"hljs-string">"Log file name"</sp=
an>
    button $logfr.b_log -text <span class=3D"hljs-string">"Browse..."</span=
> -font $flipFont -command {<span class=3D"hljs-keyword">set</span> testArr=
ay(logFile) [fileSaveGet <span class=3D"hljs-string">"Tests Log File Select=
ion"</span>]}
    setBalloon $logfr.b_log <span class=3D"hljs-string">"Browse file system=
"</span>
    pack config $logfr.l_log $logfr.e_log -side left
    pack config $logfr.b_log -side left -padx <span class=3D"hljs-number">1=
0</span> -pady <span class=3D"hljs-number">10</span>
    <span class=3D"hljs-keyword">set</span> okbuttonfr $w.f_okbutton
    frame $okbuttonfr
    button $okbuttonfr.b_ok -text <span class=3D"hljs-string">"OK"</span> -=
bd <span class=3D"hljs-number">3</span> -font $flipFont -command <span clas=
s=3D"hljs-string">" wm withdraw $w; cmdsRunTests "</span>
    setBalloon $okbuttonfr.b_ok <span class=3D"hljs-string">"Applies select=
ion\nand close dialog box"</span>
    button $okbuttonfr.b_apply -text <span class=3D"hljs-string">"Apply"</s=
pan> -bd <span class=3D"hljs-number">3</span> -font $flipFont -command {cmd=
sRunTests}
    setBalloon $okbuttonfr.b_apply <span class=3D"hljs-string">"Applies sel=
ection"</span>
    button $okbuttonfr.b_cancel -bd <span class=3D"hljs-number">2</span> -t=
ext <span class=3D"hljs-string">"Cancel"</span> -font $flipFont -command <s=
pan class=3D"hljs-string">"wm withdraw $w"</span>
    setBalloon $okbuttonfr.b_cancel <span class=3D"hljs-string">"Closes dia=
log box\nwithout applying selection"</span>
    pack config $okbuttonfr.b_cancel $okbuttonfr.b_apply $okbuttonfr.b_ok -=
side right -padx <span class=3D"hljs-number">5</span>
    pack config $logfr -side top
    pack config $checkbuttfr $skipTestsFr $filesfr $okbuttonfr -side top -p=
adx <span class=3D"hljs-number">5</span> -pady <span class=3D"hljs-number">=
10</span> -expand <span class=3D"hljs-number">1</span> -fill x
    bind $logfr.e_log &lt;Key-Return&gt; {cmdsRunTests <span class=3D"hljs-=
string">"ok"</span>}
    <span class=3D"hljs-keyword">if</span> {$testArray(protocol)} then {
	<span class=3D"hljs-keyword">foreach</span> chkb [winfo children .testSele=
ctionDbox.f_skip] {
	    $chkb configure -state normal
	}
    } else {
	<span class=3D"hljs-keyword">foreach</span> chkb [winfo children .testSele=
ctionDbox.f_skip] {
	    $chkb configure -state disabled
	}
    }
    wm deiconify $w
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> drawUsb=
CommDbox</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> flipFont hUSB_DFU
    <span class=3D"hljs-keyword">set</span> hUSB_DFU <span class=3D"hljs-nu=
mber">0</span>
    <span class=3D"hljs-keyword">set</span> w .usbCommDbox
    <span class=3D"hljs-keyword">if</span> {[winfo exists $w]} then {
	destroy $w
    }
    toplevel $w -class Dialog
    wm title $w <span class=3D"hljs-string">"USB Port Connection"</span>
    wm resizable $w <span class=3D"hljs-number">0</span> <span class=3D"hlj=
s-number">0</span>
    wm geometry $w +[<span class=3D"hljs-keyword">expr</span> [winfo x .]+<=
span class=3D"hljs-number">100</span>]+[<span class=3D"hljs-keyword">expr</=
span> [winfo y .]+<span class=3D"hljs-number">100</span>]
    wm protocol $w WM_DELETE_WINDOW <span class=3D"hljs-string">"wm withdra=
w $w"</span>
    wm withdraw $w
    <span class=3D"hljs-keyword">set</span> fr $w.f_buttons
    frame $fr -relief groove -bd <span class=3D"hljs-number">2</span> -widt=
h <span class=3D"hljs-number">400</span> -height <span class=3D"hljs-number=
">200</span>
    button $fr.b_open -text <span class=3D"hljs-string">"Open"</span> -font=
 $flipFont -command {<span class=3D"hljs-keyword">set</span> hUSB_DFU [USB_=
DFU_LocateAndOpenDevice $::deviceArray(usb_dfu_default_product_id)]} -bd <s=
pan class=3D"hljs-number">3</span> -state normal
    setBalloon $fr.b_open <span class=3D"hljs-string">"Opens the USB device=
"</span>
    button $fr.b_close -text <span class=3D"hljs-string">"Close"</span> -fo=
nt $flipFont -command {ptclCancelUSBComm} -bd <span class=3D"hljs-number">3=
</span> -state disabled
    setBalloon $fr.b_close <span class=3D"hljs-string">"Closes the USB devi=
ce"</span>
    button $fr.b_cancel -text <span class=3D"hljs-string">"Cancel"</span> -=
font $flipFont -command <span class=3D"hljs-string">"wm withdraw $w"</span>=
 -bd <span class=3D"hljs-number">2</span>
    setBalloon $fr.b_cancel <span class=3D"hljs-string">"Closes the dialog =
box"</span>
    pack configure $fr.b_open $fr.b_close $fr.b_cancel -side left -padx <sp=
an class=3D"hljs-number">10</span> -pady <span class=3D"hljs-number">5</spa=
n>
    pack configure $fr -expand <span class=3D"hljs-number">1</span> -fill b=
oth -padx <span class=3D"hljs-number">5</span> -pady <span class=3D"hljs-nu=
mber">5</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> drawRs2=
32CommDbox</span> {ProtocolList} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> flipStates tcl_platform port=
 baud baudList prot projDir protcl
    <span class=3D"hljs-keyword">global</span> flipFont
    <span class=3D"hljs-keyword">set</span> w .rs232CommDbox
    <span class=3D"hljs-keyword">if</span> {[winfo exists $w]} then {
	destroy $w
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists prot]} then {
	<span class=3D"hljs-keyword">unset</span> prot
    }
    toplevel $w -class Dialog
    wm title $w RS232
    wm resizable $w <span class=3D"hljs-number">0</span> <span class=3D"hlj=
s-number">0</span>
    wm geometry $w +[<span class=3D"hljs-keyword">expr</span> [winfo x .]+<=
span class=3D"hljs-number">100</span>]+[<span class=3D"hljs-keyword">expr</=
span> [winfo y .]+<span class=3D"hljs-number">100</span>]
    wm protocol $w WM_DELETE_WINDOW <span class=3D"hljs-string">"wm withdra=
w $w"</span>
    wm withdraw $w
    <span class=3D"hljs-keyword">set</span> fr $w.f_port
    frame $fr -relief flat
    label $fr.l_port -text <span class=3D"hljs-string">"Port:"</span> -widt=
h <span class=3D"hljs-number">10</span> -font $flipFont
    setBalloon $fr.l_port <span class=3D"hljs-string">"Port selection"</spa=
n>
    <span class=3D"hljs-keyword">switch</span> $tcl_platform(platform) {
    windows {
	    <span class=3D"hljs-keyword">set</span> flipStates(comList) {}
	    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">=
set</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D <span class=
=3D"hljs-number">20</span>} {<span class=3D"hljs-keyword">incr</span> i} {
		<span class=3D"hljs-keyword">if</span> {! [<span class=3D"hljs-keyword">c=
atch</span> {<span class=3D"hljs-keyword">set</span> devId [<span class=3D"=
hljs-keyword">open</span> COM$i RDWR]} err_id]} then {
		    <span class=3D"hljs-keyword">close</span> $devId
		    <span class=3D"hljs-keyword">lappend</span> flipStates(comList) COM$i
		}
	    }
<span class=3D"hljs-comment">	    #dbgShowVar "flipStates(comList) =3D $fli=
pStates(comList)"</span>
	    <span class=3D"hljs-keyword">if</span> {$flipStates(comList) !=3D <spa=
n class=3D"hljs-string">""</span>} then {
		<span class=3D"hljs-keyword">set</span> port [<span class=3D"hljs-keyword=
">lindex</span> $flipStates(comList) <span class=3D"hljs-number">0</span>]
		<span class=3D"hljs-keyword">set</span> command [<span class=3D"hljs-keyw=
ord">concat</span> tk_optionMenu $fr.portSelect port $flipStates(comList)]
		<span class=3D"hljs-keyword">eval</span> $command
	    }
	}
    unix {
	    <span class=3D"hljs-keyword">switch</span> $tcl_platform(os) {
	    SunOs {
		    <span class=3D"hljs-keyword">set</span> flipStates(comList) {}
		    <span class=3D"hljs-keyword">if</span> {! [<span class=3D"hljs-keywor=
d">catch</span> {<span class=3D"hljs-keyword">set</span> devId [<span class=
=3D"hljs-keyword">open</span> /dev/ttya RDWR]} err_id]} then {
			<span class=3D"hljs-keyword">close</span> $devId
			<span class=3D"hljs-keyword">lappend</span> flipStates(comList) /dev/tty=
a
		    }
		    <span class=3D"hljs-keyword">if</span> {! [<span class=3D"hljs-keywor=
d">catch</span> {<span class=3D"hljs-keyword">set</span> devId [<span class=
=3D"hljs-keyword">open</span> /dev/ttyb RDWR]} err_id]} then {
			<span class=3D"hljs-keyword">close</span> $devId
			<span class=3D"hljs-keyword">lappend</span> flipStates(comList) /dev/tty=
b
		    }
<span class=3D"hljs-comment">		    #dbgShowVar "flipStates(comList) =3D $fl=
ipStates(comList)"</span>
		    <span class=3D"hljs-keyword">if</span> {$flipStates(comList) !=3D <sp=
an class=3D"hljs-string">""</span>} then {
			<span class=3D"hljs-keyword">set</span> port [<span class=3D"hljs-keywor=
d">lindex</span> $flipStates(comList) <span class=3D"hljs-number">0</span>]
			<span class=3D"hljs-keyword">set</span> command [<span class=3D"hljs-key=
word">concat</span> tk_optionMenu $fr.portSelect port $flipStates(comList)]
			<span class=3D"hljs-keyword">eval</span> $command
		    }
		}
	    Linux {
		    <span class=3D"hljs-keyword">set</span> flipStates(comList) {}
		    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword"=
>set</span> i <span class=3D"hljs-number">0</span>} {$i &lt;=3D <span class=
=3D"hljs-number">3</span>} {<span class=3D"hljs-keyword">incr</span> i} {
			<span class=3D"hljs-keyword">if</span> {! [<span class=3D"hljs-keyword">=
catch</span> {<span class=3D"hljs-keyword">set</span> devId [<span class=3D=
"hljs-keyword">open</span> /dev/ttyS$i RDWR]} err_id]} then {
			    <span class=3D"hljs-keyword">close</span> $devId
			    <span class=3D"hljs-keyword">lappend</span> flipStates(comList) /dev=
/ttyS$i
			}
		    }
<span class=3D"hljs-comment">		    #dbgShowVar "flipStates(comList) =3D $fl=
ipStates(comList)"</span>
		    <span class=3D"hljs-keyword">if</span> {$flipStates(comList) !=3D <sp=
an class=3D"hljs-string">""</span>} then {
			<span class=3D"hljs-keyword">set</span> port [<span class=3D"hljs-keywor=
d">lindex</span> $flipStates(comList) <span class=3D"hljs-number">0</span>]
			<span class=3D"hljs-keyword">set</span> command [<span class=3D"hljs-key=
word">concat</span> tk_optionMenu $fr.portSelect port $flipStates(comList)]
			<span class=3D"hljs-keyword">eval</span> $command
		    }
		}
	    }
	}
    default {
	    log_message <span class=3D"hljs-string">"Unknown Tcl platform"</span>
	    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number"=
>0</span>
	}
    }
    <span class=3D"hljs-keyword">if</span> {[winfo exists $fr.portSelect]} =
then {
	setBalloon $fr.portSelect <span class=3D"hljs-string">"Actual selected por=
t"</span>
	pack configure $fr.l_port $fr.portSelect -side left
	$fr.portSelect configure -width <span class=3D"hljs-number">10</span> -fon=
t $flipFont
	pack configure $fr -side top
    }
    <span class=3D"hljs-keyword">set</span> fr $w.f_baud
    frame $fr -relief flat
    label $fr.l_baud -text <span class=3D"hljs-string">"Baud:"</span> -widt=
h <span class=3D"hljs-number">10</span> -font $flipFont
    setBalloon $fr.l_baud <span class=3D"hljs-string">"Baudrate selection"<=
/span>
    <span class=3D"hljs-keyword">set</span> command [<span class=3D"hljs-ke=
yword">concat</span> tk_optionMenu $fr.baudSelect baud $baudList]
    <span class=3D"hljs-keyword">eval</span> $command
    setBalloon $fr.baudSelect <span class=3D"hljs-string">"Actual selected =
baudrate"</span>
    <span class=3D"hljs-keyword">set</span> baud <span class=3D"hljs-number=
">38400</span>
    pack configure $fr.l_baud $fr.baudSelect -side left
    $fr.baudSelect configure -width <span class=3D"hljs-number">10</span> -=
font $flipFont
    pack configure $fr -side top
    <span class=3D"hljs-keyword">set</span> fr $w.f_laptopSync
    frame $fr -relief flat
    checkbutton $fr.b_laptopSync -text <span class=3D"hljs-string">"Manual =
Sync"</span> -font $flipFont -<span class=3D"hljs-keyword">variable</span> =
flipStates(connectOnlyRS232) -onvalue <span class=3D"hljs-number">1</span> =
-offvalue <span class=3D"hljs-number">0</span> -indicatoron true
    setBalloon $fr.b_laptopSync <span class=3D"hljs-string">"Manual Synchro=
nization \n\n If set, you must :\n Click Connect, reset the target HW, then=
 click Sync."</span>
    pack configure $fr.b_laptopSync -side left
    pack configure $fr -side top -anchor e -padx <span class=3D"hljs-number=
">30</span>
    <span class=3D"hljs-keyword">set</span> fr $w.f_protocol
    frame $fr -relief flat
    label $fr.l_protocol -text <span class=3D"hljs-string">"Protocol:"</spa=
n> -width <span class=3D"hljs-number">10</span> -font $flipFont
    setBalloon $fr.l_protocol <span class=3D"hljs-string">"Protocol selecti=
on"</span>
    <span class=3D"hljs-keyword">set</span> command [<span class=3D"hljs-ke=
yword">concat</span> tk_optionMenu $fr.protocolSelect prot $ProtocolList]
    <span class=3D"hljs-keyword">eval</span> $command
    setBalloon $fr.protocolSelect <span class=3D"hljs-string">"Actual proto=
col selection"</span>
    pack configure $fr.l_protocol $fr.protocolSelect -side left
    $fr.protocolSelect configure -width <span class=3D"hljs-number">10</spa=
n> -font $flipFont
    <span class=3D"hljs-keyword">set</span> prot <span class=3D"hljs-string=
">"Standard"</span>
    <span class=3D"hljs-keyword">set</span> fr $w.f_empty
    frame $fr -relief flat -height <span class=3D"hljs-number">20</span>
    pack configure $fr -side top
    <span class=3D"hljs-keyword">set</span> fr $w.f_buttons
    frame $fr -relief flat
    button $fr.b_connect -text <span class=3D"hljs-string">"Connect"</span>=
 -font $flipFont -command {connectRS232 $prot} -bd <span class=3D"hljs-numb=
er">3</span> -state normal
    setBalloon $fr.b_connect <span class=3D"hljs-string">"Opens a RS232 por=
t and optionally syncs the target HW"</span>
    button $fr.b_synchro -text <span class=3D"hljs-string">"Sync"</span> -f=
ont $flipFont -command {ptclSynchroRs232Comm} -bd <span class=3D"hljs-numbe=
r">3</span> -state disabled
    setBalloon $fr.b_synchro <span class=3D"hljs-string">"Synchronizes FLIP=
 and the target HW"</span>
    button $fr.b_disconnect -text <span class=3D"hljs-string">"Disconnect"<=
/span> -font $flipFont -command {ptclCancelRs232Comm} -bd <span class=3D"hl=
js-number">3</span> -state disabled
    setBalloon $fr.b_disconnect <span class=3D"hljs-string">"Closes the RS2=
32 port"</span>
    button $fr.b_cancel -text <span class=3D"hljs-string">"Cancel"</span> -=
font $flipFont -command <span class=3D"hljs-string">"wm withdraw $w"</span>=
 -bd <span class=3D"hljs-number">2</span>
    setBalloon $fr.b_cancel <span class=3D"hljs-string">"Closes dialog box\=
nwithout applying options"</span>
    pack configure $fr.b_connect $fr.b_disconnect $fr.b_synchro $fr.b_cance=
l -padx <span class=3D"hljs-number">2</span> -side left
    pack configure $fr -side bottom -fill both
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> drawDev=
iceSelectDbox</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> deviceList device flipFont
    <span class=3D"hljs-keyword">set</span> w .deviceSelectDbox
    <span class=3D"hljs-keyword">if</span> {[winfo exists $w]} then {
<span class=3D"hljs-comment">	#dbgShowInfo "$w already exists =3D&gt; retur=
n"</span>
<span class=3D"hljs-comment">	#dbgEndProc [info level [info level]]</span>
	<span class=3D"hljs-keyword">return</span>
    }
    toplevel $w -class Dialog
    wm title $w <span class=3D"hljs-string">"Device Selection"</span>
    wm resizable $w <span class=3D"hljs-number">0</span> <span class=3D"hlj=
s-number">0</span>
    wm geometry $w +[<span class=3D"hljs-keyword">expr</span> [winfo x .]+<=
span class=3D"hljs-number">100</span>]+[<span class=3D"hljs-keyword">expr</=
span> [winfo y .]+<span class=3D"hljs-number">100</span>]
    wm protocol $w WM_DELETE_WINDOW <span class=3D"hljs-string">"wm withdra=
w $w"</span>
    wm withdraw $w
    <span class=3D"hljs-keyword">set</span> fr $w.f_device
    frame $fr -relief groove -bd <span class=3D"hljs-number">2</span> -widt=
h <span class=3D"hljs-number">200</span>
    label $fr.l_device -text <span class=3D"hljs-string">"Device:"</span> -=
font $flipFont
    setBalloon $fr.l_device <span class=3D"hljs-string">"Device selection"<=
/span>
    <span class=3D"hljs-keyword">set</span> command [<span class=3D"hljs-ke=
yword">concat</span> tk_optionMenu $fr.deviceSelect device $deviceList]
    <span class=3D"hljs-keyword">eval</span> $command
    setBalloon $fr.deviceSelect <span class=3D"hljs-string">"Actual device =
selection"</span>
    pack configure $fr.l_device $fr.deviceSelect -side left -pady <span cla=
ss=3D"hljs-number">10</span> -padx <span class=3D"hljs-number">10</span>
    $fr.deviceSelect configure -width <span class=3D"hljs-number">15</span>=
 -font $flipFont
    pack configure $fr -side top -pady <span class=3D"hljs-number">10</span=
> -fill x -padx <span class=3D"hljs-number">30</span>
    <span class=3D"hljs-keyword">set</span> fr $w.f_empty
    frame $fr -relief flat -height <span class=3D"hljs-number">20</span>
    pack configure $fr -side top
    <span class=3D"hljs-keyword">set</span> fr $w.f_buttons
    frame $fr
    button $fr.b_ok -text <span class=3D"hljs-string">"OK"</span> -command =
{selectDevice $device} -bd <span class=3D"hljs-number">3</span> -font $flip=
Font -state normal
    setBalloon $fr.b_ok <span class=3D"hljs-string">"Applies selection\nand=
 closes dialog box"</span>
    button $fr.b_cancel -text <span class=3D"hljs-string">"Cancel"</span> -=
command <span class=3D"hljs-string">"wm withdraw $w"</span> -bd <span class=
=3D"hljs-number">2</span> -font $flipFont
    setBalloon $fr.b_cancel <span class=3D"hljs-string">"Closes dialog box\=
nwithout applying options"</span>
    pack configure $fr.b_ok $fr.b_cancel -padx <span class=3D"hljs-number">=
10</span> -ipadx <span class=3D"hljs-number">10</span> -pady <span class=3D=
"hljs-number">10</span> -side left -anchor e
    pack configure $fr -side bottom -fill y
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> cbDboxW=
akeUp</span> {w} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">if</span> {[winfo exists $w]} then {
<span class=3D"hljs-comment">	#dbgShowInfo "$w already exists =3D&gt; just =
deiconify it"</span>
	wm deiconify $w
	<span class=3D"hljs-keyword">if</span> {$w =3D=3D <span class=3D"hljs-stri=
ng">".cmdWindow"</span>} then {
	    focus .cmdWindow.f_actionsLog.text
	} else {
	    focus $w
	}
	<span class=3D"hljs-keyword">update</span>
    } else {
<span class=3D"hljs-comment">	#dbgShowInfo "$w does not exist =3D&gt; draw =
it"</span>
	<span class=3D"hljs-keyword">switch</span> $w {
	.partners {
		drawPartnersWindow
		wm deiconify $w
	    }
	.progressBarDbox {
		drawProgressBarDbox
		wm deiconify $w
	    }
	.timersDBox {
		drawTimersDBox
		wm deiconify $w
	    }
	.bufferGotoDbox {
		drawGotoBufferDbox
		wm deiconify $w
	    }
	.bufferModifyDbox {
		drawModifyBufferDbox
		wm deiconify $w
	    }
	.bufferOptionsWindow {
		drawBufferOptionsWindow
		wm deiconify $w
	    }
	.bufferEditWindow {
		drawBufferEditWindow
		wm deiconify $w
	    }
	.bufferFillDBox {
		drawBufferFillDBox
		wm deiconify $w
	    }
	.deviceSpecial {
		drawDeviceSpecial
		wm deiconify $w
	    }
	.deviceErase {
		drawDeviceEraseDbox
		wm deiconify $w
	    }
	.blankCheckDBox {
		drawBlankCheckDbox
		wm deiconify $w
	    }
	.deviceReadDBox {
		drawDeviceReadDbox
		wm deiconify $w
	    }
	.canSetup {
		drawCanSetupDbox
		wm deiconify $w
	    }
	.cmdWindow {
		drawCommandWindow
	    }
	.canNodeConfigDbox {
		drawCanNodeConfigDbox
		wm deiconify $w
	    }
	.configP1P3P4Window {
		drawP1P3P4ConfigDbox
		wm deiconify $w
	    }
	.configOscWindow {
		drawOscillatorConfigDbox
		wm deiconify $w
	    }
	.startAppliDbox {
		drawStartAppliDbox
		wm deiconify $w
	    }
	.rs232canSetup {
		drawRs232canSetupDbox
		wm deiconify $w
	    }
	.usbCommDbox {
		drawUsbCommDbox
		wm deiconify $w
	    }
	.bufferSearchDbox {
		drawSearchBufferDbox
		wm deiconify $w
	    }
	.bufferCopyMoveDbox {
		drawCopyMoveDbox
		wm deiconify $w
	    }
	default {
		log_message <span class=3D"hljs-string">"Window $w unknown"</span>
		<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0<=
/span>
	    }
	}
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> message=
Box</span> {title severity message} {
    <span class=3D"hljs-keyword">global</span> flipStates
    <span class=3D"hljs-keyword">if</span> {$flipStates(mssgBox)} then {
	<span class=3D"hljs-keyword">set</span> parentWindow [focus]
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> length $parentWindow] =3D=3D <span class=3D"hljs-number">0</span>=
} then {
	    <span class=3D"hljs-keyword">set</span> parentWindow .
	}
	tk_messageBox -message $message -title $title -type ok -icon $severity -pa=
rent $parentWindow
	<span class=3D"hljs-keyword">update</span> idletasks
    }
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> display=
About</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> projDir version flipFont
    <span class=3D"hljs-keyword">set</span> title <span class=3D"hljs-strin=
g">"Flip"</span>
    <span class=3D"hljs-keyword">set</span> version $version
    <span class=3D"hljs-keyword">set</span> authors <span class=3D"hljs-str=
ing">"Atmel"</span>
    <span class=3D"hljs-keyword">set</span> copyright <span class=3D"hljs-s=
tring">"Copyright (C) 2002, Atmel"</span>
    <span class=3D"hljs-keyword">set</span> comment <span class=3D"hljs-str=
ing">"Flip: FLexible In-system Programmer"</span>
    <span class=3D"hljs-keyword">set</span> logo <span class=3D"hljs-string=
">"$projDir/images/flip_about.gif"</span>
    <span class=3D"hljs-keyword">set</span> url <span class=3D"hljs-string"=
>"www.atmel.com"</span>
    <span class=3D"hljs-keyword">set</span> w .about
    <span class=3D"hljs-keyword">if</span> {[winfo exists $w]} then {
	wm deiconify $w
	focus $w
    } else {
	::about::showAbout -title $title -version $version -copyright $copyright -=
comment $comment -logo $logo -url $url
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> actions=
Log_message</span> {message} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> flipFont
    <span class=3D"hljs-keyword">set</span> txt .cmdWindow.f_actionsLog.tex=
t
    $txt insert {insert <span class=3D"hljs-number">-2</span>char} <span cl=
ass=3D"hljs-string">"$message\n"</span>
    $txt see insert
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> log_mes=
sage</span> {message} {
    <span class=3D"hljs-keyword">global</span> flipFont
    .f_status.l_message configure -text $message -font $flipFont
    <span class=3D"hljs-keyword">update</span>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> drawDev=
iceEraseDbox</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> flipFont gui
    <span class=3D"hljs-keyword">set</span> w .deviceErase
    <span class=3D"hljs-keyword">if</span> {[winfo exists $w]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    toplevel $w -class Dialog
    wm title $w <span class=3D"hljs-string">"Erasing Options"</span>
    wm resizable $w <span class=3D"hljs-number">0</span> <span class=3D"hlj=
s-number">0</span>
    wm geometry $w <span class=3D"hljs-number">190</span>x260+[<span class=
=3D"hljs-keyword">expr</span> [winfo x .]+<span class=3D"hljs-number">100</=
span>]+[<span class=3D"hljs-keyword">expr</span> [winfo y .]+<span class=3D=
"hljs-number">100</span>]
    wm protocol $w WM_DELETE_WINDOW <span class=3D"hljs-string">"wm withdra=
w $w"</span>
    wm withdraw $w
    <span class=3D"hljs-keyword">set</span> fErase $w.f_erase
    frame $fErase -bd <span class=3D"hljs-number">2</span> -relief groove
    <span class=3D"hljs-keyword">set</span> fFull $fErase.f_full
    frame $fFull -relief flat
    <span class=3D"hljs-keyword">set</span> bFull $fFull.b_fullErase
    radiobutton $bFull -text <span class=3D"hljs-string">"Full Chip Erase"<=
/span> -<span class=3D"hljs-keyword">variable</span> gui(eraseType) -value =
<span class=3D"hljs-string">"full"</span> -font $flipFont -command {onErase=
BlockWidgetChangeGUI <span class=3D"hljs-string">"full"</span>}
    setBalloon $bFull <span class=3D"hljs-string">"Full Chip Erase"</span>
    pack configure $bFull -side top -anchor w
    <span class=3D"hljs-keyword">set</span> fBlocks $fErase.f_blocks
    frame $fBlocks -relief flat
    <span class=3D"hljs-keyword">set</span> bBlocks $fBlocks.b_blockErase
    radiobutton $bBlocks -text <span class=3D"hljs-string">"Erase blocks:"<=
/span> -<span class=3D"hljs-keyword">variable</span> gui(eraseType) -value =
<span class=3D"hljs-string">"blocks"</span> -font $flipFont -state $gui(era=
sePossibleBlocks) -command {onEraseBlockWidgetChangeGUI <span class=3D"hljs=
-string">"blocks"</span>}
    setBalloon $bBlocks <span class=3D"hljs-string">"Erase memory blocks"</=
span>
    <span class=3D"hljs-keyword">set</span> bBlock0 $fBlocks.b_block0
    checkbutton $bBlock0 -text <span class=3D"hljs-string">"block 0"</span>=
 -font $flipFont -<span class=3D"hljs-keyword">variable</span> gui(eraseBlo=
ck0) -onvalue <span class=3D"hljs-number">1</span> -offvalue <span class=3D=
"hljs-number">0</span> -indicatoron true -state disabled
    <span class=3D"hljs-keyword">set</span> bBlock1 $fBlocks.b_block1
    checkbutton $bBlock1 -text <span class=3D"hljs-string">"block 1"</span>=
 -font $flipFont -<span class=3D"hljs-keyword">variable</span> gui(eraseBlo=
ck1) -onvalue <span class=3D"hljs-number">1</span> -offvalue <span class=3D=
"hljs-number">0</span> -indicatoron true -state disabled
    <span class=3D"hljs-keyword">set</span> bBlock2 $fBlocks.b_block2
    checkbutton $bBlock2 -text <span class=3D"hljs-string">"block 2"</span>=
 -font $flipFont -<span class=3D"hljs-keyword">variable</span> gui(eraseBlo=
ck2) -onvalue <span class=3D"hljs-number">1</span> -offvalue <span class=3D=
"hljs-number">0</span> -indicatoron true -state disabled
    <span class=3D"hljs-keyword">set</span> bBlock3 $fBlocks.b_block3
    checkbutton $bBlock3 -text <span class=3D"hljs-string">"block 3"</span>=
 -font $flipFont -<span class=3D"hljs-keyword">variable</span> gui(eraseBlo=
ck3) -onvalue <span class=3D"hljs-number">1</span> -offvalue <span class=3D=
"hljs-number">0</span> -indicatoron true -state disabled
    <span class=3D"hljs-keyword">set</span> bBlock4 $fBlocks.b_block4
    checkbutton $bBlock4 -text <span class=3D"hljs-string">"block 4"</span>=
 -font $flipFont -<span class=3D"hljs-keyword">variable</span> gui(eraseBlo=
ck4) -onvalue <span class=3D"hljs-number">1</span> -offvalue <span class=3D=
"hljs-number">0</span> -indicatoron true -state disabled
    pack configure $bBlocks $bBlock0 $bBlock1 $bBlock2 $bBlock3 $bBlock4 -s=
ide top
    pack configure $fFull $fBlocks -side top -anchor w
    pack $fErase -side top -padx <span class=3D"hljs-number">10</span> -pad=
y <span class=3D"hljs-number">10</span> -fill both
    <span class=3D"hljs-keyword">set</span> fbuttons $w.f_buttons
    frame $fbuttons -relief flat
    button $fbuttons.b_erase -bd <span class=3D"hljs-number">3</span> -text=
 <span class=3D"hljs-string">"Erase"</span> -command {cmdsOnEraseOptionsCha=
nge
	cmdsDeviceErase} -font $flipFont
    setBalloon $fbuttons.b_erase <span class=3D"hljs-string">"Erases the de=
vice memory\nusing the selected options."</span>
    button $fbuttons.b_apply -bd <span class=3D"hljs-number">3</span> -text=
 <span class=3D"hljs-string">"Apply"</span> -command {cmdsOnEraseOptionsCha=
nge} -font $flipFont
    setBalloon $fbuttons.b_apply <span class=3D"hljs-string">"Activates the=
 selected options.\nNo erasing is done."</span>
    button $fbuttons.b_cancel -bd <span class=3D"hljs-number">2</span> -tex=
t <span class=3D"hljs-string">"Close"</span> -command {cmdsForgetEraseOptio=
ns
	wm withdraw .deviceErase} -font $flipFont
    setBalloon $fbuttons.b_cancel <span class=3D"hljs-string">"Closes the d=
ialog box\nwithout applying options."</span>
    pack configure $fbuttons.b_erase $fbuttons.b_apply $fbuttons.b_cancel -=
side left -padx <span class=3D"hljs-number">5</span>
    pack configure $fbuttons -side top
    bind $w &lt;Return&gt; {cmdsDeviceErase}
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> drawBla=
nkCheckDbox</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> blankCheckAddr flipFont gui
    <span class=3D"hljs-keyword">set</span> w .blankCheckDBox
    <span class=3D"hljs-keyword">if</span> {[winfo exists $w]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    toplevel $w -class Dialog
    wm title $w <span class=3D"hljs-string">"Blank Checking Options"</span>
    wm resizable $w <span class=3D"hljs-number">0</span> <span class=3D"hlj=
s-number">0</span>
    wm geometry $w <span class=3D"hljs-number">230</span>x180+[<span class=
=3D"hljs-keyword">expr</span> [winfo x .]+<span class=3D"hljs-number">100</=
span>]+[<span class=3D"hljs-keyword">expr</span> [winfo y .]+<span class=3D=
"hljs-number">100</span>]
    wm protocol $w WM_DELETE_WINDOW <span class=3D"hljs-string">"wm withdra=
w $w"</span>
    wm withdraw $w
    <span class=3D"hljs-keyword">set</span> blankCheckAddr(start) [<span cl=
ass=3D"hljs-keyword">format</span> $gui(infoFormat) <span class=3D"hljs-num=
ber">0</span>x$blankCheckAddr(start)]
    <span class=3D"hljs-keyword">set</span> blankCheckAddr(end) [<span clas=
s=3D"hljs-keyword">format</span> $gui(infoFormat) <span class=3D"hljs-numbe=
r">0</span>x$blankCheckAddr(end)]
    <span class=3D"hljs-keyword">set</span> fAddr $w.f_addresses
    frame $fAddr -bd <span class=3D"hljs-number">2</span> -relief groove
    <span class=3D"hljs-keyword">set</span> fStart $fAddr.f_start
    frame $fStart -relief flat
    <span class=3D"hljs-keyword">set</span> lStart $fStart.l_start
    label $lStart -text <span class=3D"hljs-string">"Start address:"</span>=
 -font $flipFont -anchor w -width <span class=3D"hljs-number">15</span>
    setBalloon $lStart <span class=3D"hljs-string">"Start address (included=
)\nfor blank checking range"</span>
    <span class=3D"hljs-keyword">set</span> eStart $fStart.e_start
    entry $eStart -textvariable gui(blankCheckMin) -width <span class=3D"hl=
js-number">6</span> -font $flipFont
    setBalloon $eStart <span class=3D"hljs-string">"Start address value"</s=
pan>
    pack $lStart $eStart -side left
    <span class=3D"hljs-keyword">set</span> fEnd $fAddr.f_end
    frame $fEnd -relief flat
    <span class=3D"hljs-keyword">set</span> lEnd $fEnd.l_end
    label $lEnd -text <span class=3D"hljs-string">"End address:"</span> -fo=
nt $flipFont -anchor w -width <span class=3D"hljs-number">15</span>
    setBalloon $lEnd <span class=3D"hljs-string">"End address (included)\nf=
or blank checking range"</span>
    <span class=3D"hljs-keyword">set</span> eEnd $fEnd.e_end
    entry $eEnd -textvariable gui(blankCheckMax) -width <span class=3D"hljs=
-number">6</span> -font $flipFont
    setBalloon $eEnd <span class=3D"hljs-string">"End address value"</span>
    pack $lEnd $eEnd -side left
    pack $fStart $fEnd -side top -pady <span class=3D"hljs-number">5</span>
    bind $eStart &lt;Return&gt; {cmdsBlankCheck}
    bind $eEnd &lt;Return&gt; {cmdsBlankCheck}
    <span class=3D"hljs-keyword">set</span> fResults $w.f_results
    frame $fResults -bd <span class=3D"hljs-number">2</span> -relief groove
    setBalloon $fResults <span class=3D"hljs-string">"Blank check status:\n=
 no check, pass, fail"</span>
    <span class=3D"hljs-keyword">set</span> lTitle $fResults.l_title
    label $lTitle -text <span class=3D"hljs-string">"Blank Check Status:"</=
span> -font $flipFont
    <span class=3D"hljs-keyword">set</span> lResults $fResults.l_results
    label $lResults -text <span class=3D"hljs-string">"no check"</span> -fo=
nt $flipFont
    pack $lTitle $lResults -side top
    <span class=3D"hljs-keyword">set</span> fbuttons $w.f_buttons
    frame $fbuttons -relief flat
    button $fbuttons.b_check -bd <span class=3D"hljs-number">3</span> -text=
 <span class=3D"hljs-string">"Check"</span> -command {updateGUI onBlankChec=
kOptionsChange
	cmdsBlankCheck} -font $flipFont
    setBalloon $fbuttons.b_check <span class=3D"hljs-string">"Performs blan=
k check between\n (and including) specified addresses"</span>
    button $fbuttons.b_reset -bd <span class=3D"hljs-number">2</span> -text=
 <span class=3D"hljs-string">"Reset"</span> -command {cbOnResetBlankCheck} =
-font $flipFont
    setBalloon $fbuttons.b_reset <span class=3D"hljs-string">"Resets addres=
ses to\nbuffer min/max addresses"</span>
    button $fbuttons.b_cancel -bd <span class=3D"hljs-number">2</span> -tex=
t <span class=3D"hljs-string">"Close"</span> -command {wm withdraw .blankCh=
eckDBox} -font $flipFont
    setBalloon $fbuttons.b_cancel <span class=3D"hljs-string">"Closes dialo=
g box\nwithout applying options"</span>
    pack $fbuttons.b_check $fbuttons.b_reset $fbuttons.b_cancel -side left =
-padx <span class=3D"hljs-number">5</span>
    pack $fAddr -side top -fill both -expand true -padx <span class=3D"hljs=
-number">10</span> -pady <span class=3D"hljs-number">10</span>
    pack $fResults -side top -fill both -expand true -padx <span class=3D"h=
ljs-number">10</span>
    pack $fbuttons -side top -fill both -expand true -padx <span class=3D"h=
ljs-number">20</span> -pady <span class=3D"hljs-number">10</span>
    bind $w &lt;Return&gt; {cmdsBlankCheck}
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> drawDev=
iceReadDbox</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> flipFont gui
    <span class=3D"hljs-keyword">set</span> w .deviceReadDBox
    <span class=3D"hljs-keyword">if</span> {[winfo exists $w]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    toplevel $w -class Dialog
    wm geometry $w <span class=3D"hljs-number">220</span>x130+[<span class=
=3D"hljs-keyword">expr</span> [winfo x .]+<span class=3D"hljs-number">100</=
span>]+[<span class=3D"hljs-keyword">expr</span> [winfo y .]+<span class=3D=
"hljs-number">100</span>]
    wm title $w <span class=3D"hljs-string">"Reading Options"</span>
    wm resizable $w <span class=3D"hljs-number">0</span> <span class=3D"hlj=
s-number">0</span>
    wm protocol $w WM_DELETE_WINDOW <span class=3D"hljs-string">"wm withdra=
w $w"</span>
    wm withdraw $w
    <span class=3D"hljs-keyword">set</span> gui(startReadAddr) [<span class=
=3D"hljs-keyword">format</span> $gui(infoFormat) <span class=3D"hljs-number=
">0</span>]
    <span class=3D"hljs-keyword">set</span> gui(endReadAddr) [<span class=
=3D"hljs-keyword">format</span> $gui(infoFormat) <span class=3D"hljs-number=
">0</span>x$gui(maxAddr)]
    <span class=3D"hljs-keyword">set</span> fAddr $w.f_addresses
    frame $fAddr -bd <span class=3D"hljs-number">2</span> -relief groove
    <span class=3D"hljs-keyword">set</span> fStart $fAddr.f_start
    frame $fStart -relief flat
    <span class=3D"hljs-keyword">set</span> lStart $fStart.l_start
    label $lStart -text <span class=3D"hljs-string">"Start address:"</span>=
 -font $flipFont -anchor w -width <span class=3D"hljs-number">15</span>
    setBalloon $lStart <span class=3D"hljs-string">"Start address (included=
)\nfor device memory read range"</span>
    <span class=3D"hljs-keyword">set</span> eStart $fStart.e_start
    entry $eStart -textvariable gui(startReadAddr) -width <span class=3D"hl=
js-number">6</span> -font $flipFont
    setBalloon $eStart <span class=3D"hljs-string">"Start address value"</s=
pan>
    pack $lStart $eStart -side left
    <span class=3D"hljs-keyword">set</span> fEnd $fAddr.f_end
    frame $fEnd -relief flat
    <span class=3D"hljs-keyword">set</span> lEnd $fEnd.l_end
    label $lEnd -text <span class=3D"hljs-string">"End address:"</span> -fo=
nt $flipFont -anchor w -width <span class=3D"hljs-number">15</span>
    setBalloon $lEnd <span class=3D"hljs-string">"End address (included)\nf=
or device memory read range"</span>
    <span class=3D"hljs-keyword">set</span> eEnd $fEnd.e_end
    entry $eEnd -textvariable gui(endReadAddr) -width <span class=3D"hljs-n=
umber">6</span> -font $flipFont
    setBalloon $eEnd <span class=3D"hljs-string">"End address value"</span>
    pack $lEnd $eEnd -side left
    pack $fStart $fEnd -side top -pady <span class=3D"hljs-number">5</span>
    bind $eStart &lt;Return&gt; {cmdsReadDevice}
    bind $eEnd &lt;Return&gt; {cmdsReadDevice}
    <span class=3D"hljs-keyword">set</span> fResults $w.f_results
    frame $fResults -bd <span class=3D"hljs-number">2</span> -relief groove
    <span class=3D"hljs-keyword">set</span> lTitle $fResults.l_title
    label $lTitle -text <span class=3D"hljs-string">"Read Status:"</span> -=
font $flipFont
    <span class=3D"hljs-keyword">set</span> lResults $fResults.l_results
    label $lResults -text <span class=3D"hljs-string">"no reading"</span> -=
font $flipFont
    pack $lTitle $lResults -side top
    <span class=3D"hljs-keyword">set</span> fbuttons $w.f_buttons
    frame $fbuttons -relief flat
    button $fbuttons.b_read -bd <span class=3D"hljs-number">3</span> -text =
<span class=3D"hljs-string">"Read"</span> -command {cmdsOnReadOptionsChange
	cmdsReadDevice} -font $flipFont
    setBalloon $fbuttons.b_read <span class=3D"hljs-string">"Reads device m=
emory between\n (and including) specified addresses"</span>
    button $fbuttons.b_reset -bd <span class=3D"hljs-number">2</span> -text=
 <span class=3D"hljs-string">"Reset"</span> -command {cbOnResetReadDBox} -f=
ont $flipFont
    setBalloon $fbuttons.b_reset <span class=3D"hljs-string">"Resets addres=
ses to\nbuffer min/max addresses"</span>
    button $fbuttons.b_cancel -bd <span class=3D"hljs-number">2</span> -tex=
t <span class=3D"hljs-string">"Close"</span> -command {cmdsForgetReadOption=
s
	wm withdraw .deviceReadDBox} -font $flipFont
    setBalloon $fbuttons.b_cancel <span class=3D"hljs-string">"Closes dialo=
g box\nwithout applying options"</span>
    pack $fbuttons.b_read $fbuttons.b_reset $fbuttons.b_cancel -side left -=
padx <span class=3D"hljs-number">5</span>
    pack $fAddr -side top -fill both -expand true -padx <span class=3D"hljs=
-number">10</span> -pady <span class=3D"hljs-number">10</span>
    pack $fbuttons -side top -fill both -expand true -padx <span class=3D"h=
ljs-number">20</span> -pady <span class=3D"hljs-number">5</span>
    bind $w &lt;Return&gt; {cmdsOnReadOptionsChange
	cmdsReadDevice}
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> drawTim=
ersDBox</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime flipFont
    <span class=3D"hljs-keyword">set</span> w .timersDBox
    <span class=3D"hljs-keyword">if</span> {[winfo exists $w]} then {
	destroy $w
    }
    toplevel $w -class Dialog
    wm title $w <span class=3D"hljs-string">"Timers"</span>
    wm geometry $w <span class=3D"hljs-number">150</span>x90
    wm resizable $w <span class=3D"hljs-number">0</span> <span class=3D"hlj=
s-number">0</span>
    wm protocol $w WM_DELETE_WINDOW <span class=3D"hljs-string">"wm withdra=
w $w"</span>
    wm withdraw $w
    <span class=3D"hljs-keyword">set</span> fTimers $w.f_timers
    frame $fTimers -bd <span class=3D"hljs-number">2</span> -relief groove
    <span class=3D"hljs-keyword">set</span> fStd $fTimers.f_std
    frame $fStd -relief flat
    <span class=3D"hljs-keyword">set</span> lStd $fStd.l_std
    label $lStd -text <span class=3D"hljs-string">"Standard (ms):"</span> -=
font $flipFont -anchor w -width <span class=3D"hljs-number">15</span>
    setBalloon $lStd <span class=3D"hljs-string">"Standard timeout (in ms)"=
</span>
    <span class=3D"hljs-keyword">set</span> eStd $fStd.e_std
    entry $eStd -textvariable waitTime(standard) -width <span class=3D"hljs=
-number">5</span> -font $flipFont
    setBalloon $eStd <span class=3D"hljs-string">"Standard timeout value"</=
span>
    pack $lStd $eStd -side left
    <span class=3D"hljs-keyword">set</span> fExt $fTimers.f_ext
    frame $fExt -relief flat
    <span class=3D"hljs-keyword">set</span> lExt $fExt.l_ext
    label $lExt -text <span class=3D"hljs-string">"Extended (ms):"</span> -=
font $flipFont -anchor w -width <span class=3D"hljs-number">15</span>
    setBalloon $lExt <span class=3D"hljs-string">"Extended timeout (in ms)"=
</span>
    <span class=3D"hljs-keyword">set</span> eExt $fExt.e_ext
    entry $eExt -textvariable waitTime(extended) -width <span class=3D"hljs=
-number">5</span> -font $flipFont
    setBalloon $eExt <span class=3D"hljs-string">"Extended timeout value"</=
span>
    pack $lExt $eExt -side left
    pack config $fStd $fExt -side top
    <span class=3D"hljs-keyword">set</span> fbuttons $w.f_buttons
    frame $fbuttons -relief flat
    button $fbuttons.b_ok -bd <span class=3D"hljs-number">3</span> -text <s=
pan class=3D"hljs-string">"OK"</span> -command {cbOnOkTimersDbox} -font $fl=
ipFont
    setBalloon $fbuttons.b_ok <span class=3D"hljs-string">"Applies specifie=
d options"</span>
    pack $fbuttons.b_ok -side left -padx <span class=3D"hljs-number">55</sp=
an>
    pack $fTimers -side top -fill both -expand true -padx <span class=3D"hl=
js-number">5</span> -pady <span class=3D"hljs-number">5</span>
    pack $fbuttons -side top -fill both -expand true -padx <span class=3D"h=
ljs-number">5</span> -pady <span class=3D"hljs-number">5</span>
    bind $w &lt;Return&gt; {cbOnOkTimersDbox}
    bind $eStd &lt;Return&gt; {cbOnOkTimersDbox}
    bind $eExt &lt;Return&gt; {cbOnOkTimersDbox}
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-comment">#david eseo</span>
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> drawRs2=
32canSetupDbox</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> atmelProtocol canAcc flipFon=
t tcl_platform
    <span class=3D"hljs-keyword">global</span> canPort canBaud flipStates b=
audList
    <span class=3D"hljs-keyword">set</span> w .rs232canSetup
    <span class=3D"hljs-keyword">if</span> {[winfo exists $w]} then {
<span class=3D"hljs-comment">	#dbgShowInfo "$w already exists =3D&gt; retur=
n"</span>
<span class=3D"hljs-comment">	#dbgEndProc [info level [info level]]</span>
	<span class=3D"hljs-keyword">return</span>
    }
    toplevel $w -class Dialog
    wm title $w <span class=3D"hljs-string">"Controller Area Network Setup"=
</span>
    wm resizable $w <span class=3D"hljs-number">0</span> <span class=3D"hlj=
s-number">0</span>
    wm protocol $w WM_DELETE_WINDOW <span class=3D"hljs-string">"wm withdra=
w $w"</span>
    wm withdraw $w
    <span class=3D"hljs-keyword">set</span> fMain $w.f_main
    frame $fMain -relief raised -bd <span class=3D"hljs-number">2</span>
    <span class=3D"hljs-keyword">set</span> f0 $fMain.f_0
    frame $f0 -relief groove -bd <span class=3D"hljs-number">2</span>
    <span class=3D"hljs-keyword">set</span> f1 $fMain.f_1
    frame $f1 -relief groove -bd <span class=3D"hljs-number">2</span>
    <span class=3D"hljs-keyword">set</span> f2 $fMain.f_2
    frame $f2 -relief groove -bd <span class=3D"hljs-number">2</span>
    <span class=3D"hljs-keyword">set</span> f3 $f1.f_3
    frame $f3
    <span class=3D"hljs-keyword">set</span> f4 $f1.f_4
    frame $f4 -width <span class=3D"hljs-number">55</span>
    <span class=3D"hljs-keyword">set</span> f5 $f1.f_5
    frame $f5
    <span class=3D"hljs-keyword">set</span> f6 $f2.f_6
    frame $f6
    <span class=3D"hljs-keyword">set</span> f7 $f2.f_7
    frame $f7 -width <span class=3D"hljs-number">85</span>
    <span class=3D"hljs-keyword">set</span> f8 $f2.f_8
    frame $f8
    <span class=3D"hljs-keyword">set</span> idLabelList [<span class=3D"hlj=
s-keyword">list</span> <span class=3D"hljs-string">"Select_Node :"</span> <=
span class=3D"hljs-string">"Prog_Start :"</span> <span class=3D"hljs-string=
">"Prog_Data :"</span> <span class=3D"hljs-string">"Display_Data :"</span> =
<span class=3D"hljs-string">"Write_Command :"</span> <span class=3D"hljs-st=
ring">"Read_Command :"</span> <span class=3D"hljs-string">"Error :"</span>]
    <span class=3D"hljs-keyword">set</span> numberOfIds [<span class=3D"hlj=
s-keyword">llength</span> $idLabelList]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">0</span>} {$i &lt; $numberOfIds} {<=
span class=3D"hljs-keyword">incr</span> i} {
	<span class=3D"hljs-keyword">set</span> f[<span class=3D"hljs-keyword">exp=
r</span> $i + <span class=3D"hljs-number">9</span>] $fMain.f_[<span class=
=3D"hljs-keyword">expr</span> $i + <span class=3D"hljs-number">9</span>]
	<span class=3D"hljs-keyword">set</span> j f[<span class=3D"hljs-keyword">e=
xpr</span> $i + <span class=3D"hljs-number">9</span>]
	frame [<span class=3D"hljs-keyword">subst</span> $$j]
    }
    <span class=3D"hljs-keyword">set</span> f_s $fMain.f_s
    frame $f_s
    <span class=3D"hljs-keyword">set</span> fb $w.f_b
    frame $fb
    <span class=3D"hljs-keyword">switch</span> $tcl_platform(platform) {
    windows {
	    <span class=3D"hljs-keyword">set</span> flipStates(comList) {}
	    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">=
set</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D <span class=
=3D"hljs-number">20</span>} {<span class=3D"hljs-keyword">incr</span> i} {
		<span class=3D"hljs-keyword">if</span> {! [<span class=3D"hljs-keyword">c=
atch</span> {<span class=3D"hljs-keyword">set</span> devId [<span class=3D"=
hljs-keyword">open</span> COM$i RDWR]} err_id]} then {
		    <span class=3D"hljs-keyword">close</span> $devId
		    <span class=3D"hljs-keyword">lappend</span> flipStates(comList) COM$i
		}
	    }
<span class=3D"hljs-comment">	    #dbgShowVar "flipStates(comList) =3D $fli=
pStates(comList)"</span>
	    <span class=3D"hljs-keyword">if</span> {$flipStates(comList) !=3D <spa=
n class=3D"hljs-string">""</span>} then {
		<span class=3D"hljs-keyword">set</span> port [<span class=3D"hljs-keyword=
">lindex</span> $flipStates(comList) <span class=3D"hljs-number">0</span>]
		<span class=3D"hljs-keyword">set</span> command [<span class=3D"hljs-keyw=
ord">concat</span> tk_optionMenu $f0.portSelect port $flipStates(comList)]
		<span class=3D"hljs-keyword">eval</span> $command
	    }
	}
    unix {
	    <span class=3D"hljs-keyword">switch</span> $tcl_platform(os) {
	    SunOs {
		    <span class=3D"hljs-keyword">set</span> port /dev/ttya
		    tk_optionMenu $f0.portSelect port /dev/ttya /dev/ttyb
		}
	    Linux {
		    <span class=3D"hljs-keyword">set</span> port /dev/ttyS0
		    tk_optionMenu $f0.portSelect port /dev/ttyS0 /dev/ttyS1 /dev/ttyS2 /d=
ev/ttyS3
		}
	    }
	}
    default {
	    log_message <span class=3D"hljs-string">"Unknown Tcl platform"</span>
	    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number"=
>0</span>
	}
    }
    tk_optionMenu $f0.baudSelect baud <span class=3D"hljs-number">115200</s=
pan> <span class=3D"hljs-number">57600</span> <span class=3D"hljs-number">3=
8400</span> <span class=3D"hljs-number">19200</span> <span class=3D"hljs-nu=
mber">9600</span> <span class=3D"hljs-number">4800</span> <span class=3D"hl=
js-number">2400</span>
    <span class=3D"hljs-keyword">set</span> baud <span class=3D"hljs-number=
">38400</span>
    setBalloon $f0.baudSelect <span class=3D"hljs-string">"Actual selected =
baudrate"</span>
    label $f0.l_port -text <span class=3D"hljs-string">"Port"</span> -width=
 <span class=3D"hljs-number">6</span> -font $flipFont
    label $f0.l_baud -text <span class=3D"hljs-string">"Baud Rate"</span> -=
width <span class=3D"hljs-number">12</span> -font $flipFont
    pack configure $f0.l_port $f0.portSelect $f0.l_baud $f0.baudSelect -sid=
e left
    label $f5.l_baud -text <span class=3D"hljs-string">"Can Bit Rate"</span=
> -width <span class=3D"hljs-number">15</span> -font $flipFont
    tk_optionMenu $f5.baudSelect canBaud <span class=3D"hljs-number">20</sp=
an>k <span class=3D"hljs-number">100</span>k <span class=3D"hljs-number">12=
5</span>k <span class=3D"hljs-number">250</span>k <span class=3D"hljs-numbe=
r">500</span>k <span class=3D"hljs-number">1000</span>k
    <span class=3D"hljs-keyword">set</span> canBaud <span class=3D"hljs-num=
ber">500</span>k
    pack configure $f5.l_baud $f5.baudSelect -side left -anchor e
    setBalloon $f5.baudSelect <span class=3D"hljs-string">"CAN  actual sele=
cted bit rate"</span>
    pack configure $f3 $f4 $f5 -side left -pady <span class=3D"hljs-number"=
>5</span>
    label $f6.l_cris -text <span class=3D"hljs-string">"CRIS"</span> -ancho=
r w -font $flipFont -fg blue
    setBalloon $f6.l_cris <span class=3D"hljs-string">"CAN Relocatable Iden=
tifier Segment"</span>
    entry $f6.e_cris -textvariable ::deviceArray(crisConnect) -font $flipFo=
nt -state normal -width <span class=3D"hljs-number">4</span> -fg blue
    setBalloon $f6.e_cris <span class=3D"hljs-string">"CRIS hexadecimal val=
ue"</span>
    pack configure $f6.l_cris $f6.e_cris -side left -padx <span class=3D"hl=
js-number">5</span>
    label $f8.l_node -text <span class=3D"hljs-string">"Node"</span> -ancho=
r w -font $flipFont
    entry $f8.e_node -textvariable ::deviceArray(nnbConnect) -font $flipFon=
t -state normal -width <span class=3D"hljs-number">4</span>
    setBalloon $f8.e_node <span class=3D"hljs-string">"Node number hexadeci=
mal value"</span>
    pack configure $f8.l_node $f8.e_node -side left -padx <span class=3D"hl=
js-number">5</span>
    pack configure $f8 $f7 $f6 -side left -pady <span class=3D"hljs-number"=
>5</span>
    pack configure $f0 $f1 $f2 -side top -padx <span class=3D"hljs-number">=
20</span> -pady <span class=3D"hljs-number">5</span> -fill x
    <span class=3D"hljs-keyword">set</span> idValueList [<span class=3D"hlj=
s-keyword">list</span> atmelProtocol(ci_select_node) atmelProtocol(ci_prog_=
start) atmelProtocol(ci_prog_data) atmelProtocol(ci_display_data) atmelProt=
ocol(ci_write_command) atmelProtocol(ci_read_command) atmelProtocol(ci_erro=
r)]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">0</span>} {$i &lt; [<span class=3D"=
hljs-keyword">llength</span> $idLabelList]} {<span class=3D"hljs-keyword">i=
ncr</span> i} {
	<span class=3D"hljs-keyword">set</span> j f[<span class=3D"hljs-keyword">e=
xpr</span> $i + <span class=3D"hljs-number">9</span>]
	label [<span class=3D"hljs-keyword">subst</span> $$j].l_$i -text [<span cl=
ass=3D"hljs-keyword">lindex</span> $idLabelList $i] -anchor w -font $flipFo=
nt -width <span class=3D"hljs-number">18</span>
	label [<span class=3D"hljs-keyword">subst</span> $$j].l_val$i -text <span =
class=3D"hljs-number">0</span>x$::deviceArray(crisConnect)[<span class=3D"h=
ljs-keyword">subst</span> $[<span class=3D"hljs-keyword">lindex</span> $idV=
alueList $i]] -anchor w -font $flipFont -fg blue
	pack configure [<span class=3D"hljs-keyword">subst</span> $$j].l_$i [<span=
 class=3D"hljs-keyword">subst</span> $$j].l_val$i -side left
	pack configure [<span class=3D"hljs-keyword">subst</span> $$j] -side top
    }
    pack configure $f_s -pady <span class=3D"hljs-number">5</span>
    button $fb.b_comm -text <span class=3D"hljs-string">"Init Comm"</span> =
-font $flipFont -command {ptclInitComm} -bd <span class=3D"hljs-number">3</=
span> -state normal
    setBalloon $fb.b_comm <span class=3D"hljs-string">"Opens Communication"=
</span>
<span class=3D"hljs-comment">    #setBalloon $fb.b_synchro "Synchronizes Fl=
ip and device"</span>
    button $fb.b_start -text <span class=3D"hljs-string">"Node Connect"</sp=
an> -command {updateCis
	ptclSelectNode} -bd <span class=3D"hljs-number">3</span> -state disabled
    setBalloon $fb.b_start <span class=3D"hljs-string">"Starts communicatio=
n with node $::deviceArray(nnbConnect)"</span>
    button $fb.b_cancel -text <span class=3D"hljs-string">"Cancel"</span> -=
font $flipFont -command <span class=3D"hljs-string">"wm withdraw $w"</span>=
 -bd <span class=3D"hljs-number">3</span>
    setBalloon $fb.b_cancel <span class=3D"hljs-string">"Closes dialog box\=
nwithout applying options"</span>
    frame $fb.f_bspace1 -width <span class=3D"hljs-number">25</span>
    frame $fb.f_bspace2 -width <span class=3D"hljs-number">25</span>
    pack configure $fb.b_comm $fb.f_bspace1 $fb.b_start $fb.f_bspace2 $fb.b=
_cancel -side left
    pack configure $fMain $fb -side top -padx <span class=3D"hljs-number">5=
</span> -pady <span class=3D"hljs-number">5</span> -expand <span class=3D"h=
ljs-number">1</span>
    bind $f6.e_cris &lt;Return&gt; {
	<span class=3D"hljs-keyword">if</span> {[isValidHexaInput [%W get]]} then =
{
	    <span class=3D"hljs-keyword">set</span> atmelProtocol(cris) [%W get]
	    updateCis
	}
    }
    bind $f8.e_node &lt;Return&gt; {
	isValidHexaInput [%W get]
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> updateC=
is</span> {} {
    <span class=3D"hljs-keyword">global</span> atmelProtocol
    <span class=3D"hljs-keyword">foreach</span> id {ci_select_node ci_prog_=
start ci_prog_data ci_display_data ci_write_command ci_read_command ci_erro=
r} j {<span class=3D"hljs-number">0</span> <span class=3D"hljs-number">1</s=
pan> <span class=3D"hljs-number">2</span> <span class=3D"hljs-number">3</sp=
an> <span class=3D"hljs-number">4</span> <span class=3D"hljs-number">5</spa=
n> <span class=3D"hljs-number">6</span>} {
	<span class=3D"hljs-keyword">set</span> atmelProtocol($id) <span class=3D"=
hljs-number">0</span>x$::deviceArray(crisConnect)$j
	.rs232canSetup.f_main.f_[<span class=3D"hljs-keyword">expr</span> $j + <sp=
an class=3D"hljs-number">9</span>].l_val$j configure -text $atmelProtocol($=
id)
    }
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-comment">#fin david eseo</span>
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> drawCan=
SetupDbox</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> canProtocol canAcc flipFont =
tcl_platform
    <span class=3D"hljs-keyword">global</span> canPort canBaud flipStates v=
ector
    <span class=3D"hljs-keyword">set</span> w .canSetup
    <span class=3D"hljs-keyword">if</span> {[winfo exists $w]} then {
<span class=3D"hljs-comment">	#dbgShowInfo "$w already exists =3D&gt; retur=
n"</span>
<span class=3D"hljs-comment">	#dbgEndProc [info level [info level]]</span>
	<span class=3D"hljs-keyword">return</span>
    }
    toplevel $w -class Dialog
    wm title $w <span class=3D"hljs-string">"Controller Area Network Setup"=
</span>
    wm resizable $w <span class=3D"hljs-number">0</span> <span class=3D"hlj=
s-number">0</span>
    wm protocol $w WM_DELETE_WINDOW <span class=3D"hljs-string">"wm withdra=
w $w"</span>
    wm withdraw $w
    <span class=3D"hljs-keyword">set</span> fMain $w.f_main
    frame $fMain -relief raised -bd <span class=3D"hljs-number">2</span>
    <span class=3D"hljs-keyword">set</span> f1 $fMain.f_1
    frame $f1 -relief groove -bd <span class=3D"hljs-number">2</span>
    <span class=3D"hljs-keyword">set</span> f2 $fMain.f_2
    frame $f2 -relief groove -bd <span class=3D"hljs-number">2</span>
    <span class=3D"hljs-keyword">set</span> f3 $f1.f_3
    frame $f3
    <span class=3D"hljs-keyword">set</span> f4 $f1.f_4
    frame $f4 -width <span class=3D"hljs-number">10</span>
    <span class=3D"hljs-keyword">set</span> f5 $f1.f_5
    frame $f5
    <span class=3D"hljs-keyword">set</span> f6 $f2.f_6
    frame $f6
    <span class=3D"hljs-keyword">set</span> f7 $f2.f_7
    frame $f7 -width <span class=3D"hljs-number">40</span>
    <span class=3D"hljs-keyword">set</span> f8 $f2.f_8
    frame $f8
    <span class=3D"hljs-keyword">set</span> f20 $fMain.f_20
    frame $f20 -relief groove -bd <span class=3D"hljs-number">2</span>
    <span class=3D"hljs-keyword">set</span> f21 $f20.f_21
    frame $f21
    <span class=3D"hljs-keyword">set</span> f22 $f20.f_22
    frame $f22
    <span class=3D"hljs-keyword">set</span> f23 $f21.f_23
    frame $f23 -width <span class=3D"hljs-number">40</span>
    <span class=3D"hljs-keyword">set</span> f24 $f22.f_24
    frame $f24 -width <span class=3D"hljs-number">40</span>
    setBalloon $f20 <span class=3D"hljs-string">"If only one PCMCIA slot is=
 used, select slot 0\n even if CANcardX is inserted in slot 1."</span>
    <span class=3D"hljs-keyword">set</span> idLabelList [<span class=3D"hlj=
s-keyword">list</span> <span class=3D"hljs-string">"Id_Select_Node :"</span=
> <span class=3D"hljs-string">"Id_Prog_Start :"</span> <span class=3D"hljs-=
string">"Id_Prog_Data :"</span> <span class=3D"hljs-string">"Id_Display_Dat=
a :"</span> <span class=3D"hljs-string">"Id_Write_Command :"</span> <span c=
lass=3D"hljs-string">"Id_Read_Command :"</span> <span class=3D"hljs-string"=
>"Id_Error :"</span>]
    <span class=3D"hljs-keyword">set</span> numberOfIds [<span class=3D"hlj=
s-keyword">llength</span> $idLabelList]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">0</span>} {$i &lt; $numberOfIds} {<=
span class=3D"hljs-keyword">incr</span> i} {
	<span class=3D"hljs-keyword">set</span> f[<span class=3D"hljs-keyword">exp=
r</span> $i + <span class=3D"hljs-number">9</span>] $fMain.f_[<span class=
=3D"hljs-keyword">expr</span> $i + <span class=3D"hljs-number">9</span>]
	<span class=3D"hljs-keyword">set</span> j f[<span class=3D"hljs-keyword">e=
xpr</span> $i + <span class=3D"hljs-number">9</span>]
	frame [<span class=3D"hljs-keyword">subst</span> $$j]
    }
    <span class=3D"hljs-keyword">set</span> f_s $fMain.f_s
    frame $f_s
    <span class=3D"hljs-keyword">set</span> fb $w.f_b
    frame $fb
    label $f3.l_port -text <span class=3D"hljs-string">"Port :"</span> -wid=
th <span class=3D"hljs-number">6</span> -font $flipFont
    <span class=3D"hljs-keyword">switch</span> $tcl_platform(platform) {
    windows {
	    <span class=3D"hljs-keyword">set</span> canPort LPT1
	    tk_optionMenu $f3.portSelect canPort LPT1 LPT2
	}
    unix {
	    notImplemented
	}
    default {
	    notImplemented
	}
    }
    pack configure $f3.l_port $f3.portSelect -side left
    label $f5.l_baud -text <span class=3D"hljs-string">"Baud :"</span> -wid=
th <span class=3D"hljs-number">6</span> -font $flipFont
    tk_optionMenu $f5.baudSelect canBaud <span class=3D"hljs-number">20</sp=
an>k <span class=3D"hljs-number">100</span>k <span class=3D"hljs-number">12=
5</span>k <span class=3D"hljs-number">250</span>k <span class=3D"hljs-numbe=
r">500</span>k <span class=3D"hljs-number">1000</span>k
    <span class=3D"hljs-keyword">set</span> canBaud <span class=3D"hljs-num=
ber">500</span>k
    pack configure $f5.l_baud $f5.baudSelect -side left
    pack configure $f3 $f4 $f5 -side left -pady <span class=3D"hljs-number"=
>5</span>
    label $f6.l_cris -text <span class=3D"hljs-string">"CRIS"</span> -ancho=
r w -font $flipFont -fg blue
    setBalloon $f6.l_cris <span class=3D"hljs-string">"CAN Relocatable Iden=
tifier Segment"</span>
    entry $f6.e_cris -textvariable ::deviceArray(crisConnect) -font $flipFo=
nt -state normal -width <span class=3D"hljs-number">4</span> -fg blue
    setBalloon $f6.e_cris <span class=3D"hljs-string">"CRIS hexadecimal val=
ue"</span>
    pack configure $f6.l_cris $f6.e_cris -side left -padx <span class=3D"hl=
js-number">5</span>
    label $f8.l_node -text <span class=3D"hljs-string">"Node"</span> -ancho=
r w -font $flipFont
    entry $f8.e_node -textvariable ::deviceArray(nnbConnect) -font $flipFon=
t -state normal -width <span class=3D"hljs-number">4</span>
    setBalloon $f8.e_node <span class=3D"hljs-string">"Node number hexadeci=
mal value"</span>
    pack configure $f8.l_node $f8.e_node -side left -padx <span class=3D"hl=
js-number">5</span>
    pack configure $f8 $f7 $f6 -side left -pady <span class=3D"hljs-number"=
>5</span>
    label $f21.l_slot -text <span class=3D"hljs-string">"PCMCIA Slot :"</sp=
an> -anchor w -font $flipFont -width <span class=3D"hljs-number">16</span>
    radiobutton $f21.b_s0 -text <span class=3D"hljs-string">"0"</span> -<sp=
an class=3D"hljs-keyword">variable</span> vector(slot) -value <span class=
=3D"hljs-number">0</span> -font $flipFont
    radiobutton $f21.b_s1 -text <span class=3D"hljs-string">"1"</span> -<sp=
an class=3D"hljs-keyword">variable</span> vector(slot) -value <span class=
=3D"hljs-number">1</span> -font $flipFont
    pack configure $f21.l_slot $f23 $f21.b_s0 $f21.b_s1 -side left
    label $f22.l_channel -text <span class=3D"hljs-string">"CAN Channel :"<=
/span> -anchor w -font $flipFont -width <span class=3D"hljs-number">16</spa=
n>
    radiobutton $f22.b_c0 -text <span class=3D"hljs-string">"1"</span> -<sp=
an class=3D"hljs-keyword">variable</span> vector(channel) -value <span clas=
s=3D"hljs-number">0</span> -font $flipFont
    radiobutton $f22.b_c1 -text <span class=3D"hljs-string">"2"</span> -<sp=
an class=3D"hljs-keyword">variable</span> vector(channel) -value <span clas=
s=3D"hljs-number">1</span> -font $flipFont
    pack configure $f22.l_channel $f24 $f22.b_c0 $f22.b_c1 -side left
    pack configure $f21 $f22 -side top
    pack configure $f1 $f2 $f20 -side top -padx <span class=3D"hljs-number"=
>20</span> -pady <span class=3D"hljs-number">5</span> -fill x
    <span class=3D"hljs-keyword">set</span> idValueList [<span class=3D"hlj=
s-keyword">list</span> canProtocol(id_select_node) canProtocol(id_prog_star=
t) canProtocol(id_prog_data) canProtocol(id_display_data) canProtocol(id_wr=
ite_command) canProtocol(id_read_command) canProtocol(id_error)]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">0</span>} {$i &lt; [<span class=3D"=
hljs-keyword">llength</span> $idLabelList]} {<span class=3D"hljs-keyword">i=
ncr</span> i} {
	<span class=3D"hljs-keyword">set</span> j f[<span class=3D"hljs-keyword">e=
xpr</span> $i + <span class=3D"hljs-number">9</span>]
	label [<span class=3D"hljs-keyword">subst</span> $$j].l_$i -text [<span cl=
ass=3D"hljs-keyword">lindex</span> $idLabelList $i] -anchor w -font $flipFo=
nt -width <span class=3D"hljs-number">18</span>
	label [<span class=3D"hljs-keyword">subst</span> $$j].l_val$i -text <span =
class=3D"hljs-number">0</span>x$::deviceArray(crisConnect)[<span class=3D"h=
ljs-keyword">subst</span> $[<span class=3D"hljs-keyword">lindex</span> $idV=
alueList $i]] -anchor w -font $flipFont -fg blue
	pack configure [<span class=3D"hljs-keyword">subst</span> $$j].l_$i [<span=
 class=3D"hljs-keyword">subst</span> $$j].l_val$i -side left
	pack configure [<span class=3D"hljs-keyword">subst</span> $$j] -side top
    }
    pack configure $f_s -pady <span class=3D"hljs-number">5</span>
    button $fb.b_init -text <span class=3D"hljs-string">"Init"</span> -comm=
and {.canSetup.f_b.b_init config -state disabled
	ptclInitCANinterface} -bd <span class=3D"hljs-number">3</span> -state norm=
al
    setBalloon $fb.b_init <span class=3D"hljs-string">"Initializes the CAN =
interface"</span>
    frame $fb.f_bspace1 -width <span class=3D"hljs-number">30</span>
    button $fb.b_start -text <span class=3D"hljs-string">"Node Connect"</sp=
an> -command {updateIds
	ptclSelectNode} -bd <span class=3D"hljs-number">3</span> -state disabled
    setBalloon $fb.b_start <span class=3D"hljs-string">"Starts communicatio=
n with node $::deviceArray(nnbConnect)"</span>
    frame $fb.f_bspace2 -width <span class=3D"hljs-number">30</span>
    button $fb.b_cancel -text <span class=3D"hljs-string">"Cancel"</span> -=
command <span class=3D"hljs-string">"wm withdraw $w"</span> -bd <span class=
=3D"hljs-number">2</span> -state normal
    pack configure $fb.b_init $fb.f_bspace1 $fb.b_start $fb.f_bspace2 $fb.b=
_cancel -side left
    pack configure $fMain $fb -side top -padx <span class=3D"hljs-number">5=
</span> -pady <span class=3D"hljs-number">5</span>
    bind $f6.e_cris &lt;Return&gt; {
	<span class=3D"hljs-keyword">if</span> {[isValidHexaInput [%W get]]} then =
{
	    <span class=3D"hljs-keyword">set</span> canProtocol(cris) [%W get]
	    updateIds
	}
    }
    bind $f8.e_node &lt;Return&gt; {
	isValidHexaInput [%W get]
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> updateI=
ds</span> {} {
    <span class=3D"hljs-keyword">global</span> canProtocol
    <span class=3D"hljs-keyword">foreach</span> id {id_select_node id_prog_=
start id_prog_data id_display_data id_write_command id_read_command id_erro=
r} j {<span class=3D"hljs-number">0</span> <span class=3D"hljs-number">1</s=
pan> <span class=3D"hljs-number">2</span> <span class=3D"hljs-number">3</sp=
an> <span class=3D"hljs-number">4</span> <span class=3D"hljs-number">5</spa=
n> <span class=3D"hljs-number">6</span>} {
	<span class=3D"hljs-keyword">set</span> canProtocol($id) <span class=3D"hl=
js-number">0</span>x$::deviceArray(crisConnect)$j
	.canSetup.f_main.f_[<span class=3D"hljs-keyword">expr</span> $j + <span cl=
ass=3D"hljs-number">9</span>].l_val$j configure -text $canProtocol($id)
    }
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> working=
_display</span> {widget show_text fore back} {
    <span class=3D"hljs-keyword">global</span> working_active
    <span class=3D"hljs-keyword">if</span> {$working_active =3D=3D <span cl=
ass=3D"hljs-number">0</span>} then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">if</span> {$show_text &gt; <span class=3D"=
hljs-number">0</span>} then {
	$widget configure -fg $fore
	<span class=3D"hljs-keyword">set</span> show_text <span class=3D"hljs-numb=
er">0</span>
    } else {
	$widget configure -fg $back
	<span class=3D"hljs-keyword">set</span> show_text <span class=3D"hljs-numb=
er">1</span>
    }
    <span class=3D"hljs-keyword">after</span> <span class=3D"hljs-number">5=
00</span> <span class=3D"hljs-string">"working_display $widget $show_text $=
fore $back"</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> working=
_start</span> {widget fore back} {
    <span class=3D"hljs-keyword">global</span> working_active
    <span class=3D"hljs-keyword">set</span> working_active <span class=3D"h=
ljs-number">1</span>
    working_display $widget <span class=3D"hljs-number">0</span> $fore $bac=
k
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> working=
_stop</span> {widget fore back} {
    <span class=3D"hljs-keyword">global</span> working_active
    <span class=3D"hljs-keyword">set</span> working_active <span class=3D"h=
ljs-number">0</span>
    $widget configure -bg $back -fg $fore
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> drawCus=
tomWindow</span> {} {
    <span class=3D"hljs-keyword">set</span> w .customWindow
    <span class=3D"hljs-keyword">if</span> {[winfo exists $w]} then {
<span class=3D"hljs-comment">	#dbgShowInfo "$w already exists =3D&gt; retur=
n"</span>
<span class=3D"hljs-comment">	#dbgEndProc [info level [info level]]</span>
	<span class=3D"hljs-keyword">return</span>
    }
    toplevel $w -class Dialog
    wm title $w <span class=3D"hljs-string">"FLIP Customized Window"</span>
    wm resizable $w <span class=3D"hljs-number">0</span> <span class=3D"hlj=
s-number">0</span>
    <span class=3D"hljs-keyword">set</span> fCustom $w.f_custom
    frame $fCustom -relief groove -bd <span class=3D"hljs-number">2</span> =
-height <span class=3D"hljs-number">300</span> -width <span class=3D"hljs-n=
umber">250</span>
    pack configure $fCustom -fill both -expand <span class=3D"hljs-number">=
1</span>
    pack propagate $fCustom <span class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> addButt=
on</span> {bName bText bCommand} {
    <span class=3D"hljs-keyword">set</span> w .customWindow
    <span class=3D"hljs-keyword">set</span> butt $w.f_custom.$bName
    button $butt -text $bText -command $bCommand
    pack $butt
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> addEntr=
y</span> {eName eVariable} {
    <span class=3D"hljs-keyword">set</span> w .customWindow
    <span class=3D"hljs-keyword">set</span> ent $w.f_custom.$eName
    entry $ent -textVariable $eVariable
    pack $ent
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> drawPar=
tnersWindow</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> flipFont
    <span class=3D"hljs-keyword">set</span> partnersList [<span class=3D"hl=
js-keyword">list</span> Jungo Ixxat Peak Rm Systec Vector]
    <span class=3D"hljs-keyword">set</span> urlList [<span class=3D"hljs-ke=
yword">list</span> <span class=3D"hljs-string">"www.jungo.com"</span> <span=
 class=3D"hljs-string">"www.ixxat.com"</span> <span class=3D"hljs-string">"=
www.peak-system.com"</span> <span class=3D"hljs-string">"www.rmcan.com"</sp=
an> <span class=3D"hljs-string">"www.systec-electronic.de"</span> <span cla=
ss=3D"hljs-string">"www.vector-informatik.de"</span>]
    <span class=3D"hljs-keyword">set</span> labelsList [<span class=3D"hljs=
-keyword">list</span> <span class=3D"hljs-string">"USB Drivers :"</span> <s=
pan class=3D"hljs-string">"IXXAT CAN Interface :"</span> <span class=3D"hlj=
s-string">"PEAK CAN Interface :"</span> <span class=3D"hljs-string">"RM CAN=
 Interface :"</span> <span class=3D"hljs-string">"SYSTEC CAN Interface :"</=
span> <span class=3D"hljs-string">"VECTOR CAN Interface :"</span>]
    <span class=3D"hljs-keyword">set</span> w .partners
    <span class=3D"hljs-keyword">if</span> {[winfo exists $w]} then {
<span class=3D"hljs-comment">	#dbgShowInfo "$w already exists =3D&gt; retur=
n"</span>
<span class=3D"hljs-comment">	#dbgEndProc [info level [info level]]</span>
	<span class=3D"hljs-keyword">return</span>
    }
    toplevel $w -class Dialog
    wm title $w <span class=3D"hljs-string">"Third Party Vendors"</span>
    wm resizable $w <span class=3D"hljs-number">0</span> <span class=3D"hlj=
s-number">0</span>
    wm geometry $w +[<span class=3D"hljs-keyword">expr</span> [winfo x .]+<=
span class=3D"hljs-number">100</span>]+[<span class=3D"hljs-keyword">expr</=
span> [winfo y .]+<span class=3D"hljs-number">100</span>]
    wm protocol $w WM_DELETE_WINDOW <span class=3D"hljs-string">"wm withdra=
w $w"</span>
    wm withdraw $w
    <span class=3D"hljs-keyword">set</span> fTop $w.f_top
    frame $fTop -relief raised -bd <span class=3D"hljs-number">2</span> -he=
ight <span class=3D"hljs-number">600</span> -width <span class=3D"hljs-numb=
er">300</span>
    <span class=3D"hljs-keyword">foreach</span> i $partnersList {
	frame $fTop.f_${i}
    }
    <span class=3D"hljs-keyword">set</span> fButtons $w.f_buttons
    frame $fButtons -relief flat
    <span class=3D"hljs-keyword">foreach</span> t $labelsList p $partnersLi=
st u $urlList {
	label $fTop.f_${p}.l_${p} -text $t -anchor w -font $flipFont -width <span =
class=3D"hljs-number">22</span> -padx <span class=3D"hljs-number">5</span>
	text $fTop.f_${p}.t_${p}WEB -height <span class=3D"hljs-number">1</span> -=
width <span class=3D"hljs-number">30</span> -relief flat -cursor hand2 -for=
eground blue -font $flipFont -bg [.main cget -background]
	$fTop.f_${p}.t_${p}WEB insert end $u
	$fTop.f_${p}.t_${p}WEB tag add UrlText <span class=3D"hljs-number">1.0</sp=
an> end
	$fTop.f_${p}.t_${p}WEB tag configure UrlText -justify left
	$fTop.f_${p}.t_${p}WEB configure -state disabled
	pack $fTop.f_${p}.l_${p} $fTop.f_${p}.t_${p}WEB -side left
	bind $fTop.f_${p}.t_${p}WEB &lt;ButtonPress<span class=3D"hljs-number">-1<=
/span>&gt; [<span class=3D"hljs-keyword">list</span> wwwBrowser $u]
    }
    button $fButtons.b_ok -text <span class=3D"hljs-string">"OK"</span> -fo=
nt $flipFont -command <span class=3D"hljs-string">"wm withdraw $w"</span> -=
bd <span class=3D"hljs-number">3</span> -state normal
    pack $fButtons.b_ok -pady <span class=3D"hljs-number">5</span> -anchor =
e
    <span class=3D"hljs-keyword">foreach</span> i $partnersList {
	pack configure $fTop.f_${i} -expand <span class=3D"hljs-number">1</span> -=
fill both -pady <span class=3D"hljs-number">5</span>
    }
    pack configure $fTop $fButtons -side top
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> cancelE=
veryLink</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> flipStates
    <span class=3D"hljs-keyword">if</span> {$flipStates(canNode) =3D=3D <sp=
an class=3D"hljs-string">"open"</span>} then {
	<span class=3D"hljs-keyword">catch</span> [ptclSelectNode]
    }
    <span class=3D"hljs-keyword">if</span> {$flipStates(rs232Comm) =3D=3D <=
span class=3D"hljs-string">"on"</span>} then {
<span class=3D"hljs-comment">	#dbgShowInfo "Cancelling RS232..."</span>
	<span class=3D"hljs-keyword">catch</span> [ptclCancelRs232Comm]
    } elseif {$flipStates(canComm) =3D=3D <span class=3D"hljs-string">"on"<=
/span>} {
<span class=3D"hljs-comment">	#dbgShowInfo "Cancelling CAN..."</span>
	<span class=3D"hljs-keyword">catch</span> [ptclCancelCANComm]
    } elseif {$flipStates(usbComm) =3D=3D <span class=3D"hljs-string">"on"<=
/span>} {
<span class=3D"hljs-comment">	#dbgShowInfo "Cancelling USB..."</span>
	<span class=3D"hljs-keyword">catch</span> [ptclCancelUSBComm]
    }
    <span class=3D"hljs-keyword">catch</span> [wm withdraw .rs232CommDbox]
    <span class=3D"hljs-keyword">catch</span> [wm withdraw .rs232canSetup]
    <span class=3D"hljs-keyword">catch</span> [wm withdraw .usbCommDbox]
    <span class=3D"hljs-keyword">catch</span> [wm withdraw .canSetup]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> initPro=
tocol</span> {prot} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> protocol rs232standard rs232=
enhanced canstandard projDir
    <span class=3D"hljs-keyword">global</span> vci canProtocol canBoard can=
Acc txQueue rxQueue rxQAcc
    <span class=3D"hljs-keyword">global</span> protcl flipStates loadConfig=
 bootloaderVerDependent
    <span class=3D"hljs-keyword">set</span> protcl $prot
    clearStatusMessage
    <span class=3D"hljs-keyword">set</span> protFlag <span class=3D"hljs-nu=
mber">1</span>
    cancelEveryLink
    buildSkipTestList $prot
    <span class=3D"hljs-keyword">foreach</span> P [<span class=3D"hljs-keyw=
ord">info</span> procs ptcl*] {
	<span class=3D"hljs-keyword">rename</span> $P <span class=3D"hljs-string">=
""</span>
    }
    <span class=3D"hljs-keyword">if</span> {$prot =3D=3D <span class=3D"hlj=
s-string">"RS232Standard"</span>} then {
	<span class=3D"hljs-keyword">if</span> {$flipStates(comList) =3D=3D <span =
class=3D"hljs-string">""</span>} then {
	    tk_messageBox -message <span class=3D"hljs-string">"There is no availa=
ble serial port\n on your platform. Please fix the problem then\n restart F=
LIP."</span> -title <span class=3D"hljs-string">"RS232 Ports Scan"</span> -=
type ok -icon <span class=3D"hljs-keyword">error</span>
	    <span class=3D"hljs-keyword">exit</span>
	}
<span class=3D"hljs-comment">	#dbgShowInfo "RS232 Standard protocol selecte=
d."</span>
	<span class=3D"hljs-keyword">set</span> loadConfig(protocol) <span class=
=3D"hljs-string">"initProtocol RS232Standard"</span>
	<span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-number">0</spa=
n>} then {
	    <span class=3D"hljs-keyword">set</span> bErase .main.f_device.f_sbvbsb=
.f_sbv.b_erase
	    <span class=3D"hljs-keyword">if</span> {[winfo exists $bErase]} then {
		pack config $bErase -padx <span class=3D"hljs-number">1</span> -side righ=
t
	    }
	}
	<span class=3D"hljs-keyword">source</span> $projDir/tcl/protocol/rs232std.=
tcl
	<span class=3D"hljs-keyword">set</span> rs232standard(readSSB) <span class=
=3D"hljs-string">":020000050700F2"</span>
	<span class=3D"hljs-keyword">set</span> protocol(<span class=3D"hljs-keywo=
rd">eof</span>) <span class=3D"hljs-string">":00000001FF"</span>
	<span class=3D"hljs-keyword">set</span> protocol(ack) <span class=3D"hljs-=
string">"."</span>
	<span class=3D"hljs-keyword">set</span> protocol(checkSumErr) <span class=
=3D"hljs-string">"X"</span>
	<span class=3D"hljs-keyword">set</span> protocol(wrSecurityError) <span cl=
ass=3D"hljs-string">"P"</span>
	<span class=3D"hljs-keyword">set</span> protocol(rdWrSecurityError) <span =
class=3D"hljs-string">"L"</span>
<span class=3D"hljs-comment">	#david eseo</span>
	<span class=3D"hljs-keyword">set</span> protocol(name) <span class=3D"hljs=
-string">"rs232"</span>
<span class=3D"hljs-comment">	#fin david eseo</span>
	<span class=3D"hljs-keyword">set</span> bootloaderVerDependent(version) <s=
pan class=3D"hljs-string">"XX"</span>
	<span class=3D"hljs-keyword">set</span> bootloaderVerDependent(eeprom) <sp=
an class=3D"hljs-number">1</span>
	<span class=3D"hljs-keyword">set</span> bootloaderVerDependent(eb) <span c=
lass=3D"hljs-number">1</span>
	<span class=3D"hljs-keyword">set</span> bootloaderVerDependent(startAppli)=
 <span class=3D"hljs-number">1</span>
    } elseif {$prot =3D=3D <span class=3D"hljs-string">"RS232Enhanced"</spa=
n>} {
<span class=3D"hljs-comment">	#dbgShowInfo "RS232 Enhanced protocol selecte=
d."</span>
	<span class=3D"hljs-keyword">set</span> loadConfig(protocol) <span class=
=3D"hljs-string">"initProtocol RS232Enhanced"</span>
	<span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-number">0</spa=
n>} then {
	    <span class=3D"hljs-keyword">set</span> bErase .main.f_device.f_sbvbsb=
.f_sbv.b_erase
	    <span class=3D"hljs-keyword">if</span> {[winfo exists $bErase]} then {
		pack config $bErase -padx <span class=3D"hljs-number">1</span> -side righ=
t
	    }
	}
	<span class=3D"hljs-keyword">set</span> protocol(<span class=3D"hljs-keywo=
rd">eof</span>) <span class=3D"hljs-string">":00000001FF"</span>
	<span class=3D"hljs-keyword">set</span> protocol(ack) <span class=3D"hljs-=
string">"."</span>
	<span class=3D"hljs-keyword">set</span> protocol(checkSumErr) <span class=
=3D"hljs-string">"X"</span>
	<span class=3D"hljs-keyword">set</span> protocol(noSecurity) <span class=
=3D"hljs-string">"P"</span>
	<span class=3D"hljs-keyword">set</span> protocol(rdWrSecurity) <span class=
=3D"hljs-string">"L"</span>
<span class=3D"hljs-comment">	#david eseo</span>
	<span class=3D"hljs-keyword">set</span> protocol(name) <span class=3D"hljs=
-string">"rs232"</span>
<span class=3D"hljs-comment">	#fin david eseo</span>
    } elseif {$prot =3D=3D <span class=3D"hljs-string">"CANStandard"</span>=
} {
<span class=3D"hljs-comment">	#dbgShowInfo "CAN Standard protocol selected.=
"</span>
	<span class=3D"hljs-keyword">set</span> loadConfig(protocol) <span class=
=3D"hljs-string">"initProtocol CANStandard"</span>
	<span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-number">0</spa=
n>} then {
	    <span class=3D"hljs-keyword">set</span> bErase .main.f_device.f_sbvbsb=
.f_sbv.b_erase
	    <span class=3D"hljs-keyword">if</span> {[winfo exists $bErase]} then {
		pack forget $bErase
	    }
	}
	<span class=3D"hljs-keyword">source</span> $projDir/tcl/protocol/canstd.tc=
l
	<span class=3D"hljs-keyword">set</span> canProtocol(commState) <span class=
=3D"hljs-number">0</span>
<span class=3D"hljs-comment">	#david eseo</span>
    } elseif {$prot =3D=3D <span class=3D"hljs-string">"usbcan"</span>} {
<span class=3D"hljs-comment">	#dbgShowInfo "USB CAN protocol selected."</sp=
an>
	<span class=3D"hljs-keyword">set</span> loadConfig(protocol) <span class=
=3D"hljs-string">"initProtocol usbcan"</span>
	<span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-number">0</spa=
n>} then {
	    <span class=3D"hljs-keyword">set</span> bErase .main.f_device.f_sbvbsb=
.f_sbv.b_erase
	    <span class=3D"hljs-keyword">if</span> {[winfo exists $bErase]} then {
		pack forget $bErase
	    }
	}
	<span class=3D"hljs-keyword">source</span> $projDir/tcl/protocol/usb/usb_c=
an_protocol.tcl
    } elseif {$prot =3D=3D <span class=3D"hljs-string">"rs232can"</span>} {
<span class=3D"hljs-comment">	#dbgShowInfo "RS232 Atmel protocol selected."=
</span>
	<span class=3D"hljs-keyword">if</span> {$flipStates(comList) =3D=3D <span =
class=3D"hljs-string">""</span>} then {
	    tk_messageBox -message <span class=3D"hljs-string">"There is no availa=
ble serial port\n on your platform. Please fix the problem then\n restart F=
LIP."</span> -title <span class=3D"hljs-string">"RS232 Ports Scan"</span> -=
type ok -icon <span class=3D"hljs-keyword">error</span>
	    <span class=3D"hljs-keyword">exit</span>
	}
	<span class=3D"hljs-keyword">set</span> loadConfig(protocol) <span class=
=3D"hljs-string">"initProtocol rs232can"</span>
	<span class=3D"hljs-keyword">set</span> protocol(name) rs232can
	<span class=3D"hljs-keyword">source</span> $projDir/tcl/protocol/rs232can.=
tcl
<span class=3D"hljs-comment">	#fin david eso</span>
    } elseif {$prot =3D=3D <span class=3D"hljs-string">"canview"</span>} {
<span class=3D"hljs-comment">	#dbgShowInfo "CANview protocol selected."</sp=
an>
	<span class=3D"hljs-keyword">set</span> loadConfig(protocol) <span class=
=3D"hljs-string">"initProtocol canview"</span>
	<span class=3D"hljs-keyword">set</span> protocol(name) canview
	<span class=3D"hljs-keyword">source</span> $projDir/tcl/protocol/canview.t=
cl
    } elseif {$prot =3D=3D <span class=3D"hljs-string">"USB_DFU"</span>} {
<span class=3D"hljs-comment">	#dbgShowInfo "USB DFU protocol selected."</sp=
an>
	<span class=3D"hljs-keyword">set</span> loadConfig(protocol) <span class=
=3D"hljs-string">"initProtocol USB_DFU"</span>
	<span class=3D"hljs-keyword">source</span> $projDir/tcl/protocol/usb/usb_d=
fu_protocol.tcl
    } else {
	<span class=3D"hljs-keyword">set</span> protFlag <span class=3D"hljs-numbe=
r">0</span>
	log_message <span class=3D"hljs-string">"The selected protocol is not defi=
ned."</span>
    }
    <span class=3D"hljs-keyword">if</span> {$protFlag} then {
<span class=3D"hljs-comment">	#dbgEndProc [info level [info level]]</span>
	<span class=3D"hljs-keyword">return</span> $prot
    } else {
<span class=3D"hljs-comment">	#dbgEndProc [info level [info level]]</span>
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
}
<span class=3D"hljs-comment">#dbgBeginSrc [info script]</span>
<span class=3D"hljs-keyword">global</span> canProtocol protocol
<span class=3D"hljs-keyword">if</span> {! [<span class=3D"hljs-keyword">inf=
o</span> exists protocol(frameLengthW)]} then {
    <span class=3D"hljs-keyword">set</span> protocol(frameLengthW) <span cl=
ass=3D"hljs-number">8</span>
    <span class=3D"hljs-keyword">set</span> protocol(frameLengthR) <span cl=
ass=3D"hljs-number">8</span>
}
<span class=3D"hljs-keyword">set</span> canProtocol(mssgId) <span class=3D"=
hljs-string">""</span>
<span class=3D"hljs-keyword">set</span> canProtocol(mssgLength) <span class=
=3D"hljs-number">0</span>
<span class=3D"hljs-keyword">set</span> canProtocol(mssg) <span class=3D"hl=
js-string">""</span>
<span class=3D"hljs-keyword">set</span> canProtocol(id_select_node) <span c=
lass=3D"hljs-number">0</span>
<span class=3D"hljs-keyword">set</span> canProtocol(id_prog_start) <span cl=
ass=3D"hljs-number">1</span>
<span class=3D"hljs-keyword">set</span> canProtocol(id_prog_data) <span cla=
ss=3D"hljs-number">2</span>
<span class=3D"hljs-keyword">set</span> canProtocol(id_display_data) <span =
class=3D"hljs-number">3</span>
<span class=3D"hljs-keyword">set</span> canProtocol(id_write_command) <span=
 class=3D"hljs-number">4</span>
<span class=3D"hljs-keyword">set</span> canProtocol(id_read_command) <span =
class=3D"hljs-number">5</span>
<span class=3D"hljs-keyword">set</span> canProtocol(id_error) <span class=
=3D"hljs-number">6</span>
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclUpd=
ateOrCompareBuffer</span> {addr6digit action} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> canProtocol
    <span class=3D"hljs-keyword">set</span> addr <span class=3D"hljs-number=
">1</span>
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">0</span>; <span class=3D"hljs-keywo=
rd">set</span> j <span class=3D"hljs-number">0</span>} {$i &lt; $canProtoco=
l(mssgLen)} {<span class=3D"hljs-keyword">incr</span> i; <span class=3D"hlj=
s-keyword">incr</span> j <span class=3D"hljs-number">2</span>} {
	<span class=3D"hljs-keyword">if</span> {$action =3D=3D <span class=3D"hljs=
-string">"update"</span>} then {
	    writeBuffer [<span class=3D"hljs-keyword">format</span> <span class=3D=
"hljs-string">"%06X"</span> [<span class=3D"hljs-keyword">expr</span> $addr=
6digit + $i]] [<span class=3D"hljs-keyword">string</span> range $canProtoco=
l(mssg) $j [<span class=3D"hljs-keyword">expr</span> $j + <span class=3D"hl=
js-number">1</span>]]
	} else {
	    <span class=3D"hljs-keyword">set</span> addr <span class=3D"hljs-numbe=
r">-1</span>
	    <span class=3D"hljs-keyword">if</span> {[readBuffer [<span class=3D"hl=
js-keyword">format</span> <span class=3D"hljs-string">"%06X"</span> [<span =
class=3D"hljs-keyword">expr</span> $addr6digit + $i]]] !=3D [<span class=3D=
"hljs-keyword">string</span> range $canProtocol(mssg) $j [<span class=3D"hl=
js-keyword">expr</span> $j + <span class=3D"hljs-number">1</span>]]} then {
		<span class=3D"hljs-keyword">set</span> addr [<span class=3D"hljs-keyword=
">format</span> <span class=3D"hljs-string">"%#06X"</span> [<span class=3D"=
hljs-keyword">expr</span> $addr6digit + $i]]
		<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-strin=
g">"Memory Verify Fail at: $addr"</span>
		log_message $message
		actionsLog_message <span class=3D"hljs-string">"Memory Verify Fail at: $a=
ddr"</span>
		cmdsResetProgressBar
<span class=3D"hljs-comment">		#dbgShowInfo "Verify FAIL."</span>
		<span class=3D"hljs-keyword">break</span>
	    }
	}
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $addr
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dBlock</span> {addrLo addrHi {<span class=3D"hljs-keyword">memory</span> <s=
pan class=3D"hljs-string">"00"</span>} {action <span class=3D"hljs-string">=
"update"</span>}} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> nAddrBits waitTime canProtoc=
ol flipStates
    <span class=3D"hljs-keyword">set</span> expNbrOfDataBytes [<span class=
=3D"hljs-keyword">expr</span> $addrHi - $addrLo + <span class=3D"hljs-numbe=
r">1</span>]
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">set</span> space <span class=3D"hljs-strin=
g">" "</span>
    <span class=3D"hljs-keyword">set</span> cmd <span class=3D"hljs-string"=
>"[format %03X $canProtocol(id_display_data)] 05 $memory "</span>
    <span class=3D"hljs-keyword">set</span> cmd $cmd[<span class=3D"hljs-ke=
yword">string</span> range [<span class=3D"hljs-keyword">format</span> <spa=
n class=3D"hljs-string">"%04X"</span> $addrLo] <span class=3D"hljs-number">=
0</span> <span class=3D"hljs-number">1</span>]$space
    <span class=3D"hljs-keyword">set</span> cmd $cmd[<span class=3D"hljs-ke=
yword">string</span> range [<span class=3D"hljs-keyword">format</span> <spa=
n class=3D"hljs-string">"%04X"</span> $addrLo] <span class=3D"hljs-number">=
2</span> <span class=3D"hljs-number">3</span>]$space
    <span class=3D"hljs-keyword">set</span> cmd $cmd[<span class=3D"hljs-ke=
yword">string</span> range [<span class=3D"hljs-keyword">format</span> <spa=
n class=3D"hljs-string">"%04X"</span> $addrHi] <span class=3D"hljs-number">=
0</span> <span class=3D"hljs-number">1</span>]$space
    <span class=3D"hljs-keyword">set</span> cmd $cmd[<span class=3D"hljs-ke=
yword">string</span> range [<span class=3D"hljs-keyword">format</span> <spa=
n class=3D"hljs-string">"%04X"</span> $addrHi] <span class=3D"hljs-number">=
2</span> <span class=3D"hljs-number">3</span>]
<span class=3D"hljs-comment">    #dbgShowInfo "CAN MESSAGE &gt; $cmd"</span=
>
    <span class=3D"hljs-keyword">if</span> {! $flipStates(simul)} then {
	<span class=3D"hljs-keyword">if</span> {$canProtocol(hardware) =3D=3D <spa=
n class=3D"hljs-string">"CANDY"</span>} then {
	    <span class=3D"hljs-keyword">set</span> cmd <span class=3D"hljs-string=
">"candyPut_C $cmd"</span>
	} elseif {($canProtocol(hardware) =3D=3D <span class=3D"hljs-string">"CANC=
ARDX"</span>) ||($canProtocol(hardware) =3D=3D <span class=3D"hljs-string">=
"CANPARI"</span>)} {
	    <span class=3D"hljs-keyword">set</span> cmd <span class=3D"hljs-string=
">"vectorPut_C $cmd"</span>
	} elseif {$canProtocol(hardware) =3D=3D <span class=3D"hljs-string">"PEAK"=
</span>} {
	    <span class=3D"hljs-keyword">set</span> cmd <span class=3D"hljs-string=
">"canpeakPut_C $cmd"</span>
	} elseif {$canProtocol(hardware) =3D=3D <span class=3D"hljs-string">"SYSTE=
C"</span>} {
	    <span class=3D"hljs-keyword">set</span> cmd <span class=3D"hljs-string=
">"cansystecPut_C $cmd"</span>
	}
	<span class=3D"hljs-keyword">set</span> state [<span class=3D"hljs-keyword=
">eval</span> $cmd]
    } else {
	<span class=3D"hljs-keyword">set</span> state <span class=3D"hljs-number">=
1</span>
    }
    <span class=3D"hljs-keyword">if</span> {$state =3D=3D <span class=3D"hl=
js-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> loBoundUpdate $addrLo
	<span class=3D"hljs-keyword">while</span> {$expNbrOfDataBytes !=3D <span c=
lass=3D"hljs-number">0</span>} {
<span class=3D"hljs-comment">	    #dbgShowVar "expNbrOfDataBytes =3D $expNb=
rOfDataBytes"</span>
	    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(s=
tandard) $canProtocol(id_display_data) <span class=3D"hljs-number">0</span>=
]
	    <span class=3D"hljs-keyword">if</span> {! $status} then {
		<span class=3D"hljs-keyword">break</span>
	    } else {
		<span class=3D"hljs-keyword">set</span> failAddr [ptclUpdateOrCompareBuff=
er [<span class=3D"hljs-keyword">format</span> <span class=3D"hljs-string">=
"%#06X"</span> $loBoundUpdate] $action]
		<span class=3D"hljs-keyword">if</span> {($action =3D=3D <span class=3D"hl=
js-string">"compare"</span>) &amp;&amp;($failAddr !=3D <span class=3D"hljs-=
number">-1</span>)} then {
		    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-nu=
mber">0</span>
		    <span class=3D"hljs-keyword">break</span>
		}
		<span class=3D"hljs-keyword">set</span> loBoundUpdate [<span class=3D"hlj=
s-keyword">expr</span> $loBoundUpdate + $canProtocol(mssgLen)]
		<span class=3D"hljs-keyword">set</span> expNbrOfDataBytes [<span class=3D=
"hljs-keyword">expr</span> $expNbrOfDataBytes - $canProtocol(mssgLen)]
	    }
	}
    } else {
	<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-string=
">"CAN interface error."</span>
	messageBox <span class=3D"hljs-string">"CAN Interface Message"</span> <spa=
n class=3D"hljs-keyword">error</span> $message
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclIni=
tCANinterface</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> flipStates canPort canBaud c=
anProtocol vector
    <span class=3D"hljs-keyword">if</span> {$flipStates(rs232Comm) =3D=3D <=
span class=3D"hljs-string">"on"</span>} then {
	<span class=3D"hljs-keyword">catch</span> [ptclCancelRs232Comm]
    }
    <span class=3D"hljs-keyword">if</span> {$flipStates(canNode) =3D=3D <sp=
an class=3D"hljs-string">"open"</span>} then {
	ptclSelectNode
    }
    <span class=3D"hljs-keyword">if</span> {$flipStates(canComm) =3D=3D <sp=
an class=3D"hljs-string">"on"</span>} then {
	ptclCancelCANComm
    }
    <span class=3D"hljs-keyword">switch</span> $canPort {
    LPT1 {
	    <span class=3D"hljs-keyword">set</span> baseAddress <span class=3D"hlj=
s-number">1</span>
	}
    LPT2 {
	    <span class=3D"hljs-keyword">set</span> baseAddress <span class=3D"hlj=
s-number">2</span>
	}
    default {
	    log_message <span class=3D"hljs-string">"CAN Port unknown"</span>
	    <span class=3D"hljs-keyword">set</span> state <span class=3D"hljs-numb=
er">0</span>
	}
    }
    .f_status.l_message configure -bg red -fg yellow -text <span class=3D"h=
ljs-string">"Initializing the CAN interface..."</span>
    <span class=3D"hljs-keyword">update</span> idletasks
    <span class=3D"hljs-keyword">set</span> accCode $::deviceArray(crisConn=
ect)0
    <span class=3D"hljs-keyword">set</span> accMask FFFFFFF8
    <span class=3D"hljs-keyword">if</span> {! $flipStates(simul)} then {
	<span class=3D"hljs-keyword">if</span> {$canProtocol(hardware) =3D=3D <spa=
n class=3D"hljs-string">"CANDY"</span>} then {
	    <span class=3D"hljs-keyword">set</span> status [candyInit_C $canBaud <=
span class=3D"hljs-string">"Standard"</span> $accMask $accCode <span class=
=3D"hljs-number">200</span> $baseAddress]
	} elseif {$canProtocol(hardware) =3D=3D <span class=3D"hljs-string">"CANCA=
RDX"</span>} {
	    <span class=3D"hljs-keyword">set</span> status [vectorInit_C $canBaud =
<span class=3D"hljs-string">"Standard"</span> $accMask $accCode <span class=
=3D"hljs-number">200</span> $vector(hwType) $vector(slot) $vector(channel)]
	} elseif {$canProtocol(hardware) =3D=3D <span class=3D"hljs-string">"CANPA=
RI"</span>} {
	    <span class=3D"hljs-keyword">set</span> status [vectorInit_C $canBaud =
<span class=3D"hljs-string">"Standard"</span> $accMask $accCode <span class=
=3D"hljs-number">200</span> $vector(hwType) <span class=3D"hljs-number">0</=
span> <span class=3D"hljs-number">0</span>]
	} elseif {$canProtocol(hardware) =3D=3D <span class=3D"hljs-string">"CANAC=
2"</span>} {
	    <span class=3D"hljs-keyword">set</span> status [vectorInit_C $canBaud =
<span class=3D"hljs-string">"Standard"</span> $accMask $accCode <span class=
=3D"hljs-number">200</span> $vector(hwType) $vector(slot) $vector(channel)]
	} elseif {$canProtocol(hardware) =3D=3D <span class=3D"hljs-string">"PEAK"=
</span>} {
	    <span class=3D"hljs-keyword">set</span> status [canpeakInit_C $canBaud=
 <span class=3D"hljs-string">"Standard"</span> $accMask $accCode <span clas=
s=3D"hljs-number">200</span>]
	} elseif {$canProtocol(hardware) =3D=3D <span class=3D"hljs-string">"SYSTE=
C"</span>} {
	    <span class=3D"hljs-keyword">set</span> status [cansystecInit_C $canBa=
ud <span class=3D"hljs-string">"Standard"</span> $accMask $accCode <span cl=
ass=3D"hljs-number">200</span>]
	}
    } else {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>1</span>
    }
    .f_status.l_message configure -bg white -fg black
    <span class=3D"hljs-keyword">if</span> {$status} then {
	<span class=3D"hljs-keyword">set</span> flipStates(canComm) <span class=3D=
"hljs-string">"on"</span>
	log_message <span class=3D"hljs-string">"Select CAN Node..."</span>
    } else {
	<span class=3D"hljs-keyword">set</span> flipStates(canComm) <span class=3D=
"hljs-string">"off"</span>
	log_message <span class=3D"hljs-string">"CAN Init Fail"</span>
    }
    updateGUI onCanCommStatusModified
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclChe=
ckCanEntries</span> {} {
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">if</span> {! [isValidHexaInput $::deviceAr=
ray(nnbProg)]} then {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
    <span class=3D"hljs-keyword">if</span> {! [isValidHexaInput $::deviceAr=
ray(crisProg)]} then {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
    <span class=3D"hljs-keyword">if</span> {! [isValidHexaInput $::deviceAr=
ray(btc1)]} then {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
    <span class=3D"hljs-keyword">if</span> {! [isValidHexaInput $::deviceAr=
ray(btc2)]} then {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
    <span class=3D"hljs-keyword">if</span> {! [isValidHexaInput $::deviceAr=
ray(btc3)]} then {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclTes=
tCANdy</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [candyTest_C]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclCan=
celCANComm</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> flipStates canProtocol
    <span class=3D"hljs-keyword">if</span> {$flipStates(canNode) =3D=3D <sp=
an class=3D"hljs-string">"open"</span>} then {
	ptclSelectNode
    }
    <span class=3D"hljs-keyword">if</span> {! $flipStates(simul)} then {
	<span class=3D"hljs-keyword">if</span> {$canProtocol(hardware) =3D=3D <spa=
n class=3D"hljs-string">"CANDY"</span>} then {
	    <span class=3D"hljs-keyword">set</span> status [candyClose_C]
	} elseif {($canProtocol(hardware) =3D=3D <span class=3D"hljs-string">"CANC=
ARDX"</span>) ||($canProtocol(hardware) =3D=3D <span class=3D"hljs-string">=
"CANPARI"</span>)} {
	    <span class=3D"hljs-keyword">set</span> status [vectorClose_C]
	} elseif {$canProtocol(hardware) =3D=3D <span class=3D"hljs-string">"PEAK"=
</span>} {
	    <span class=3D"hljs-keyword">set</span> status [canpeakClose_C]
	} elseif {$canProtocol(hardware) =3D=3D <span class=3D"hljs-string">"SYSTE=
C"</span>} {
	    <span class=3D"hljs-keyword">set</span> status [cansystecClose_C]
	}
    } else {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>1</span>
    }
    <span class=3D"hljs-keyword">if</span> {$status} then {
	log_message <span class=3D"hljs-string">"CAN interface disabled"</span>
	<span class=3D"hljs-keyword">set</span> flipStates(canComm) <span class=3D=
"hljs-string">"off"</span>
	updateGUI onAnyCommunicationOff
	updateGUI onCanCommStatusModified
	<span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-number">0</spa=
n>} then {
	    <span class=3D"hljs-keyword">if</span> {[winfo exists .main.f_buffer.b=
_memSelect]} then {
		pack forget .main.f_buffer.b_memSelect
	    }
	}
    } else {
	log_message <span class=3D"hljs-string">"Board Cancel Fail"</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclSel=
ectNode</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> flipStates canProtocol waitT=
ime
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">0</span>
    <span class=3D"hljs-keyword">set</span> cmd <span class=3D"hljs-string"=
>"[format %03X $canProtocol(id_select_node)]  01 $::deviceArray(nnbConnect)=
"</span>
<span class=3D"hljs-comment">    #dbgShowInfo "CAN MESSAGE &gt; $cmd"</span=
>
    <span class=3D"hljs-keyword">set</span> accCode $::deviceArray(crisConn=
ect)0
    <span class=3D"hljs-keyword">set</span> accMask FFFFFFF8
    <span class=3D"hljs-keyword">if</span> {! $flipStates(simul)} then {
	<span class=3D"hljs-keyword">if</span> {$canProtocol(hardware) =3D=3D <spa=
n class=3D"hljs-string">"CANDY"</span>} then {
	    candyUpdateMask_C $accMask $accCode
	    <span class=3D"hljs-keyword">set</span> cmd <span class=3D"hljs-string=
">"candyPut_C $cmd"</span>
	} elseif {($canProtocol(hardware) =3D=3D <span class=3D"hljs-string">"CANC=
ARDX"</span>) ||($canProtocol(hardware) =3D=3D <span class=3D"hljs-string">=
"CANPARI"</span>)} {
	    vectorUpdateMask_C $accMask $accCode
	    <span class=3D"hljs-keyword">set</span> cmd <span class=3D"hljs-string=
">"vectorPut_C $cmd"</span>
	} elseif {$canProtocol(hardware) =3D=3D <span class=3D"hljs-string">"PEAK"=
</span>} {
	    canpeakUpdateMask_C $accMask $accCode
	    <span class=3D"hljs-keyword">set</span> cmd <span class=3D"hljs-string=
">"canpeakPut_C $cmd"</span>
	} elseif {$canProtocol(hardware) =3D=3D <span class=3D"hljs-string">"SYSTE=
C"</span>} {
	    cansystecUpdateMask_C $accMask $accCode <span class=3D"hljs-string">"S=
tandard"</span>
	    <span class=3D"hljs-keyword">set</span> cmd <span class=3D"hljs-string=
">"cansystecPut_C $cmd"</span>
	}
	<span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-keywor=
d">eval</span> $cmd]
	<span class=3D"hljs-keyword">after</span> <span class=3D"hljs-number">200<=
/span>
	<span class=3D"hljs-keyword">if</span> {$status} then {
<span class=3D"hljs-comment">	    #dbgShowInfo "status =3D 1"</span>
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
set</span> status [ptclGetAck $waitTime(standard) $canProtocol(id_select_no=
de) <span class=3D"hljs-number">2</span>]]} then {
		<span class=3D"hljs-keyword">set</span> ::deviceArray(bootlId) [<span cla=
ss=3D"hljs-keyword">string</span> range $canProtocol(mssg) <span class=3D"h=
ljs-number">0</span> <span class=3D"hljs-number">1</span>]
		<span class=3D"hljs-keyword">set</span> canProtocol(commState) [<span cla=
ss=3D"hljs-keyword">string</span> range $canProtocol(mssg) <span class=3D"h=
ljs-number">2</span> <span class=3D"hljs-number">3</span>]
	    }
	}
    } else {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>1</span>
	<span class=3D"hljs-keyword">if</span> {$canProtocol(commState) =3D=3D <sp=
an class=3D"hljs-string">"01"</span>} then {
	    <span class=3D"hljs-keyword">set</span> canProtocol(commState) <span c=
lass=3D"hljs-string">"00"</span>
	} else {
	    <span class=3D"hljs-keyword">set</span> canProtocol(commState) <span c=
lass=3D"hljs-string">"01"</span>
	}
    }
    <span class=3D"hljs-keyword">if</span> {$status} then {
	<span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-number">0</spa=
n>} then {
	    <span class=3D"hljs-keyword">if</span> {[winfo exists .main.f_buffer.b=
_memSelect]} then {
		pack .main.f_buffer.b_memSelect -side bottom -expand <span class=3D"hljs-=
number">0</span> -pady <span class=3D"hljs-number">17</span>
	    }
	}
	<span class=3D"hljs-keyword">if</span> {$canProtocol(commState) =3D=3D <sp=
an class=3D"hljs-string">"01"</span>} then {
	    ptclReadBootlVer
	    updateGUI onAnyCommunicationOn
	    updateGUI onCanNodeSelectionOpened
	} else {
	    <span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-number">0<=
/span>} then {
		<span class=3D"hljs-keyword">if</span> {[winfo exists .main.f_buffer.b_me=
mSelect]} then {
		    pack forget .main.f_buffer.b_memSelect
		}
	    }
	    updateGUI onAnyCommunicationOff
	    updateGUI onCanNodeSelectionClosed
	}
    } else {
	updateGUI onAnyCommunicationOff
	updateGUI onCanNodeSelectionClosed
	<span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-number">0</spa=
n>} then {
	    <span class=3D"hljs-keyword">if</span> {[winfo exists .main.f_buffer.b=
_memSelect]} then {
		pack forget .main.f_buffer.b_memSelect
	    }
	}
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclSen=
dIdProgStart</span> {addLo addHi {<span class=3D"hljs-keyword">memory</span=
> <span class=3D"hljs-string">"00"</span>}} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> buffer waitTime canProtocol
    <span class=3D"hljs-keyword">set</span> addLo [cmdsZeroxPrefix $addLo]
    <span class=3D"hljs-keyword">set</span> addHi [cmdsZeroxPrefix $addHi]
    <span class=3D"hljs-keyword">set</span> p <span class=3D"hljs-string">"=
id_prog_start"</span>
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">0</span>
    <span class=3D"hljs-keyword">set</span> cmd <span class=3D"hljs-string"=
>"[format %03X $canProtocol($p)]  5  $memory  [string range [format %04X $a=
ddLo] 0 1]  [string range [format %04X $addLo] 2 3]  [string range [format =
%04X $addHi] 0 1]  [string range [format %04X $addHi] 2 3]"</span>
<span class=3D"hljs-comment">    #dbgShowInfo "CAN MESSAGE &gt; $cmd"</span=
>
    <span class=3D"hljs-keyword">if</span> {$canProtocol(hardware) =3D=3D <=
span class=3D"hljs-string">"CANDY"</span>} then {
	<span class=3D"hljs-keyword">set</span> cmd <span class=3D"hljs-string">"c=
andyPut_C $cmd"</span>
    } elseif {($canProtocol(hardware) =3D=3D <span class=3D"hljs-string">"C=
ANCARDX"</span>) ||($canProtocol(hardware) =3D=3D <span class=3D"hljs-strin=
g">"CANPARI"</span>)} {
	<span class=3D"hljs-keyword">set</span> cmd <span class=3D"hljs-string">"v=
ectorPut_C $cmd"</span>
    } elseif {$canProtocol(hardware) =3D=3D <span class=3D"hljs-string">"PE=
AK"</span>} {
	<span class=3D"hljs-keyword">set</span> cmd <span class=3D"hljs-string">"c=
anpeakPut_C $cmd"</span>
    } elseif {$canProtocol(hardware) =3D=3D <span class=3D"hljs-string">"SY=
STEC"</span>} {
	<span class=3D"hljs-keyword">set</span> cmd <span class=3D"hljs-string">"c=
ansystecPut_C $cmd"</span>
    }
    <span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-key=
word">eval</span> $cmd]
    <span class=3D"hljs-keyword">if</span> {$status} then {
	<span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(stand=
ard) $canProtocol($p) <span class=3D"hljs-number">0</span>]
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclPro=
gramData</span> {addLo addHi dummyArg} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> buffer waitTime canProtocol
    <span class=3D"hljs-keyword">set</span> dataCount [<span class=3D"hljs-=
keyword">format</span> %<span class=3D"hljs-number">02</span>X [<span class=
=3D"hljs-keyword">expr</span> $addHi - $addLo + <span class=3D"hljs-number"=
>1</span>]]
    <span class=3D"hljs-keyword">set</span> p <span class=3D"hljs-string">"=
id_prog_data"</span>
    <span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-str=
ing">""</span>
    <span class=3D"hljs-keyword">set</span> space <span class=3D"hljs-strin=
g">" "</span>
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">0</span>
    <span class=3D"hljs-keyword">set</span> cmd <span class=3D"hljs-string"=
>"[format %03X $canProtocol($p)] $dataCount "</span>
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i $addLo} {$i &lt;=3D $addHi} {<span class=3D"hljs-keyword">incr<=
/span> i} {
	<span class=3D"hljs-keyword">set</span> message $message${space}[readBuffe=
r [<span class=3D"hljs-keyword">format</span> %<span class=3D"hljs-number">=
06</span>X $i]]
    }
    <span class=3D"hljs-keyword">set</span> cmd $cmd$message
<span class=3D"hljs-comment">    #dbgShowInfo "CAN MESSAGE &gt; $cmd"</span=
>
    <span class=3D"hljs-keyword">if</span> {$canProtocol(hardware) =3D=3D <=
span class=3D"hljs-string">"CANDY"</span>} then {
	<span class=3D"hljs-keyword">set</span> cmd <span class=3D"hljs-string">"c=
andyPut_C $cmd"</span>
    } elseif {($canProtocol(hardware) =3D=3D <span class=3D"hljs-string">"C=
ANCARDX"</span>) ||($canProtocol(hardware) =3D=3D <span class=3D"hljs-strin=
g">"CANPARI"</span>)} {
	<span class=3D"hljs-keyword">set</span> cmd <span class=3D"hljs-string">"v=
ectorPut_C $cmd"</span>
    } elseif {$canProtocol(hardware) =3D=3D <span class=3D"hljs-string">"PE=
AK"</span>} {
	<span class=3D"hljs-keyword">set</span> cmd <span class=3D"hljs-string">"c=
anpeakPut_C $cmd"</span>
    } elseif {$canProtocol(hardware) =3D=3D <span class=3D"hljs-string">"SY=
STEC"</span>} {
	<span class=3D"hljs-keyword">set</span> cmd <span class=3D"hljs-string">"c=
ansystecPut_C $cmd"</span>
    }
    <span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-key=
word">eval</span> $cmd]
    <span class=3D"hljs-keyword">if</span> {$status} then {
	<span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(stand=
ard) $canProtocol($p) <span class=3D"hljs-number">1</span>]
    }
    <span class=3D"hljs-keyword">if</span> {$status} then {
	<span class=3D"hljs-keyword">set</span> mssg [<span class=3D"hljs-keyword"=
>string</span> range $canProtocol(mssg) <span class=3D"hljs-number">0</span=
> <span class=3D"hljs-number">1</span>]
	<span class=3D"hljs-keyword">if</span> {$mssg =3D=3D <span class=3D"hljs-s=
tring">"00"</span>} then {
<span class=3D"hljs-comment">	    #dbgShowInfo "Got all data."</span>
	} elseif {$mssg =3D=3D <span class=3D"hljs-string">"01"</span>} {
<span class=3D"hljs-comment">	    #dbgShowInfo "Command FAIL."</span>
	    <span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-st=
ring">"The bootloader did not understand the FLIP command."</span>
	    messageBox <span class=3D"hljs-string">"Programming Information"</span=
> <span class=3D"hljs-keyword">error</span> $message
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	} elseif {$mssg =3D=3D <span class=3D"hljs-string">"02"</span>} {
<span class=3D"hljs-comment">	    #dbgShowInfo "Expecting more data..."</sp=
an>
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">2</span>
	}
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclGet=
Ack</span> {timeOut mssgId mssgLength} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> extraTimeOut canProtocol err=
Code
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">set</span> errCode <span class=3D"hljs-num=
ber">0</span>
    startExtraTimeOutCounter $timeOut
    <span class=3D"hljs-keyword">if</span> {$canProtocol(hardware) =3D=3D <=
span class=3D"hljs-string">"CANDY"</span>} then {
	<span class=3D"hljs-keyword">while</span> {[candyGet_C <span class=3D"hljs=
-number">1</span>] =3D=3D <span class=3D"hljs-number">0</span>} {
<span class=3D"hljs-comment">	    #dbgShowInfo "Waiting for rxQ..."</span>
	    <span class=3D"hljs-keyword">if</span> {$extraTimeOut =3D=3D <span cla=
ss=3D"hljs-number">-1</span>} then {
		<span class=3D"hljs-keyword">break</span>
	    }
	    <span class=3D"hljs-keyword">update</span>
	}
    } elseif {($canProtocol(hardware) =3D=3D <span class=3D"hljs-string">"C=
ANCARDX"</span>) ||($canProtocol(hardware) =3D=3D <span class=3D"hljs-strin=
g">"CANPARI"</span>)} {
	<span class=3D"hljs-keyword">while</span> {[vectorGet_C] =3D=3D <span clas=
s=3D"hljs-number">0</span>} {
<span class=3D"hljs-comment">	    #dbgShowInfo "Waiting for rxQ..."</span>
	    <span class=3D"hljs-keyword">if</span> {$extraTimeOut =3D=3D <span cla=
ss=3D"hljs-number">-1</span>} then {
		<span class=3D"hljs-keyword">break</span>
	    }
	    <span class=3D"hljs-keyword">update</span>
	}
    } elseif {$canProtocol(hardware) =3D=3D <span class=3D"hljs-string">"PE=
AK"</span>} {
	<span class=3D"hljs-keyword">while</span> {[canpeakGet_C] =3D=3D <span cla=
ss=3D"hljs-number">0</span>} {
<span class=3D"hljs-comment">	    #dbgShowInfo "Waiting for rxQ..."</span>
	    <span class=3D"hljs-keyword">if</span> {$extraTimeOut =3D=3D <span cla=
ss=3D"hljs-number">-1</span>} then {
		<span class=3D"hljs-keyword">break</span>
	    }
	    <span class=3D"hljs-keyword">update</span>
	}
    } elseif {$canProtocol(hardware) =3D=3D <span class=3D"hljs-string">"SY=
STEC"</span>} {
	<span class=3D"hljs-keyword">while</span> {[cansystecGet_C] =3D=3D <span c=
lass=3D"hljs-number">0</span>} {
<span class=3D"hljs-comment">	    #dbgShowInfo "Waiting for rxQ..."</span>
	    <span class=3D"hljs-keyword">if</span> {$extraTimeOut =3D=3D <span cla=
ss=3D"hljs-number">-1</span>} then {
		<span class=3D"hljs-keyword">break</span>
	    }
	    <span class=3D"hljs-keyword">update</span>
	}
    }
    <span class=3D"hljs-keyword">if</span> {$extraTimeOut =3D=3D <span clas=
s=3D"hljs-number">-1</span>} then {
	<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-string=
">"Time Out Error."</span>
	messageBox <span class=3D"hljs-string">"Communication Information"</span> =
<span class=3D"hljs-keyword">error</span> $message
	cmdsResetProgressBar
	<span class=3D"hljs-keyword">set</span> errCode <span class=3D"hljs-number=
">-10</span>
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    } else {
	stopExtraTimeOutCounter
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">expr=
</span> <span class=3D"hljs-number">0</span>x$canProtocol(mssgLen) &lt;=3D =
<span class=3D"hljs-number">8</span>]} then {
<span class=3D"hljs-comment">	    #dbgShowInfo "CAN MESSAGE &lt; \</span>
		    [<span class=3D"hljs-keyword">format</span> %<span class=3D"hljs-numb=
er">03</span>X $canProtocol(mssgId)] \
		    [<span class=3D"hljs-keyword">format</span> %<span class=3D"hljs-numb=
er">02</span>X $canProtocol(mssgLen)] \
		    [<span class=3D"hljs-keyword">string</span> range $canProtocol(mssg) =
\
		    <span class=3D"hljs-number">0</span> [<span class=3D"hljs-keyword">ex=
pr</span> ($canProtocol(mssgLen) * <span class=3D"hljs-number">2</span>) - =
<span class=3D"hljs-number">1</span>]]<span class=3D"hljs-string">"
	} else {
	    #dbgShowInfo "</span>CAN MESSAGE &lt; Illegal message<span class=3D"hl=
js-string">"
	}
	if {$canProtocol(mssgId) =3D=3D $mssgId} then {
	    if {$canProtocol(mssgLen) =3D=3D $mssgLength} then {
		set status 1
	    } elseif {$mssgId =3D=3D $canProtocol(id_display_data)} {
		set status 1
	    } else {
		set message "</span>Unexpected CAN response data length.<span class=3D"hl=
js-string">"
		messageBox "</span>CAN Communication<span class=3D"hljs-string">" error $=
message
		cmdsResetProgressBar
		set errCode -11
		set status 0
	    }
	} elseif {$canProtocol(mssgId) =3D=3D $canProtocol(id_error)} {
	    if {$canProtocol(mssgLen) =3D=3D 1} then {
		if {[string range $canProtocol(mssg) 0 1] =3D=3D "</span><span class=3D"h=
ljs-number">00</span><span class=3D"hljs-string">"} then {
		    set message "</span>Software Security Bit <span class=3D"hljs-keyword=
">set</span>.\n  Cannot access device data.<span class=3D"hljs-string">"
		    messageBox "</span>Device Information<span class=3D"hljs-string">" wa=
rning $message
		    cmdsResetProgressBar
		    set errCode -12
		    set status 0
		} else {
		    set message "</span>Got an <span class=3D"hljs-keyword">error</span> =
message ID from the bootloader\n  but the CAN message data value is not cor=
rect.<span class=3D"hljs-string">"
		    messageBox "</span>CAN Communication<span class=3D"hljs-string">" err=
or $message
		    cmdsResetProgressBar
		    set errCode -13
		    set status 0
		}
	    } else {
		set message "</span>Got an <span class=3D"hljs-keyword">error</span> mess=
age ID from the bootloader\n  but the CAN message data length is not correc=
t.<span class=3D"hljs-string">"
		messageBox "</span>CAN Communication<span class=3D"hljs-string">" error $=
message
		cmdsResetProgressBar
		set errCode -13
		set status 0
	    }
	} else {
	    set message "</span>The CAN message ID is not correct.<span class=3D"h=
ljs-string">"
	    messageBox "</span>CAN Communication<span class=3D"hljs-string">" erro=
r $message
	    cmdsResetProgressBar
	    set errCode -14
	    set status 0
	}
    }
    #dbgEndProc [info level [info level]]
    return $status
}
proc ptclBlankCheck {addrLo addrHi {memory "</span><span class=3D"hljs-numb=
er">01</span><span class=3D"hljs-string">"}} {
    #dbgBeginProc [info level [info level]]
    global canProtocol waitTime
    set waitTime(standard) 10000
    set addrLo [cmdsZeroxPrefix $addrLo]
    set addrHi [cmdsZeroxPrefix $addrHi]
    if {[string first "</span><span class=3D"hljs-number">0</span>X<span cl=
ass=3D"hljs-string">" $addrLo] =3D=3D -1} then {
	set addrLo 0X$addrLo
    }
    set status -1
    set space "</span> <span class=3D"hljs-string">"
    set cmd "</span>[<span class=3D"hljs-keyword">format</span> %<span clas=
s=3D"hljs-number">03</span>X $canProtocol(id_display_data)] <span class=3D"=
hljs-number">05</span> $memory <span class=3D"hljs-string">"
    set cmd $cmd[string range [format "</span>%<span class=3D"hljs-number">=
04</span>X<span class=3D"hljs-string">" $addrLo] 0 1]$space
    set cmd $cmd[string range [format "</span>%<span class=3D"hljs-number">=
04</span>X<span class=3D"hljs-string">" $addrLo] 2 3]$space
    set cmd $cmd[string range [format "</span>%<span class=3D"hljs-number">=
04</span>X<span class=3D"hljs-string">" $addrHi] 0 1]$space
    set cmd $cmd[string range [format "</span>%<span class=3D"hljs-number">=
04</span>X<span class=3D"hljs-string">" $addrHi] 2 3]
    #dbgShowInfo "</span>CAN MESSAGE &gt; $cmd"
    <span class=3D"hljs-keyword">if</span> {$canProtocol(hardware) =3D=3D <=
span class=3D"hljs-string">"CANDY"</span>} then {
	<span class=3D"hljs-keyword">set</span> cmd <span class=3D"hljs-string">"c=
andyPut_C $cmd"</span>
    } elseif {($canProtocol(hardware) =3D=3D <span class=3D"hljs-string">"C=
ANCARDX"</span>) ||($canProtocol(hardware) =3D=3D <span class=3D"hljs-strin=
g">"CANPARI"</span>)} {
	<span class=3D"hljs-keyword">set</span> cmd <span class=3D"hljs-string">"v=
ectorPut_C $cmd"</span>
    } elseif {$canProtocol(hardware) =3D=3D <span class=3D"hljs-string">"PE=
AK"</span>} {
	<span class=3D"hljs-keyword">set</span> cmd <span class=3D"hljs-string">"c=
anpeakPut_C $cmd"</span>
    } elseif {$canProtocol(hardware) =3D=3D <span class=3D"hljs-string">"SY=
STEC"</span>} {
	<span class=3D"hljs-keyword">set</span> cmd <span class=3D"hljs-string">"c=
ansystecPut_C $cmd"</span>
    }
    <span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-key=
word">eval</span> $cmd]
    <span class=3D"hljs-keyword">if</span> {$status} then {
	<span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(stand=
ard) $canProtocol(id_display_data) <span class=3D"hljs-number">0</span>]
	<span class=3D"hljs-keyword">if</span> {$status} then {
	    <span class=3D"hljs-keyword">if</span> {$canProtocol(mssgLen) =3D=3D <=
span class=3D"hljs-number">0</span>} then {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">-1</span>
	    } elseif {$canProtocol(mssgLen) =3D=3D <span class=3D"hljs-number">2</=
span>} {
		<span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-keywo=
rd">string</span> range $canProtocol(mssg) <span class=3D"hljs-number">0</s=
pan> <span class=3D"hljs-number">3</span>]
	    } else {
		<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-strin=
g">"Invalid bootloader answer on blank check."</span>
		messageBox <span class=3D"hljs-string">"CAN Communication"</span> <span c=
lass=3D"hljs-keyword">error</span> $message
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">-2</span>
	    }
	}
    }
    <span class=3D"hljs-keyword">set</span> waitTime(standard) <span class=
=3D"hljs-number">3000</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclSen=
dGet</span> {id args} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> canProtocol waitTime flipSta=
tes
    <span class=3D"hljs-keyword">set</span> space <span class=3D"hljs-strin=
g">" "</span>
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">0</span>
    <span class=3D"hljs-keyword">set</span> cmd [<span class=3D"hljs-keywor=
d">format</span> %<span class=3D"hljs-number">03</span>X $canProtocol($id)]
    <span class=3D"hljs-keyword">foreach</span> i $args {
	<span class=3D"hljs-keyword">set</span> cmd $cmd$space$i
    }
<span class=3D"hljs-comment">    #dbgShowInfo "CAN MESSAGE &gt; $cmd"</span=
>
    <span class=3D"hljs-keyword">if</span> {! $flipStates(simul)} then {
	<span class=3D"hljs-keyword">if</span> {$canProtocol(hardware) =3D=3D <spa=
n class=3D"hljs-string">"CANDY"</span>} then {
	    <span class=3D"hljs-keyword">set</span> cmd <span class=3D"hljs-string=
">"candyPut_C $cmd"</span>
	} elseif {($canProtocol(hardware) =3D=3D <span class=3D"hljs-string">"CANC=
ARDX"</span>) ||($canProtocol(hardware) =3D=3D <span class=3D"hljs-string">=
"CANPARI"</span>)} {
	    <span class=3D"hljs-keyword">set</span> cmd <span class=3D"hljs-string=
">"vectorPut_C $cmd"</span>
	} elseif {$canProtocol(hardware) =3D=3D <span class=3D"hljs-string">"PEAK"=
</span>} {
	    <span class=3D"hljs-keyword">set</span> cmd <span class=3D"hljs-string=
">"canpeakPut_C $cmd"</span>
	} elseif {$canProtocol(hardware) =3D=3D <span class=3D"hljs-string">"SYSTE=
C"</span>} {
	    <span class=3D"hljs-keyword">set</span> cmd <span class=3D"hljs-string=
">"cansystecPut_C $cmd"</span>
	}
	<span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-keywor=
d">eval</span> $cmd]
	<span class=3D"hljs-keyword">if</span> {$status} then {
	    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(s=
tandard) $canProtocol($id) <span class=3D"hljs-number">1</span>]
	}
    } else {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>1</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclSen=
dOnly</span> {id args} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> canProtocol waitTime flipSta=
tes
    <span class=3D"hljs-keyword">set</span> space <span class=3D"hljs-strin=
g">" "</span>
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">0</span>
    <span class=3D"hljs-keyword">set</span> cmd [<span class=3D"hljs-keywor=
d">format</span> %<span class=3D"hljs-number">03</span>X $canProtocol($id)]
    <span class=3D"hljs-keyword">foreach</span> i $args {
	<span class=3D"hljs-keyword">set</span> cmd $cmd$space$i
    }
<span class=3D"hljs-comment">    #dbgShowInfo "CAN MESSAGE &gt; $cmd"</span=
>
    <span class=3D"hljs-keyword">if</span> {! $flipStates(simul)} then {
	<span class=3D"hljs-keyword">if</span> {$canProtocol(hardware) =3D=3D <spa=
n class=3D"hljs-string">"CANDY"</span>} then {
	    <span class=3D"hljs-keyword">set</span> cmd <span class=3D"hljs-string=
">"candyPut_C $cmd"</span>
	} elseif {($canProtocol(hardware) =3D=3D <span class=3D"hljs-string">"CANC=
ARDX"</span>) ||($canProtocol(hardware) =3D=3D <span class=3D"hljs-string">=
"CANPARI"</span>)} {
	    <span class=3D"hljs-keyword">set</span> cmd <span class=3D"hljs-string=
">"vectorPut_C $cmd"</span>
	} elseif {$canProtocol(hardware) =3D=3D <span class=3D"hljs-string">"PEAK"=
</span>} {
	    <span class=3D"hljs-keyword">set</span> cmd <span class=3D"hljs-string=
">"canpeakPut_C $cmd"</span>
	} elseif {$canProtocol(hardware) =3D=3D <span class=3D"hljs-string">"SYSTE=
C"</span>} {
	    <span class=3D"hljs-keyword">set</span> cmd <span class=3D"hljs-string=
">"cansystecPut_C $cmd"</span>
	}
	<span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-keywor=
d">eval</span> $cmd]
    } else {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>1</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dBootlVer</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> canProtocol
    <span class=3D"hljs-keyword">set</span> p bootlVer
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
et</span> status [ptclSendGet id_read_command <span class=3D"hljs-number">2=
</span> <span class=3D"hljs-number">00</span> <span class=3D"hljs-number">0=
0</span>]] =3D=3D <span class=3D"hljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray($p) <span class=3D"h=
ljs-string">"1."</span>
	<span class=3D"hljs-keyword">set</span> minorPatch <span class=3D"hljs-str=
ing">""</span>
	<span class=3D"hljs-keyword">append</span> ::deviceArray($p) [<span class=
=3D"hljs-keyword">string</span> index $canProtocol(mssg) <span class=3D"hlj=
s-number">0</span>]
	<span class=3D"hljs-keyword">append</span> minorPatch [<span class=3D"hljs=
-keyword">string</span> index $canProtocol(mssg) <span class=3D"hljs-number=
">0</span>]
	<span class=3D"hljs-keyword">append</span> ::deviceArray($p) <span class=
=3D"hljs-string">"."</span>
	<span class=3D"hljs-keyword">append</span> ::deviceArray($p) [<span class=
=3D"hljs-keyword">string</span> index $canProtocol(mssg) <span class=3D"hlj=
s-number">1</span>]
	<span class=3D"hljs-keyword">append</span> minorPatch [<span class=3D"hljs=
-keyword">string</span> index $canProtocol(mssg) <span class=3D"hljs-number=
">1</span>]
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($p) =3D $::deviceA=
rray($p)"</span>
	setBootlVerDepFeatures <span class=3D"hljs-string">"CAN"</span> $minorPatc=
h
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dDevBootId1</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> canProtocol
    <span class=3D"hljs-keyword">set</span> p deviceBootId1
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
et</span> status [ptclSendGet id_read_command <span class=3D"hljs-number">2=
</span> <span class=3D"hljs-number">00</span> <span class=3D"hljs-number">0=
1</span>]] =3D=3D <span class=3D"hljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=3D"=
hljs-keyword">string</span> range $canProtocol(mssg) <span class=3D"hljs-nu=
mber">0</span> <span class=3D"hljs-number">1</span>]
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($p) =3D $::deviceA=
rray($p)"</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dDevBootId2</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> canProtocol
    <span class=3D"hljs-keyword">set</span> p deviceBootId2
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
et</span> status [ptclSendGet id_read_command <span class=3D"hljs-number">2=
</span> <span class=3D"hljs-number">00</span> <span class=3D"hljs-number">0=
2</span>]] =3D=3D <span class=3D"hljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=3D"=
hljs-keyword">string</span> range $canProtocol(mssg) <span class=3D"hljs-nu=
mber">0</span> <span class=3D"hljs-number">1</span>]
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($p) =3D $::deviceA=
rray($p)"</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dBSB</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> canProtocol
    <span class=3D"hljs-keyword">set</span> p bsb
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
et</span> status [ptclSendGet id_read_command <span class=3D"hljs-number">2=
</span> <span class=3D"hljs-number">01</span> <span class=3D"hljs-number">0=
0</span>]] =3D=3D <span class=3D"hljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=3D"=
hljs-keyword">string</span> range $canProtocol(mssg) <span class=3D"hljs-nu=
mber">0</span> <span class=3D"hljs-number">1</span>]
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($p) =3D $::deviceA=
rray($p)"</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dSBV</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> canProtocol
    <span class=3D"hljs-keyword">set</span> p sbv
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
et</span> status [ptclSendGet id_read_command <span class=3D"hljs-number">2=
</span> <span class=3D"hljs-number">01</span> <span class=3D"hljs-number">0=
1</span>]] =3D=3D <span class=3D"hljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=3D"=
hljs-keyword">string</span> range $canProtocol(mssg) <span class=3D"hljs-nu=
mber">0</span> <span class=3D"hljs-number">1</span>]
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($p) =3D $::deviceA=
rray($p)"</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dSSB</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> canProtocol expAnsw
    <span class=3D"hljs-keyword">set</span> p ssb
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
et</span> status [ptclSendGet id_read_command <span class=3D"hljs-number">2=
</span> <span class=3D"hljs-number">01</span> <span class=3D"hljs-number">0=
5</span>]] =3D=3D <span class=3D"hljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=3D"=
hljs-keyword">string</span> range $canProtocol(mssg) <span class=3D"hljs-nu=
mber">0</span> <span class=3D"hljs-number">1</span>]
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($p) =3D $::deviceA=
rray($p)"</span>
	<span class=3D"hljs-keyword">set</span> ::deviceArray(level) X
	<span class=3D"hljs-keyword">foreach</span> lev {<span class=3D"hljs-numbe=
r">0</span> <span class=3D"hljs-number">1</span> <span class=3D"hljs-number=
">2</span>} {
	    <span class=3D"hljs-keyword">foreach</span> i $expAnsw(readSSBlev$lev)=
 {
		<span class=3D"hljs-keyword">if</span> {$::deviceArray(ssb) =3D=3D $i} th=
en {
		    <span class=3D"hljs-keyword">set</span> ::deviceArray(level) $lev
		}
	    }
	}
    }
    updateGUI onSecurityLevelChange
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dEB</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> canProtocol
    <span class=3D"hljs-keyword">set</span> p eb
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
et</span> status [ptclSendGet id_read_command <span class=3D"hljs-number">2=
</span> <span class=3D"hljs-number">01</span> <span class=3D"hljs-number">0=
6</span>]] =3D=3D <span class=3D"hljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=3D"=
hljs-keyword">string</span> range $canProtocol(mssg) <span class=3D"hljs-nu=
mber">0</span> <span class=3D"hljs-number">1</span>]
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($p) =3D $::deviceA=
rray($p)"</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dManufId</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> canProtocol
    <span class=3D"hljs-keyword">set</span> p manufId
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
et</span> status [ptclSendGet id_read_command <span class=3D"hljs-number">2=
</span> <span class=3D"hljs-number">01</span> <span class=3D"hljs-number">3=
0</span>]] =3D=3D <span class=3D"hljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=3D"=
hljs-keyword">string</span> range $canProtocol(mssg) <span class=3D"hljs-nu=
mber">0</span> <span class=3D"hljs-number">1</span>]
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($p) =3D $::deviceA=
rray($p)"</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dDeviceId1</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> canProtocol
    <span class=3D"hljs-keyword">set</span> p deviceId1
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
et</span> status [ptclSendGet id_read_command <span class=3D"hljs-number">2=
</span> <span class=3D"hljs-number">01</span> <span class=3D"hljs-number">3=
1</span>]] =3D=3D <span class=3D"hljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=3D"=
hljs-keyword">string</span> range $canProtocol(mssg) <span class=3D"hljs-nu=
mber">0</span> <span class=3D"hljs-number">1</span>]
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($p) =3D $::deviceA=
rray($p)"</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dDeviceId2</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> canProtocol
    <span class=3D"hljs-keyword">set</span> p deviceId2
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
et</span> status [ptclSendGet id_read_command <span class=3D"hljs-number">2=
</span> <span class=3D"hljs-number">01</span> <span class=3D"hljs-number">6=
0</span>]] =3D=3D <span class=3D"hljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=3D"=
hljs-keyword">string</span> range $canProtocol(mssg) <span class=3D"hljs-nu=
mber">0</span> <span class=3D"hljs-number">1</span>]
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($p) =3D $::deviceA=
rray($p)"</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dDeviceId3</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> canProtocol
    <span class=3D"hljs-keyword">set</span> p deviceId3
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
et</span> status [ptclSendGet id_read_command <span class=3D"hljs-number">2=
</span> <span class=3D"hljs-number">01</span> <span class=3D"hljs-number">6=
1</span>]] =3D=3D <span class=3D"hljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=3D"=
hljs-keyword">string</span> range $canProtocol(mssg) <span class=3D"hljs-nu=
mber">0</span> <span class=3D"hljs-number">1</span>]
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($p) =3D $::deviceA=
rray($p)"</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dBTC1</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> canProtocol
    <span class=3D"hljs-keyword">set</span> p btc1
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
et</span> status [ptclSendGet id_read_command <span class=3D"hljs-number">2=
</span> <span class=3D"hljs-number">01</span> <span class=3D"hljs-number">1=
</span>C]] =3D=3D <span class=3D"hljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=3D"=
hljs-keyword">string</span> range $canProtocol(mssg) <span class=3D"hljs-nu=
mber">0</span> <span class=3D"hljs-number">1</span>]
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($p) =3D $::deviceA=
rray($p)"</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dBTC2</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> canProtocol
    <span class=3D"hljs-keyword">set</span> p btc2
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
et</span> status [ptclSendGet id_read_command <span class=3D"hljs-number">2=
</span> <span class=3D"hljs-number">01</span> <span class=3D"hljs-number">1=
</span>D]] =3D=3D <span class=3D"hljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=3D"=
hljs-keyword">string</span> range $canProtocol(mssg) <span class=3D"hljs-nu=
mber">0</span> <span class=3D"hljs-number">1</span>]
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($p) =3D $::deviceA=
rray($p)"</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dBTC3</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> canProtocol
    <span class=3D"hljs-keyword">set</span> p btc3
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
et</span> status [ptclSendGet id_read_command <span class=3D"hljs-number">2=
</span> <span class=3D"hljs-number">01</span> <span class=3D"hljs-number">1=
</span>E]] =3D=3D <span class=3D"hljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=3D"=
hljs-keyword">string</span> range $canProtocol(mssg) <span class=3D"hljs-nu=
mber">0</span> <span class=3D"hljs-number">1</span>]
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($p) =3D $::deviceA=
rray($p)"</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dNNB</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> canProtocol
    <span class=3D"hljs-keyword">set</span> p nnbProg
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
et</span> status [ptclSendGet id_read_command <span class=3D"hljs-number">2=
</span> <span class=3D"hljs-number">01</span> <span class=3D"hljs-number">1=
</span>F]] =3D=3D <span class=3D"hljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=3D"=
hljs-keyword">string</span> range $canProtocol(mssg) <span class=3D"hljs-nu=
mber">0</span> <span class=3D"hljs-number">1</span>]
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($p) =3D $::deviceA=
rray($p)"</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dCRIS</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> canProtocol
    <span class=3D"hljs-keyword">set</span> p crisProg
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
et</span> status [ptclSendGet id_read_command <span class=3D"hljs-number">2=
</span> <span class=3D"hljs-number">01</span> <span class=3D"hljs-number">2=
0</span>]] =3D=3D <span class=3D"hljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=3D"=
hljs-keyword">string</span> range $canProtocol(mssg) <span class=3D"hljs-nu=
mber">0</span> <span class=3D"hljs-number">1</span>]
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($p) =3D $::deviceA=
rray($p)"</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dHwByte</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> canProtocol
    <span class=3D"hljs-keyword">set</span> p hsb
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
et</span> status [ptclSendGet id_read_command <span class=3D"hljs-number">2=
</span> <span class=3D"hljs-number">02</span> <span class=3D"hljs-number">0=
0</span>]] =3D=3D <span class=3D"hljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=3D"=
hljs-keyword">string</span> range $canProtocol(mssg) <span class=3D"hljs-nu=
mber">0</span> <span class=3D"hljs-number">1</span>]
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($p) =3D $::deviceA=
rray($p)"</span>
	<span class=3D"hljs-keyword">set</span> ::deviceArray(x2Fuse) [<span class=
=3D"hljs-keyword">expr</span> (<span class=3D"hljs-number">0</span>x$::devi=
ceArray(hsb) | <span class=3D"hljs-number">0x7F</span>) &gt;&gt; <span clas=
s=3D"hljs-number">7</span>]
	<span class=3D"hljs-keyword">set</span> ::deviceArray(bljbFuse) [<span cla=
ss=3D"hljs-keyword">expr</span> ((<span class=3D"hljs-number">0</span>x$::d=
eviceArray(hsb) | <span class=3D"hljs-number">0xBF</span>) &amp; <span clas=
s=3D"hljs-number">0x7F</span>) &gt;&gt; <span class=3D"hljs-number">6</span=
>]
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclEra=
seBlock0</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime
    <span class=3D"hljs-keyword">set</span> waitTime(standard) <span class=
=3D"hljs-number">10000</span>
    <span class=3D"hljs-keyword">set</span> status [ptclSendGet id_write_co=
mmand <span class=3D"hljs-number">2</span> <span class=3D"hljs-number">00</=
span> <span class=3D"hljs-number">00</span>]
    <span class=3D"hljs-keyword">set</span> waitTime(standard) <span class=
=3D"hljs-number">3000</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclEra=
seBlock1</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime
    <span class=3D"hljs-keyword">set</span> waitTime(standard) <span class=
=3D"hljs-number">10000</span>
    <span class=3D"hljs-keyword">set</span> status [ptclSendGet id_write_co=
mmand <span class=3D"hljs-number">2</span> <span class=3D"hljs-number">00</=
span> <span class=3D"hljs-number">20</span>]
    <span class=3D"hljs-keyword">set</span> waitTime(standard) <span class=
=3D"hljs-number">3000</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclEra=
seBlock2</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime
    <span class=3D"hljs-keyword">set</span> waitTime(standard) <span class=
=3D"hljs-number">10000</span>
    <span class=3D"hljs-keyword">set</span> status [ptclSendGet id_write_co=
mmand <span class=3D"hljs-number">2</span> <span class=3D"hljs-number">00</=
span> <span class=3D"hljs-number">40</span>]
    <span class=3D"hljs-keyword">set</span> waitTime(standard) <span class=
=3D"hljs-number">3000</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclEra=
seBlock3</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime
    <span class=3D"hljs-keyword">set</span> waitTime(standard) <span class=
=3D"hljs-number">10000</span>
    <span class=3D"hljs-keyword">set</span> status [ptclSendGet id_write_co=
mmand <span class=3D"hljs-number">2</span> <span class=3D"hljs-number">00</=
span> <span class=3D"hljs-number">80</span>]
    <span class=3D"hljs-keyword">set</span> waitTime(standard) <span class=
=3D"hljs-number">3000</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclEra=
seBlock4</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime
    <span class=3D"hljs-keyword">set</span> waitTime(standard) <span class=
=3D"hljs-number">10000</span>
    <span class=3D"hljs-keyword">set</span> status [ptclSendGet id_write_co=
mmand <span class=3D"hljs-number">2</span> <span class=3D"hljs-number">00</=
span> C0]
    <span class=3D"hljs-keyword">set</span> waitTime(standard) <span class=
=3D"hljs-number">3000</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclFul=
lChipErase</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime
    <span class=3D"hljs-keyword">set</span> waitTime(standard) <span class=
=3D"hljs-number">10000</span>
    <span class=3D"hljs-keyword">set</span> status [ptclSendGet id_write_co=
mmand <span class=3D"hljs-number">2</span> <span class=3D"hljs-number">00</=
span> FF]
    <span class=3D"hljs-keyword">set</span> waitTime(standard) <span class=
=3D"hljs-number">3000</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teBSB</span> {data} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclSendGet id_write_co=
mmand <span class=3D"hljs-number">3</span> <span class=3D"hljs-number">01</=
span> <span class=3D"hljs-number">00</span> $data]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teSBV</span> {data} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclSendGet id_write_co=
mmand <span class=3D"hljs-number">3</span> <span class=3D"hljs-number">01</=
span> <span class=3D"hljs-number">01</span> $data]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teSSB</span> {data} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclSendGet id_write_co=
mmand <span class=3D"hljs-number">3</span> <span class=3D"hljs-number">01</=
span> <span class=3D"hljs-number">05</span> $data]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclPro=
gSSBlev1</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime canProtocol
    <span class=3D"hljs-keyword">set</span> status [ptclWriteSSB FE]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclPro=
gSSBlev2</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime canProtocol
    <span class=3D"hljs-keyword">set</span> status [ptclWriteSSB FC]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teEB</span> {data} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclSendGet id_write_co=
mmand <span class=3D"hljs-number">3</span> <span class=3D"hljs-number">01</=
span> <span class=3D"hljs-number">06</span> $data]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teBTC1</span> {data} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclSendGet id_write_co=
mmand <span class=3D"hljs-number">3</span> <span class=3D"hljs-number">01</=
span> <span class=3D"hljs-number">1</span>C $data]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teBTC2</span> {data} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclSendGet id_write_co=
mmand <span class=3D"hljs-number">3</span> <span class=3D"hljs-number">01</=
span> <span class=3D"hljs-number">1</span>D $data]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teBTC3</span> {data} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclSendGet id_write_co=
mmand <span class=3D"hljs-number">3</span> <span class=3D"hljs-number">01</=
span> <span class=3D"hljs-number">1</span>E $data]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teNNB</span> {data} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclSendGet id_write_co=
mmand <span class=3D"hljs-number">3</span> <span class=3D"hljs-number">01</=
span> <span class=3D"hljs-number">1</span>F $data]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teCRIS</span> {data} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclSendGet id_write_co=
mmand <span class=3D"hljs-number">3</span> <span class=3D"hljs-number">01</=
span> <span class=3D"hljs-number">20</span> $data]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teHwByte</span> {{data <span class=3D"hljs-string">"X"</span>}} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">if</span> {$data =3D=3D <span class=3D"hlj=
s-string">"X"</span>} then {
	<span class=3D"hljs-keyword">set</span> data [<span class=3D"hljs-keyword"=
>format</span> %<span class=3D"hljs-number">02</span>X [<span class=3D"hljs=
-keyword">expr</span> [<span class=3D"hljs-keyword">expr</span> <span class=
=3D"hljs-number">0</span>x$::deviceArray(hsb) &amp; <span class=3D"hljs-num=
ber">0x3F</span>] | [<span class=3D"hljs-keyword">expr</span> <span class=
=3D"hljs-number">0</span>x$::deviceArray(x2Fuse) &lt;&lt; <span class=3D"hl=
js-number">7</span>] | [<span class=3D"hljs-keyword">expr</span> <span clas=
s=3D"hljs-number">0</span>x$::deviceArray(bljbFuse) &lt;&lt; <span class=3D=
"hljs-number">6</span>]]]
    }
    <span class=3D"hljs-keyword">set</span> status [ptclSendGet id_write_co=
mmand <span class=3D"hljs-number">3</span> <span class=3D"hljs-number">02</=
span> <span class=3D"hljs-number">00</span> $data]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dCanConfig</span> {} {
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">0</span>
    <span class=3D"hljs-keyword">while</span> {<span class=3D"hljs-number">=
1</span>} {
	<span class=3D"hljs-keyword">if</span> {! [ptclReadNNB]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">if</span> {! [ptclReadCRIS]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">if</span> {! [ptclReadBTC1]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">if</span> {! [ptclReadBTC2]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">if</span> {! [ptclReadBTC3]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>1</span>
	<span class=3D"hljs-keyword">break</span>
    }
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclSet=
CanConfig</span> {} {
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">0</span>
    <span class=3D"hljs-keyword">while</span> {<span class=3D"hljs-number">=
1</span>} {
	<span class=3D"hljs-keyword">if</span> {! [ptclCheckCanEntries]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">if</span> {! [ptclWriteNNB $::deviceArray(nnb=
Prog)]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">if</span> {! [ptclWriteCRIS $::deviceArray(cr=
isProg)]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">if</span> {! [ptclWriteBTC1 $::deviceArray(bt=
c1)]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">if</span> {! [ptclWriteBTC2 $::deviceArray(bt=
c2)]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">if</span> {! [ptclWriteBTC3 $::deviceArray(bt=
c3)]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>1</span>
	<span class=3D"hljs-keyword">break</span>
    }
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclSta=
rtAppli</span> {reset} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">if</span> {$reset} then {
	<span class=3D"hljs-keyword">set</span> status [ptclSendOnly id_write_comm=
and <span class=3D"hljs-number">2</span> <span class=3D"hljs-number">03</sp=
an> <span class=3D"hljs-number">00</span>]
    } else {
	<span class=3D"hljs-keyword">set</span> status [ptclSendOnly id_write_comm=
and <span class=3D"hljs-number">4</span> <span class=3D"hljs-number">03</sp=
an> <span class=3D"hljs-number">01</span> <span class=3D"hljs-number">00</s=
pan> <span class=3D"hljs-number">00</span>]
    }
    updateGUI onAnyCommunicationOff
    updateGUI onCanNodeSelectionClosed
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclSet=
PortsConfig</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> bootloaderVerDependent
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">if</span> {$bootloaderVerDependent(p1p3p4_=
config)} then {
	<span class=3D"hljs-keyword">set</span> d0 <span class=3D"hljs-number">01<=
/span>
	<span class=3D"hljs-keyword">foreach</span> p {p1 p3 p4} d1 {<span class=
=3D"hljs-number">02</span> <span class=3D"hljs-number">03</span> <span clas=
s=3D"hljs-number">04</span>} {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
set</span> status [ptclSendGet id_write_command <span class=3D"hljs-number"=
>3</span> $d0 $d1 $::deviceArray(${p}_config)]] =3D=3D <span class=3D"hljs-=
number">0</span>} then {
		<span class=3D"hljs-keyword">break</span>
	    }
	}
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dPortsConfig</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> canProtocol bootloaderVerDep=
endent
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">if</span> {$bootloaderVerDependent(p1p3p4_=
config)} then {
	<span class=3D"hljs-keyword">set</span> d0 <span class=3D"hljs-number">01<=
/span>
	<span class=3D"hljs-keyword">foreach</span> p {p1 p3 p4} d1 {<span class=
=3D"hljs-number">02</span> <span class=3D"hljs-number">03</span> <span clas=
s=3D"hljs-number">04</span>} {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
set</span> status [ptclSendGet id_read_command <span class=3D"hljs-number">=
2</span> $d0 $d1]] =3D=3D <span class=3D"hljs-number">1</span>} then {
		<span class=3D"hljs-keyword">set</span> ::deviceArray(${p}_config) [<span=
 class=3D"hljs-keyword">string</span> range $canProtocol(mssg) <span class=
=3D"hljs-number">0</span> <span class=3D"hljs-number">1</span>]
<span class=3D"hljs-comment">		#dbgShowVar "::deviceArray(${p}_config) =3D =
\</span>
			$::deviceArray(${p}_config)"
	    } else {
		<span class=3D"hljs-keyword">break</span>
	    }
	}
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> getRetu=
rn</span> {data} {
    <span class=3D"hljs-keyword">return</span> $data
}
<span class=3D"hljs-comment">#dbgEndSrc [info script]</span>
<span class=3D"hljs-comment">#dbgBeginSrc [info script]</span>
<span class=3D"hljs-keyword">global</span> atmelProtocol protocol
<span class=3D"hljs-keyword">global</span> cmd dongle cv
<span class=3D"hljs-keyword">set</span> cv(STB) <span class=3D"hljs-string"=
>"C"</span>
<span class=3D"hljs-keyword">set</span> cv(SPB) [<span class=3D"hljs-keywor=
d">format</span> %c <span class=3D"hljs-number">0X0A</span>]
<span class=3D"hljs-keyword">set</span> atmelProtocol(ci_select_node) <span=
 class=3D"hljs-number">0</span>
<span class=3D"hljs-keyword">set</span> atmelProtocol(ci_prog_start) <span =
class=3D"hljs-number">1</span>
<span class=3D"hljs-keyword">set</span> atmelProtocol(ci_prog_data) <span c=
lass=3D"hljs-number">2</span>
<span class=3D"hljs-keyword">set</span> atmelProtocol(ci_display_data) <spa=
n class=3D"hljs-number">3</span>
<span class=3D"hljs-keyword">set</span> atmelProtocol(ci_write_command) <sp=
an class=3D"hljs-number">4</span>
<span class=3D"hljs-keyword">set</span> atmelProtocol(ci_read_command) <spa=
n class=3D"hljs-number">5</span>
<span class=3D"hljs-keyword">set</span> atmelProtocol(ci_error) <span class=
=3D"hljs-number">6</span>
<span class=3D"hljs-keyword">set</span> atmelProtocol(dongle) FFFF
<span class=3D"hljs-keyword">set</span> ::deviceArray(crisConnect) <span cl=
ass=3D"hljs-number">00</span>
<span class=3D"hljs-keyword">set</span> cmd(select_node) [<span class=3D"hl=
js-keyword">format</span> %<span class=3D"hljs-number">04</span>X [<span cl=
ass=3D"hljs-keyword">expr</span> $atmelProtocol(ci_select_node) - <span cla=
ss=3D"hljs-number">0</span>x$::deviceArray(crisConnect)0]]
<span class=3D"hljs-keyword">set</span> cmd(prog_start) [<span class=3D"hlj=
s-keyword">format</span> %<span class=3D"hljs-number">04</span>X [<span cla=
ss=3D"hljs-keyword">expr</span> $atmelProtocol(ci_prog_start) - <span class=
=3D"hljs-number">0</span>x$::deviceArray(crisConnect)0]]
<span class=3D"hljs-keyword">set</span> cmd(prog_data) [<span class=3D"hljs=
-keyword">format</span> %<span class=3D"hljs-number">04</span>X [<span clas=
s=3D"hljs-keyword">expr</span> $atmelProtocol(ci_prog_data) - <span class=
=3D"hljs-number">0</span>x$::deviceArray(crisConnect)0]]
<span class=3D"hljs-keyword">set</span> cmd(display_data) [<span class=3D"h=
ljs-keyword">format</span> %<span class=3D"hljs-number">04</span>X [<span c=
lass=3D"hljs-keyword">expr</span> $atmelProtocol(ci_display_data) - <span c=
lass=3D"hljs-number">0</span>x$::deviceArray(crisConnect)0]]
<span class=3D"hljs-keyword">set</span> cmd(write_command) [<span class=3D"=
hljs-keyword">format</span> %<span class=3D"hljs-number">04</span>X [<span =
class=3D"hljs-keyword">expr</span> $atmelProtocol(ci_write_command) - <span=
 class=3D"hljs-number">0</span>x$::deviceArray(crisConnect)0]]
<span class=3D"hljs-keyword">set</span> cmd(read_command) [<span class=3D"h=
ljs-keyword">format</span> %<span class=3D"hljs-number">04</span>X [<span c=
lass=3D"hljs-keyword">expr</span> $atmelProtocol(ci_read_command) - <span c=
lass=3D"hljs-number">0</span>x$::deviceArray(crisConnect)0]]
<span class=3D"hljs-keyword">set</span> cmd(ciError) [<span class=3D"hljs-k=
eyword">format</span> %<span class=3D"hljs-number">04</span>X [<span class=
=3D"hljs-keyword">expr</span> $atmelProtocol(ci_error) - <span class=3D"hlj=
s-number">0</span>x$::deviceArray(crisConnect)0]]
<span class=3D"hljs-keyword">set</span> dongle [<span class=3D"hljs-keyword=
">format</span> %<span class=3D"hljs-number">04</span>X <span class=3D"hljs=
-number">0</span>x$atmelProtocol(dongle)]
<span class=3D"hljs-keyword">if</span> {! [<span class=3D"hljs-keyword">inf=
o</span> exists protocol(frameLengthW)]} then {
    <span class=3D"hljs-keyword">set</span> protocol(frameLengthW) <span cl=
ass=3D"hljs-number">8</span>
    <span class=3D"hljs-keyword">set</span> protocol(frameLengthR) <span cl=
ass=3D"hljs-number">8</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclIni=
tComm</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> canBaud flipStates
    <span class=3D"hljs-keyword">set</span> status [ptclInitRs232Comm]
    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"h=
ljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> status [ptclInitDongle]
    } else {
	ptclCancelRs232Comm
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclIni=
tRs232Comm</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> flipStates port baud baudLis=
t prot waitTime loadConfig projDir
    log_message <span class=3D"hljs-string">"Selected protocol : $prot Rs23=
2"</span>
    log_message <span class=3D"hljs-string">"Initializing Rs232 communicati=
on..."</span>
    <span class=3D"hljs-keyword">set</span> sync <span class=3D"hljs-number=
">0</span>
<span class=3D"hljs-comment">    #dbgShowVar "port =3D $port"</span>
<span class=3D"hljs-comment">    #dbgShowVar "baud =3D $baud"</span>
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists ::sio::devId]} then {
	<span class=3D"hljs-keyword">set</span> ::sio::devId [::sio::openDevice $p=
ort $baud async n <span class=3D"hljs-number">8</span> <span class=3D"hljs-=
number">1</span> <span class=3D"hljs-number">0</span>]
    }
    <span class=3D"hljs-keyword">if</span> {$::sio::devId !=3D <span class=
=3D"hljs-number">0</span>} then {
	<span class=3D"hljs-keyword">set</span> loadConfig(globals) <span class=3D=
"hljs-string">"global port baud"</span>
	<span class=3D"hljs-keyword">set</span> loadConfig(port) <span class=3D"hl=
js-string">"set port $port"</span>
	<span class=3D"hljs-keyword">set</span> loadConfig(baud) <span class=3D"hl=
js-string">"set baud $baud"</span>
	<span class=3D"hljs-keyword">set</span> loadConfig(initComm) <span class=
=3D"hljs-string">"connectRS232 Standard"</span>
	::sio::setBaud $baud
	<span class=3D"hljs-keyword">set</span> sync <span class=3D"hljs-number">1=
</span>
    } else {
	<span class=3D"hljs-keyword">catch</span> [<span class=3D"hljs-keyword">un=
set</span> ::sio::devId]
	updateGUI onRs232CommunicationOff
	updateGUI onAnyCommunicationOff
	<span class=3D"hljs-keyword">set</span> sync <span class=3D"hljs-number">-=
3</span>
	<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-string=
">"The RS232 port could not be opened."</span>
	messageBox <span class=3D"hljs-string">"RS232 Communication"</span> <span =
class=3D"hljs-keyword">error</span> $message
	log_message <span class=3D"hljs-string">"RS232 Communication could not be =
opened."</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $sync
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclCan=
celRs232Comm</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> flipStates
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::sio::devId]} then {
	::sio::closeDevice
	updateGUI onRs232CommunicationOff
	updateGUI onAnyCommunicationOff
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclSen=
dFrame</span> {frame} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime
    <span class=3D"hljs-keyword">set</span> ::sio::sioVars(AbortTx) <span c=
lass=3D"hljs-number">0</span>
    ::sio::clearRxBuffer
    startTimeOutCounter $waitTime(standard)
    <span class=3D"hljs-keyword">puts</span> -nonewline $::sio::devId $fram=
e
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $frame
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclUpd=
ateOrCompareBuffer</span> {addr6digit action} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> cv
    <span class=3D"hljs-keyword">set</span> addr <span class=3D"hljs-number=
">1</span>
    <span class=3D"hljs-keyword">set</span> lineIdx <span class=3D"hljs-num=
ber">0</span>
    <span class=3D"hljs-keyword">while</span> {[<span class=3D"hljs-keyword=
">string</span> length $::sio::sioVars(RxBuffer)] !=3D <span class=3D"hljs-=
number">0</span>} {
	<span class=3D"hljs-keyword">set</span> line [<span class=3D"hljs-keyword"=
>string</span> range $::sio::sioVars(RxBuffer) <span class=3D"hljs-number">=
0</span> [<span class=3D"hljs-keyword">string</span> first $cv(SPB) $::sio:=
:sioVars(RxBuffer) <span class=3D"hljs-number">0</span>]]
	<span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">set<=
/span> i <span class=3D"hljs-number">5</span>; <span class=3D"hljs-keyword"=
>set</span> j <span class=3D"hljs-number">0</span>} {[<span class=3D"hljs-k=
eyword">string</span> range $line $i $i] !=3D $cv(SPB)} {<span class=3D"hlj=
s-keyword">incr</span> i <span class=3D"hljs-number">2</span>; <span class=
=3D"hljs-keyword">incr</span> j <span class=3D"hljs-number">1</span>} {
	    <span class=3D"hljs-keyword">if</span> {$action =3D=3D <span class=3D"=
hljs-string">"update"</span>} then {
		writeBuffer [<span class=3D"hljs-keyword">format</span> <span class=3D"hl=
js-string">"%06X"</span> [<span class=3D"hljs-keyword">expr</span> $addr6di=
git + $lineIdx*<span class=3D"hljs-number">8</span> + $j]] [<span class=3D"=
hljs-keyword">string</span> range $line $i [<span class=3D"hljs-keyword">ex=
pr</span> $i + <span class=3D"hljs-number">1</span>]]
	    } else {
		<span class=3D"hljs-keyword">set</span> addr <span class=3D"hljs-number">=
-1</span>
		<span class=3D"hljs-keyword">if</span> {[readBuffer [<span class=3D"hljs-=
keyword">format</span> <span class=3D"hljs-string">"%06X"</span> [<span cla=
ss=3D"hljs-keyword">expr</span> $addr6digit + $lineIdx*<span class=3D"hljs-=
number">8</span> + $j]]] !=3D [<span class=3D"hljs-keyword">string</span> r=
ange $line $i [<span class=3D"hljs-keyword">expr</span> $i + <span class=3D=
"hljs-number">1</span>]]} then {
		    <span class=3D"hljs-keyword">set</span> addr [<span class=3D"hljs-key=
word">format</span> <span class=3D"hljs-string">"%#06X"</span> [<span class=
=3D"hljs-keyword">expr</span> $addr6digit + $lineIdx*<span class=3D"hljs-nu=
mber">8</span> + $j]]
		    <span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-s=
tring">"Memory Verify Fail at: $addr"</span>
		    log_message $message
		    actionsLog_message <span class=3D"hljs-string">"Memory Verify Fail at=
: $addr"</span>
		    cmdsResetProgressBar
<span class=3D"hljs-comment">		    #dbgShowInfo "Verify FAIL."</span>
		    <span class=3D"hljs-keyword">break</span>
		}
	    }
	}
	<span class=3D"hljs-keyword">if</span> {($addr !=3D <span class=3D"hljs-nu=
mber">-1</span>) &amp;&amp;($addr !=3D <span class=3D"hljs-number">1</span>=
)} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">set</span> ::sio::sioVars(RxBuffer) [<span cl=
ass=3D"hljs-keyword">string</span> replace $::sio::sioVars(RxBuffer) <span =
class=3D"hljs-number">0</span> [<span class=3D"hljs-keyword">string</span> =
first $cv(SPB) $::sio::sioVars(RxBuffer) <span class=3D"hljs-number">0</spa=
n>]]
	<span class=3D"hljs-keyword">incr</span> lineIdx
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $addr
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclSel=
ectNode</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> cv cmd
<span class=3D"hljs-comment">    #dbgShowInfo "*********** Looping 50 times=
 to clear the error counter ************"</span>
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">0</span>} {$i &lt; <span class=3D"h=
ljs-number">50</span>} {<span class=3D"hljs-keyword">incr</span> i} {
	ptclSelectNod <span class=3D"hljs-number">0</span>
	<span class=3D"hljs-keyword">update</span>
    }
<span class=3D"hljs-comment">    #dbgShowInfo "*********** End of clearing =
error counter loop ************"</span>
    ptclSelectNod <span class=3D"hljs-number">1</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclSel=
ectNod</span> {displayCanError} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> flipStates atmelProtocol wai=
tTime readframe
    <span class=3D"hljs-keyword">global</span> dongle sendframe cmd canBaud=
 cv
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">set</span> frame <span class=3D"hljs-strin=
g">"${cv(STB)}${cmd(select_node)}"</span>
    ptclSendFrame <span class=3D"hljs-string">"${frame}${::deviceArray(nnbC=
onnect)}${cv(SPB)}"</span>
    <span class=3D"hljs-keyword">if</span> {! [getCmdEcho $frame <span clas=
s=3D"hljs-number">10</span> <span class=3D"hljs-number">1000</span>]} then =
{
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">set</span> tmp [<span class=3D"hljs-keywor=
d">string</span> range $::sio::sioVars(RxBuffer) end<span class=3D"hljs-num=
ber">-2</span> end<span class=3D"hljs-number">-1</span>]
    <span class=3D"hljs-keyword">if</span> {$displayCanError} then {
	<span class=3D"hljs-keyword">if</span> {[noCANviewError]} then {
	    <span class=3D"hljs-keyword">set</span> atmelProtocol(commState) $tmp
	    <span class=3D"hljs-keyword">if</span> {$atmelProtocol(commState) =3D=
=3D <span class=3D"hljs-string">"01"</span>} then {
		<span class=3D"hljs-keyword">if</span> {[winfo exists .main.f_buffer.b_me=
mSelect]} then {
		    pack .main.f_buffer.b_memSelect -side bottom -expand <span class=3D"h=
ljs-number">0</span> -pady <span class=3D"hljs-number">17</span>
		}
		ptclReadBootlVer
		updateGUI onAnyCommunicationOn
		updateGUI onCanNodeSelectionOpened
		log_message <span class=3D"hljs-string">"CAN node $::deviceArray(nnbConne=
ct) opened."</span>
<span class=3D"hljs-comment">		#dbgShowInfo "CAN node $::deviceArray(nnbCon=
nect) opened."</span>
	    } else {
		<span class=3D"hljs-keyword">if</span> {[winfo exists .main.f_buffer.b_me=
mSelect]} then {
		    pack forget .main.f_buffer.b_memSelect
		}
		updateGUI onAnyCommunicationOff
		updateGUI onCanNodeSelectionClosed
		log_message <span class=3D"hljs-string">"CAN node $::deviceArray(nnbConne=
ct) closed."</span>
<span class=3D"hljs-comment">		#dbgShowInfo "CAN node $::deviceArray(nnbCon=
nect) closed."</span>
	    }
	} else {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	    <span class=3D"hljs-keyword">set</span> flipStates(anyComm) <span clas=
s=3D"hljs-string">"off"</span>
	    updateGUI onAnyCommunicationOff
	}
    }
<span class=3D"hljs-comment">    #dbgShowVar "status =3D $status"</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclSen=
dIdProgStart</span> {addLo addHi {<span class=3D"hljs-keyword">memory</span=
> <span class=3D"hljs-string">"00"</span>}} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> cv cmd
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">set</span> frame <span class=3D"hljs-strin=
g">"${cv(STB)}${cmd(prog_start)}"</span>
    <span class=3D"hljs-keyword">set</span> addrStr <span class=3D"hljs-str=
ing">"[format %04X 0x$addLo][format %04X 0x$addHi]"</span>
    ptclSendFrame <span class=3D"hljs-string">"${frame}${memory}${addrStr}$=
{cv(SPB)}"</span>
    <span class=3D"hljs-keyword">if</span> {! [getCmdEcho $frame <span clas=
s=3D"hljs-number">0</span> <span class=3D"hljs-number">1000</span>]} then {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclPro=
gramData</span> {addLo addHi dummyArg} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> cv cmd
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">set</span> frame <span class=3D"hljs-strin=
g">"${cv(STB)}${cmd(prog_data)}"</span>
    <span class=3D"hljs-keyword">set</span> fullFrame $frame
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i $addLo} {$i &lt;=3D $addHi} {<span class=3D"hljs-keyword">incr<=
/span> i} {
	<span class=3D"hljs-keyword">set</span> fullFrame ${fullFrame}[readBuffer =
[<span class=3D"hljs-keyword">format</span> <span class=3D"hljs-string">"%0=
6X"</span> $i]]
    }
<span class=3D"hljs-comment">    #dbgShowVar "frame =3D $fullFrame"</span>
    ptclSendFrame <span class=3D"hljs-string">"${fullFrame}${cv(SPB)}"</spa=
n>
    <span class=3D"hljs-keyword">if</span> {! [getCmdEcho $frame <span clas=
s=3D"hljs-number">8</span> <span class=3D"hljs-number">3000</span>]} then {
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">set</span> tmp [<span class=3D"hljs-keywor=
d">string</span> range $::sio::sioVars(RxBuffer) end<span class=3D"hljs-num=
ber">-2</span> end<span class=3D"hljs-number">-1</span>]
    <span class=3D"hljs-keyword">if</span> {$tmp =3D=3D <span class=3D"hljs=
-string">"00"</span>} then {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>1</span>
    } elseif {$tmp =3D=3D <span class=3D"hljs-string">"01"</span>} {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    } elseif {$tmp =3D=3D <span class=3D"hljs-string">"02"</span>} {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>2</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dBlock</span> {addrLo addrHi {<span class=3D"hljs-keyword">memory</span> <s=
pan class=3D"hljs-string">"00"</span>} {action <span class=3D"hljs-string">=
"update"</span>}} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> cv cmd
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">set</span> mod [<span class=3D"hljs-keywor=
d">expr</span> ($addrHi - $addrLo + <span class=3D"hljs-number">1</span>) %=
 <span class=3D"hljs-number">8</span>]
    <span class=3D"hljs-keyword">set</span> nbFrames [<span class=3D"hljs-k=
eyword">expr</span> ($addrHi - $addrLo + <span class=3D"hljs-number">1</spa=
n>) / <span class=3D"hljs-number">8</span>]
    <span class=3D"hljs-keyword">if</span> {$mod} then {
	<span class=3D"hljs-keyword">set</span> nbChars [<span class=3D"hljs-keywo=
rd">expr</span> ($nbFrames * (<span class=3D"hljs-number">5</span>+<span cl=
ass=3D"hljs-number">16</span>+<span class=3D"hljs-number">1</span>)) + <spa=
n class=3D"hljs-number">5</span> + ($mod * <span class=3D"hljs-number">2</s=
pan>) + <span class=3D"hljs-number">1</span>]
    } else {
	<span class=3D"hljs-keyword">set</span> nbChars [<span class=3D"hljs-keywo=
rd">expr</span> $nbFrames * (<span class=3D"hljs-number">5</span>+<span cla=
ss=3D"hljs-number">16</span>+<span class=3D"hljs-number">1</span>)]
    }
<span class=3D"hljs-comment">    #dbgShowVar "Expected number of chars =3D =
$nbChars"</span>
    <span class=3D"hljs-keyword">set</span> addrStr <span class=3D"hljs-str=
ing">"[format %04X $addrLo][format %04X $addrHi]"</span>
    <span class=3D"hljs-keyword">set</span> frame <span class=3D"hljs-strin=
g">"${cv(STB)}${cmd(display_data)}"</span>
    ptclSendFrame <span class=3D"hljs-string">"${frame}${memory}${addrStr}$=
{cv(SPB)}"</span>
    <span class=3D"hljs-keyword">if</span> {! [getCmdEcho $frame $nbChars <=
span class=3D"hljs-number">4000</span>]} then {
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">set</span> failAddr [ptclUpdateOrCompareBu=
ffer [<span class=3D"hljs-keyword">format</span> <span class=3D"hljs-string=
">"%#06X"</span> $addrLo] $action]
    <span class=3D"hljs-keyword">if</span> {($action =3D=3D <span class=3D"=
hljs-string">"compare"</span>) &amp;&amp;($failAddr !=3D <span class=3D"hlj=
s-number">-1</span>)} then {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclBla=
nkCheck</span> {addrLo addrHi {<span class=3D"hljs-keyword">memory</span> <=
span class=3D"hljs-string">"01"</span>}} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> cv cmd
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">-1</span>
    <span class=3D"hljs-keyword">set</span> addrStr [<span class=3D"hljs-ke=
yword">format</span> %<span class=3D"hljs-number">04</span>X <span class=3D=
"hljs-string">"0x$addrLo"</span>][<span class=3D"hljs-keyword">format</span=
> %<span class=3D"hljs-number">04</span>X <span class=3D"hljs-string">"0x$a=
ddrHi"</span>]
    <span class=3D"hljs-keyword">set</span> frame <span class=3D"hljs-strin=
g">"${cv(STB)}${cmd(display_data)}"</span>
    ptclSendFrame <span class=3D"hljs-string">"${frame}${memory}${addrStr}$=
{cv(SPB)}"</span>
    <span class=3D"hljs-keyword">if</span> {! [getCmdEcho $frame <span clas=
s=3D"hljs-number">0</span> <span class=3D"hljs-number">4000</span>]} then {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>-2</span>
    } else {
	<span class=3D"hljs-keyword">set</span> tmpStr $::sio::sioVars(RxBuffer)
	<span class=3D"hljs-keyword">if</span> {! [noCANviewError]} then {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">-2</span>
	} elseif {[<span class=3D"hljs-keyword">string</span> length $tmpStr] =3D=
=3D <span class=3D"hljs-number">10</span>} {
	    <span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-ke=
yword">string</span> range $tmpStr end<span class=3D"hljs-number">-4</span>=
 end<span class=3D"hljs-number">-1</span>]
	}
    }
<span class=3D"hljs-comment">    #dbgShowVar "ptclBlankCheck status =3D $st=
atus"</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclEra=
seBlock0</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclWriteByte <span cla=
ss=3D"hljs-string">""</span> <span class=3D"hljs-string">"0000"</span> <spa=
n class=3D"hljs-number">3000</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclEra=
seBlock1</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclWriteByte <span cla=
ss=3D"hljs-string">""</span> <span class=3D"hljs-string">"0020"</span> <spa=
n class=3D"hljs-number">3000</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclEra=
seBlock2</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclWriteByte <span cla=
ss=3D"hljs-string">""</span> <span class=3D"hljs-string">"0040"</span> <spa=
n class=3D"hljs-number">3000</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclFul=
lChipErase</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclWriteByte <span cla=
ss=3D"hljs-string">""</span> <span class=3D"hljs-string">"00FF"</span> <spa=
n class=3D"hljs-number">10000</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teByte</span> {data cmdBytes {timeOut <span class=3D"hljs-number">1000</spa=
n>}} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> cv cmd
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">set</span> frame <span class=3D"hljs-strin=
g">"${cv(STB)}${cmd(write_command)}"</span>
    ptclSendFrame <span class=3D"hljs-string">"${frame}${cmdBytes}${data}${=
cv(SPB)}"</span>
    <span class=3D"hljs-keyword">if</span> {! [getCmdEcho $frame <span clas=
s=3D"hljs-number">8</span> $timeOut]} then {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    } elseif {! [noCANviewError]} {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teBSB</span> {data} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclWriteByte $data <sp=
an class=3D"hljs-string">"0100"</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teSBV</span> {data} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclWriteByte $data <sp=
an class=3D"hljs-string">"0101"</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclPro=
gSSBlev1</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> expAnsw
    <span class=3D"hljs-keyword">set</span> status [ptclWriteByte $expAnsw(=
readSSBlev1Test) <span class=3D"hljs-string">"0105"</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclPro=
gSSBlev2</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> expAnsw
    <span class=3D"hljs-keyword">set</span> status [ptclWriteByte $expAnsw(=
readSSBlev2Test) <span class=3D"hljs-string">"0105"</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teEB</span> {data} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclWriteByte $data <sp=
an class=3D"hljs-string">"0106"</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teBTC1</span> {data} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclWriteByte $data <sp=
an class=3D"hljs-string">"011C"</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teBTC2</span> {data} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclWriteByte $data <sp=
an class=3D"hljs-string">"011D"</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teBTC3</span> {data} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclWriteByte $data <sp=
an class=3D"hljs-string">"011E"</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teNNB</span> {data} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclWriteByte $data <sp=
an class=3D"hljs-string">"011F"</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teCRIS</span> {data} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclWriteByte $data <sp=
an class=3D"hljs-string">"0120"</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teHwByte</span> {{data <span class=3D"hljs-string">"X"</span>}} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">if</span> {$data =3D=3D <span class=3D"hlj=
s-string">"X"</span>} then {
	<span class=3D"hljs-keyword">set</span> data [<span class=3D"hljs-keyword"=
>format</span> %<span class=3D"hljs-number">02</span>X [<span class=3D"hljs=
-keyword">expr</span> [<span class=3D"hljs-keyword">expr</span> <span class=
=3D"hljs-number">0</span>x$::deviceArray(hsb) &amp; <span class=3D"hljs-num=
ber">0x3F</span>] | [<span class=3D"hljs-keyword">expr</span> <span class=
=3D"hljs-number">0</span>x$::deviceArray(x2Fuse) &lt;&lt; <span class=3D"hl=
js-number">7</span>] | [<span class=3D"hljs-keyword">expr</span> <span clas=
s=3D"hljs-number">0</span>x$::deviceArray(bljbFuse) &lt;&lt; <span class=3D=
"hljs-number">6</span>]]]
    }
    <span class=3D"hljs-keyword">set</span> status [ptclWriteByte $data <sp=
an class=3D"hljs-string">"0200"</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teHwReset</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclWriteByte $data <sp=
an class=3D"hljs-string">"0300"</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teLJMP</span> {address} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclWriteByte $address =
<span class=3D"hljs-string">"0301"</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclSet=
PortsConfig</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> bootloaderVerDependent
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">if</span> {$bootloaderVerDependent(p1p3p4_=
config)} then {
	<span class=3D"hljs-keyword">set</span> d0 <span class=3D"hljs-number">01<=
/span>
	<span class=3D"hljs-keyword">foreach</span> p {p1 p3 p4} d1 {<span class=
=3D"hljs-number">02</span> <span class=3D"hljs-number">03</span> <span clas=
s=3D"hljs-number">04</span>} {
	    <span class=3D"hljs-keyword">if</span> {! [ptclWriteByte $::deviceArra=
y(${p}_config) ${d0}${d1}]} then {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
		<span class=3D"hljs-keyword">break</span>
	    }
	}
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dBootlVer</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> cv flipStates cmd
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">set</span> p bootlVer
    <span class=3D"hljs-keyword">set</span> frame <span class=3D"hljs-strin=
g">"${cv(STB)}${cmd(read_command)}"</span>
    ptclSendFrame <span class=3D"hljs-string">"${frame}0000${cv(SPB)}"</spa=
n>
    <span class=3D"hljs-keyword">if</span> {! [getCmdEcho $frame <span clas=
s=3D"hljs-number">8</span> <span class=3D"hljs-number">1000</span>]} then {
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">set</span> tmp [<span class=3D"hljs-keywor=
d">string</span> range $::sio::sioVars(RxBuffer) end<span class=3D"hljs-num=
ber">-2</span> end<span class=3D"hljs-number">-1</span>]
    <span class=3D"hljs-keyword">if</span> {[noCANviewError]} then {
	<span class=3D"hljs-keyword">set</span> c1 [<span class=3D"hljs-keyword">s=
tring</span> index $tmp end<span class=3D"hljs-number">-1</span>]
	<span class=3D"hljs-keyword">set</span> c2 [<span class=3D"hljs-keyword">s=
tring</span> index $tmp end]
	<span class=3D"hljs-keyword">set</span> ::deviceArray($p) <span class=3D"h=
ljs-string">"1.$c1.$c2"</span>
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($p) =3D $::deviceA=
rray($p)" </span>
	setBootlVerDepFeatures <span class=3D"hljs-string">"CAN"</span> ${c1}${c2}
    } else {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
	<span class=3D"hljs-keyword">set</span> flipStates(anyComm) <span class=3D=
"hljs-string">"off"</span>
	updateGUI onAnyCommunicationOff
    }
<span class=3D"hljs-comment">    #dbgShowVar "status =3D $status"</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dDevBootId1</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclreadByte <span clas=
s=3D"hljs-string">"deviceBootId1"</span> <span class=3D"hljs-string">"0001"=
</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dDevBootId2</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclreadByte <span clas=
s=3D"hljs-string">"deviceBootId2"</span> <span class=3D"hljs-string">"0002"=
</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dBSB</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclreadByte <span clas=
s=3D"hljs-string">"bsb"</span> <span class=3D"hljs-string">"0100"</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dSBV</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclreadByte <span clas=
s=3D"hljs-string">"sbv"</span> <span class=3D"hljs-string">"0101"</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dSSB</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> expAnsw
    <span class=3D"hljs-keyword">set</span> status [ptclreadByte <span clas=
s=3D"hljs-string">"ssb"</span> <span class=3D"hljs-string">"0105"</span>]
    <span class=3D"hljs-keyword">set</span> ::deviceArray(level) X
    <span class=3D"hljs-keyword">foreach</span> lev {<span class=3D"hljs-nu=
mber">0</span> <span class=3D"hljs-number">1</span> <span class=3D"hljs-num=
ber">2</span>} {
	<span class=3D"hljs-keyword">foreach</span> i $expAnsw(readSSBlev$lev) {
	    <span class=3D"hljs-keyword">if</span> {$::deviceArray(ssb) =3D=3D $i}=
 then {
		<span class=3D"hljs-keyword">set</span> ::deviceArray(level) $lev
	    }
	}
    }
    updateGUI onSecurityLevelChange
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dEB</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclreadByte <span clas=
s=3D"hljs-string">"eb"</span> <span class=3D"hljs-string">"0106"</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dManufId</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclreadByte <span clas=
s=3D"hljs-string">"manufId"</span> <span class=3D"hljs-string">"0130"</span=
>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dDeviceId1</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclreadByte <span clas=
s=3D"hljs-string">"deviceId1"</span> <span class=3D"hljs-string">"0131"</sp=
an>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dDeviceId2</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclreadByte <span clas=
s=3D"hljs-string">"deviceId2"</span> <span class=3D"hljs-string">"0160"</sp=
an>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dDeviceId3</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclreadByte <span clas=
s=3D"hljs-string">"deviceId3"</span> <span class=3D"hljs-string">"0161"</sp=
an>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dBTC1</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclreadByte <span clas=
s=3D"hljs-string">"btc1"</span> <span class=3D"hljs-string">"011C"</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dBTC2</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclreadByte <span clas=
s=3D"hljs-string">"btc2"</span> <span class=3D"hljs-string">"011D"</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dBTC3</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclreadByte <span clas=
s=3D"hljs-string">"btc3"</span> <span class=3D"hljs-string">"011E"</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dNNB</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclreadByte <span clas=
s=3D"hljs-string">"nnbProg"</span> <span class=3D"hljs-string">"011F"</span=
>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dCRIS</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclreadByte <span clas=
s=3D"hljs-string">"crisProg"</span> <span class=3D"hljs-string">"0120"</spa=
n>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dHwByte</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclreadByte <span clas=
s=3D"hljs-string">"hsb"</span> <span class=3D"hljs-string">"0200"</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dPortsConfig</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> bootloaderVerDependent cv fl=
ipStates cmd
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">if</span> {$bootloaderVerDependent(p1p3p4_=
config)} then {
	<span class=3D"hljs-keyword">set</span> d0 <span class=3D"hljs-number">01<=
/span>
	<span class=3D"hljs-keyword">foreach</span> p {p1 p3 p4} d1 {<span class=
=3D"hljs-number">02</span> <span class=3D"hljs-number">03</span> <span clas=
s=3D"hljs-number">04</span>} {
	    <span class=3D"hljs-keyword">set</span> frame <span class=3D"hljs-stri=
ng">"${cv(STB)}${cmd(read_command)}${d0}${d1}"</span>
	    ptclSendFrame <span class=3D"hljs-string">"${frame}${cv(SPB)}"</span>
	    <span class=3D"hljs-keyword">if</span> {! [getCmdEcho $frame <span cla=
ss=3D"hljs-number">8</span> <span class=3D"hljs-number">1000</span>]} then =
{
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
		<span class=3D"hljs-keyword">break</span>
	    }
	    <span class=3D"hljs-keyword">set</span> tmp [<span class=3D"hljs-keywo=
rd">string</span> range $::sio::sioVars(RxBuffer) end<span class=3D"hljs-nu=
mber">-2</span> end<span class=3D"hljs-number">-1</span>]
	    <span class=3D"hljs-keyword">if</span> {[noCANviewError]} then {
		<span class=3D"hljs-keyword">set</span> ::deviceArray(${p}_config) $tmp
<span class=3D"hljs-comment">		#dbgShowVar "::deviceArray(${p}_config) =3D =
$::deviceArray(${p}_config)" </span>
	    } else {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
		<span class=3D"hljs-keyword">set</span> flipStates(anyComm) <span class=
=3D"hljs-string">"off"</span>
		updateGUI onAnyCommunicationOff
		<span class=3D"hljs-keyword">break</span>
	    }
	}
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> getCmdE=
cho</span> {echo length timeOut} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> cv extraTimeOut errCode
    <span class=3D"hljs-keyword">set</span> extraTimeOut <span class=3D"hlj=
s-number">1</span>
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">set</span> errCode <span class=3D"hljs-num=
ber">0</span>
    startExtraTimeOutCounter $timeOut
    <span class=3D"hljs-keyword">if</span> {$length =3D=3D <span class=3D"h=
ljs-number">0</span>} then {
	<span class=3D"hljs-keyword">while</span> {([<span class=3D"hljs-keyword">=
string</span> first <span class=3D"hljs-string">"$echo"</span> $::sio::sioV=
ars(RxBuffer)] =3D=3D <span class=3D"hljs-number">-1</span>) &amp;&amp;([<s=
pan class=3D"hljs-keyword">string</span> first <span class=3D"hljs-string">=
"C0006"</span> $::sio::sioVars(RxBuffer)] =3D=3D <span class=3D"hljs-number=
">-1</span>)} {
	    <span class=3D"hljs-keyword">if</span> {$extraTimeOut =3D=3D <span cla=
ss=3D"hljs-number">-1</span>} then {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
		<span class=3D"hljs-keyword">break</span>
	    }
	    <span class=3D"hljs-keyword">update</span>
	}
    } else {
	<span class=3D"hljs-keyword">while</span> {([<span class=3D"hljs-keyword">=
string</span> length $::sio::sioVars(RxBuffer)] &lt; $length) &amp;&amp;([<=
span class=3D"hljs-keyword">string</span> first <span class=3D"hljs-string"=
>"C0006"</span> $::sio::sioVars(RxBuffer)] =3D=3D <span class=3D"hljs-numbe=
r">-1</span>)} {
	    <span class=3D"hljs-keyword">if</span> {$extraTimeOut =3D=3D <span cla=
ss=3D"hljs-number">-1</span>} then {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
		<span class=3D"hljs-keyword">break</span>
	    }
	    <span class=3D"hljs-keyword">update</span>
	}
    }
    <span class=3D"hljs-keyword">if</span> {$status} then {
	stopExtraTimeOutCounter
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> first <span class=3D"hljs-string">"C0006"</span> $::sio::sioVars(=
RxBuffer)] =3D=3D <span class=3D"hljs-number">0</span>} then {
	    cmdsResetProgressBar
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	    <span class=3D"hljs-keyword">set</span> errCode <span class=3D"hljs-nu=
mber">-12</span>
	    messageBox <span class=3D"hljs-string">"CANview message"</span> <span =
class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">"Security b=
it set.\nCannot access device memory."</span>
	}
    } else {
	cmdsResetProgressBar
	<span class=3D"hljs-keyword">set</span> errCode <span class=3D"hljs-number=
">-10</span>
	messageBox <span class=3D"hljs-string">"CANview message"</span> <span clas=
s=3D"hljs-keyword">error</span> <span class=3D"hljs-string">"Time out error=
.\nFLIP and CANview baud rates  may not match.\n"</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> noCANvi=
ewError</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> cv
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">set</span> frame <span class=3D"hljs-strin=
g">"${cv(STB)}8"</span>
    ptclSendFrame <span class=3D"hljs-string">"${frame}${cv(SPB)}"</span>
    <span class=3D"hljs-keyword">while</span> {[<span class=3D"hljs-keyword=
">string</span> length $::sio::sioVars(RxBuffer)] &lt; <span class=3D"hljs-=
number">5</span>} {
	<span class=3D"hljs-keyword">if</span> {$::sio::sioVars(SerialEventOccured=
) =3D=3D <span class=3D"hljs-number">-1</span>} then {
	    cmdsResetProgressBar
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	    messageBox <span class=3D"hljs-string">"CANview message"</span> <span =
class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">"Time out e=
rror.\nFLIP and CANview baud rates  may not match.\n"</span>
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">update</span>
    }
    <span class=3D"hljs-keyword">if</span> {$status} then {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
	<span class=3D"hljs-keyword">set</span> errStatus [<span class=3D"hljs-key=
word">string</span> range $::sio::sioVars(RxBuffer) <span class=3D"hljs-num=
ber">2</span> <span class=3D"hljs-number">3</span>]
	<span class=3D"hljs-keyword">switch</span> $errStatus {
	<span class=3D"hljs-string">"01"</span> {
		<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-strin=
g">"CAN Buffer Overflow."</span>
	    }
	<span class=3D"hljs-string">"02"</span> {
		<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-strin=
g">"CAN Transmit Timeout."</span>
	    }
	<span class=3D"hljs-string">"04"</span> {
		<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-strin=
g">"CAN Error Counter Overflow."</span>
	    }
	<span class=3D"hljs-string">"08"</span> {
		<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-strin=
g">"CAN Bus-Off Error."</span>
	    }
	<span class=3D"hljs-string">"10"</span> {
		<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-strin=
g">"RS232 Syntax Error."</span>
	    }
	<span class=3D"hljs-string">"20"</span> {
		<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-strin=
g">"RS232 Format Error."</span>
	    }
	<span class=3D"hljs-string">"40"</span> {
		<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-strin=
g">"RS232 Buffer Overflow."</span>
	    }
	default {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">1</span>
	    }
	}
	<span class=3D"hljs-keyword">if</span> {! $status} then {
	    messageBox <span class=3D"hljs-string">"CANview Message"</span> <span =
class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">"${message}=
\n FLIP will attempt to  reset the error status."</span>
	    <span class=3D"hljs-keyword">set</span> frame <span class=3D"hljs-stri=
ng">"${cv(STB)}A"</span>
	    ptclSendFrame <span class=3D"hljs-string">"${frame}${cv(SPB)}"</span>
	}
    }
<span class=3D"hljs-comment">    #dbgShowVar "status =3D $status"</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclIni=
tDongle</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> canBaud cv
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">set</span> frame <span class=3D"hljs-strin=
g">"${cv(STB)}E"</span>
    ptclSendFrame <span class=3D"hljs-string">"${frame}${cv(SPB)}"</span>
    <span class=3D"hljs-keyword">set</span> status [getCmdEcho $frame <span=
 class=3D"hljs-number">0</span> <span class=3D"hljs-number">1000</span>]
    <span class=3D"hljs-keyword">if</span> {$status} then {
	updateGUI onRs232CommunicationOn
	updateGUI onAnyCommunicationOff
	updateGUI onCanCommStatusModified
	<span class=3D"hljs-keyword">switch</span> $canBaud {
	<span class=3D"hljs-number">20</span>k {
		<span class=3D"hljs-keyword">set</span> frame <span class=3D"hljs-string"=
>"${cv(STB)}62101"</span>
	    }
	<span class=3D"hljs-number">125</span>k {
		<span class=3D"hljs-keyword">set</span> frame <span class=3D"hljs-string"=
>"${cv(STB)}62103"</span>
	    }
	<span class=3D"hljs-number">250</span>k {
		<span class=3D"hljs-keyword">set</span> frame <span class=3D"hljs-string"=
>"${cv(STB)}62104"</span>
	    }
	<span class=3D"hljs-number">500</span>k {
		<span class=3D"hljs-keyword">set</span> frame <span class=3D"hljs-string"=
>"${cv(STB)}62105"</span>
	    }
	<span class=3D"hljs-number">1000</span>k {
		<span class=3D"hljs-keyword">set</span> frame <span class=3D"hljs-string"=
>"${cv(STB)}62107"</span>
	    }
	default {
		messageBox <span class=3D"hljs-string">"CANview Message"</span> warning <=
span class=3D"hljs-string">"The selected bit rate is not supported by CANvi=
ew."</span>
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
	    }
	}
	<span class=3D"hljs-keyword">if</span> {$status} then {
	    ptclSendFrame <span class=3D"hljs-string">"${frame}${cv(SPB)}"</span>
	    <span class=3D"hljs-keyword">if</span> {! [getCmdEcho $frame <span cla=
ss=3D"hljs-number">0</span> <span class=3D"hljs-number">1000</span>]} then =
{
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
	    }
	}
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclChe=
ckCanEntries</span> {} {
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">if</span> {! [isValidHexaInput $::deviceAr=
ray(nnbProg)]} then {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
    <span class=3D"hljs-keyword">if</span> {! [isValidHexaInput $::deviceAr=
ray(crisProg)]} then {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
    <span class=3D"hljs-keyword">if</span> {! [isValidHexaInput $::deviceAr=
ray(btc1)]} then {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
    <span class=3D"hljs-keyword">if</span> {! [isValidHexaInput $::deviceAr=
ray(btc2)]} then {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
    <span class=3D"hljs-keyword">if</span> {! [isValidHexaInput $::deviceAr=
ray(btc3)]} then {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dCanConfig</span> {} {
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">0</span>
    <span class=3D"hljs-keyword">while</span> {<span class=3D"hljs-number">=
1</span>} {
	<span class=3D"hljs-keyword">if</span> {! [ptclReadNNB]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">if</span> {! [ptclReadCRIS]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">if</span> {! [ptclReadBTC1]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">if</span> {! [ptclReadBTC2]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">if</span> {! [ptclReadBTC3]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>1</span>
	<span class=3D"hljs-keyword">break</span>
    }
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclSet=
CanConfig</span> {} {
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">0</span>
    <span class=3D"hljs-keyword">while</span> {<span class=3D"hljs-number">=
1</span>} {
	<span class=3D"hljs-keyword">if</span> {! [ptclCheckCanEntries]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">if</span> {! [ptclWriteNNB $::deviceArray(nnb=
Prog)]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">if</span> {! [ptclWriteCRIS $::deviceArray(cr=
isProg)]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">if</span> {! [ptclWriteBTC1 $::deviceArray(bt=
c1)]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">if</span> {! [ptclWriteBTC2 $::deviceArray(bt=
c2)]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">if</span> {! [ptclWriteBTC3 $::deviceArray(bt=
c3)]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>1</span>
	<span class=3D"hljs-keyword">break</span>
    }
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclSta=
rtAppli</span> {reset} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">if</span> {$reset} then {
	<span class=3D"hljs-keyword">set</span> status [ptclWriteHwReset]
    } else {
	<span class=3D"hljs-keyword">set</span> status [ptclWriteLJMP <span class=
=3D"hljs-number">0000</span>]
    }
    updateGUI onAnyCommunicationOff
    updateGUI onCanNodeSelectionClosed
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclrea=
dByte</span> {parameter cmdBytes} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> cv flipStates cmd
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">set</span> frame <span class=3D"hljs-strin=
g">"${cv(STB)}${cmd(read_command)}"</span>
    ptclSendFrame <span class=3D"hljs-string">"${frame}${cmdBytes}${cv(SPB)=
}"</span>
    <span class=3D"hljs-keyword">if</span> {! [getCmdEcho $frame <span clas=
s=3D"hljs-number">8</span> <span class=3D"hljs-number">1000</span>]} then {
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">set</span> tmp [<span class=3D"hljs-keywor=
d">string</span> range $::sio::sioVars(RxBuffer) end<span class=3D"hljs-num=
ber">-2</span> end<span class=3D"hljs-number">-1</span>]
    <span class=3D"hljs-keyword">if</span> {[noCANviewError]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray($parameter) $tmp
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($parameter) =3D $:=
:deviceArray($parameter)" </span>
    } else {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
	<span class=3D"hljs-keyword">set</span> flipStates(anyComm) <span class=3D=
"hljs-string">"off"</span>
	updateGUI onAnyCommunicationOff
    }
<span class=3D"hljs-comment">    #dbgShowVar "status =3D $status"</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-comment">#dbgEndSrc [info script]</span>
<span class=3D"hljs-comment">#dbgBeginSrc [info script]</span>
<span class=3D"hljs-comment">#dbgShowInfo "Sourcing rs232_0001.tcl"</span>
<span class=3D"hljs-keyword">global</span> rs232standard
writeBuffer rangeOnDeviceProg whole
.bufferOptionsWindow.f_bufferRange.b_bufferRangeLastLoad configure -state d=
isabled
.bufferOptionsWindow.f_bufferRange.f_uDefined.b_bufferRangeUserDefined conf=
igure -state disabled
<span class=3D"hljs-keyword">set</span> rs232standard(readBootlVer) <span c=
lass=3D"hljs-string">":020000050F00EA"</span>
<span class=3D"hljs-keyword">set</span> rs232standard(ljmp0000) <span class=
=3D"hljs-string">":020000030301F7"</span>
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dDeviceCRAM</span> {addrLo addrHi} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> nAddrBits waitTime
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">":05000004"</span> [<s=
pan class=3D"hljs-keyword">format</span> %<span class=3D"hljs-number">04</s=
pan>X $addrLo] [<span class=3D"hljs-keyword">format</span> %<span class=3D"=
hljs-number">04</span>X $addrHi] <span class=3D"hljs-string">"03"</span>]
    <span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-key=
word">list</span>]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=
=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> l=
ength $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs=
-keyword">incr</span> i <span class=3D"hljs-number">2</span>} {
	<span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hljs-ke=
yword">string</span> range $frame $i [<span class=3D"hljs-keyword">expr</sp=
an> $i + <span class=3D"hljs-number">1</span>]]
    }
    ptclSendFrame [<span class=3D"hljs-keyword">append</span> frame [checkS=
um $lFrame]]
    startExtraTimeOutCounter $waitTime(standard)
    <span class=3D"hljs-keyword">set</span> status [ptclWaitForDeviceData $=
addrLo $addrHi]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $deviceData
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> noBypas=
s</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(bypassUART) <span=
 class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(bypassI2C) <span =
class=3D"hljs-number">0</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> uartByp=
ass</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(bypassUART) <span=
 class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(bypassI2C) <span =
class=3D"hljs-number">0</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> i2cBypa=
ss</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(bypassUART) <span=
 class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(bypassI2C) <span =
class=3D"hljs-number">1</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> bypassA=
ll</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(bypassUART) <span=
 class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> ::deviceArray(bypassI2C) <span =
class=3D"hljs-number">1</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> updateB=
ypassBitsDisplay</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> flipStates color
    <span class=3D"hljs-keyword">if</span> {[winfo exists .main.f_device.f_=
bypass]} then {
	.main.f_device.f_bypass.cb_bypassUart configure -state normal -selectcolor=
 $color(systemWindow)
	.main.f_device.f_bypass.cb_bypassI2c configure -state normal -selectcolor =
$color(systemWindow)
    }
    <span class=3D"hljs-keyword">if</span> {! $flipStates(simul)} then {
	<span class=3D"hljs-keyword">set</span> status [ptclReadSSB]
    } else {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(ssb) FF
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>1</span>
    }
    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"h=
ljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> hiNibble [<span class=3D"hljs-keyw=
ord">format</span> %<span class=3D"hljs-number">02</span>X [<span class=3D"=
hljs-keyword">expr</span> <span class=3D"hljs-number">0XF0</span> &amp; <sp=
an class=3D"hljs-number">0</span>x$::deviceArray(ssb)]]
	<span class=3D"hljs-keyword">switch</span> $hiNibble {
	F0 {
		noBypass
	    }
	B0 {
		uartBypass
	    }
	<span class=3D"hljs-number">70</span> {
		i2cBypass
	    }
	<span class=3D"hljs-number">30</span> {
		bypassAll
	    }
	default {
<span class=3D"hljs-comment">		#dbgShowInfo "Wrong bypass byte value." </sp=
an>
	    }
	}
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclPro=
gBypass</span> {bypass} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime
    <span class=3D"hljs-keyword">switch</span> $bypass {
    uart {
	    <span class=3D"hljs-keyword">set</span> frame <span class=3D"hljs-stri=
ng">":030000030605BF30"</span>
	}
    i2c {
	    <span class=3D"hljs-keyword">set</span> frame <span class=3D"hljs-stri=
ng">":0300000306057F70"</span>
	}
    both {
	    <span class=3D"hljs-keyword">set</span> frame <span class=3D"hljs-stri=
ng">":0300000306053FB0"</span>
	}
    none {
	    <span class=3D"hljs-keyword">set</span> frame <span class=3D"hljs-stri=
ng">":030000030605FFF0"</span>
	}
    default {
	    <span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-st=
ring">"Bypass bit error."</span>
	    messageBox <span class=3D"hljs-string">"Bypass Message"</span> <span c=
lass=3D"hljs-keyword">error</span> $message
	}
    }
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> ack [ptclGetAck <span class=3D"=
hljs-number">1000</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $ack
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclLjm=
p0000</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> rs232standard waitTime
    ptclSendFrame $rs232standard(ljmp0000)
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclSta=
rtAppli</span> {reset} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> rs232standard
    <span class=3D"hljs-keyword">if</span> {! [cmdsDeviceVerify <span class=
=3D"hljs-number">000000</span> <span class=3D"hljs-number">000002</span>]} =
then {
	tk_messageBox -message <span class=3D"hljs-string">"CRAM contents not vali=
d\n Please erase and program the device again."</span> -title <span class=
=3D"hljs-string">"CRAM Error"</span> -type ok -icon <span class=3D"hljs-key=
word">error</span>
	<span class=3D"hljs-keyword">catch</span> [.main.f_device.f_buttons.b_exec=
 configure -state disabled -bg SystemButtonFace]
    } else {
	ptclSendFrame $rs232standard(ljmp0000)
	ptclCancelRs232Comm
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> cbLjmp0=
000</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">if</span> {[ptclLjmp0000]} then {
	log_message <span class=3D"hljs-string">"Long Jump 0000 done."</span>
	actionsLog_message <span class=3D"hljs-string">"Long Jump 0000 done."</spa=
n>
    } else {
	log_message <span class=3D"hljs-string">"Long Jump 0000 command failed."</=
span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> removeP=
rocs</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> procs ptclReadManufId] =3D=3D <span class=3D"hljs-string">"ptclR=
eadManufId"</span>} then {
	<span class=3D"hljs-keyword">rename</span> ptclReadManufId <span class=3D"=
hljs-string">""</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> procs ptclReadDeviceId1] =3D=3D <span class=3D"hljs-string">"ptc=
lReadDeviceId1"</span>} then {
	<span class=3D"hljs-keyword">rename</span> ptclReadDeviceId1 <span class=
=3D"hljs-string">""</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> procs ptclReadDeviceId2] =3D=3D <span class=3D"hljs-string">"ptc=
lReadDeviceId2"</span>} then {
	<span class=3D"hljs-keyword">rename</span> ptclReadDeviceId2 <span class=
=3D"hljs-string">""</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> procs ptclReadDeviceId3] =3D=3D <span class=3D"hljs-string">"ptc=
lReadDeviceId3"</span>} then {
	<span class=3D"hljs-keyword">rename</span> ptclReadDeviceId3 <span class=
=3D"hljs-string">""</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> procs ptclReadHwByte] =3D=3D <span class=3D"hljs-string">"ptclRe=
adHwByte"</span>} then {
	<span class=3D"hljs-keyword">rename</span> ptclReadHwByte <span class=3D"h=
ljs-string">""</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> procs ptclReadDevBootId1] =3D=3D <span class=3D"hljs-string">"pt=
clReadDevBootId1"</span>} then {
	<span class=3D"hljs-keyword">rename</span> ptclReadDevBootId1 <span class=
=3D"hljs-string">""</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> procs ptclReadDevBootId2] =3D=3D <span class=3D"hljs-string">"pt=
clReadDevBootId2"</span>} then {
	<span class=3D"hljs-keyword">rename</span> ptclReadDevBootId2 <span class=
=3D"hljs-string">""</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> procs ptclReadBSB] =3D=3D <span class=3D"hljs-string">"ptclReadB=
SB"</span>} then {
	<span class=3D"hljs-keyword">rename</span> ptclReadBSB <span class=3D"hljs=
-string">""</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> procs ptclWriteBSB] =3D=3D <span class=3D"hljs-string">"ptclWrit=
eBSB"</span>} then {
	<span class=3D"hljs-keyword">rename</span> ptclWriteBSB <span class=3D"hlj=
s-string">""</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> procs ptclReadSBV] =3D=3D <span class=3D"hljs-string">"ptclReadS=
BV"</span>} then {
	<span class=3D"hljs-keyword">rename</span> ptclReadSBV <span class=3D"hljs=
-string">""</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> procs ptclReadEB] =3D=3D <span class=3D"hljs-string">"ptclReadEB=
"</span>} then {
	<span class=3D"hljs-keyword">rename</span> ptclReadEB <span class=3D"hljs-=
string">""</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> storeSS=
BinBuffer</span> {loc} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">if</span> {[ptclReadSSB]} then {
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray(ssb) =3D $::device=
Array(ssb)"</span>
	writeBuffer $loc $::deviceArray(ssb)
<span class=3D"hljs-comment">	#dbgShowVar "buffer($loc) =3D [readBuffer [su=
bst $loc]]"</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> skipTes=
ts</span> {} {
    <span class=3D"hljs-keyword">global</span> tclTestDir
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">l=
search</span> [<span class=3D"hljs-keyword">namespace</span> children] ::<s=
pan class=3D"hljs-keyword">tcltest</span>] =3D=3D <span class=3D"hljs-numbe=
r">-1</span>} then {
	<span class=3D"hljs-keyword">source</span> $tclTestDir/<span class=3D"hljs=
-keyword">tcltest</span>.tcl
	<span class=3D"hljs-keyword">package</span> require <span class=3D"hljs-ke=
yword">tcltest</span>
	<span class=3D"hljs-keyword">namespace</span> import ::<span class=3D"hljs=
-keyword">tcltest</span>::*
    }
    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">=
tcltest</span>::skip { \
	    xaf<span class=3D"hljs-number">-1.1</span> \
	    xaf<span class=3D"hljs-number">-1.2</span> \
	    xaf<span class=3D"hljs-number">-1.3</span> \
	    xaf<span class=3D"hljs-number">-1.4</span> \
	    xaf<span class=3D"hljs-number">-1.7</span> \
	    xaf<span class=3D"hljs-number">-1.8</span> \
	    xaf<span class=3D"hljs-number">-1.9</span> \
	    xaf<span class=3D"hljs-number">-1.10</span> \
	    xaf<span class=3D"hljs-number">-1.13</span> \
	    xaf<span class=3D"hljs-number">-1.14</span> \
	    xaf<span class=3D"hljs-number">-1.15</span> \
	    xaf<span class=3D"hljs-number">-1.16</span> \
	    xaf<span class=3D"hljs-number">-1.20</span> \
	    xaf<span class=3D"hljs-number">-1.21</span> \
	    flash<span class=3D"hljs-number">-2.20</span> \
	    flash<span class=3D"hljs-number">-2.21</span> \
	    flash<span class=3D"hljs-number">-2.22</span> \
	    flash<span class=3D"hljs-number">-2.23</span> \
	    flash<span class=3D"hljs-number">-2.24</span> \
	    flash<span class=3D"hljs-number">-2.25</span> \
	    fuse<span class=3D"hljs-number">-3.0</span> \
	    fuse<span class=3D"hljs-number">-3.1</span> \
	    fuse<span class=3D"hljs-number">-3.2</span> \
	    fuse<span class=3D"hljs-number">-3.3</span> \
	    fuse<span class=3D"hljs-number">-3.4</span> \
	    fuse<span class=3D"hljs-number">-3.5</span> \
	    specific<span class=3D"hljs-number">-4.0</span> \
	    specific<span class=3D"hljs-number">-4.1</span> \
	    specific<span class=3D"hljs-number">-4.2</span> \
	    specific<span class=3D"hljs-number">-4.3</span> \
	    specific<span class=3D"hljs-number">-4.4</span> \
	    specific<span class=3D"hljs-number">-4.5</span> \
	    specific<span class=3D"hljs-number">-4.6</span> \
	    specific<span class=3D"hljs-number">-4.7</span> \
	    specific<span class=3D"hljs-number">-4.8</span> \
	    specific<span class=3D"hljs-number">-4.9</span> \
	    specific<span class=3D"hljs-number">-4.10</span> \
	    specific<span class=3D"hljs-number">-4.11</span> \
	    specific<span class=3D"hljs-number">-4.12</span> \
	    specific<span class=3D"hljs-number">-4.13</span> \
	    specific<span class=3D"hljs-number">-4.14</span> \
	    specific<span class=3D"hljs-number">-4.15</span> \
	    specific<span class=3D"hljs-number">-4.16</span> \
	    specific<span class=3D"hljs-number">-4.17</span> \
	    checksum<span class=3D"hljs-number">-5.0</span> \
	    checksum<span class=3D"hljs-number">-5.1</span> \
	    checksum<span class=3D"hljs-number">-5.2</span> \
	    checksum<span class=3D"hljs-number">-5.3</span> \
	    checksum<span class=3D"hljs-number">-5.4</span> \
	    checksum<span class=3D"hljs-number">-5.5</span> \
	    checksum<span class=3D"hljs-number">-5.6</span> \
	    checksum<span class=3D"hljs-number">-5.7</span> \
	    checksum<span class=3D"hljs-number">-5.8</span> \
	    checksum<span class=3D"hljs-number">-5.9</span> \
	    checksum<span class=3D"hljs-number">-5.10</span> \
	    checksum<span class=3D"hljs-number">-5.11</span> \
	    checksum<span class=3D"hljs-number">-5.12</span> \
	    checksum<span class=3D"hljs-number">-5.13</span> \
	    checksum<span class=3D"hljs-number">-5.14</span> \
	    checksum<span class=3D"hljs-number">-5.15</span> \
	    checksum<span class=3D"hljs-number">-5.16</span> \
	    checksum<span class=3D"hljs-number">-5.17</span> \
	    checksum<span class=3D"hljs-number">-5.18</span> \
	    checksum<span class=3D"hljs-number">-5.19</span> \
	    checksum<span class=3D"hljs-number">-5.20</span> \
	    checksum<span class=3D"hljs-number">-5.21</span> \
	    checksum<span class=3D"hljs-number">-5.22</span> \
	    checksum<span class=3D"hljs-number">-5.23</span> \
	    checksum<span class=3D"hljs-number">-5.24</span> \
	    checksum<span class=3D"hljs-number">-5.25</span> \
	    checksum<span class=3D"hljs-number">-5.26</span> \
	    checksum<span class=3D"hljs-number">-5.27</span> \
	    checksum<span class=3D"hljs-number">-5.28</span> \
	    checksum<span class=3D"hljs-number">-5.29</span> \
	    checksum<span class=3D"hljs-number">-5.30</span> \
	    checksum<span class=3D"hljs-number">-5.31</span>}
    <span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">=
tcltest</span>::testConstraints(bootloaderId_0001_Only) [<span class=3D"hlj=
s-keyword">string</span> equal $::deviceArray(bootloaderId) <span class=3D"=
hljs-string">"0001"</span>]
}
removeProcs
skipTests
<span class=3D"hljs-comment">#dbgEndSrc [info script]</span>
<span class=3D"hljs-comment">#dbgBeginSrc [info script]</span>
<span class=3D"hljs-keyword">global</span> atmelProtocol protocol retryPoss=
ible
<span class=3D"hljs-keyword">global</span> select_node prog_start prog_data=
 display_data write_command read_command ciError dongle
<span class=3D"hljs-keyword">set</span> atmelProtocol(ci_select_node) <span=
 class=3D"hljs-number">0</span>
<span class=3D"hljs-keyword">set</span> atmelProtocol(ci_prog_start) <span =
class=3D"hljs-number">1</span>
<span class=3D"hljs-keyword">set</span> atmelProtocol(ci_prog_data) <span c=
lass=3D"hljs-number">2</span>
<span class=3D"hljs-keyword">set</span> atmelProtocol(ci_display_data) <spa=
n class=3D"hljs-number">3</span>
<span class=3D"hljs-keyword">set</span> atmelProtocol(ci_write_command) <sp=
an class=3D"hljs-number">4</span>
<span class=3D"hljs-keyword">set</span> atmelProtocol(ci_read_command) <spa=
n class=3D"hljs-number">5</span>
<span class=3D"hljs-keyword">set</span> atmelProtocol(ci_error) <span class=
=3D"hljs-number">6</span>
<span class=3D"hljs-keyword">set</span> atmelProtocol(dongle) FFFF
<span class=3D"hljs-keyword">set</span> select_node [<span class=3D"hljs-ke=
yword">format</span> %<span class=3D"hljs-number">04</span>X [<span class=
=3D"hljs-keyword">expr</span> $atmelProtocol(ci_select_node) - <span class=
=3D"hljs-number">0</span>x$::deviceArray(crisConnect)0]]
<span class=3D"hljs-keyword">set</span> prog_start [<span class=3D"hljs-key=
word">format</span> %<span class=3D"hljs-number">04</span>X [<span class=3D=
"hljs-keyword">expr</span> $atmelProtocol(ci_prog_start) - <span class=3D"h=
ljs-number">0</span>x$::deviceArray(crisConnect)0]]
<span class=3D"hljs-keyword">set</span> prog_data [<span class=3D"hljs-keyw=
ord">format</span> %<span class=3D"hljs-number">04</span>X [<span class=3D"=
hljs-keyword">expr</span> $atmelProtocol(ci_prog_data) - <span class=3D"hlj=
s-number">0</span>x$::deviceArray(crisConnect)0]]
<span class=3D"hljs-keyword">set</span> display_data [<span class=3D"hljs-k=
eyword">format</span> %<span class=3D"hljs-number">04</span>X [<span class=
=3D"hljs-keyword">expr</span> $atmelProtocol(ci_display_data) - <span class=
=3D"hljs-number">0</span>x$::deviceArray(crisConnect)0]]
<span class=3D"hljs-keyword">set</span> write_command [<span class=3D"hljs-=
keyword">format</span> %<span class=3D"hljs-number">04</span>X [<span class=
=3D"hljs-keyword">expr</span> $atmelProtocol(ci_write_command) - <span clas=
s=3D"hljs-number">0</span>x$::deviceArray(crisConnect)0]]
<span class=3D"hljs-keyword">set</span> read_command [<span class=3D"hljs-k=
eyword">format</span> %<span class=3D"hljs-number">04</span>X [<span class=
=3D"hljs-keyword">expr</span> $atmelProtocol(ci_read_command) - <span class=
=3D"hljs-number">0</span>x$::deviceArray(crisConnect)0]]
<span class=3D"hljs-keyword">set</span> ciError [<span class=3D"hljs-keywor=
d">format</span> %<span class=3D"hljs-number">04</span>X [<span class=3D"hl=
js-keyword">expr</span> $atmelProtocol(ci_error) - <span class=3D"hljs-numb=
er">0</span>x$::deviceArray(crisConnect)0]]
<span class=3D"hljs-keyword">set</span> dongle [<span class=3D"hljs-keyword=
">format</span> %<span class=3D"hljs-number">04</span>X <span class=3D"hljs=
-number">0</span>x$atmelProtocol(dongle)]
<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs-n=
umber">1</span>
<span class=3D"hljs-keyword">if</span> {! [<span class=3D"hljs-keyword">inf=
o</span> exists protocol(frameLengthW)]} then {
    <span class=3D"hljs-keyword">set</span> protocol(frameLengthW) <span cl=
ass=3D"hljs-number">128</span>
    <span class=3D"hljs-keyword">set</span> protocol(frameLengthR) <span cl=
ass=3D"hljs-number">128</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclIni=
tComm</span> {} {
    <span class=3D"hljs-keyword">global</span> canBaud flipStates
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclInitRs232Comm]
    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"h=
ljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> CRIS [<span class=3D"hljs-keyword"=
>format</span> %<span class=3D"hljs-number">08</span>X <span class=3D"hljs-=
number">0</span>x$::deviceArray(crisConnect)]
	<span class=3D"hljs-keyword">set</span> bitrate [<span class=3D"hljs-keywo=
rd">format</span> %<span class=3D"hljs-number">04</span>X [<span class=3D"h=
ljs-keyword">string</span> range $canBaud <span class=3D"hljs-number">0</sp=
an> end<span class=3D"hljs-number">-1</span>]]
	<span class=3D"hljs-keyword">set</span> protocol <span class=3D"hljs-strin=
g">"00"</span>
	<span class=3D"hljs-keyword">set</span> status [ptclInitDongle $bitrate $p=
rotocol $CRIS]
    }
    <span class=3D"hljs-keyword">if</span> {$status !=3D <span class=3D"hlj=
s-number">1</span>} then {
	ptclCancelRs232Comm
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclIni=
tRs232Comm</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> flipStates port baud baudLis=
t prot waitTime extraTimeOut loadConfig projDir
    log_message <span class=3D"hljs-string">"Selected protocol : $prot Rs23=
2"</span>
    log_message <span class=3D"hljs-string">"Initializing Rs232 communicati=
on..."</span>
    <span class=3D"hljs-keyword">set</span> sync <span class=3D"hljs-number=
">0</span>
<span class=3D"hljs-comment">    #dbgShowVar "port =3D $port"</span>
<span class=3D"hljs-comment">    #dbgShowVar "baud =3D $baud"</span>
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists ::sio::devId]} then {
	<span class=3D"hljs-keyword">set</span> ::sio::devId [::sio::openDevice $p=
ort $baud async n <span class=3D"hljs-number">8</span> <span class=3D"hljs-=
number">1</span> <span class=3D"hljs-number">0</span>]
    }
    <span class=3D"hljs-keyword">if</span> {$::sio::devId !=3D <span class=
=3D"hljs-number">0</span>} then {
	<span class=3D"hljs-keyword">set</span> loadConfig(globals) <span class=3D=
"hljs-string">"global port baud"</span>
	<span class=3D"hljs-keyword">set</span> loadConfig(port) <span class=3D"hl=
js-string">"set port $port"</span>
	<span class=3D"hljs-keyword">set</span> loadConfig(baud) <span class=3D"hl=
js-string">"set baud $baud"</span>
	<span class=3D"hljs-keyword">set</span> loadConfig(initComm) <span class=
=3D"hljs-string">"connectRS232 Standard"</span>
	::sio::setBaud $baud
	<span class=3D"hljs-keyword">set</span> sync [::sio::autoBaudSync <span cl=
ass=3D"hljs-string">"U"</span> $waitTime(standard)]
	<span class=3D"hljs-keyword">if</span> {$sync =3D=3D <span class=3D"hljs-n=
umber">1</span>} then {
	    updateGUI onRs232CommunicationOn
	    log_message <span class=3D"hljs-string">"Rs232 communication initializ=
ed."</span>
	    log_message <span class=3D"hljs-string">"Dongle Initialization"</span>
	} elseif {$sync =3D=3D <span class=3D"hljs-number">-1</span>} {
	    updateGUI onRs232CommunicationOff
	    <span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-st=
ring">"The board reply is not correct."</span>
	    messageBox <span class=3D"hljs-string">"RS232 Communication"</span> <s=
pan class=3D"hljs-keyword">error</span> $message
	    log_message <span class=3D"hljs-string">"RS232 Communication Error."</=
span>
	} else {
	    <span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-st=
ring">"Time out error."</span>
	    messageBox <span class=3D"hljs-string">"RS232 Communication"</span> <s=
pan class=3D"hljs-keyword">error</span> $message
	    log_message <span class=3D"hljs-string">"RS232 Communication time out.=
"</span>
	    updateGUI onRs232CommunicationOn
	    updateGUI onAnyCommunicationOff
	}
    } else {
	<span class=3D"hljs-keyword">catch</span> [<span class=3D"hljs-keyword">un=
set</span> ::sio::devId]
	updateGUI onRs232CommunicationOff
	updateGUI onAnyCommunicationOff
	<span class=3D"hljs-keyword">set</span> sync <span class=3D"hljs-number">-=
3</span>
	<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-string=
">"The RS232 port could not be opened."</span>
	messageBox <span class=3D"hljs-string">"RS232 Communication"</span> <span =
class=3D"hljs-keyword">error</span> $message
	log_message <span class=3D"hljs-string">"RS232 Communication could not be =
opened."</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $sync
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclCan=
celRs232Comm</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> flipStates
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::sio::devId]} then {
	::sio::closeDevice
	updateGUI onRs232CommunicationOff
	updateGUI onAnyCommunicationOff
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> verifyC=
hecksum</span> {frame} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> sum <span class=3D"hljs-number"=
>0x00</span>
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">1</span>} {$i &lt; [<span class=3D"=
hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> lengt=
h $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs-key=
word">incr</span> i <span class=3D"hljs-number">2</span>} {
	<span class=3D"hljs-keyword">set</span> byte [<span class=3D"hljs-keyword"=
>string</span> range $frame $i [<span class=3D"hljs-keyword">expr</span> $i=
 + <span class=3D"hljs-number">1</span>]]
	<span class=3D"hljs-keyword">set</span> sum [<span class=3D"hljs-keyword">=
format</span> <span class=3D"hljs-string">"%#04X"</span> [<span class=3D"hl=
js-keyword">expr</span> $sum + <span class=3D"hljs-number">0</span>x$byte]]
    }
    <span class=3D"hljs-keyword">set</span> cs [<span class=3D"hljs-keyword=
">format</span> %<span class=3D"hljs-number">02</span>X [<span class=3D"hlj=
s-keyword">expr</span> [<span class=3D"hljs-keyword">format</span> <span cl=
ass=3D"hljs-string">"%#04X"</span> [<span class=3D"hljs-keyword">expr</span=
> ~$sum + <span class=3D"hljs-number">0x01</span>]] &amp; <span class=3D"hl=
js-number">0xFF</span>]]
    <span class=3D"hljs-keyword">set</span> frameCRC [<span class=3D"hljs-k=
eyword">string</span> range $frame end<span class=3D"hljs-number">-1</span>=
 end]
    <span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-key=
word">string</span> equal $cs $frameCRC]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclSen=
dFrame</span> {frame} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime
    <span class=3D"hljs-keyword">set</span> ::sio::sioVars(AbortTx) <span c=
lass=3D"hljs-number">0</span>
    ::sio::clearRxBuffer
    startTimeOutCounter $waitTime(standard)
    <span class=3D"hljs-keyword">puts</span> $::sio::devId $frame
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $frame
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclGet=
Ack</span> {t frame} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> extraTimeOut errCode readfra=
me sendframe retryPossible dongle ciError
    startExtraTimeOutCounter $t
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">set</span> errCode <span class=3D"hljs-num=
ber">0</span>
    <span class=3D"hljs-keyword">set</span> sendframe $frame
    <span class=3D"hljs-keyword">while</span> {[<span class=3D"hljs-keyword=
">string</span> first <span class=3D"hljs-string">"\n"</span> $::sio::sioVa=
rs(RxBuffer)] =3D=3D <span class=3D"hljs-number">-1</span>} {
	<span class=3D"hljs-keyword">if</span> {$extraTimeOut =3D=3D <span class=
=3D"hljs-number">-1</span>} then {
	    <span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-st=
ring">"Time Out Error."</span>
	    cmdsResetProgressBar
	    <span class=3D"hljs-keyword">set</span> errCode <span class=3D"hljs-nu=
mber">-10</span>
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">update</span>
    }
    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"h=
ljs-number">1</span>} then {
	stopExtraTimeOutCounter
	<span class=3D"hljs-keyword">set</span> beginIndex [<span class=3D"hljs-ke=
yword">string</span> first <span class=3D"hljs-string">":"</span> $::sio::s=
ioVars(RxBuffer)]
	<span class=3D"hljs-keyword">set</span> endIndex [<span class=3D"hljs-keyw=
ord">string</span> first <span class=3D"hljs-string">"\n"</span> $::sio::si=
oVars(RxBuffer)]
	<span class=3D"hljs-keyword">set</span> id [<span class=3D"hljs-keyword">s=
tring</span> range $frame <span class=3D"hljs-number">3</span> <span class=
=3D"hljs-number">6</span>]
	<span class=3D"hljs-keyword">set</span> speByte [<span class=3D"hljs-keywo=
rd">string</span> range $frame <span class=3D"hljs-number">7</span> <span c=
lass=3D"hljs-number">8</span>]
	<span class=3D"hljs-keyword">set</span> readframe [<span class=3D"hljs-key=
word">string</span> range $::sio::sioVars(RxBuffer) $beginIndex [<span clas=
s=3D"hljs-keyword">expr</span> $endIndex-<span class=3D"hljs-number">1</spa=
n>]]
	<span class=3D"hljs-keyword">set</span> ::sio::sioVars(RxBuffer) [<span cl=
ass=3D"hljs-keyword">string</span> replace $::sio::sioVars(RxBuffer) $begin=
Index $beginIndex <span class=3D"hljs-string">"!"</span>]
	<span class=3D"hljs-keyword">set</span> ::sio::sioVars(RxBuffer) [<span cl=
ass=3D"hljs-keyword">string</span> replace $::sio::sioVars(RxBuffer) $endIn=
dex $endIndex <span class=3D"hljs-string">"!"</span>]
	<span class=3D"hljs-keyword">set</span> readId [<span class=3D"hljs-keywor=
d">string</span> range $readframe <span class=3D"hljs-number">3</span> <spa=
n class=3D"hljs-number">6</span>]
	<span class=3D"hljs-keyword">set</span> readspeByte [<span class=3D"hljs-k=
eyword">string</span> range $readframe <span class=3D"hljs-number">7</span>=
 <span class=3D"hljs-number">8</span>]
	<span class=3D"hljs-keyword">if</span> {[verifyChecksum $readframe] =3D=3D=
 <span class=3D"hljs-number">1</span>} then {
	    <span class=3D"hljs-keyword">if</span> {($readId =3D=3D $id) &amp;&amp=
;($readspeByte =3D=3D $speByte)} then {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">1</span>
	    } elseif {$readId =3D=3D $ciError} {
		<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-strin=
g">"Software Security Bit set.\n  Cannot access device data."</span>
		<span class=3D"hljs-keyword">set</span> errCode <span class=3D"hljs-numbe=
r">-12</span>
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
	    } elseif {$readId =3D=3D $dongle} {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">-2</span>
<span class=3D"hljs-comment">		#dbgShowInfo "getack -2 $retryPossible"</spa=
n>
		<span class=3D"hljs-keyword">if</span> {$retryPossible =3D=3D <span class=
=3D"hljs-number">0</span>} then {
		    <span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-s=
tring">"Check sum error."</span>
		    <span class=3D"hljs-keyword">set</span> errCode <span class=3D"hljs-n=
umber">-15</span>
		}
	    } else {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
	    }
	} else {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">-1</span>
<span class=3D"hljs-comment">	    #dbgShowInfo "getack -1 $retryPossible"</=
span>
	    <span class=3D"hljs-keyword">if</span> {$retryPossible =3D=3D <span cl=
ass=3D"hljs-number">0</span>} then {
		<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-strin=
g">"Check sum error."</span>
		<span class=3D"hljs-keyword">set</span> errCode <span class=3D"hljs-numbe=
r">-15</span>
	    }
	}
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists message]} then {
	messageBox <span class=3D"hljs-string">"Communication Information"</span> =
<span class=3D"hljs-keyword">error</span> $message
	cmdsResetProgressBar
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclUpd=
ateOrCompareBuffer</span> {addr6digit action} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> readframe
    <span class=3D"hljs-keyword">set</span> addr <span class=3D"hljs-number=
">1</span>
    <span class=3D"hljs-keyword">set</span> len <span class=3D"hljs-number"=
>0</span>x[<span class=3D"hljs-keyword">string</span> range $readframe <spa=
n class=3D"hljs-number">1</span> <span class=3D"hljs-number">2</span>]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">0</span>; <span class=3D"hljs-keywo=
rd">set</span> j <span class=3D"hljs-number">9</span>} {$i &lt; $len} {<spa=
n class=3D"hljs-keyword">incr</span> i; <span class=3D"hljs-keyword">incr</=
span> j <span class=3D"hljs-number">2</span>} {
	<span class=3D"hljs-keyword">if</span> {$action =3D=3D <span class=3D"hljs=
-string">"update"</span>} then {
	    writeBuffer [<span class=3D"hljs-keyword">format</span> <span class=3D=
"hljs-string">"%06X"</span> [<span class=3D"hljs-keyword">expr</span> $addr=
6digit + $i]] [<span class=3D"hljs-keyword">string</span> range $readframe =
$j [<span class=3D"hljs-keyword">expr</span> $j + <span class=3D"hljs-numbe=
r">1</span>]]
	} else {
	    <span class=3D"hljs-keyword">set</span> addr <span class=3D"hljs-numbe=
r">-1</span>
	    <span class=3D"hljs-keyword">if</span> {[readBuffer [<span class=3D"hl=
js-keyword">format</span> <span class=3D"hljs-string">"%06X"</span> [<span =
class=3D"hljs-keyword">expr</span> $addr6digit + $i]]] !=3D [<span class=3D=
"hljs-keyword">string</span> range $readframe $j [<span class=3D"hljs-keywo=
rd">expr</span> $j + <span class=3D"hljs-number">1</span>]]} then {
		<span class=3D"hljs-keyword">set</span> addr [<span class=3D"hljs-keyword=
">format</span> <span class=3D"hljs-string">"%#06X"</span> [<span class=3D"=
hljs-keyword">expr</span> $addr6digit + $i]]
		<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-strin=
g">"Memory Verify Fail at: $addr"</span>
		log_message $message
		actionsLog_message <span class=3D"hljs-string">"Memory Verify Fail at: $a=
ddr"</span>
		cmdsResetProgressBar
<span class=3D"hljs-comment">		#dbgShowInfo "Verify FAIL."</span>
		<span class=3D"hljs-keyword">break</span>
	    }
	}
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $addr
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclSel=
ectNode</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> flipStates atmelProtocol wai=
tTime readframe
    <span class=3D"hljs-keyword">global</span> retryPossible dongle sendfra=
me select_node canBaud
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hl=
js-number">1</span>
    <span class=3D"hljs-keyword">set</span> CRIS [<span class=3D"hljs-keywo=
rd">format</span> %<span class=3D"hljs-number">08</span>X <span class=3D"hl=
js-number">0</span>x$::deviceArray(crisConnect)]
    <span class=3D"hljs-keyword">set</span> bitrate [<span class=3D"hljs-ke=
yword">format</span> %<span class=3D"hljs-number">04</span>X [<span class=
=3D"hljs-keyword">string</span> range $canBaud <span class=3D"hljs-number">=
0</span> end<span class=3D"hljs-number">-1</span>]]
    <span class=3D"hljs-keyword">set</span> protocol <span class=3D"hljs-st=
ring">"00"</span>
    ptclInitDongle $bitrate $protocol $CRIS
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">":01"</span> $select_n=
ode <span class=3D"hljs-string">"00"</span> $::deviceArray(nnbConnect)]
    <span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-key=
word">list</span>]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=
=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> l=
ength $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs=
-keyword">incr</span> i <span class=3D"hljs-number">2</span>} {
	<span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hljs-ke=
yword">string</span> range $frame $i [<span class=3D"hljs-keyword">expr</sp=
an> $i + <span class=3D"hljs-number">1</span>]]
    }
    <span class=3D"hljs-keyword">append</span> frame [checkSum $lFrame]
<span class=3D"hljs-comment">    #dbgShowInfo "FRAME  &gt; $frame"</span>
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard) $frame]
    <span class=3D"hljs-keyword">if</span> {$status !=3D <span class=3D"hlj=
s-number">1</span>} then {
	<span class=3D"hljs-keyword">if</span> {$retryPossible} then {
	    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"=
hljs-number">-2</span>} then {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		ptclSendFrame $frame
		<span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(stan=
dard) $frame]
	    } elseif {$status =3D=3D <span class=3D"hljs-number">-1</span>} {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		<span class=3D"hljs-keyword">set</span> status [ptclChecksum]
	    } else {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
	    }
	} else {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	}
	<span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-keywor=
d">expr</span> $status=3D=3D<span class=3D"hljs-number">1</span>]
    }
    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"h=
ljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(bootlId) [<span clas=
s=3D"hljs-keyword">string</span> range $readframe <span class=3D"hljs-numbe=
r">9</span> <span class=3D"hljs-number">10</span>]
	<span class=3D"hljs-keyword">set</span> atmelProtocol(commState) [<span cl=
ass=3D"hljs-keyword">string</span> range $readframe <span class=3D"hljs-num=
ber">11</span> <span class=3D"hljs-number">12</span>]
	<span class=3D"hljs-keyword">if</span> {$atmelProtocol(commState) =3D=3D <=
span class=3D"hljs-string">"01"</span>} then {
	    <span class=3D"hljs-keyword">if</span> {[winfo exists .main.f_buffer.b=
_memSelect]} then {
		pack .main.f_buffer.b_memSelect -side bottom -expand <span class=3D"hljs-=
number">0</span> -pady <span class=3D"hljs-number">17</span>
	    }
	    ptclReadBootlVer
	    updateGUI onAnyCommunicationOn
	    updateGUI onCanNodeSelectionOpened
	    log_message <span class=3D"hljs-string">"CAN node $::deviceArray(nnbCo=
nnect) opened."</span>
	} else {
	    <span class=3D"hljs-keyword">if</span> {[winfo exists .main.f_buffer.b=
_memSelect]} then {
		pack forget .main.f_buffer.b_memSelect
	    }
	    updateGUI onAnyCommunicationOff
	    updateGUI onCanNodeSelectionClosed
	    log_message <span class=3D"hljs-string">"CAN node $::deviceArray(nnbCo=
nnect) closed."</span>
	}
    } else {
	<span class=3D"hljs-keyword">set</span> flipStates(anyComm) <span class=3D=
"hljs-string">"off"</span>
	updateGUI onAnyCommunicationOff
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclSen=
dIdProgStart</span> {addLo addHi {<span class=3D"hljs-keyword">memory</span=
> <span class=3D"hljs-string">"00"</span>}} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> buffer waitTime canProtocol =
prog_start retryPossible dongle sendframe
    <span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hl=
js-number">1</span>
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">":05"</span> $prog_sta=
rt <span class=3D"hljs-string">"00"</span> $memory [<span class=3D"hljs-key=
word">format</span> %<span class=3D"hljs-number">04</span>X <span class=3D"=
hljs-number">0</span>x$addLo] [<span class=3D"hljs-keyword">format</span> %=
<span class=3D"hljs-number">04</span>X <span class=3D"hljs-number">0</span>=
x$addHi]]
    <span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-key=
word">list</span>]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=
=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> l=
ength $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs=
-keyword">incr</span> i <span class=3D"hljs-number">2</span>} {
	<span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hljs-ke=
yword">string</span> range $frame $i [<span class=3D"hljs-keyword">expr</sp=
an> $i + <span class=3D"hljs-number">1</span>]]
    }
    <span class=3D"hljs-keyword">append</span> frame [checkSum $lFrame]
<span class=3D"hljs-comment">    #dbgShowInfo "FRAME  &gt; $frame"</span>
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard) $frame]
    <span class=3D"hljs-keyword">if</span> {$status !=3D <span class=3D"hlj=
s-number">1</span>} then {
	<span class=3D"hljs-keyword">if</span> {$retryPossible} then {
	    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"=
hljs-number">-2</span>} then {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		ptclSendFrame $frame
		<span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(stan=
dard) $frame]
	    } elseif {$status =3D=3D <span class=3D"hljs-number">-1</span>} {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		<span class=3D"hljs-keyword">set</span> status [ptclChecksum]
	    } else {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
	    }
	} else {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	}
	<span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-keywor=
d">expr</span> $status=3D=3D<span class=3D"hljs-number">1</span>]
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclPro=
gramData</span> {addLo addHi dummyArg} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime temp prog_data read=
frame retryPossible dongle sendframe
<span class=3D"hljs-comment">    #dbgShowVar "addLo  &gt; $addLo"</span>
<span class=3D"hljs-comment">    #dbgShowVar "addHi  &gt; $addHi"</span>
    <span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hl=
js-number">1</span>
    <span class=3D"hljs-keyword">set</span> len [<span class=3D"hljs-keywor=
d">format</span> <span class=3D"hljs-string">"%02X"</span> [<span class=3D"=
hljs-keyword">expr</span> $addHi - $addLo + <span class=3D"hljs-number">1</=
span>]]
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">":"</span> $len $prog_=
data <span class=3D"hljs-string">"00"</span>]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i $addLo} {$i &lt;=3D $addHi} {<span class=3D"hljs-keyword">incr<=
/span> i} {
	<span class=3D"hljs-keyword">set</span> frame ${frame}[readBuffer [<span c=
lass=3D"hljs-keyword">format</span> <span class=3D"hljs-string">"%06X"</spa=
n> $i]]
    }
<span class=3D"hljs-comment">    #dbgShowVar "frame =3D $frame"</span>
    <span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-key=
word">list</span>]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=
=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> l=
ength $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs=
-keyword">incr</span> i <span class=3D"hljs-number">2</span>} {
	<span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hljs-ke=
yword">string</span> range $frame $i [<span class=3D"hljs-keyword">expr</sp=
an> $i + <span class=3D"hljs-number">1</span>]]
    }
    <span class=3D"hljs-keyword">append</span> frame [checkSum $lFrame]
<span class=3D"hljs-comment">    #dbgShowInfo "FRAME  &gt; $frame"</span>
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard) $frame]
    <span class=3D"hljs-keyword">if</span> {$status !=3D <span class=3D"hlj=
s-number">1</span>} then {
	<span class=3D"hljs-keyword">if</span> {$retryPossible} then {
	    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"=
hljs-number">-2</span>} then {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		ptclSendFrame $frame
		<span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(stan=
dard) $frame]
	    } elseif {$status =3D=3D <span class=3D"hljs-number">-1</span>} {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		<span class=3D"hljs-keyword">set</span> status [ptclChecksum]
	    } else {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
	    }
	} else {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	}
	<span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-keywor=
d">expr</span> $status=3D=3D<span class=3D"hljs-number">1</span>]
    }
    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"h=
ljs-number">1</span>} then {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> index $readframe end<span class=3D"hljs-number">-2</span>] =3D=3D=
 <span class=3D"hljs-number">0</span>} then {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">1</span>
	} elseif {[<span class=3D"hljs-keyword">string</span> index $readframe end=
<span class=3D"hljs-number">-2</span>] =3D=3D <span class=3D"hljs-number">1=
</span>} {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	} elseif {[<span class=3D"hljs-keyword">string</span> index $readframe end=
<span class=3D"hljs-number">-2</span>] =3D=3D <span class=3D"hljs-number">2=
</span>} {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">2</span>
	}
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dBlock</span> {addrLo addrHi {<span class=3D"hljs-keyword">memory</span> <s=
pan class=3D"hljs-string">"00"</span>} {action <span class=3D"hljs-string">=
"update"</span>}} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime display_data retrya=
ddrLo protocol readframe retryPossible dongle sendframe
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hl=
js-number">1</span>
    <span class=3D"hljs-keyword">set</span> nbFrame [<span class=3D"hljs-ke=
yword">expr</span> (($addrHi - $addrLo) / $protocol(frameLengthR)) +<span c=
lass=3D"hljs-number">1</span>]
<span class=3D"hljs-comment">    #dbgShowVar "nbFrame $nbFrame"</span>
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">":05"</span> $display_=
data <span class=3D"hljs-string">"00"</span> $memory [<span class=3D"hljs-k=
eyword">format</span> %<span class=3D"hljs-number">04</span>X $addrLo] [<sp=
an class=3D"hljs-keyword">format</span> %<span class=3D"hljs-number">04</sp=
an>X $addrHi]]
    <span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-key=
word">list</span>]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=
=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> l=
ength $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs=
-keyword">incr</span> i <span class=3D"hljs-number">2</span>} {
	<span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hljs-ke=
yword">string</span> range $frame $i [<span class=3D"hljs-keyword">expr</sp=
an> $i + <span class=3D"hljs-number">1</span>]]
    }
    <span class=3D"hljs-keyword">append</span> frame [checkSum $lFrame]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">while</span> {$nbFrame !=3D<span class=3D"=
hljs-number">0</span>} {
	<span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(stand=
ard) $frame]
	<span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"hljs=
-number">1</span>} then {
	    <span class=3D"hljs-keyword">set</span> failAddr [ptclUpdateOrCompareB=
uffer [<span class=3D"hljs-keyword">format</span> <span class=3D"hljs-strin=
g">"%#06X"</span> $addrLo] $action]
	    <span class=3D"hljs-keyword">if</span> {($failAddr =3D=3D <span class=
=3D"hljs-number">1</span>) ||($failAddr =3D=3D <span class=3D"hljs-number">=
-1</span>)} then {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">1</span>
	    } else {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
		<span class=3D"hljs-keyword">break</span>
	    }
<span class=3D"hljs-comment">	    #Frame is correctly read so we can read t=
he following one</span>
	    <span class=3D"hljs-keyword">incr</span> nbFrame <span class=3D"hljs-n=
umber">-1</span>
	    <span class=3D"hljs-keyword">set</span> addrLo [<span class=3D"hljs-ke=
yword">expr</span> $addrLo + $protocol(frameLengthR)]
	} elseif {$retryPossible} {
	    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"=
hljs-number">-2</span>} then {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		<span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keywor=
d">append</span> frame <span class=3D"hljs-string">":05"</span> $display_da=
ta <span class=3D"hljs-string">"00"</span> $memory [<span class=3D"hljs-key=
word">format</span> %<span class=3D"hljs-number">04</span>X $addrLo] [<span=
 class=3D"hljs-keyword">format</span> %<span class=3D"hljs-number">04</span=
>X $addrHi]]
		<span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-keywo=
rd">list</span>]
		<span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">set=
</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=3D=
"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> leng=
th $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs-ke=
yword">incr</span> i <span class=3D"hljs-number">2</span>} {
		    <span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hl=
js-keyword">string</span> range $frame $i [<span class=3D"hljs-keyword">exp=
r</span> $i + <span class=3D"hljs-number">1</span>]]
		}
		<span class=3D"hljs-keyword">append</span> frame [checkSum $lFrame]
		ptclSendFrame $frame
		<span class=3D"hljs-keyword">set</span> nbFrame [<span class=3D"hljs-keyw=
ord">expr</span> (($addrHi - $addrLo) / $protocol(frameLengthR)) +<span cla=
ss=3D"hljs-number">1</span>]
	    } elseif {$status =3D=3D <span class=3D"hljs-number">-1</span>} {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		<span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keywor=
d">append</span> frame <span class=3D"hljs-string">":05"</span> $display_da=
ta <span class=3D"hljs-string">"00"</span> $memory [<span class=3D"hljs-key=
word">format</span> %<span class=3D"hljs-number">04</span>X $addrLo] [<span=
 class=3D"hljs-keyword">format</span> %<span class=3D"hljs-number">04</span=
>X $addrHi]]
		<span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-keywo=
rd">list</span>]
		<span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">set=
</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=3D=
"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> leng=
th $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs-ke=
yword">incr</span> i <span class=3D"hljs-number">2</span>} {
		    <span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hl=
js-keyword">string</span> range $frame $i [<span class=3D"hljs-keyword">exp=
r</span> $i + <span class=3D"hljs-number">1</span>]]
		}
		<span class=3D"hljs-keyword">append</span> frame [checkSum $lFrame]
		ptclSendFrame $frame
		<span class=3D"hljs-keyword">set</span> nbFrame [<span class=3D"hljs-keyw=
ord">expr</span> (($addrHi - $addrLo) / $protocol(frameLengthR)) +<span cla=
ss=3D"hljs-number">1</span>]
	    } else {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
		<span class=3D"hljs-keyword">break</span>
	    }
	} else {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">update</span>
    }
    <span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-key=
word">expr</span> $status=3D=3D<span class=3D"hljs-number">1</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclBla=
nkCheck</span> {addrLo addrHi {<span class=3D"hljs-keyword">memory</span> <=
span class=3D"hljs-string">"01"</span>}} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime readframe display_d=
ata retryPossible dongle sendframe
    <span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hl=
js-number">1</span>
    <span class=3D"hljs-keyword">set</span> waitTime(standard) <span class=
=3D"hljs-number">10000</span>
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">":05"</span> $display_=
data <span class=3D"hljs-string">"00"</span> $memory [<span class=3D"hljs-k=
eyword">format</span> %<span class=3D"hljs-number">04</span>X <span class=
=3D"hljs-string">"0x$addrLo"</span>] [<span class=3D"hljs-keyword">format</=
span> %<span class=3D"hljs-number">04</span>X <span class=3D"hljs-string">"=
0x$addrHi"</span>]]
<span class=3D"hljs-comment">    #dbgShowVar "assembled frame: $frame"</spa=
n>
    <span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-key=
word">list</span>]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=
=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> l=
ength $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs=
-keyword">incr</span> i <span class=3D"hljs-number">2</span>} {
	<span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hljs-ke=
yword">string</span> range $frame $i [<span class=3D"hljs-keyword">expr</sp=
an> $i + <span class=3D"hljs-number">1</span>]]
    }
    <span class=3D"hljs-keyword">append</span> frame [checkSum $lFrame]
<span class=3D"hljs-comment">    #dbgShowInfo "FRAME  &gt; $frame"</span>
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard) $frame]
    <span class=3D"hljs-keyword">if</span> {$status !=3D <span class=3D"hlj=
s-number">1</span>} then {
	<span class=3D"hljs-keyword">if</span> {$retryPossible} then {
	    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"=
hljs-number">-2</span>} then {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		ptclSendFrame $frame
		<span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(stan=
dard) $frame]
	    } elseif {$status =3D=3D <span class=3D"hljs-number">-1</span>} {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		<span class=3D"hljs-keyword">set</span> status [ptclChecksum]
	    } else {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
	    }
	} else {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	}
	<span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-keywor=
d">expr</span> $status =3D=3D <span class=3D"hljs-number">1</span>]
    }
    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"h=
ljs-number">1</span>} then {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> length $readframe] =3D=3D <span class=3D"hljs-number">15</span>} =
then {
	    <span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-ke=
yword">string</span> range $readframe end<span class=3D"hljs-number">-5</sp=
an> end<span class=3D"hljs-number">-2</span>]
	} else {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">-1</span>
	}
    }
    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"h=
ljs-number">0</span>} then {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>-2</span>
    }
    <span class=3D"hljs-keyword">set</span> waitTime(standard) <span class=
=3D"hljs-number">3000</span>
<span class=3D"hljs-comment">    #dbgShowVar "status $status"</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclEra=
seBlock0</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime write_command sendf=
rame retryPossible dongle
    <span class=3D"hljs-keyword">set</span> waitTime(standard) <span class=
=3D"hljs-number">10000</span>
    <span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hl=
js-number">1</span>
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">":02"</span> $write_co=
mmand <span class=3D"hljs-string">"000000"</span>]
    <span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-key=
word">list</span>]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=
=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> l=
ength $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs=
-keyword">incr</span> i <span class=3D"hljs-number">2</span>} {
	<span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hljs-ke=
yword">string</span> range $frame $i [<span class=3D"hljs-keyword">expr</sp=
an> $i + <span class=3D"hljs-number">1</span>]]
    }
    <span class=3D"hljs-keyword">append</span> frame [checkSum $lFrame]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard) $frame]
    <span class=3D"hljs-keyword">if</span> {$status !=3D <span class=3D"hlj=
s-number">1</span>} then {
	<span class=3D"hljs-keyword">if</span> {$retryPossible} then {
	    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"=
hljs-number">-2</span>} then {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		ptclSendFrame $frame
		<span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(stan=
dard) $frame]
	    } elseif {$status =3D=3D <span class=3D"hljs-number">-1</span>} {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		<span class=3D"hljs-keyword">set</span> status [ptclChecksum]
	    } else {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
	    }
	} else {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	}
	<span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-keywor=
d">expr</span> $status=3D=3D<span class=3D"hljs-number">1</span>]
    }
    <span class=3D"hljs-keyword">set</span> waitTime(standard) <span class=
=3D"hljs-number">3000</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclEra=
seBlock1</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime write_command retry=
Possible dongle sendframe
    <span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hl=
js-number">1</span>
    <span class=3D"hljs-keyword">set</span> waitTime(standard) <span class=
=3D"hljs-number">10000</span>
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">":02"</span> $write_co=
mmand <span class=3D"hljs-string">"000020"</span>]
    <span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-key=
word">list</span>]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=
=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> l=
ength $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs=
-keyword">incr</span> i <span class=3D"hljs-number">2</span>} {
	<span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hljs-ke=
yword">string</span> range $frame $i [<span class=3D"hljs-keyword">expr</sp=
an> $i + <span class=3D"hljs-number">1</span>]]
    }
    <span class=3D"hljs-keyword">append</span> frame [checkSum $lFrame]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard) $frame]
    <span class=3D"hljs-keyword">if</span> {$status !=3D <span class=3D"hlj=
s-number">1</span>} then {
	<span class=3D"hljs-keyword">if</span> {$retryPossible} then {
	    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"=
hljs-number">-2</span>} then {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		ptclSendFrame $frame
		<span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(stan=
dard) $frame]
	    } elseif {$status =3D=3D <span class=3D"hljs-number">-1</span>} {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		<span class=3D"hljs-keyword">set</span> status [ptclChecksum]
	    } else {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
	    }
	} else {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	}
	<span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-keywor=
d">expr</span> $status=3D=3D<span class=3D"hljs-number">1</span>]
    }
    <span class=3D"hljs-keyword">set</span> waitTime(standard) <span class=
=3D"hljs-number">3000</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclEra=
seBlock2</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime write_command retry=
Possible dongle sendframe
    <span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hl=
js-number">1</span>
    <span class=3D"hljs-keyword">set</span> waitTime(standard) <span class=
=3D"hljs-number">10000</span>
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">":02"</span> $write_co=
mmand <span class=3D"hljs-string">"000040"</span>]
    <span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-key=
word">list</span>]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=
=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> l=
ength $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs=
-keyword">incr</span> i <span class=3D"hljs-number">2</span>} {
	<span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hljs-ke=
yword">string</span> range $frame $i [<span class=3D"hljs-keyword">expr</sp=
an> $i + <span class=3D"hljs-number">1</span>]]
    }
    <span class=3D"hljs-keyword">append</span> frame [checkSum $lFrame]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard) $frame]
    <span class=3D"hljs-keyword">if</span> {$status !=3D <span class=3D"hlj=
s-number">1</span>} then {
	<span class=3D"hljs-keyword">if</span> {$retryPossible} then {
	    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"=
hljs-number">-2</span>} then {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		ptclSendFrame $frame
		<span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(stan=
dard) $frame]
	    } elseif {$status =3D=3D <span class=3D"hljs-number">-1</span>} {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		<span class=3D"hljs-keyword">set</span> status [ptclChecksum]
	    } else {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
	    }
	} else {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	}
	<span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-keywor=
d">expr</span> $status=3D=3D<span class=3D"hljs-number">1</span>]
    }
    <span class=3D"hljs-keyword">set</span> waitTime(standard) <span class=
=3D"hljs-number">3000</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclFul=
lChipErase</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime write_command retry=
Possible dongle sendframe
    <span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hl=
js-number">1</span>
    <span class=3D"hljs-keyword">set</span> waitTime(standard) <span class=
=3D"hljs-number">10000</span>
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">":02"</span> $write_co=
mmand <span class=3D"hljs-string">"0000FF"</span>]
    <span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-key=
word">list</span>]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=
=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> l=
ength $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs=
-keyword">incr</span> i <span class=3D"hljs-number">2</span>} {
	<span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hljs-ke=
yword">string</span> range $frame $i [<span class=3D"hljs-keyword">expr</sp=
an> $i + <span class=3D"hljs-number">1</span>]]
    }
    <span class=3D"hljs-keyword">append</span> frame [checkSum $lFrame]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard) $frame]
    <span class=3D"hljs-keyword">if</span> {$status !=3D <span class=3D"hlj=
s-number">1</span>} then {
	<span class=3D"hljs-keyword">if</span> {$retryPossible} then {
	    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"=
hljs-number">-2</span>} then {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		ptclSendFrame $frame
		<span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(stan=
dard) $frame]
	    } elseif {$status =3D=3D <span class=3D"hljs-number">-1</span>} {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		<span class=3D"hljs-keyword">set</span> status [ptclChecksum]
	    } else {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
	    }
	} else {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	}
	<span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-keywor=
d">expr</span> $status=3D=3D<span class=3D"hljs-number">1</span>]
    }
    <span class=3D"hljs-keyword">set</span> loadConfig(programDevice) <span=
 class=3D"hljs-string">"setupProgramDevice"</span>
    <span class=3D"hljs-keyword">set</span> waitTime(standard) <span class=
=3D"hljs-number">3000</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teBSB</span> {data} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime write_command retry=
Possible dongle sendframe
    <span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hl=
js-number">1</span>
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">":03"</span> $write_co=
mmand <span class=3D"hljs-string">"000100"</span> $data]
    <span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-key=
word">list</span>]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=
=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> l=
ength $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs=
-keyword">incr</span> i <span class=3D"hljs-number">2</span>} {
	<span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hljs-ke=
yword">string</span> range $frame $i [<span class=3D"hljs-keyword">expr</sp=
an> $i + <span class=3D"hljs-number">1</span>]]
    }
    <span class=3D"hljs-keyword">append</span> frame [checkSum $lFrame]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard) $frame]
    <span class=3D"hljs-keyword">if</span> {$status !=3D <span class=3D"hlj=
s-number">1</span>} then {
	<span class=3D"hljs-keyword">if</span> {$retryPossible} then {
	    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"=
hljs-number">-2</span>} then {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		ptclSendFrame $frame
		<span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(stan=
dard) $frame]
	    } elseif {$status =3D=3D <span class=3D"hljs-number">-1</span>} {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		<span class=3D"hljs-keyword">set</span> status [ptclChecksum]
	    } else {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
	    }
	} else {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	}
	<span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-keywor=
d">expr</span> $status=3D=3D<span class=3D"hljs-number">1</span>]
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teSBV</span> {data} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime write_command retry=
Possible dongle sendframe
    <span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hl=
js-number">1</span>
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">":03"</span> $write_co=
mmand <span class=3D"hljs-string">"000101"</span> $data]
    <span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-key=
word">list</span>]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=
=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> l=
ength $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs=
-keyword">incr</span> i <span class=3D"hljs-number">2</span>} {
	<span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hljs-ke=
yword">string</span> range $frame $i [<span class=3D"hljs-keyword">expr</sp=
an> $i + <span class=3D"hljs-number">1</span>]]
    }
    <span class=3D"hljs-keyword">append</span> frame [checkSum $lFrame]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard) $frame]
    <span class=3D"hljs-keyword">if</span> {$status !=3D <span class=3D"hlj=
s-number">1</span>} then {
	<span class=3D"hljs-keyword">if</span> {$retryPossible} then {
	    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"=
hljs-number">-2</span>} then {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		ptclSendFrame $frame
		<span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(stan=
dard) $frame]
	    } elseif {$status =3D=3D <span class=3D"hljs-number">-1</span>} {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		<span class=3D"hljs-keyword">set</span> status [ptclChecksum]
	    } else {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
	    }
	} else {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	}
	<span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-keywor=
d">expr</span> $status=3D=3D<span class=3D"hljs-number">1</span>]
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclPro=
gSSBlev1</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime write_command retry=
Possible dongle sendframe
    <span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hl=
js-number">1</span>
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">":03"</span> $write_co=
mmand <span class=3D"hljs-string">"000105FE"</span>]
    <span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-key=
word">list</span>]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=
=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> l=
ength $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs=
-keyword">incr</span> i <span class=3D"hljs-number">2</span>} {
	<span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hljs-ke=
yword">string</span> range $frame $i [<span class=3D"hljs-keyword">expr</sp=
an> $i + <span class=3D"hljs-number">1</span>]]
    }
    <span class=3D"hljs-keyword">append</span> frame [checkSum $lFrame]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard) $frame]
    <span class=3D"hljs-keyword">if</span> {$status !=3D <span class=3D"hlj=
s-number">1</span>} then {
	<span class=3D"hljs-keyword">if</span> {$retryPossible} then {
	    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"=
hljs-number">-2</span>} then {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		ptclSendFrame $frame
		<span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(stan=
dard) $frame]
	    } elseif {$status =3D=3D <span class=3D"hljs-number">-1</span>} {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		<span class=3D"hljs-keyword">set</span> status [ptclChecksum]
	    } else {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
	    }
	} else {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	}
	<span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-keywor=
d">expr</span> $status=3D=3D<span class=3D"hljs-number">1</span>]
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclPro=
gSSBlev2</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime write_command retry=
Possible dongle sendframe
    <span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hl=
js-number">1</span>
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">":03"</span> $write_co=
mmand <span class=3D"hljs-string">"000105FC"</span>]
    <span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-key=
word">list</span>]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=
=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> l=
ength $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs=
-keyword">incr</span> i <span class=3D"hljs-number">2</span>} {
	<span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hljs-ke=
yword">string</span> range $frame $i [<span class=3D"hljs-keyword">expr</sp=
an> $i + <span class=3D"hljs-number">1</span>]]
    }
    <span class=3D"hljs-keyword">append</span> frame [checkSum $lFrame]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard) $frame]
    <span class=3D"hljs-keyword">if</span> {$status !=3D <span class=3D"hlj=
s-number">1</span>} then {
	<span class=3D"hljs-keyword">if</span> {$retryPossible} then {
	    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"=
hljs-number">-2</span>} then {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		ptclSendFrame $frame
		<span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(stan=
dard) $frame]
	    } elseif {$status =3D=3D <span class=3D"hljs-number">-1</span>} {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		<span class=3D"hljs-keyword">set</span> status [ptclChecksum]
	    } else {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
	    }
	} else {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	}
	<span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-keywor=
d">expr</span> $status=3D=3D<span class=3D"hljs-number">1</span>]
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teEB</span> {data} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime write_command retry=
Possible dongle sendframe
    <span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hl=
js-number">1</span>
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">":03"</span> $write_co=
mmand <span class=3D"hljs-string">"000106"</span> $data]
    <span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-key=
word">list</span>]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=
=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> l=
ength $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs=
-keyword">incr</span> i <span class=3D"hljs-number">2</span>} {
	<span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hljs-ke=
yword">string</span> range $frame $i [<span class=3D"hljs-keyword">expr</sp=
an> $i + <span class=3D"hljs-number">1</span>]]
    }
    <span class=3D"hljs-keyword">append</span> frame [checkSum $lFrame]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard) $frame]
    <span class=3D"hljs-keyword">if</span> {$status !=3D <span class=3D"hlj=
s-number">1</span>} then {
	<span class=3D"hljs-keyword">if</span> {$retryPossible} then {
	    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"=
hljs-number">-2</span>} then {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		ptclSendFrame $frame
		<span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(stan=
dard) $frame]
	    } elseif {$status =3D=3D <span class=3D"hljs-number">-1</span>} {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		<span class=3D"hljs-keyword">set</span> status [ptclChecksum]
	    } else {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
	    }
	} else {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	}
	<span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-keywor=
d">expr</span> $status=3D=3D<span class=3D"hljs-number">1</span>]
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teBTC1</span> {data} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime write_command retry=
Possible dongle sendframe
    <span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hl=
js-number">1</span>
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">":03"</span> $write_co=
mmand <span class=3D"hljs-string">"00011C"</span> $data]
    <span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-key=
word">list</span>]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=
=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> l=
ength $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs=
-keyword">incr</span> i <span class=3D"hljs-number">2</span>} {
	<span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hljs-ke=
yword">string</span> range $frame $i [<span class=3D"hljs-keyword">expr</sp=
an> $i + <span class=3D"hljs-number">1</span>]]
    }
    <span class=3D"hljs-keyword">append</span> frame [checkSum $lFrame]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard) $frame]
    <span class=3D"hljs-keyword">if</span> {$status !=3D <span class=3D"hlj=
s-number">1</span>} then {
	<span class=3D"hljs-keyword">if</span> {$retryPossible} then {
	    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"=
hljs-number">-2</span>} then {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		ptclSendFrame $frame
		<span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(stan=
dard) $frame]
	    } elseif {$status =3D=3D <span class=3D"hljs-number">-1</span>} {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		<span class=3D"hljs-keyword">set</span> status [ptclChecksum]
	    } else {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
	    }
	} else {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	}
	<span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-keywor=
d">expr</span> $status=3D=3D<span class=3D"hljs-number">1</span>]
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teBTC2</span> {data} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime write_command retry=
Possible dongle sendframe
    <span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hl=
js-number">1</span>
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">":03"</span> $write_co=
mmand <span class=3D"hljs-string">"00011D"</span> $data]
    <span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-key=
word">list</span>]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=
=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> l=
ength $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs=
-keyword">incr</span> i <span class=3D"hljs-number">2</span>} {
	<span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hljs-ke=
yword">string</span> range $frame $i [<span class=3D"hljs-keyword">expr</sp=
an> $i + <span class=3D"hljs-number">1</span>]]
    }
    <span class=3D"hljs-keyword">append</span> frame [checkSum $lFrame]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard) $frame]
    <span class=3D"hljs-keyword">if</span> {$status !=3D <span class=3D"hlj=
s-number">1</span>} then {
	<span class=3D"hljs-keyword">if</span> {$retryPossible} then {
	    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"=
hljs-number">-2</span>} then {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		ptclSendFrame $frame
		<span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(stan=
dard) $frame]
	    } elseif {$status =3D=3D <span class=3D"hljs-number">-1</span>} {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		<span class=3D"hljs-keyword">set</span> status [ptclChecksum]
	    } else {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
	    }
	} else {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	}
	<span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-keywor=
d">expr</span> $status=3D=3D<span class=3D"hljs-number">1</span>]
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teBTC3</span> {data} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime write_command retry=
Possible dongle sendframe
    <span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hl=
js-number">1</span>
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">":03"</span> $write_co=
mmand <span class=3D"hljs-string">"00011E"</span> $data]
    <span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-key=
word">list</span>]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=
=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> l=
ength $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs=
-keyword">incr</span> i <span class=3D"hljs-number">2</span>} {
	<span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hljs-ke=
yword">string</span> range $frame $i [<span class=3D"hljs-keyword">expr</sp=
an> $i + <span class=3D"hljs-number">1</span>]]
    }
    <span class=3D"hljs-keyword">append</span> frame [checkSum $lFrame]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard) $frame]
    <span class=3D"hljs-keyword">if</span> {$status !=3D <span class=3D"hlj=
s-number">1</span>} then {
	<span class=3D"hljs-keyword">if</span> {$retryPossible} then {
	    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"=
hljs-number">-2</span>} then {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		ptclSendFrame $frame
		<span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(stan=
dard) $frame]
	    } elseif {$status =3D=3D <span class=3D"hljs-number">-1</span>} {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		<span class=3D"hljs-keyword">set</span> status [ptclChecksum]
	    } else {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
	    }
	} else {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	}
	<span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-keywor=
d">expr</span> $status=3D=3D<span class=3D"hljs-number">1</span>]
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teNNB</span> {data} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime write_command retry=
Possible dongle sendframe
    <span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hl=
js-number">1</span>
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">":03"</span> $write_co=
mmand <span class=3D"hljs-string">"00011F"</span> $data]
    <span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-key=
word">list</span>]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=
=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> l=
ength $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs=
-keyword">incr</span> i <span class=3D"hljs-number">2</span>} {
	<span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hljs-ke=
yword">string</span> range $frame $i [<span class=3D"hljs-keyword">expr</sp=
an> $i + <span class=3D"hljs-number">1</span>]]
    }
    <span class=3D"hljs-keyword">append</span> frame [checkSum $lFrame]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard) $frame]
    <span class=3D"hljs-keyword">if</span> {$status !=3D <span class=3D"hlj=
s-number">1</span>} then {
	<span class=3D"hljs-keyword">if</span> {$retryPossible} then {
	    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"=
hljs-number">-2</span>} then {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		ptclSendFrame $frame
		<span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(stan=
dard) $frame]
	    } elseif {$status =3D=3D <span class=3D"hljs-number">-1</span>} {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		<span class=3D"hljs-keyword">set</span> status [ptclChecksum]
	    } else {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
	    }
	} else {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	}
	<span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-keywor=
d">expr</span> $status=3D=3D<span class=3D"hljs-number">1</span>]
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teCRIS</span> {data} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime write_command retry=
Possible dongle sendframe
    <span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hl=
js-number">1</span>
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">":03"</span> $write_co=
mmand <span class=3D"hljs-string">"000120"</span> $data]
    <span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-key=
word">list</span>]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=
=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> l=
ength $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs=
-keyword">incr</span> i <span class=3D"hljs-number">2</span>} {
	<span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hljs-ke=
yword">string</span> range $frame $i [<span class=3D"hljs-keyword">expr</sp=
an> $i + <span class=3D"hljs-number">1</span>]]
    }
    <span class=3D"hljs-keyword">append</span> frame [checkSum $lFrame]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard) $frame]
    <span class=3D"hljs-keyword">if</span> {$status !=3D <span class=3D"hlj=
s-number">1</span>} then {
	<span class=3D"hljs-keyword">if</span> {$retryPossible} then {
	    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"=
hljs-number">-2</span>} then {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		ptclSendFrame $frame
		<span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(stan=
dard) $frame]
	    } elseif {$status =3D=3D <span class=3D"hljs-number">-1</span>} {
<span class=3D"hljs-comment">		#build the checksum frame: dongle is the com=
mand identifier </span>
<span class=3D"hljs-comment">		#of dongle and checksum  management    </spa=
n>
<span class=3D"hljs-comment">		#sendframe is the penultimate sent  frame </=
span>
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		<span class=3D"hljs-keyword">set</span> status [ptclChecksum]
	    } else {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
	    }
	} else {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	}
	<span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-keywor=
d">expr</span> $status=3D=3D<span class=3D"hljs-number">1</span>]
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teHwByte</span> {{data <span class=3D"hljs-string">"X"</span>}} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> write_command waitTime retry=
Possible dongle sendframe
    <span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hl=
js-number">1</span>
    <span class=3D"hljs-keyword">if</span> {$data =3D=3D <span class=3D"hlj=
s-string">"X"</span>} then {
	<span class=3D"hljs-keyword">set</span> data [<span class=3D"hljs-keyword"=
>format</span> %<span class=3D"hljs-number">02</span>X [<span class=3D"hljs=
-keyword">expr</span> [<span class=3D"hljs-keyword">expr</span> <span class=
=3D"hljs-number">0</span>x$::deviceArray(hsb) &amp; <span class=3D"hljs-num=
ber">0x3F</span>] | [<span class=3D"hljs-keyword">expr</span> <span class=
=3D"hljs-number">0</span>x$::deviceArray(x2Fuse) &lt;&lt; <span class=3D"hl=
js-number">7</span>] | [<span class=3D"hljs-keyword">expr</span> <span clas=
s=3D"hljs-number">0</span>x$::deviceArray(bljbFuse) &lt;&lt; <span class=3D=
"hljs-number">6</span>]]]
    }
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">":03"</span> $write_co=
mmand <span class=3D"hljs-string">"000200"</span> $data]
    <span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-key=
word">list</span>]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=
=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> l=
ength $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs=
-keyword">incr</span> i <span class=3D"hljs-number">2</span>} {
	<span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hljs-ke=
yword">string</span> range $frame $i [<span class=3D"hljs-keyword">expr</sp=
an> $i + <span class=3D"hljs-number">1</span>]]
    }
    <span class=3D"hljs-keyword">append</span> frame [checkSum $lFrame]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard) $frame]
    <span class=3D"hljs-keyword">if</span> {$status !=3D <span class=3D"hlj=
s-number">1</span>} then {
	<span class=3D"hljs-keyword">if</span> {$retryPossible} then {
	    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"=
hljs-number">-2</span>} then {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		ptclSendFrame $frame
		<span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(stan=
dard) $frame]
	    } elseif {$status =3D=3D <span class=3D"hljs-number">-1</span>} {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		<span class=3D"hljs-keyword">set</span> status [ptclChecksum]
	    } else {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
	    }
	} else {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	}
	<span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-keywor=
d">expr</span> $status=3D=3D<span class=3D"hljs-number">1</span>]
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teHwReset</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime write_command retry=
Possible dongle sendframe
    <span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hl=
js-number">1</span>
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">":02"</span> $write_co=
mmand <span class=3D"hljs-string">"000300"</span>]
    <span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-key=
word">list</span>]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=
=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> l=
ength $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs=
-keyword">incr</span> i <span class=3D"hljs-number">2</span>} {
	<span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hljs-ke=
yword">string</span> range $frame $i [<span class=3D"hljs-keyword">expr</sp=
an> $i + <span class=3D"hljs-number">1</span>]]
    }
    <span class=3D"hljs-keyword">append</span> frame [checkSum $lFrame]
    ptclSendFrame $frame
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teLJMP</span> {address} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime write_command retry=
Possible dongle sendframe
    <span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hl=
js-number">1</span>
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">":04"</span> $write_co=
mmand <span class=3D"hljs-string">"000301"</span> $address]
    <span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-key=
word">list</span>]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=
=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> l=
ength $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs=
-keyword">incr</span> i <span class=3D"hljs-number">2</span>} {
	<span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hljs-ke=
yword">string</span> range $frame $i [<span class=3D"hljs-keyword">expr</sp=
an> $i + <span class=3D"hljs-number">1</span>]]
    }
    <span class=3D"hljs-keyword">append</span> frame [checkSum $lFrame]
    ptclSendFrame $frame
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dBootlVer</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime rs232standard read_=
command readframe retryPossible dongle sendframe
    <span class=3D"hljs-keyword">set</span> p <span class=3D"hljs-string">"=
bootlVer"</span>
    <span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hl=
js-number">1</span>
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">":02"</span> $read_com=
mand <span class=3D"hljs-string">"000000"</span>]
    <span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-key=
word">list</span>]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=
=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> l=
ength $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs=
-keyword">incr</span> i <span class=3D"hljs-number">2</span>} {
	<span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hljs-ke=
yword">string</span> range $frame $i [<span class=3D"hljs-keyword">expr</sp=
an> $i + <span class=3D"hljs-number">1</span>]]
    }
    <span class=3D"hljs-keyword">append</span> frame [checkSum $lFrame]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard) $frame]
    <span class=3D"hljs-keyword">if</span> {$status !=3D <span class=3D"hlj=
s-number">1</span>} then {
	<span class=3D"hljs-keyword">if</span> {$retryPossible} then {
	    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"=
hljs-number">-2</span>} then {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		ptclSendFrame $frame
		<span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(stan=
dard) $frame]
	    } elseif {$status =3D=3D <span class=3D"hljs-number">-1</span>} {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		<span class=3D"hljs-keyword">set</span> status [ptclChecksum]
	    } else {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
	    }
	} else {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	}
	<span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-keywor=
d">expr</span> $status=3D=3D<span class=3D"hljs-number">1</span>]
    }
    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"h=
ljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> c1 [<span class=3D"hljs-keyword">s=
tring</span> index $readframe end<span class=3D"hljs-number">-3</span>]
	<span class=3D"hljs-keyword">set</span> c2 [<span class=3D"hljs-keyword">s=
tring</span> index $readframe end<span class=3D"hljs-number">-2</span>]
	<span class=3D"hljs-keyword">set</span> ::deviceArray($p) <span class=3D"h=
ljs-string">"1.$c1.$c2"</span>
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($p) =3D $::deviceA=
rray($p)" </span>
	setBootlVerDepFeatures <span class=3D"hljs-string">"CAN"</span> ${c1}${c2}
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dDevBootId1</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> testFlag waitTime read_comma=
nd readframe retryPossible dongle sendframe
    <span class=3D"hljs-keyword">set</span> p <span class=3D"hljs-string">"=
deviceBootId1"</span>
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hl=
js-number">1</span>
    <span class=3D"hljs-keyword">if</span> {$testFlag(readDevBootId1)} then=
 {
	<span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyword=
">append</span> frame <span class=3D"hljs-string">":02"</span> $read_comman=
d <span class=3D"hljs-string">"000001"</span>]
	<span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-keywor=
d">list</span>]
	<span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">set<=
/span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=3D"=
hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> lengt=
h $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs-key=
word">incr</span> i <span class=3D"hljs-number">2</span>} {
	    <span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hlj=
s-keyword">string</span> range $frame $i [<span class=3D"hljs-keyword">expr=
</span> $i + <span class=3D"hljs-number">1</span>]]
	}
	<span class=3D"hljs-keyword">append</span> frame [checkSum $lFrame]
	ptclSendFrame $frame
	<span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(stand=
ard) $frame]
	<span class=3D"hljs-keyword">if</span> {$status !=3D <span class=3D"hljs-n=
umber">1</span>} then {
	    <span class=3D"hljs-keyword">if</span> {$retryPossible} then {
		<span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"hlj=
s-number">-2</span>} then {
		    <span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"=
hljs-number">0</span>
		    ptclSendFrame $frame
		    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(=
standard) $frame]
		} elseif {$status =3D=3D <span class=3D"hljs-number">-1</span>} {
		    <span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"=
hljs-number">0</span>
		    <span class=3D"hljs-keyword">set</span> status [ptclChecksum]
		} else {
		    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-nu=
mber">0</span>
		}
	    } else {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
	    }
	    <span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-ke=
yword">expr</span> $status=3D=3D<span class=3D"hljs-number">1</span>]
	}
	<span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"hljs=
-number">1</span>} then {
	    <span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=
=3D"hljs-keyword">string</span> range $readframe end<span class=3D"hljs-num=
ber">-3</span> end<span class=3D"hljs-number">-2</span>]
<span class=3D"hljs-comment">	    #dbgShowVar "::deviceArray($p) =3D $::dev=
iceArray($p)"</span>
	}
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dDevBootId2</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> testFlag waitTime read_comma=
nd readframe retryPossible dongle sendframe
    <span class=3D"hljs-keyword">set</span> p <span class=3D"hljs-string">"=
deviceBootId2"</span>
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hl=
js-number">1</span>
    <span class=3D"hljs-keyword">if</span> {$testFlag(readDevBootId2)} then=
 {
	<span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyword=
">append</span> frame <span class=3D"hljs-string">":02"</span> $read_comman=
d <span class=3D"hljs-string">"000002"</span>]
	<span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-keywor=
d">list</span>]
	<span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">set<=
/span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=3D"=
hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> lengt=
h $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs-key=
word">incr</span> i <span class=3D"hljs-number">2</span>} {
	    <span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hlj=
s-keyword">string</span> range $frame $i [<span class=3D"hljs-keyword">expr=
</span> $i + <span class=3D"hljs-number">1</span>]]
	}
	<span class=3D"hljs-keyword">append</span> frame [checkSum $lFrame]
	ptclSendFrame $frame
	<span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(stand=
ard) $frame]
	<span class=3D"hljs-keyword">if</span> {$status !=3D <span class=3D"hljs-n=
umber">1</span>} then {
	    <span class=3D"hljs-keyword">if</span> {$retryPossible} then {
		<span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"hlj=
s-number">-2</span>} then {
		    <span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"=
hljs-number">0</span>
		    ptclSendFrame $frame
		    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(=
standard) $frame]
		} elseif {$status =3D=3D <span class=3D"hljs-number">-1</span>} {
		    <span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"=
hljs-number">0</span>
		    <span class=3D"hljs-keyword">set</span> status [ptclChecksum]
		} else {
		    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-nu=
mber">0</span>
		}
	    } else {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
	    }
	    <span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-ke=
yword">expr</span> $status=3D=3D<span class=3D"hljs-number">1</span>]
	}
	<span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"hljs=
-number">1</span>} then {
	    <span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=
=3D"hljs-keyword">string</span> range $readframe end<span class=3D"hljs-num=
ber">-3</span> end<span class=3D"hljs-number">-2</span>]
<span class=3D"hljs-comment">	    #dbgShowVar "::deviceArray($p) =3D $::dev=
iceArray($p)"</span>
	}
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dBSB</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime read_command readfr=
ame retryPossible dongle sendframe
    <span class=3D"hljs-keyword">set</span> p <span class=3D"hljs-string">"=
bsb"</span>
    <span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hl=
js-number">1</span>
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">":02"</span> $read_com=
mand <span class=3D"hljs-string">"000100"</span>]
    <span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-key=
word">list</span>]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=
=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> l=
ength $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs=
-keyword">incr</span> i <span class=3D"hljs-number">2</span>} {
	<span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hljs-ke=
yword">string</span> range $frame $i [<span class=3D"hljs-keyword">expr</sp=
an> $i + <span class=3D"hljs-number">1</span>]]
    }
    <span class=3D"hljs-keyword">append</span> frame [checkSum $lFrame]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard) $frame]
    <span class=3D"hljs-keyword">if</span> {$status !=3D <span class=3D"hlj=
s-number">1</span>} then {
	<span class=3D"hljs-keyword">if</span> {$retryPossible} then {
	    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"=
hljs-number">-2</span>} then {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		ptclSendFrame $frame
		<span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(stan=
dard) $frame]
	    } elseif {$status =3D=3D <span class=3D"hljs-number">-1</span>} {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		<span class=3D"hljs-keyword">set</span> status [ptclChecksum]
	    } else {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
	    }
	} else {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	}
	<span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-keywor=
d">expr</span> $status=3D=3D<span class=3D"hljs-number">1</span>]
    }
    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"h=
ljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=3D"=
hljs-keyword">string</span> range $readframe end<span class=3D"hljs-number"=
>-3</span> end<span class=3D"hljs-number">-2</span>]
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($p) =3D $::deviceA=
rray($p)"</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dSBV</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime read_command readfr=
ame retryPossible dongle sendframe
    <span class=3D"hljs-keyword">set</span> p <span class=3D"hljs-string">"=
sbv"</span>
    <span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hl=
js-number">1</span>
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">":02"</span> $read_com=
mand <span class=3D"hljs-string">"000101"</span>]
    <span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-key=
word">list</span>]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=
=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> l=
ength $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs=
-keyword">incr</span> i <span class=3D"hljs-number">2</span>} {
	<span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hljs-ke=
yword">string</span> range $frame $i [<span class=3D"hljs-keyword">expr</sp=
an> $i + <span class=3D"hljs-number">1</span>]]
    }
    <span class=3D"hljs-keyword">append</span> frame [checkSum $lFrame]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard) $frame]
    <span class=3D"hljs-keyword">if</span> {$status !=3D <span class=3D"hlj=
s-number">1</span>} then {
	<span class=3D"hljs-keyword">if</span> {$retryPossible} then {
	    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"=
hljs-number">-2</span>} then {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		ptclSendFrame $frame
		<span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(stan=
dard) $frame]
	    } elseif {$status =3D=3D <span class=3D"hljs-number">-1</span>} {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		<span class=3D"hljs-keyword">set</span> status [ptclChecksum]
	    } else {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
	    }
	} else {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	}
	<span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-keywor=
d">expr</span> $status=3D=3D<span class=3D"hljs-number">1</span>]
    }
    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"h=
ljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=3D"=
hljs-keyword">string</span> range $readframe end<span class=3D"hljs-number"=
>-3</span> end<span class=3D"hljs-number">-2</span>]
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($p) =3D $::deviceA=
rray($p)"</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dSSB</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime logFileId expAnsw r=
ead_command readframe retryPossible dongle sendframe
    <span class=3D"hljs-keyword">set</span> p <span class=3D"hljs-string">"=
ssb"</span>
    <span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hl=
js-number">1</span>
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">":02"</span> $read_com=
mand <span class=3D"hljs-string">"000105"</span>]
    <span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-key=
word">list</span>]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=
=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> l=
ength $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs=
-keyword">incr</span> i <span class=3D"hljs-number">2</span>} {
	<span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hljs-ke=
yword">string</span> range $frame $i [<span class=3D"hljs-keyword">expr</sp=
an> $i + <span class=3D"hljs-number">1</span>]]
    }
    <span class=3D"hljs-keyword">append</span> frame [checkSum $lFrame]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard) $frame]
    <span class=3D"hljs-keyword">if</span> {$status !=3D <span class=3D"hlj=
s-number">1</span>} then {
	<span class=3D"hljs-keyword">if</span> {$retryPossible} then {
	    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"=
hljs-number">-2</span>} then {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		ptclSendFrame $frame
		<span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(stan=
dard) $frame]
	    } elseif {$status =3D=3D <span class=3D"hljs-number">-1</span>} {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		<span class=3D"hljs-keyword">set</span> status [ptclChecksum]
	    } else {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
	    }
	} else {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	}
	<span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-keywor=
d">expr</span> $status=3D=3D<span class=3D"hljs-number">1</span>]
    }
    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"h=
ljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=3D"=
hljs-keyword">string</span> range $readframe end<span class=3D"hljs-number"=
>-3</span> end<span class=3D"hljs-number">-2</span>]
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($p) =3D $::deviceA=
rray($p)"</span>
	<span class=3D"hljs-keyword">set</span> ::deviceArray(level) X
	<span class=3D"hljs-keyword">foreach</span> lev {<span class=3D"hljs-numbe=
r">0</span> <span class=3D"hljs-number">1</span> <span class=3D"hljs-number=
">2</span>} {
	    <span class=3D"hljs-keyword">foreach</span> i $expAnsw(readSSBlev$lev)=
 {
		<span class=3D"hljs-keyword">if</span> {$::deviceArray(ssb) =3D=3D $i} th=
en {
		    <span class=3D"hljs-keyword">set</span> ::deviceArray(level) $lev
		}
	    }
	}
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray(level) =3D $::devi=
ceArray(level)"</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dEB</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime read_command readfr=
ame retryPossible dongle sendframe
    <span class=3D"hljs-keyword">set</span> p <span class=3D"hljs-string">"=
eb"</span>
    <span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hl=
js-number">1</span>
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">":02"</span> $read_com=
mand <span class=3D"hljs-string">"000106"</span>]
    <span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-key=
word">list</span>]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=
=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> l=
ength $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs=
-keyword">incr</span> i <span class=3D"hljs-number">2</span>} {
	<span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hljs-ke=
yword">string</span> range $frame $i [<span class=3D"hljs-keyword">expr</sp=
an> $i + <span class=3D"hljs-number">1</span>]]
    }
    <span class=3D"hljs-keyword">append</span> frame [checkSum $lFrame]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard) $frame]
    <span class=3D"hljs-keyword">if</span> {$status !=3D <span class=3D"hlj=
s-number">1</span>} then {
	<span class=3D"hljs-keyword">if</span> {$retryPossible} then {
	    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"=
hljs-number">-2</span>} then {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		ptclSendFrame $frame
		<span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(stan=
dard) $frame]
	    } elseif {$status =3D=3D <span class=3D"hljs-number">-1</span>} {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		<span class=3D"hljs-keyword">set</span> status [ptclChecksum]
	    } else {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
	    }
	} else {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	}
	<span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-keywor=
d">expr</span> $status=3D=3D<span class=3D"hljs-number">1</span>]
    }
    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"h=
ljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=3D"=
hljs-keyword">string</span> range $readframe end<span class=3D"hljs-number"=
>-3</span> end<span class=3D"hljs-number">-2</span>]
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($p) =3D $::deviceA=
rray($p)"</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dManufId</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime read_command readfr=
ame retryPossible dongle sendframe
    <span class=3D"hljs-keyword">set</span> p <span class=3D"hljs-string">"=
manufId"</span>
    <span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hl=
js-number">1</span>
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">":02"</span> $read_com=
mand <span class=3D"hljs-string">"000130"</span>]
    <span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-key=
word">list</span>]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=
=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> l=
ength $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs=
-keyword">incr</span> i <span class=3D"hljs-number">2</span>} {
	<span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hljs-ke=
yword">string</span> range $frame $i [<span class=3D"hljs-keyword">expr</sp=
an> $i + <span class=3D"hljs-number">1</span>]]
    }
    <span class=3D"hljs-keyword">append</span> frame [checkSum $lFrame]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard) $frame]
    <span class=3D"hljs-keyword">if</span> {$status !=3D <span class=3D"hlj=
s-number">1</span>} then {
	<span class=3D"hljs-keyword">if</span> {$retryPossible} then {
	    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"=
hljs-number">-2</span>} then {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		ptclSendFrame $frame
		<span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(stan=
dard) $frame]
	    } elseif {$status =3D=3D <span class=3D"hljs-number">-1</span>} {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		<span class=3D"hljs-keyword">set</span> status [ptclChecksum]
	    } else {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
	    }
	} else {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	}
	<span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-keywor=
d">expr</span> $status=3D=3D<span class=3D"hljs-number">1</span>]
    }
    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"h=
ljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=3D"=
hljs-keyword">string</span> range $readframe end<span class=3D"hljs-number"=
>-3</span> end<span class=3D"hljs-number">-2</span>]
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($p) =3D $::deviceA=
rray($p)"</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dDeviceId1</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime read_command readfr=
ame retryPossible dongle sendframe
    <span class=3D"hljs-keyword">set</span> p <span class=3D"hljs-string">"=
deviceId1"</span>
    <span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hl=
js-number">1</span>
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">":02"</span> $read_com=
mand <span class=3D"hljs-string">"000131"</span>]
    <span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-key=
word">list</span>]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=
=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> l=
ength $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs=
-keyword">incr</span> i <span class=3D"hljs-number">2</span>} {
	<span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hljs-ke=
yword">string</span> range $frame $i [<span class=3D"hljs-keyword">expr</sp=
an> $i + <span class=3D"hljs-number">1</span>]]
    }
    <span class=3D"hljs-keyword">append</span> frame [checkSum $lFrame]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard) $frame]
    <span class=3D"hljs-keyword">if</span> {$status !=3D <span class=3D"hlj=
s-number">1</span>} then {
	<span class=3D"hljs-keyword">if</span> {$retryPossible} then {
	    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"=
hljs-number">-2</span>} then {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		ptclSendFrame $frame
		<span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(stan=
dard) $frame]
	    } elseif {$status =3D=3D <span class=3D"hljs-number">-1</span>} {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		<span class=3D"hljs-keyword">set</span> status [ptclChecksum]
	    } else {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
	    }
	} else {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	}
	<span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-keywor=
d">expr</span> $status=3D=3D<span class=3D"hljs-number">1</span>]
    }
    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"h=
ljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=3D"=
hljs-keyword">string</span> range $readframe end<span class=3D"hljs-number"=
>-3</span> end<span class=3D"hljs-number">-2</span>]
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($p) =3D $::deviceA=
rray($p)"</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dDeviceId2</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime read_command readfr=
ame retryPossible dongle sendframe
    <span class=3D"hljs-keyword">set</span> p <span class=3D"hljs-string">"=
deviceId2"</span>
    <span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hl=
js-number">1</span>
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">":02"</span> $read_com=
mand <span class=3D"hljs-string">"000160"</span>]
    <span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-key=
word">list</span>]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=
=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> l=
ength $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs=
-keyword">incr</span> i <span class=3D"hljs-number">2</span>} {
	<span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hljs-ke=
yword">string</span> range $frame $i [<span class=3D"hljs-keyword">expr</sp=
an> $i + <span class=3D"hljs-number">1</span>]]
    }
    <span class=3D"hljs-keyword">append</span> frame [checkSum $lFrame]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard) $frame]
    <span class=3D"hljs-keyword">if</span> {$status !=3D <span class=3D"hlj=
s-number">1</span>} then {
	<span class=3D"hljs-keyword">if</span> {$retryPossible} then {
	    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"=
hljs-number">-2</span>} then {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		ptclSendFrame $frame
		<span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(stan=
dard) $frame]
	    } elseif {$status =3D=3D <span class=3D"hljs-number">-1</span>} {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		<span class=3D"hljs-keyword">set</span> status [ptclChecksum]
	    } else {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
	    }
	} else {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	}
	<span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-keywor=
d">expr</span> $status=3D=3D<span class=3D"hljs-number">1</span>]
    }
    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"h=
ljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=3D"=
hljs-keyword">string</span> range $readframe end<span class=3D"hljs-number"=
>-3</span> end<span class=3D"hljs-number">-2</span>]
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($p) =3D $::deviceA=
rray($p)"</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dDeviceId3</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime read_command readfr=
ame retryPossible dongle sendframe
    <span class=3D"hljs-keyword">set</span> p <span class=3D"hljs-string">"=
deviceId3"</span>
    <span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hl=
js-number">1</span>
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">":02"</span> $read_com=
mand <span class=3D"hljs-string">"000161"</span>]
    <span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-key=
word">list</span>]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=
=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> l=
ength $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs=
-keyword">incr</span> i <span class=3D"hljs-number">2</span>} {
	<span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hljs-ke=
yword">string</span> range $frame $i [<span class=3D"hljs-keyword">expr</sp=
an> $i + <span class=3D"hljs-number">1</span>]]
    }
    <span class=3D"hljs-keyword">append</span> frame [checkSum $lFrame]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard) $frame]
    <span class=3D"hljs-keyword">if</span> {$status !=3D <span class=3D"hlj=
s-number">1</span>} then {
	<span class=3D"hljs-keyword">if</span> {$retryPossible} then {
	    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"=
hljs-number">-2</span>} then {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		ptclSendFrame $frame
		<span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(stan=
dard) $frame]
	    } elseif {$status =3D=3D <span class=3D"hljs-number">-1</span>} {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		<span class=3D"hljs-keyword">set</span> status [ptclChecksum]
	    } else {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
	    }
	} else {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	}
	<span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-keywor=
d">expr</span> $status=3D=3D<span class=3D"hljs-number">1</span>]
    }
    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"h=
ljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=3D"=
hljs-keyword">string</span> range $readframe end<span class=3D"hljs-number"=
>-3</span> end<span class=3D"hljs-number">-2</span>]
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($p) =3D $::deviceA=
rray($p)"</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dBTC1</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime read_command readfr=
ame retryPossible dongle sendframe
    <span class=3D"hljs-keyword">set</span> p <span class=3D"hljs-string">"=
btc1"</span>
    <span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hl=
js-number">1</span>
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">":02"</span> $read_com=
mand <span class=3D"hljs-string">"00011C"</span>]
    <span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-key=
word">list</span>]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=
=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> l=
ength $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs=
-keyword">incr</span> i <span class=3D"hljs-number">2</span>} {
	<span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hljs-ke=
yword">string</span> range $frame $i [<span class=3D"hljs-keyword">expr</sp=
an> $i + <span class=3D"hljs-number">1</span>]]
    }
    <span class=3D"hljs-keyword">append</span> frame [checkSum $lFrame]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard) $frame]
    <span class=3D"hljs-keyword">if</span> {$status !=3D <span class=3D"hlj=
s-number">1</span>} then {
	<span class=3D"hljs-keyword">if</span> {$retryPossible} then {
	    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"=
hljs-number">-2</span>} then {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		ptclSendFrame $frame
		<span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(stan=
dard) $frame]
	    } elseif {$status =3D=3D <span class=3D"hljs-number">-1</span>} {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		<span class=3D"hljs-keyword">set</span> status [ptclChecksum]
	    } else {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
	    }
	} else {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	}
	<span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-keywor=
d">expr</span> $status=3D=3D<span class=3D"hljs-number">1</span>]
    }
    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"h=
ljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=3D"=
hljs-keyword">string</span> range $readframe end<span class=3D"hljs-number"=
>-3</span> end<span class=3D"hljs-number">-2</span>]
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($p) =3D $::deviceA=
rray($p)"</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dBTC2</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime read_command readfr=
ame retryPossible dongle sendframe
    <span class=3D"hljs-keyword">set</span> p <span class=3D"hljs-string">"=
btc2"</span>
    <span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hl=
js-number">1</span>
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">":02"</span> $read_com=
mand <span class=3D"hljs-string">"00011D"</span>]
    <span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-key=
word">list</span>]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=
=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> l=
ength $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs=
-keyword">incr</span> i <span class=3D"hljs-number">2</span>} {
	<span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hljs-ke=
yword">string</span> range $frame $i [<span class=3D"hljs-keyword">expr</sp=
an> $i + <span class=3D"hljs-number">1</span>]]
    }
    <span class=3D"hljs-keyword">append</span> frame [checkSum $lFrame]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard) $frame]
    <span class=3D"hljs-keyword">if</span> {$status !=3D <span class=3D"hlj=
s-number">1</span>} then {
	<span class=3D"hljs-keyword">if</span> {$retryPossible} then {
	    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"=
hljs-number">-2</span>} then {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		ptclSendFrame $frame
		<span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(stan=
dard) $frame]
	    } elseif {$status =3D=3D <span class=3D"hljs-number">-1</span>} {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		<span class=3D"hljs-keyword">set</span> status [ptclChecksum]
	    } else {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
	    }
	} else {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	}
	<span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-keywor=
d">expr</span> $status=3D=3D<span class=3D"hljs-number">1</span>]
    }
    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"h=
ljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=3D"=
hljs-keyword">string</span> range $readframe end<span class=3D"hljs-number"=
>-3</span> end<span class=3D"hljs-number">-2</span>]
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($p) =3D $::deviceA=
rray($p)"</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dBTC3</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime read_command readfr=
ame retryPossible dongle sendframe
    <span class=3D"hljs-keyword">set</span> p <span class=3D"hljs-string">"=
btc3"</span>
    <span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hl=
js-number">1</span>
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">":02"</span> $read_com=
mand <span class=3D"hljs-string">"00011E"</span>]
    <span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-key=
word">list</span>]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=
=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> l=
ength $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs=
-keyword">incr</span> i <span class=3D"hljs-number">2</span>} {
	<span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hljs-ke=
yword">string</span> range $frame $i [<span class=3D"hljs-keyword">expr</sp=
an> $i + <span class=3D"hljs-number">1</span>]]
    }
    <span class=3D"hljs-keyword">append</span> frame [checkSum $lFrame]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard) $frame]
    <span class=3D"hljs-keyword">if</span> {$status !=3D <span class=3D"hlj=
s-number">1</span>} then {
	<span class=3D"hljs-keyword">if</span> {$retryPossible} then {
	    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"=
hljs-number">-2</span>} then {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		ptclSendFrame $frame
		<span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(stan=
dard) $frame]
	    } elseif {$status =3D=3D <span class=3D"hljs-number">-1</span>} {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		<span class=3D"hljs-keyword">set</span> status [ptclChecksum]
	    } else {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
	    }
	} else {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	}
	<span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-keywor=
d">expr</span> $status=3D=3D<span class=3D"hljs-number">1</span>]
    }
    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"h=
ljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=3D"=
hljs-keyword">string</span> range $readframe end<span class=3D"hljs-number"=
>-3</span> end<span class=3D"hljs-number">-2</span>]
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($p) =3D $::deviceA=
rray($p)"</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dNNB</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime read_command readfr=
ame retryPossible dongle sendframe
    <span class=3D"hljs-keyword">set</span> p <span class=3D"hljs-string">"=
nnbProg"</span>
    <span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hl=
js-number">1</span>
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">":02"</span> $read_com=
mand <span class=3D"hljs-string">"00011F"</span>]
    <span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-key=
word">list</span>]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=
=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> l=
ength $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs=
-keyword">incr</span> i <span class=3D"hljs-number">2</span>} {
	<span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hljs-ke=
yword">string</span> range $frame $i [<span class=3D"hljs-keyword">expr</sp=
an> $i + <span class=3D"hljs-number">1</span>]]
    }
    <span class=3D"hljs-keyword">append</span> frame [checkSum $lFrame]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard) $frame]
    <span class=3D"hljs-keyword">if</span> {$status !=3D <span class=3D"hlj=
s-number">1</span>} then {
	<span class=3D"hljs-keyword">if</span> {$retryPossible} then {
	    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"=
hljs-number">-2</span>} then {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		ptclSendFrame $frame
		<span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(stan=
dard) $frame]
	    } elseif {$status =3D=3D <span class=3D"hljs-number">-1</span>} {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		<span class=3D"hljs-keyword">set</span> status [ptclChecksum]
	    } else {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
	    }
	} else {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	}
	<span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-keywor=
d">expr</span> $status=3D=3D<span class=3D"hljs-number">1</span>]
    }
    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"h=
ljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=3D"=
hljs-keyword">string</span> range $readframe end<span class=3D"hljs-number"=
>-3</span> end<span class=3D"hljs-number">-2</span>]
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($p) =3D $::deviceA=
rray($p)"</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dCRIS</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime read_command readfr=
ame retryPossible dongle sendframe
    <span class=3D"hljs-keyword">set</span> p crisProg
    <span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hl=
js-number">1</span>
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">":02"</span> $read_com=
mand <span class=3D"hljs-string">"000120"</span>]
    <span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-key=
word">list</span>]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=
=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> l=
ength $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs=
-keyword">incr</span> i <span class=3D"hljs-number">2</span>} {
	<span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hljs-ke=
yword">string</span> range $frame $i [<span class=3D"hljs-keyword">expr</sp=
an> $i + <span class=3D"hljs-number">1</span>]]
    }
    <span class=3D"hljs-keyword">append</span> frame [checkSum $lFrame]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard) $frame]
    <span class=3D"hljs-keyword">if</span> {$status !=3D <span class=3D"hlj=
s-number">1</span>} then {
	<span class=3D"hljs-keyword">if</span> {$retryPossible} then {
	    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"=
hljs-number">-2</span>} then {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		ptclSendFrame $frame
		<span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(stan=
dard) $frame]
	    } elseif {$status =3D=3D <span class=3D"hljs-number">-1</span>} {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		<span class=3D"hljs-keyword">set</span> status [ptclChecksum]
	    } else {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
	    }
	} else {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	}
	<span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-keywor=
d">expr</span> $status=3D=3D<span class=3D"hljs-number">1</span>]
    }
    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"h=
ljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=3D"=
hljs-keyword">string</span> range $readframe end<span class=3D"hljs-number"=
>-3</span> end<span class=3D"hljs-number">-2</span>]
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($p) =3D $::deviceA=
rray($p)"</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dHwByte</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> rs232standard waitTime read_=
command readframe retryPossible dongle sendframe
    <span class=3D"hljs-keyword">set</span> p <span class=3D"hljs-string">"=
hsb"</span>
    <span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hl=
js-number">1</span>
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">":02"</span> $read_com=
mand <span class=3D"hljs-string">"000200"</span>]
    <span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-key=
word">list</span>]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=
=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> l=
ength $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs=
-keyword">incr</span> i <span class=3D"hljs-number">2</span>} {
	<span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hljs-ke=
yword">string</span> range $frame $i [<span class=3D"hljs-keyword">expr</sp=
an> $i + <span class=3D"hljs-number">1</span>]]
    }
    <span class=3D"hljs-keyword">append</span> frame [checkSum $lFrame]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard) $frame]
    <span class=3D"hljs-keyword">if</span> {$status !=3D <span class=3D"hlj=
s-number">1</span>} then {
	<span class=3D"hljs-keyword">if</span> {$retryPossible} then {
	    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"=
hljs-number">-2</span>} then {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		ptclSendFrame $frame
		<span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(stan=
dard) $frame]
	    } elseif {$status =3D=3D <span class=3D"hljs-number">-1</span>} {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		<span class=3D"hljs-keyword">set</span> status [ptclChecksum]
	    } else {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
	    }
	} else {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	}
	<span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-keywor=
d">expr</span> $status=3D=3D<span class=3D"hljs-number">1</span>]
    }
    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"h=
ljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=3D"=
hljs-keyword">string</span> range $readframe end<span class=3D"hljs-number"=
>-3</span> end<span class=3D"hljs-number">-2</span>]
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($p) =3D $::deviceA=
rray($p)"</span>
	<span class=3D"hljs-keyword">set</span> ::deviceArray(x2Fuse) [<span class=
=3D"hljs-keyword">expr</span> (<span class=3D"hljs-number">0</span>x$::devi=
ceArray(hsb) | <span class=3D"hljs-number">0x7F</span>) &gt;&gt; <span clas=
s=3D"hljs-number">7</span>]
	<span class=3D"hljs-keyword">set</span> ::deviceArray(bljbFuse) [<span cla=
ss=3D"hljs-keyword">expr</span> ((<span class=3D"hljs-number">0</span>x$::d=
eviceArray(hsb) | <span class=3D"hljs-number">0xBF</span>) &amp; <span clas=
s=3D"hljs-number">0x7F</span>) &gt;&gt; <span class=3D"hljs-number">6</span=
>]
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclSet=
PortsConfig</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> bootloaderVerDependent
    <span class=3D"hljs-keyword">global</span> waitTime write_command retry=
Possible dongle sendframe
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">if</span> {$bootloaderVerDependent(p1p3p4_=
config)} then {
	<span class=3D"hljs-keyword">set</span> d0 <span class=3D"hljs-number">01<=
/span>
	<span class=3D"hljs-keyword">foreach</span> p {p1 p3 p4} d1 {<span class=
=3D"hljs-number">02</span> <span class=3D"hljs-number">03</span> <span clas=
s=3D"hljs-number">04</span>} {
	    <span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"h=
ljs-number">1</span>
	    <span class=3D"hljs-keyword">set</span> frame <span class=3D"hljs-stri=
ng">""</span>
	    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-key=
word">append</span> frame <span class=3D"hljs-string">":03"</span> $write_c=
ommand <span class=3D"hljs-string">"00"</span> $d0 $d1 $::deviceArray(${p}_=
config)]
	    <span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-ke=
yword">list</span>]
	    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">=
set</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=
=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> l=
ength $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs=
-keyword">incr</span> i <span class=3D"hljs-number">2</span>} {
		<span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hljs-k=
eyword">string</span> range $frame $i [<span class=3D"hljs-keyword">expr</s=
pan> $i + <span class=3D"hljs-number">1</span>]]
	    }
	    <span class=3D"hljs-keyword">append</span> frame [checkSum $lFrame]
	    ptclSendFrame $frame
	    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(s=
tandard) $frame]
	    <span class=3D"hljs-keyword">if</span> {$status !=3D <span class=3D"hl=
js-number">1</span>} then {
		<span class=3D"hljs-keyword">if</span> {$retryPossible} then {
		    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D=
"hljs-number">-2</span>} then {
			<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hlj=
s-number">0</span>
			ptclSendFrame $frame
			<span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(sta=
ndard) $frame]
		    } elseif {$status =3D=3D <span class=3D"hljs-number">-1</span>} {
			<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hlj=
s-number">0</span>
			<span class=3D"hljs-keyword">set</span> status [ptclChecksum]
		    } else {
			<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numbe=
r">0</span>
		    }
		} else {
		    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-nu=
mber">0</span>
		}
		<span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-keywo=
rd">expr</span> $status=3D=3D<span class=3D"hljs-number">1</span>]
	    }
	    <span class=3D"hljs-keyword">if</span> {! $status} then {
		<span class=3D"hljs-keyword">break</span>
	    }
	}
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dPortsConfig</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> bootloaderVerDependent
    <span class=3D"hljs-keyword">global</span> testFlag waitTime read_comma=
nd readframe retryPossible dongle sendframe
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">if</span> {$bootloaderVerDependent(p1p3p4_=
config)} then {
	<span class=3D"hljs-keyword">set</span> d0 <span class=3D"hljs-number">01<=
/span>
	<span class=3D"hljs-keyword">foreach</span> p {p1 p3 p4} d1 {<span class=
=3D"hljs-number">02</span> <span class=3D"hljs-number">03</span> <span clas=
s=3D"hljs-number">04</span>} {
	    <span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"h=
ljs-number">1</span>
	    <span class=3D"hljs-keyword">set</span> frame <span class=3D"hljs-stri=
ng">""</span>
	    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-key=
word">append</span> frame <span class=3D"hljs-string">":02"</span> $read_co=
mmand <span class=3D"hljs-string">"00"</span> $d0 $d1]
	    <span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-ke=
yword">list</span>]
	    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">=
set</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=
=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> l=
ength $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs=
-keyword">incr</span> i <span class=3D"hljs-number">2</span>} {
		<span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hljs-k=
eyword">string</span> range $frame $i [<span class=3D"hljs-keyword">expr</s=
pan> $i + <span class=3D"hljs-number">1</span>]]
	    }
	    <span class=3D"hljs-keyword">append</span> frame [checkSum $lFrame]
	    ptclSendFrame $frame
	    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(s=
tandard) $frame]
	    <span class=3D"hljs-keyword">if</span> {$status !=3D <span class=3D"hl=
js-number">1</span>} then {
		<span class=3D"hljs-keyword">if</span> {$retryPossible} then {
		    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D=
"hljs-number">-2</span>} then {
			<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hlj=
s-number">0</span>
			ptclSendFrame $frame
			<span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(sta=
ndard) $frame]
		    } elseif {$status =3D=3D <span class=3D"hljs-number">-1</span>} {
			<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hlj=
s-number">0</span>
			<span class=3D"hljs-keyword">set</span> status [ptclChecksum]
		    } else {
			<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numbe=
r">0</span>
		    }
		} else {
		    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-nu=
mber">0</span>
		}
		<span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-keywo=
rd">expr</span> $status=3D=3D<span class=3D"hljs-number">1</span>]
	    }
	    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"=
hljs-number">1</span>} then {
		<span class=3D"hljs-keyword">set</span> ::deviceArray(${p}_config) [<span=
 class=3D"hljs-keyword">string</span> range $readframe end<span class=3D"hl=
js-number">-3</span> end<span class=3D"hljs-number">-2</span>]
<span class=3D"hljs-comment">		#dbgShowVar "::deviceArray(${p}_config) =3D =
\</span>
			$::deviceArray(${p}_config)"=09
	    } else {
		<span class=3D"hljs-keyword">break</span>
	    }
	}
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclChe=
cksum</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime dongle sendframe
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame1 <span class=3D"hljs-string">":00"</span> $dongle =
<span class=3D"hljs-string">"00"</span>]
    <span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-key=
word">list</span>]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=
=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> l=
ength $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs=
-keyword">incr</span> i <span class=3D"hljs-number">2</span>} {
	<span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hljs-ke=
yword">string</span> range $frame $i [<span class=3D"hljs-keyword">expr</sp=
an> $i + <span class=3D"hljs-number">1</span>]]
    }
    <span class=3D"hljs-keyword">append</span> frame [checkSum $lFrame]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard) $sendframe]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRes=
et</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime dongle
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">":00"</span> $dongle <=
span class=3D"hljs-string">"01"</span>]
    <span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-key=
word">list</span>]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=
=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> l=
ength $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs=
-keyword">incr</span> i <span class=3D"hljs-number">2</span>} {
	<span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hljs-ke=
yword">string</span> range $frame $i [<span class=3D"hljs-keyword">expr</sp=
an> $i + <span class=3D"hljs-number">1</span>]]
    }
    <span class=3D"hljs-keyword">append</span> frame [checkSum $lFrame]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard) $frame]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclIni=
tDongle</span> {bitrate protocol CRIS} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime readframe dongle se=
ndframe retryPossible
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hl=
js-number">1</span>
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">":07"</span> $dongle <=
span class=3D"hljs-string">"02"</span> $bitrate $protocol $CRIS]
    <span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-key=
word">list</span>]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=
=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> l=
ength $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs=
-keyword">incr</span> i <span class=3D"hljs-number">2</span>} {
	<span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hljs-ke=
yword">string</span> range $frame $i [<span class=3D"hljs-keyword">expr</sp=
an> $i + <span class=3D"hljs-number">1</span>]]
    }
    <span class=3D"hljs-keyword">append</span> frame [checkSum $lFrame]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard) $frame]
<span class=3D"hljs-comment">    #dbgShowInfo "status $status"   </span>
    <span class=3D"hljs-keyword">if</span> {$status !=3D <span class=3D"hlj=
s-number">1</span>} then {
	<span class=3D"hljs-keyword">if</span> {$retryPossible=3D=3D<span class=3D=
"hljs-number">1</span>} then {
	    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"=
hljs-number">-2</span>} then {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		ptclSendFrame $frame
		<span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(stan=
dard) $frame]
	    } elseif {$status =3D=3D <span class=3D"hljs-number">-1</span>} {
		<span class=3D"hljs-keyword">set</span> retryPossible <span class=3D"hljs=
-number">0</span>
		<span class=3D"hljs-keyword">set</span> frame1 [<span class=3D"hljs-keywo=
rd">append</span> frame1 <span class=3D"hljs-string">":00"</span> $dongle <=
span class=3D"hljs-string">"0002"</span>]
		ptclSendFrame $frame1
		<span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(stan=
dard) $sendframe]
	    } else {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
	    }
	} else {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	}
	<span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-keywor=
d">expr</span> $status=3D=3D<span class=3D"hljs-number">1</span>]
    }
    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"h=
ljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-keywor=
d">string</span> range $readframe end<span class=3D"hljs-number">-2</span> =
end<span class=3D"hljs-number">-2</span>]
    }
    <span class=3D"hljs-keyword">if</span> {$status=3D=3D<span class=3D"hlj=
s-number">1</span>} then {
	log_message <span class=3D"hljs-string">"Dongle initialized"</span>
	log_message <span class=3D"hljs-string">"File &gt; Load..."</span>
    } else {
	log_message <span class=3D"hljs-string">"Dongle Initialization Failed"</sp=
an>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclSta=
rtBootloader</span> {num_chip} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime dongle
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">":01"</span> $dongle <=
span class=3D"hljs-string">"03"</span> $num_chip]
    <span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-key=
word">list</span>]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=
=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> l=
ength $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs=
-keyword">incr</span> i <span class=3D"hljs-number">2</span>} {
	<span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hljs-ke=
yword">string</span> range $frame $i [<span class=3D"hljs-keyword">expr</sp=
an> $i + <span class=3D"hljs-number">1</span>]]
    }
    ptclSendFrame [<span class=3D"hljs-keyword">append</span> frame [checkS=
um $lFrame]]
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard) $frame]
    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"h=
ljs-number">1</span>} then {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> range $readframe <span class=3D"hljs-number">9</span> <span class=
=3D"hljs-number">10</span>] =3D=3D $num_chip} then {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">1</span>
	} else {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	}
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclChe=
ckCanEntries</span> {} {
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">if</span> {! [isValidHexaInput $::deviceAr=
ray(nnbProg)]} then {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
    <span class=3D"hljs-keyword">if</span> {! [isValidHexaInput $::deviceAr=
ray(crisProg)]} then {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
    <span class=3D"hljs-keyword">if</span> {! [isValidHexaInput $::deviceAr=
ray(btc1)]} then {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
    <span class=3D"hljs-keyword">if</span> {! [isValidHexaInput $::deviceAr=
ray(btc2)]} then {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
    <span class=3D"hljs-keyword">if</span> {! [isValidHexaInput $::deviceAr=
ray(btc3)]} then {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dCanConfig</span> {} {
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">0</span>
    <span class=3D"hljs-keyword">while</span> {<span class=3D"hljs-number">=
1</span>} {
	<span class=3D"hljs-keyword">if</span> {! [ptclReadNNB]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">if</span> {! [ptclReadCRIS]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">if</span> {! [ptclReadBTC1]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">if</span> {! [ptclReadBTC2]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">if</span> {! [ptclReadBTC3]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>1</span>
	<span class=3D"hljs-keyword">break</span>
    }
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclSet=
CanConfig</span> {} {
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">0</span>
    <span class=3D"hljs-keyword">while</span> {<span class=3D"hljs-number">=
1</span>} {
	<span class=3D"hljs-keyword">if</span> {! [ptclCheckCanEntries]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">if</span> {! [ptclWriteNNB $::deviceArray(nnb=
Prog)]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">if</span> {! [ptclWriteCRIS $::deviceArray(cr=
isProg)]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">if</span> {! [ptclWriteBTC1 $::deviceArray(bt=
c1)]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">if</span> {! [ptclWriteBTC2 $::deviceArray(bt=
c2)]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">if</span> {! [ptclWriteBTC3 $::deviceArray(bt=
c3)]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>1</span>
	<span class=3D"hljs-keyword">break</span>
    }
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclSta=
rtAppli</span> {reset_button} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">if</span> {$reset_button} then {
	<span class=3D"hljs-keyword">set</span> status [ptclWriteHwReset]
    } else {
	<span class=3D"hljs-keyword">set</span> status [ptclWriteLJMP <span class=
=3D"hljs-number">0000</span>]
    }
    updateGUI onAnyCommunicationOff
    updateGUI onCanNodeSelectionClosed
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-comment">#dbgEndSrc [info script]</span>
<span class=3D"hljs-comment">#dbgBeginSrc [info script]</span>
<span class=3D"hljs-keyword">global</span> protocol
<span class=3D"hljs-keyword">if</span> {! [<span class=3D"hljs-keyword">inf=
o</span> exists protocol(frameLengthW)]} then {
    <span class=3D"hljs-keyword">set</span> protocol(frameLengthW) <span cl=
ass=3D"hljs-number">16</span>
    <span class=3D"hljs-keyword">set</span> protocol(frameLengthR) <span cl=
ass=3D"hljs-number">16</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclUpd=
ateBuffer</span> {rxBuffer} {
    <span class=3D"hljs-keyword">global</span> protocol
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    updateBuffer_C $rxBuffer $protocol(frameLengthR)
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> expecte=
dSSBLevel</span> {lev ssb} {
    <span class=3D"hljs-keyword">global</span> expAnsw
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">l=
search</span> -exact $expAnsw(readSSBlev[<span class=3D"hljs-keyword">subst=
</span> $lev]Test) $ssb] !=3D <span class=3D"hljs-number">-1</span>} then {
	<span class=3D"hljs-keyword">return</span> $ssb
    } else {
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">-1<=
/span>
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclIni=
tRs232Comm</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> flipStates port baud baudLis=
t prot waitTime extraTimeOut loadConfig projDir
    log_message <span class=3D"hljs-string">"Selected protocol : $prot Rs23=
2"</span>
    log_message <span class=3D"hljs-string">"Initializing Rs232 communicati=
on..."</span>
    <span class=3D"hljs-keyword">set</span> sync <span class=3D"hljs-number=
">0</span>
<span class=3D"hljs-comment">    #dbgShowVar "port =3D $port"</span>
<span class=3D"hljs-comment">    #dbgShowVar "baud =3D $baud"</span>
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists ::sio::devId]} then {
	<span class=3D"hljs-keyword">if</span> {! $flipStates(simul)} then {
	    <span class=3D"hljs-keyword">set</span> ::sio::devId [::sio::openDevic=
e $port $baud async n <span class=3D"hljs-number">8</span> <span class=3D"h=
ljs-number">2</span> <span class=3D"hljs-number">0</span>]
	} else {
	    <span class=3D"hljs-keyword">set</span> ::sio::devId <span class=3D"hl=
js-number">1</span>
	}
    }
    <span class=3D"hljs-keyword">if</span> {$::sio::devId !=3D <span class=
=3D"hljs-number">0</span>} then {
	<span class=3D"hljs-keyword">set</span> loadConfig(globals) <span class=3D=
"hljs-string">"global port baud"</span>
	<span class=3D"hljs-keyword">set</span> loadConfig(port) <span class=3D"hl=
js-string">"set port $port"</span>
	<span class=3D"hljs-keyword">set</span> loadConfig(baud) <span class=3D"hl=
js-string">"set baud $baud"</span>
	<span class=3D"hljs-keyword">set</span> loadConfig(initComm) <span class=
=3D"hljs-string">"connectRS232 Standard"</span>
	<span class=3D"hljs-keyword">if</span> {$::deviceArray(specialSynchro) =3D=
=3D <span class=3D"hljs-number">0</span>} then {
	    <span class=3D"hljs-keyword">if</span> {! $flipStates(simul)} then {
		::sio::setBaud $baud
		<span class=3D"hljs-keyword">if</span> {! $flipStates(connectOnlyRS232)} =
then {
		    <span class=3D"hljs-keyword">set</span> sync [::sio::autoBaudSync <sp=
an class=3D"hljs-string">"U"</span> <span class=3D"hljs-number">3000</span>=
]
		} else {
		    <span class=3D"hljs-keyword">set</span> sync <span class=3D"hljs-numb=
er">0</span>
		    <span class=3D"hljs-keyword">set</span> ::deviceArray(bootloaderId) <=
span class=3D"hljs-string">"0000"</span>
		}
	    } else {
		<span class=3D"hljs-keyword">set</span> sync <span class=3D"hljs-number">=
1</span>
	    }
	    <span class=3D"hljs-keyword">if</span> {$sync =3D=3D <span class=3D"hl=
js-number">1</span>} then {
		<span class=3D"hljs-keyword">set</span> ::deviceArray(bootloaderId) $::si=
o::sioVars(bootloaderId)
		ptclReadBootlVer
		updateGUI onRs232CommunicationOn
		updateGUI onAnyCommunicationOn
		log_message <span class=3D"hljs-string">"Rs232 communication initialized.=
"</span>
		log_message <span class=3D"hljs-string">"File &gt; Load..."</span>
	    } elseif {$sync =3D=3D <span class=3D"hljs-number">-1</span>} {
		ptclCancelRs232Comm
		updateGUI onRs232CommunicationOff
		updateGUI onAnyCommunicationOff
		<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-strin=
g">"The board reply is not correct."</span>
		messageBox <span class=3D"hljs-string">"RS232 Communication"</span> <span=
 class=3D"hljs-keyword">error</span> $message
		log_message <span class=3D"hljs-string">"RS232 Communication Error."</spa=
n>
	    } elseif {$sync =3D=3D <span class=3D"hljs-number">-2</span>} {
		ptclCancelRs232Comm
		updateGUI onRs232CommunicationOff
		updateGUI onAnyCommunicationOff
		<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-strin=
g">"Time out error."</span>
		messageBox <span class=3D"hljs-string">"RS232 Communication"</span> <span=
 class=3D"hljs-keyword">error</span> $message
		log_message <span class=3D"hljs-string">"RS232 Communication time out."</=
span>
	    } else {
		updateGUI onRs232CommunicationOn
	    }
	    <span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-number">0<=
/span>} then {
		ptclCancelRs232Comm
		updateGUI onRs232CommunicationOff
		updateGUI onAnyCommunicationOff
		<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-strin=
g">"Time out error."</span>
		messageBox <span class=3D"hljs-string">"RS232 Communication"</span> <span=
 class=3D"hljs-keyword">error</span> $message
		log_message <span class=3D"hljs-string">"RS232 Communication time out."</=
span>
	    }
	} else {
	    <span class=3D"hljs-keyword">if</span> {! $flipStates(simul)} then {
		::sio::setBaud $baud
		startExtraTimeOutCounter <span class=3D"hljs-number">10000</span>
		<span class=3D"hljs-keyword">while</span> {($sync !=3D <span class=3D"hlj=
s-number">1</span>) &amp;&amp;($extraTimeOut !=3D <span class=3D"hljs-numbe=
r">-1</span>)} {
		    <span class=3D"hljs-keyword">set</span> sync [::sio::autoBaudSync <sp=
an class=3D"hljs-string">"U"</span> <span class=3D"hljs-number">100</span>]
		}
	    } else {
		<span class=3D"hljs-keyword">set</span> ::deviceArray(bootloaderId) <span=
 class=3D"hljs-string">"0001"</span>
		<span class=3D"hljs-keyword">set</span> extraTimeOut <span class=3D"hljs-=
number">0</span>
		<span class=3D"hljs-keyword">set</span> sync <span class=3D"hljs-number">=
1</span>
	    }
	    <span class=3D"hljs-keyword">if</span> {$extraTimeOut =3D=3D <span cla=
ss=3D"hljs-number">-1</span>} then {
		<span class=3D"hljs-keyword">set</span> sync <span class=3D"hljs-number">=
-2</span>
<span class=3D"hljs-comment">		#dbgShowError "  Special sync Time out."</sp=
an>
		updateGUI onRs232CommunicationOff
		updateGUI onAnyCommunicationOff
		<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-strin=
g">"Time out error."</span>
		messageBox <span class=3D"hljs-string">"RS232 Communication"</span> <span=
 class=3D"hljs-keyword">error</span> $message
		log_message <span class=3D"hljs-string">"RS232 Communication Time Out."</=
span>
	    } else {
		<span class=3D"hljs-keyword">if</span> {$sync =3D=3D <span class=3D"hljs-=
number">1</span>} then {
		    <span class=3D"hljs-keyword">set</span> ::deviceArray(bootloaderId) $=
::sio::sioVars(bootloaderId)
		    stopExtraTimeOutCounter
		    updateGUI onRs232CommunicationOn
		    updateGUI onAnyCommunicationOn
		    log_message <span class=3D"hljs-string">"Rs232 Communication Synchron=
ized"</span>
		} else {
		    updateGUI onRs232CommunicationOff
		    updateGUI onAnyCommunicationOff
		    <span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-s=
tring">"The board answer is not correct."</span>
		    messageBox <span class=3D"hljs-string">"RS232 Communication"</span> <=
span class=3D"hljs-keyword">error</span> $message
		    log_message <span class=3D"hljs-string">"RS232 Communication Error"</=
span>
		}
	    }
	}
    } else {
	<span class=3D"hljs-keyword">unset</span> ::sio::devId
	updateGUI onRs232CommunicationOff
	updateGUI onAnyCommunicationOff
	<span class=3D"hljs-keyword">set</span> sync <span class=3D"hljs-number">-=
3</span>
	<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-string=
">"The RS232 port could not be opened."</span>
	messageBox <span class=3D"hljs-string">"RS232 Communication"</span> <span =
class=3D"hljs-keyword">error</span> $message
	log_message <span class=3D"hljs-string">"RS232 Communication could not be =
opened."</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $sync
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclCan=
celRs232Comm</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> flipStates
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::sio::devId]} then {
	::sio::closeDevice
	updateGUI onRs232CommunicationOff
	updateGUI onAnyCommunicationOff
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclVer=
ifyBuffer</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> protocol
    <span class=3D"hljs-keyword">set</span> LF [<span class=3D"hljs-keyword=
">format</span> %c <span class=3D"hljs-number">0x0A</span>]
    <span class=3D"hljs-keyword">while</span> {[<span class=3D"hljs-keyword=
">set</span> equalPos [<span class=3D"hljs-keyword">string</span> first <sp=
an class=3D"hljs-string">"=3D"</span> $::sio::sioVars(RxBuffer)]] !=3D <spa=
n class=3D"hljs-number">-1</span>} {
	<span class=3D"hljs-keyword">set</span> rxBufferLength [<span class=3D"hlj=
s-keyword">string</span> length $::sio::sioVars(RxBuffer)]
	<span class=3D"hljs-keyword">set</span> addr [<span class=3D"hljs-keyword"=
>string</span> range $::sio::sioVars(RxBuffer) [<span class=3D"hljs-keyword=
">expr</span> $equalPos - <span class=3D"hljs-number">4</span>] [<span clas=
s=3D"hljs-keyword">expr</span> $equalPos - <span class=3D"hljs-number">1</s=
pan>]]
<span class=3D"hljs-comment">	#dbgShowVar "addr =3D $addr"</span>
	<span class=3D"hljs-keyword">set</span> limit1 [<span class=3D"hljs-keywor=
d">expr</span> $equalPos + <span class=3D"hljs-number">2</span> * $protocol=
(frameLengthR)]
	<span class=3D"hljs-keyword">set</span> limit2 [<span class=3D"hljs-keywor=
d">expr</span> $rxBufferLength - <span class=3D"hljs-number">2</span>]
	<span class=3D"hljs-keyword">if</span> {$limit1 &lt;=3D $limit2} then {
	    <span class=3D"hljs-keyword">set</span> limit $limit1
	} else {
	    <span class=3D"hljs-keyword">set</span> limit $limit2
	}
	<span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">set<=
/span> i [<span class=3D"hljs-keyword">expr</span> $equalPos + <span class=
=3D"hljs-number">1</span>]; <span class=3D"hljs-keyword">set</span> j <span=
 class=3D"hljs-number">0</span>} {$i &lt;=3D $limit} {<span class=3D"hljs-k=
eyword">incr</span> i <span class=3D"hljs-number">2</span>; <span class=3D"=
hljs-keyword">incr</span> j <span class=3D"hljs-number">1</span>} {
	    <span class=3D"hljs-keyword">if</span> {[readBuffer [<span class=3D"hl=
js-keyword">format</span> %<span class=3D"hljs-number">06</span>X [<span cl=
ass=3D"hljs-keyword">expr</span> <span class=3D"hljs-number">0</span>x$addr=
 + $j]]] !=3D [<span class=3D"hljs-keyword">string</span> range $::sio::sio=
Vars(RxBuffer) $i [<span class=3D"hljs-keyword">expr</span> $i + <span clas=
s=3D"hljs-number">1</span>]]} then {
		<span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keyword">=
expr</span> -[<span class=3D"hljs-keyword">expr</span> <span class=3D"hljs-=
number">0</span>x$addr + $j]]
	    }
	}
	<span class=3D"hljs-keyword">set</span> ::sio::sioVars(RxBuffer) [<span cl=
ass=3D"hljs-keyword">string</span> replace $::sio::sioVars(RxBuffer) <span =
class=3D"hljs-number">0</span> $equalPos]
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">=
1</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWai=
tForDeviceData</span> {addrLo addrHi} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> extraTimeOutId extraTimeOut =
protocol errCode
    <span class=3D"hljs-keyword">global</span> flipStates tcl_platform
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">set</span> errCode <span class=3D"hljs-num=
ber">0</span>
    <span class=3D"hljs-keyword">set</span> nBytes [<span class=3D"hljs-key=
word">expr</span> $addrHi - $addrLo + <span class=3D"hljs-number">1</span>]
    <span class=3D"hljs-keyword">set</span> rest [<span class=3D"hljs-keywo=
rd">expr</span> $nBytes % $protocol(frameLengthR)]
    <span class=3D"hljs-keyword">if</span> {$rest =3D=3D <span class=3D"hlj=
s-number">0</span>} then {
	<span class=3D"hljs-keyword">set</span> nFrames [<span class=3D"hljs-keywo=
rd">expr</span> $nBytes / $protocol(frameLengthR)]
	<span class=3D"hljs-keyword">set</span> nChars [<span class=3D"hljs-keywor=
d">expr</span> <span class=3D"hljs-number">21</span> + <span class=3D"hljs-=
number">1</span> + ($nFrames * (<span class=3D"hljs-number">2</span> * $pro=
tocol(frameLengthR) + <span class=3D"hljs-number">6</span>))]
    } else {
	<span class=3D"hljs-keyword">set</span> nFullFrames [<span class=3D"hljs-k=
eyword">expr</span> ($nBytes - $rest) / $protocol(frameLengthR)]
	<span class=3D"hljs-keyword">set</span> nChars [<span class=3D"hljs-keywor=
d">expr</span> <span class=3D"hljs-number">21</span> + <span class=3D"hljs-=
number">1</span> + ($nFullFrames * (<span class=3D"hljs-number">2</span> * =
$protocol(frameLengthR) + <span class=3D"hljs-number">6</span>)) + ($rest *=
 <span class=3D"hljs-number">2</span>) + <span class=3D"hljs-number">6</spa=
n>]
    }
<span class=3D"hljs-comment">    #dbgShowVar "Expected number of chars =3D =
$nChars"</span>
    <span class=3D"hljs-keyword">while</span> {<span class=3D"hljs-number">=
1</span>} {
	<span class=3D"hljs-keyword">if</span> {$::sio::sioVars(AbortTx) =3D=3D <s=
pan class=3D"hljs-number">1</span>} then {
	    stopExtraTimeOutCounter
	    <span class=3D"hljs-keyword">if</span> {$tcl_platform(platform) =3D=3D=
 <span class=3D"hljs-string">"windows"</span>} then {
		<span class=3D"hljs-keyword">set</span> errStr [<span class=3D"hljs-keywo=
rd">fconfigure</span> $::sio::devId -lasterror]
<span class=3D"hljs-comment">		#dbgShowError "Error reading serial port: $e=
rrStr"</span>
		tk_messageBox -message <span class=3D"hljs-string">"Error reading serial =
port: $errStr"</span> -title <span class=3D"hljs-string">"RS232 Message"</s=
pan> -type ok -icon <span class=3D"hljs-keyword">error</span>
	    } else {
<span class=3D"hljs-comment">		#dbgShowError "Error reading serial port."</=
span>
		tk_messageBox -message $err_id -title <span class=3D"hljs-string">"RS232 =
Message"</span> -type ok -icon <span class=3D"hljs-keyword">error</span>
	    }
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	    <span class=3D"hljs-keyword">set</span> errCode <span class=3D"hljs-nu=
mber">-17</span>
	    <span class=3D"hljs-keyword">break</span>
	} elseif {[<span class=3D"hljs-keyword">string</span> first <span class=3D=
"hljs-string">"L"</span> $::sio::sioVars(RxBuffer)] !=3D <span class=3D"hlj=
s-number">-1</span>} {
	    stopExtraTimeOutCounter
	    <span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-st=
ring">"Security bit set.\n  Cannot access device data."</span>
	    messageBox <span class=3D"hljs-string">"Device Information"</span> <sp=
an class=3D"hljs-keyword">error</span> $message
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	    <span class=3D"hljs-keyword">set</span> errCode <span class=3D"hljs-nu=
mber">-12</span>
	    <span class=3D"hljs-keyword">break</span>
	} elseif {[<span class=3D"hljs-keyword">string</span> first <span class=3D=
"hljs-string">"X"</span> $::sio::sioVars(RxBuffer)] !=3D <span class=3D"hlj=
s-number">-1</span>} {
	    stopExtraTimeOutCounter
	    <span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-st=
ring">"Check sum error."</span>
	    messageBox <span class=3D"hljs-string">"Device Information"</span> <sp=
an class=3D"hljs-keyword">error</span> $message
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	    <span class=3D"hljs-keyword">set</span> errCode <span class=3D"hljs-nu=
mber">-15</span>
	    <span class=3D"hljs-keyword">break</span>
	} elseif {($::sio::sioVars(SerialEventOccured) =3D=3D <span class=3D"hljs-=
number">-1</span>) ||($extraTimeOut =3D=3D <span class=3D"hljs-number">-1</=
span>)} {
	    <span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-st=
ring">"Time out error."</span>
	    messageBox <span class=3D"hljs-string">"Device Information"</span> <sp=
an class=3D"hljs-keyword">error</span> $message
	    <span class=3D"hljs-keyword">set</span> errCode <span class=3D"hljs-nu=
mber">-10</span>
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	    <span class=3D"hljs-keyword">break</span>
	} elseif {[<span class=3D"hljs-keyword">string</span> length $::sio::sioVa=
rs(RxBuffer)] &gt;=3D $nChars} {
<span class=3D"hljs-comment">	    #dbgShowVar "  RxBuffer Length =3D [strin=
g length $::sio::sioVars(RxBuffer)]"</span>
	    stopExtraTimeOutCounter
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">update</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclSen=
dFrame</span> {frame} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime flipStates
    <span class=3D"hljs-keyword">set</span> ::sio::sioVars(AbortTx) <span c=
lass=3D"hljs-number">0</span>
    ::sio::clearRxBuffer
    startTimeOutCounter $waitTime(standard)
    <span class=3D"hljs-keyword">if</span> {! $flipStates(simul)} then {
	<span class=3D"hljs-keyword">puts</span> -nonewline $::sio::devId $frame
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $frame
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclGet=
Ack</span> {t} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> extraTimeOut errCode flipSta=
tes
    startExtraTimeOutCounter $t
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">set</span> errCode <span class=3D"hljs-num=
ber">0</span>
    <span class=3D"hljs-keyword">if</span> {! $flipStates(simul)} then {
	<span class=3D"hljs-keyword">while</span> {[checkEnd_C $::sio::sioVars(RxB=
uffer)]} {
	    <span class=3D"hljs-keyword">if</span> {$extraTimeOut =3D=3D <span cla=
ss=3D"hljs-number">-1</span>} then {
		<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-strin=
g">"Time Out Error."</span>
		messageBox <span class=3D"hljs-string">"Communication Information"</span>=
 <span class=3D"hljs-keyword">error</span> $message
		cmdsResetProgressBar
		<span class=3D"hljs-keyword">set</span> errCode <span class=3D"hljs-numbe=
r">-10</span>
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
		<span class=3D"hljs-keyword">break</span>
	    }
	    <span class=3D"hljs-keyword">update</span>
	}
	<span class=3D"hljs-keyword">if</span> {$status} then {
	    stopExtraTimeOutCounter
	    <span class=3D"hljs-keyword">set</span> res [getAck_C $::sio::sioVars(=
RxBuffer)]
	    <span class=3D"hljs-keyword">switch</span> -exact $res {
	    X {
		    <span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-s=
tring">"Check sum error."</span>
		    <span class=3D"hljs-keyword">set</span> errCode <span class=3D"hljs-n=
umber">-15</span>
		}
	    P -
	    L {
		    <span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-s=
tring">"Software Security Bit set.\n  Cannot access device data."</span>
		    <span class=3D"hljs-keyword">set</span> errCode <span class=3D"hljs-n=
umber">-12</span>
		}
	    Z {
		    <span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-s=
tring">"CRC check error."</span>
		    <span class=3D"hljs-keyword">set</span> errCode <span class=3D"hljs-n=
umber">-16</span>
		}
	    }
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
info</span> exists message]} then {
		messageBox <span class=3D"hljs-string">"Device Information"</span> <span =
class=3D"hljs-keyword">error</span> $message
		cmdsResetProgressBar
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
	    }
	}
    } else {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>1</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> sendEof=
</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> protocol waitTime
    startTimeOutCounter $waitTime(standard)
    <span class=3D"hljs-keyword">puts</span> -nonewline $::sio::devId $prot=
ocol(eof)
    <span class=3D"hljs-keyword">flush</span> $::sio::devId
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclSyn=
chroRs232Comm</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> flipStates baud extraTimeOut=
 waitTime
    <span class=3D"hljs-keyword">set</span> sync <span class=3D"hljs-number=
">0</span>
    updateGUI onRs232CommunicationOff
    updateGUI onAnyCommunicationOff
    <span class=3D"hljs-keyword">if</span> {$::sio::devId =3D=3D <span clas=
s=3D"hljs-number">0</span>} then {
	log_message <span class=3D"hljs-string">"RS232 Communication not opened"</=
span>
    } else {
	<span class=3D"hljs-keyword">if</span> {! [<span class=3D"hljs-keyword">in=
fo</span> exists ::deviceArray(specialSynchro)]} then {
	    ::sio::setBaud $baud
	    <span class=3D"hljs-keyword">set</span> sync [::sio::autoBaudSync <spa=
n class=3D"hljs-string">"U"</span> $waitTime(standard)]
	    <span class=3D"hljs-keyword">if</span> {$sync =3D=3D <span class=3D"hl=
js-number">1</span>} then {
		<span class=3D"hljs-keyword">set</span> ::deviceArray(bootloaderId) $::si=
o::sioVars(bootloaderId)
		devcUpdateDeviceFrame
		updateGUI onRs232CommunicationOn
		updateGUI onAnyCommunicationOn
		log_message <span class=3D"hljs-string">"Rs232 Communication Synchronized=
"</span>
	    } elseif {$sync =3D=3D <span class=3D"hljs-number">-1</span>} {
		<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-strin=
g">"The board answer is not correct."</span>
		messageBox <span class=3D"hljs-string">"RS232 Communication"</span> <span=
 class=3D"hljs-keyword">error</span> $message
		log_message <span class=3D"hljs-string">"RS232 Communication Error."</spa=
n>
	    } else {
		<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-strin=
g">"Time out error."</span>
		messageBox <span class=3D"hljs-string">"RS232 Communication"</span> <span=
 class=3D"hljs-keyword">error</span> $message
		log_message <span class=3D"hljs-string">"RS232 Communication Time Out."</=
span>
	    }
	} else {
	    startExtraTimeOutCounter <span class=3D"hljs-number">10000</span>
	    <span class=3D"hljs-keyword">while</span> {($sync !=3D <span class=3D"=
hljs-number">1</span>) &amp;&amp;($extraTimeOut !=3D <span class=3D"hljs-nu=
mber">-1</span>)} {
		<span class=3D"hljs-keyword">set</span> sync [::sio::autoBaudSync <span c=
lass=3D"hljs-string">"U"</span> <span class=3D"hljs-number">100</span>]
	    }
	    <span class=3D"hljs-keyword">if</span> {$extraTimeOut =3D=3D <span cla=
ss=3D"hljs-number">-1</span>} then {
		<span class=3D"hljs-keyword">set</span> sync <span class=3D"hljs-number">=
-2</span>
<span class=3D"hljs-comment">		#dbgShowError "  Special sync Time out."</sp=
an>
		<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-strin=
g">"Time out error."</span>
		messageBox <span class=3D"hljs-string">"RS232 Communication"</span> <span=
 class=3D"hljs-keyword">error</span> $message
		log_message <span class=3D"hljs-string">"RS232 Time Out."</span>
	    } else {
		<span class=3D"hljs-keyword">if</span> {$sync =3D=3D <span class=3D"hljs-=
number">1</span>} then {
		    devcUpdateDeviceFrame
		    stopExtraTimeOutCounter
		    updateGUI onRs232CommunicationOn
		    updateGUI onAnyCommunicationOn
		    log_message <span class=3D"hljs-string">"Rs232 Sync PASS."</span>
		} else {
		    <span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-s=
tring">"The board answer is not correct."</span>
		    messageBox <span class=3D"hljs-string">"RS232 Communication"</span> <=
span class=3D"hljs-keyword">error</span> $message
		    log_message <span class=3D"hljs-string">"RS232 Sync FAIL."</span>
		}
	    }
	}
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $sync
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> wrongFr=
ame</span> {frame} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard)]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclBui=
ldDataFrame</span> {addrLo addrHi recType} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> temp
    <span class=3D"hljs-keyword">set</span> frame [ptclBuildDataFrame_C [<s=
pan class=3D"hljs-keyword">format</span> %d $addrLo] [<span class=3D"hljs-k=
eyword">format</span> %d $addrHi] $recType]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $frame
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclPro=
gramData</span> {addrLo addrHi {<span class=3D"hljs-keyword">memory</span> =
<span class=3D"hljs-string">"00"</span>}} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime temp
    ptclSendFrame [ptclBuildDataFrame_C [<span class=3D"hljs-keyword">forma=
t</span> %d $addrLo] [<span class=3D"hljs-keyword">format</span> %d $addrHi=
] $memory]
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard)]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">if</span> {$::deviceArray(name) =3D=3D <span c=
lass=3D"hljs-string">"T89C51RD2"</span>} then {
    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptc=
lProgramData</span> {addrLo addrHi {<span class=3D"hljs-keyword">memory</sp=
an> <span class=3D"hljs-string">"00"</span>}} {
<span class=3D"hljs-comment">	#dbgBeginProc [info level [info level]]</span=
>
	<span class=3D"hljs-keyword">global</span> waitTime temp gui
	<span class=3D"hljs-keyword">if</span> {! $gui(flowErase)} then {
<span class=3D"hljs-comment">	    #dbgShowInfo "Executing special RD2 progr=
amming"</span>
	    ptclSendFrame [ptclBuildDataFrameFF_C [<span class=3D"hljs-keyword">fo=
rmat</span> %d $addrLo] [<span class=3D"hljs-keyword">format</span> %d $add=
rHi] <span class=3D"hljs-string">"00"</span>]
	    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(s=
tandard)]
	    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"=
hljs-number">1</span>} then {
		ptclSendFrame [ptclBuildDataFrame_C [<span class=3D"hljs-keyword">format<=
/span> %d $addrLo] [<span class=3D"hljs-keyword">format</span> %d $addrHi] =
<span class=3D"hljs-string">"00"</span>]
		<span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(stan=
dard)]
	    }
	} else {
	    ptclSendFrame [ptclBuildDataFrame_C [<span class=3D"hljs-keyword">form=
at</span> %d $addrLo] [<span class=3D"hljs-keyword">format</span> %d $addrH=
i] <span class=3D"hljs-string">"00"</span>]
	    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(s=
tandard)]
	}
<span class=3D"hljs-comment">	#dbgEndProc [info level [info level]]</span>
	<span class=3D"hljs-keyword">return</span> $status
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclEra=
seBlock0</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime
    <span class=3D"hljs-keyword">set</span> waitTime(standard) <span class=
=3D"hljs-number">10000</span>
    ptclSendFrame <span class=3D"hljs-string">":020000030100FA"</span>
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard)]
    <span class=3D"hljs-keyword">set</span> waitTime(standard) <span class=
=3D"hljs-number">3000</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclEra=
seBlock1</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime
    <span class=3D"hljs-keyword">set</span> waitTime(standard) <span class=
=3D"hljs-number">10000</span>
    ptclSendFrame <span class=3D"hljs-string">":020000030120DA"</span>
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard)]
    <span class=3D"hljs-keyword">set</span> waitTime(standard) <span class=
=3D"hljs-number">3000</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclEra=
seBlock2</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime
    <span class=3D"hljs-keyword">set</span> waitTime(standard) <span class=
=3D"hljs-number">10000</span>
    ptclSendFrame <span class=3D"hljs-string">":020000030140BA"</span>
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard)]
    <span class=3D"hljs-keyword">set</span> waitTime(standard) <span class=
=3D"hljs-number">3000</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclEra=
seBlock3</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime
    <span class=3D"hljs-keyword">set</span> waitTime(standard) <span class=
=3D"hljs-number">10000</span>
    ptclSendFrame <span class=3D"hljs-string">":0200000301807A"</span>
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard)]
    <span class=3D"hljs-keyword">set</span> waitTime(standard) <span class=
=3D"hljs-number">3000</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclEra=
seBlock4</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime
    <span class=3D"hljs-keyword">set</span> waitTime(standard) <span class=
=3D"hljs-number">10000</span>
    ptclSendFrame <span class=3D"hljs-string">":0200000301C03A"</span>
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard)]
    <span class=3D"hljs-keyword">set</span> waitTime(standard) <span class=
=3D"hljs-number">3000</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclEra=
seSBVBSB</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime
    ptclSendFrame <span class=3D"hljs-string">":020000030400F7"</span>
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard)]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclPro=
gSSBlev1</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime
    ptclSendFrame <span class=3D"hljs-string">":020000030500F6"</span>
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard)]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclPro=
gSSBlev2</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime
    ptclSendFrame <span class=3D"hljs-string">":020000030501F5"</span>
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard)]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teBSB</span> {data} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">":030000030600"</span>=
 $data]
    <span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-key=
word">list</span>]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=
=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> l=
ength $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs=
-keyword">incr</span> i <span class=3D"hljs-number">2</span>} {
	<span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hljs-ke=
yword">string</span> range $frame $i [<span class=3D"hljs-keyword">expr</sp=
an> $i + <span class=3D"hljs-number">1</span>]]
    }
    ptclSendFrame [<span class=3D"hljs-keyword">append</span> frame [checkS=
um $lFrame]]
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard)]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teSBV</span> {data} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">":030000030601"</span>=
 $data]
    <span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-key=
word">list</span>]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=
=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> l=
ength $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs=
-keyword">incr</span> i <span class=3D"hljs-number">2</span>} {
	<span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hljs-ke=
yword">string</span> range $frame $i [<span class=3D"hljs-keyword">expr</sp=
an> $i + <span class=3D"hljs-number">1</span>]]
    }
    ptclSendFrame [<span class=3D"hljs-keyword">append</span> frame [checkS=
um $lFrame]]
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard)]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclFul=
lChipErase</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime
    <span class=3D"hljs-keyword">set</span> waitTime(standard) <span class=
=3D"hljs-number">10000</span>
    ptclSendFrame <span class=3D"hljs-string">":0100000307F5"</span>
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(ex=
tended)]
    <span class=3D"hljs-keyword">set</span> waitTime(standard) <span class=
=3D"hljs-number">3000</span>
    <span class=3D"hljs-keyword">set</span> loadConfig(programDevice) <span=
 class=3D"hljs-string">"setupProgramDevice"</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teOscFuse</span> {data} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">":030000030A02"</span>=
 $data]
    <span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-key=
word">list</span>]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=
=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> l=
ength $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs=
-keyword">incr</span> i <span class=3D"hljs-number">2</span>} {
	<span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hljs-ke=
yword">string</span> range $frame $i [<span class=3D"hljs-keyword">expr</sp=
an> $i + <span class=3D"hljs-number">1</span>]]
    }
    ptclSendFrame [<span class=3D"hljs-keyword">append</span> frame [checkS=
um $lFrame]]
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard)]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teSelBootFuse</span> {data} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">":030000030A01"</span>=
 $data]
    <span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-key=
word">list</span>]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=
=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> l=
ength $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs=
-keyword">incr</span> i <span class=3D"hljs-number">2</span>} {
	<span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hljs-ke=
yword">string</span> range $frame $i [<span class=3D"hljs-keyword">expr</sp=
an> $i + <span class=3D"hljs-number">1</span>]]
    }
    ptclSendFrame [<span class=3D"hljs-keyword">append</span> frame [checkS=
um $lFrame]]
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard)]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teBLJBFuse</span> {data} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">":030000030A04"</span>=
 $data]
    <span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-key=
word">list</span>]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=
=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> l=
ength $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs=
-keyword">incr</span> i <span class=3D"hljs-number">2</span>} {
	<span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hljs-ke=
yword">string</span> range $frame $i [<span class=3D"hljs-keyword">expr</sp=
an> $i + <span class=3D"hljs-number">1</span>]]
    }
    ptclSendFrame [<span class=3D"hljs-keyword">append</span> frame [checkS=
um $lFrame]]
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard)]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teX2Fuse</span> {data} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">":030000030A08"</span>=
 $data]
    <span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-key=
word">list</span>]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=
=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> l=
ength $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs=
-keyword">incr</span> i <span class=3D"hljs-number">2</span>} {
	<span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hljs-ke=
yword">string</span> range $frame $i [<span class=3D"hljs-keyword">expr</sp=
an> $i + <span class=3D"hljs-number">1</span>]]
    }
    ptclSendFrame [<span class=3D"hljs-keyword">append</span> frame [checkS=
um $lFrame]]
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard)]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dBlock</span> {addrLo addrHi {<span class=3D"hljs-keyword">memory</span> <s=
pan class=3D"hljs-string">"00"</span>} {action <span class=3D"hljs-string">=
"update"</span>}} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> nAddrBits waitTime protocol =
buffer
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">if</span> {($::deviceArray(bootloaderId) =
=3D=3D <span class=3D"hljs-string">"0001"</span>) ||($::deviceArray(bootloa=
derId) =3D=3D <span class=3D"hljs-string">"0002"</span>)} then {
	<span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">memor=
y</span> <span class=3D"hljs-string">"03"</span>
    }
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">":05000004"</span> [<s=
pan class=3D"hljs-keyword">format</span> %<span class=3D"hljs-number">04</s=
pan>X $addrLo] [<span class=3D"hljs-keyword">format</span> %<span class=3D"=
hljs-number">04</span>X $addrHi] $memory]
    <span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-key=
word">list</span>]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=
=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> l=
ength $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs=
-keyword">incr</span> i <span class=3D"hljs-number">2</span>} {
	<span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hljs-ke=
yword">string</span> range $frame $i [<span class=3D"hljs-keyword">expr</sp=
an> $i + <span class=3D"hljs-number">1</span>]]
    }
    ptclSendFrame [<span class=3D"hljs-keyword">append</span> frame [checkS=
um $lFrame]]
    <span class=3D"hljs-keyword">set</span> waitTime(standard) <span class=
=3D"hljs-number">10000</span>
    startExtraTimeOutCounter $waitTime(standard)
    <span class=3D"hljs-keyword">set</span> status [ptclWaitForDeviceData $=
addrLo $addrHi]
    <span class=3D"hljs-keyword">set</span> waitTime(standard) <span class=
=3D"hljs-number">3000</span>
    <span class=3D"hljs-keyword">if</span> {$action =3D=3D <span class=3D"h=
ljs-string">"update"</span>} then {
	<span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"hljs=
-number">1</span>} then {
	    ptclUpdateBuffer $::sio::sioVars(RxBuffer)
	}
    } else {
	<span class=3D"hljs-keyword">set</span> LF [<span class=3D"hljs-keyword">f=
ormat</span> %c <span class=3D"hljs-number">0x0A</span>]
	<span class=3D"hljs-keyword">while</span> {[<span class=3D"hljs-keyword">s=
et</span> equalPos [<span class=3D"hljs-keyword">string</span> first <span =
class=3D"hljs-string">"=3D"</span> $::sio::sioVars(RxBuffer)]] !=3D <span c=
lass=3D"hljs-number">-1</span>} {
	    <span class=3D"hljs-keyword">set</span> rxBufferLength [<span class=3D=
"hljs-keyword">string</span> length $::sio::sioVars(RxBuffer)]
	    <span class=3D"hljs-keyword">set</span> addr [<span class=3D"hljs-keyw=
ord">string</span> range $::sio::sioVars(RxBuffer) [<span class=3D"hljs-key=
word">expr</span> $equalPos - <span class=3D"hljs-number">4</span>] [<span =
class=3D"hljs-keyword">expr</span> $equalPos - <span class=3D"hljs-number">=
1</span>]]
<span class=3D"hljs-comment">	    #dbgShowVar "addr =3D $addr"</span>
	    <span class=3D"hljs-keyword">set</span> limit1 [<span class=3D"hljs-ke=
yword">expr</span> $equalPos + <span class=3D"hljs-number">2</span> * $prot=
ocol(frameLengthR)]
	    <span class=3D"hljs-keyword">set</span> limit2 [<span class=3D"hljs-ke=
yword">expr</span> $rxBufferLength - <span class=3D"hljs-number">2</span>]
	    <span class=3D"hljs-keyword">if</span> {$limit1 &lt;=3D $limit2} then =
{
		<span class=3D"hljs-keyword">set</span> limit $limit1
	    } else {
		<span class=3D"hljs-keyword">set</span> limit $limit2
	    }
	    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">=
set</span> i [<span class=3D"hljs-keyword">expr</span> $equalPos + <span cl=
ass=3D"hljs-number">1</span>]; <span class=3D"hljs-keyword">set</span> j <s=
pan class=3D"hljs-number">0</span>} {$i &lt;=3D $limit} {<span class=3D"hlj=
s-keyword">incr</span> i <span class=3D"hljs-number">2</span>; <span class=
=3D"hljs-keyword">incr</span> j <span class=3D"hljs-number">1</span>} {
		<span class=3D"hljs-keyword">if</span> {[readBuffer [<span class=3D"hljs-=
keyword">format</span> %<span class=3D"hljs-number">06</span>X [<span class=
=3D"hljs-keyword">expr</span> <span class=3D"hljs-number">0</span>x$addr + =
$j]]] !=3D [<span class=3D"hljs-keyword">string</span> range $::sio::sioVar=
s(RxBuffer) $i [<span class=3D"hljs-keyword">expr</span> $i + <span class=
=3D"hljs-number">1</span>]]} then {
		    <span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-s=
tring">"Memory Verify Fail at: [format %#06X [expr 0x$addr + $j]]"</span>
		    log_message $message
		    actionsLog_message $message
		    cmdsResetProgressBar
<span class=3D"hljs-comment">		    #dbgShowInfo "Verify FAIL."</span>
		    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-nu=
mber">0</span>
		    <span class=3D"hljs-keyword">break</span>
		}
	    }
	    <span class=3D"hljs-keyword">if</span> {! $status} then {
		<span class=3D"hljs-keyword">break</span>
	    }
	    <span class=3D"hljs-keyword">set</span> ::sio::sioVars(RxBuffer) [<spa=
n class=3D"hljs-keyword">string</span> replace $::sio::sioVars(RxBuffer) <s=
pan class=3D"hljs-number">0</span> $equalPos]
	}
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclBla=
nkCheck</span> {addrLo addrHi} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">":05000004"</span> [<s=
pan class=3D"hljs-keyword">format</span> %<span class=3D"hljs-number">04</s=
pan>X <span class=3D"hljs-string">"0x$addrLo"</span>] [<span class=3D"hljs-=
keyword">format</span> %<span class=3D"hljs-number">04</span>X <span class=
=3D"hljs-string">"0x$addrHi"</span>] <span class=3D"hljs-string">"01"</span=
>]
<span class=3D"hljs-comment">    #dbgShowVar "assembled frame: $frame"</spa=
n>
    <span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-key=
word">list</span>]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=
=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> l=
ength $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs=
-keyword">incr</span> i <span class=3D"hljs-number">2</span>} {
	<span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hljs-ke=
yword">string</span> range $frame $i [<span class=3D"hljs-keyword">expr</sp=
an> $i + <span class=3D"hljs-number">1</span>]]
    }
    <span class=3D"hljs-keyword">set</span> waitTime(standard) <span class=
=3D"hljs-number">10000</span>
    ptclSendFrame [<span class=3D"hljs-keyword">append</span> frame [checkS=
um $lFrame]]
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard)]
    <span class=3D"hljs-keyword">set</span> waitTime(standard) <span class=
=3D"hljs-number">3000</span>
    <span class=3D"hljs-keyword">if</span> {$status} then {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> first <span class=3D"hljs-string">"."</span> $::sio::sioVars(RxBu=
ffer)] =3D=3D <span class=3D"hljs-number">-1</span>} then {
	    <span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-ke=
yword">string</span> range $::sio::sioVars(RxBuffer) end<span class=3D"hljs=
-number">-4</span> end<span class=3D"hljs-number">-1</span>]
	} else {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">-1</span>
	}
    } else {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>-2</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dEB</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime bootloaderVerDepend=
ent
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">if</span> {$bootloaderVerDependent(eb)} th=
en {
	<span class=3D"hljs-keyword">set</span> p <span class=3D"hljs-string">"eb"=
</span>
	ptclSendFrame <span class=3D"hljs-string">":020000050706EC"</span>
	<span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(stand=
ard)]
	<span class=3D"hljs-keyword">if</span> {$status} then {
	    <span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=
=3D"hljs-keyword">string</span> range $::sio::sioVars(RxBuffer) end<span cl=
ass=3D"hljs-number">-3</span> end<span class=3D"hljs-number">-2</span>]
<span class=3D"hljs-comment">	    #dbgShowVar "::deviceArray($p) =3D $::dev=
iceArray($p)"</span>
	}
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teEB</span> {data} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime bootloaderVerDepend=
ent
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">if</span> {$bootloaderVerDependent(eb)} th=
en {
	<span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyword=
">append</span> frame <span class=3D"hljs-string">":030000030606"</span> $d=
ata]
	<span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-keywor=
d">list</span>]
	<span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">set<=
/span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=3D"=
hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> lengt=
h $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs-key=
word">incr</span> i <span class=3D"hljs-number">2</span>} {
	    <span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hlj=
s-keyword">string</span> range $frame $i [<span class=3D"hljs-keyword">expr=
</span> $i + <span class=3D"hljs-number">1</span>]]
	}
	ptclSendFrame [<span class=3D"hljs-keyword">append</span> frame [checkSum =
$lFrame]]
	<span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(stand=
ard)]
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclSta=
rtAppli</span> {reset} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">if</span> {$reset} then {
	ptclSendFrame <span class=3D"hljs-string">":020000030300F8"</span>
    } else {
	ptclSendFrame <span class=3D"hljs-string">":0400000303010000F5"</span>
    }
    ptclCancelRs232Comm
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dManufId</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime
    <span class=3D"hljs-keyword">set</span> p <span class=3D"hljs-string">"=
manufId"</span>
    ptclSendFrame <span class=3D"hljs-string">":020000050000F9"</span>
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard)]
    <span class=3D"hljs-keyword">if</span> {$status} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=3D"=
hljs-keyword">string</span> range $::sio::sioVars(RxBuffer) end<span class=
=3D"hljs-number">-3</span> end<span class=3D"hljs-number">-2</span>]
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($p) =3D $::deviceA=
rray($p)"</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dDeviceId1</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime
    <span class=3D"hljs-keyword">set</span> p <span class=3D"hljs-string">"=
deviceId1"</span>
    ptclSendFrame <span class=3D"hljs-string">":020000050001F8"</span>
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard)]
    <span class=3D"hljs-keyword">if</span> {$status} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=3D"=
hljs-keyword">string</span> range $::sio::sioVars(RxBuffer) end<span class=
=3D"hljs-number">-3</span> end<span class=3D"hljs-number">-2</span>]
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($p) =3D $::deviceA=
rray($p)"</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dDeviceId2</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime
    <span class=3D"hljs-keyword">set</span> p <span class=3D"hljs-string">"=
deviceId2"</span>
    ptclSendFrame <span class=3D"hljs-string">":020000050002F7"</span>
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard)]
    <span class=3D"hljs-keyword">if</span> {$status} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=3D"=
hljs-keyword">string</span> range $::sio::sioVars(RxBuffer) end<span class=
=3D"hljs-number">-3</span> end<span class=3D"hljs-number">-2</span>]
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($p) =3D $::deviceA=
rray($p)"</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dDeviceId3</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime
    <span class=3D"hljs-keyword">set</span> p <span class=3D"hljs-string">"=
deviceId3"</span>
    ptclSendFrame <span class=3D"hljs-string">":020000050003F6"</span>
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard)]
    <span class=3D"hljs-keyword">if</span> {$status} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=3D"=
hljs-keyword">string</span> range $::sio::sioVars(RxBuffer) end<span class=
=3D"hljs-number">-3</span> end<span class=3D"hljs-number">-2</span>]
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($p) =3D $::deviceA=
rray($p)"</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dSSB</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime logFileId expAnsw
    <span class=3D"hljs-keyword">set</span> p <span class=3D"hljs-string">"=
ssb"</span>
    ptclSendFrame <span class=3D"hljs-string">":020000050700F2"</span>
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard)]
    <span class=3D"hljs-keyword">if</span> {$status} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=3D"=
hljs-keyword">string</span> range $::sio::sioVars(RxBuffer) end<span class=
=3D"hljs-number">-3</span> end<span class=3D"hljs-number">-2</span>]
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($p) =3D $::deviceA=
rray($p)"</span>
	<span class=3D"hljs-keyword">set</span> ::deviceArray(level) X
	<span class=3D"hljs-keyword">foreach</span> i $expAnsw(readSSBlev0) {
	    <span class=3D"hljs-keyword">if</span> {$::deviceArray(ssb) =3D=3D $i}=
 then {
		<span class=3D"hljs-keyword">set</span> ::deviceArray(level) <span class=
=3D"hljs-number">0</span>
	    }
	}
	<span class=3D"hljs-keyword">foreach</span> i $expAnsw(readSSBlev1) {
	    <span class=3D"hljs-keyword">if</span> {$::deviceArray(ssb) =3D=3D $i}=
 then {
		<span class=3D"hljs-keyword">set</span> ::deviceArray(level) <span class=
=3D"hljs-number">1</span>
	    }
	}
	<span class=3D"hljs-keyword">foreach</span> i $expAnsw(readSSBlev2) {
	    <span class=3D"hljs-keyword">if</span> {$::deviceArray(ssb) =3D=3D $i}=
 then {
		<span class=3D"hljs-keyword">set</span> ::deviceArray(level) <span class=
=3D"hljs-number">2</span>
	    }
	}
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray(level) =3D $::devi=
ceArray(level)"</span>
    }
    updateGUI onSecurityLevelChange
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dBSB</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime
    <span class=3D"hljs-keyword">set</span> p <span class=3D"hljs-string">"=
bsb"</span>
    ptclSendFrame <span class=3D"hljs-string">":020000050701F1"</span>
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard)]
    <span class=3D"hljs-keyword">if</span> {$status} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=3D"=
hljs-keyword">string</span> range $::sio::sioVars(RxBuffer) end<span class=
=3D"hljs-number">-3</span> end<span class=3D"hljs-number">-2</span>]
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($p) =3D $::deviceA=
rray($p)"</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dSBV</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime
    <span class=3D"hljs-keyword">set</span> p <span class=3D"hljs-string">"=
sbv"</span>
    ptclSendFrame <span class=3D"hljs-string">":020000050702F0"</span>
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard)]
    <span class=3D"hljs-keyword">if</span> {$status} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=3D"=
hljs-keyword">string</span> range $::sio::sioVars(RxBuffer) end<span class=
=3D"hljs-number">-3</span> end<span class=3D"hljs-number">-2</span>]
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($p) =3D $::deviceA=
rray($p)"</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dHwByte</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> rs232standard waitTime flipS=
tates
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">if</span> {! $flipStates(simul)} then {
	<span class=3D"hljs-keyword">set</span> p <span class=3D"hljs-string">"hsb=
"</span>
	ptclSendFrame $rs232standard(readHwByte)
	<span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(stand=
ard)]
	<span class=3D"hljs-keyword">if</span> {$status} then {
	    <span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=
=3D"hljs-keyword">string</span> range $::sio::sioVars(RxBuffer) end<span cl=
ass=3D"hljs-number">-3</span> end<span class=3D"hljs-number">-2</span>]
<span class=3D"hljs-comment">	    #dbgShowVar "::deviceArray($p) =3D $::dev=
iceArray($p)"</span>
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
info</span> exists ::deviceArray(selBootFuse)]} then {
		<span class=3D"hljs-keyword">set</span> ::deviceArray(selBootFuse) [<span=
 class=3D"hljs-keyword">expr</span> ((<span class=3D"hljs-number">0</span>x=
$::deviceArray(hsb) | <span class=3D"hljs-number">0xEF</span>) &amp; <span =
class=3D"hljs-number">0x1F</span>) &gt;&gt; <span class=3D"hljs-number">4</=
span>]
	    }
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
info</span> exists ::deviceArray(x2Fuse)]} then {
		<span class=3D"hljs-keyword">set</span> ::deviceArray(x2Fuse) [<span clas=
s=3D"hljs-keyword">expr</span> (<span class=3D"hljs-number">0</span>x$::dev=
iceArray(hsb) | <span class=3D"hljs-number">0x7F</span>) &gt;&gt; <span cla=
ss=3D"hljs-number">7</span>]
	    }
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
info</span> exists ::deviceArray(bljbFuse)]} then {
		<span class=3D"hljs-keyword">set</span> ::deviceArray(bljbFuse) [<span cl=
ass=3D"hljs-keyword">expr</span> ((<span class=3D"hljs-number">0</span>x$::=
deviceArray(hsb) | <span class=3D"hljs-number">0xBF</span>) &amp; <span cla=
ss=3D"hljs-number">0x7F</span>) &gt;&gt; <span class=3D"hljs-number">6</spa=
n>]
	    }
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
info</span> exists ::deviceArray(oscFuse)]} then {
		<span class=3D"hljs-keyword">set</span> ::deviceArray(oscFuse) [<span cla=
ss=3D"hljs-keyword">expr</span> ((<span class=3D"hljs-number">0</span>x$::d=
eviceArray(hsb) | <span class=3D"hljs-number">0xDF</span>) &amp; <span clas=
s=3D"hljs-number">0x2F</span>) &gt;&gt; <span class=3D"hljs-number">5</span=
>]
	    }
	}
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dBootlVer</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime rs232standard
    ptclSendFrame $rs232standard(readBootlVer)
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(st=
andard)]
    <span class=3D"hljs-keyword">if</span> {$status} then {
	<span class=3D"hljs-keyword">set</span> c1 [<span class=3D"hljs-keyword">s=
tring</span> index $::sio::sioVars(RxBuffer) end<span class=3D"hljs-number"=
>-3</span>]
	<span class=3D"hljs-keyword">set</span> c2 [<span class=3D"hljs-keyword">s=
tring</span> index $::sio::sioVars(RxBuffer) end<span class=3D"hljs-number"=
>-2</span>]
<span class=3D"hljs-comment">	#dbgShowVar "minorPatch =3D ${c1}${c2}"</span=
>
	setBootlVerDepFeatures <span class=3D"hljs-string">"RS232_STANDARD"</span>=
 ${c1}${c2}
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dDevBootId1</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> testFlag waitTime
    <span class=3D"hljs-keyword">set</span> p <span class=3D"hljs-string">"=
deviceBootId1"</span>
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">if</span> {$testFlag(readDevBootId1)} then=
 {
	ptclSendFrame <span class=3D"hljs-string">":020000050E00EB"</span>
	<span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(stand=
ard)]
	<span class=3D"hljs-keyword">if</span> {$status} then {
	    <span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=
=3D"hljs-keyword">string</span> range $::sio::sioVars(RxBuffer) end<span cl=
ass=3D"hljs-number">-3</span> end<span class=3D"hljs-number">-2</span>]
<span class=3D"hljs-comment">	    #dbgShowVar "::deviceArray($p) =3D $::dev=
iceArray($p)"</span>
	}
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dDevBootId2</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> testFlag waitTime
    <span class=3D"hljs-keyword">set</span> p <span class=3D"hljs-string">"=
deviceBootId2"</span>
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">if</span> {$testFlag(readDevBootId2)} then=
 {
	ptclSendFrame <span class=3D"hljs-string">":020000050E01EA"</span>
	<span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(stand=
ard)]
	<span class=3D"hljs-keyword">if</span> {$status} then {
	    <span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=
=3D"hljs-keyword">string</span> range $::sio::sioVars(RxBuffer) end<span cl=
ass=3D"hljs-number">-3</span> end<span class=3D"hljs-number">-2</span>]
<span class=3D"hljs-comment">	    #dbgShowVar "::deviceArray($p) =3D $::dev=
iceArray($p)"</span>
	}
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dPortsConfig</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime bootloaderVerDepend=
ent
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">if</span> {$bootloaderVerDependent(p1p3p4_=
config)} then {
	<span class=3D"hljs-keyword">foreach</span> p {p1 p3 p4} data1 {<span clas=
s=3D"hljs-number">03</span> <span class=3D"hljs-number">04</span> <span cla=
ss=3D"hljs-number">05</span>} cksum {EF EE ED} {
	    ptclSendFrame <span class=3D"hljs-string">":0200000507${data1}${cksum}=
"</span>
	    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(s=
tandard)]
	    <span class=3D"hljs-keyword">if</span> {$status} then {
		<span class=3D"hljs-keyword">set</span> ::deviceArray(${p}_config) [<span=
 class=3D"hljs-keyword">string</span> range $::sio::sioVars(RxBuffer) end<s=
pan class=3D"hljs-number">-3</span> end<span class=3D"hljs-number">-2</span=
>]
<span class=3D"hljs-comment">		#dbgShowVar "::deviceArray(${p}_config) =3D =
$::deviceArray(${p}_config)"</span>
	    } else {
		<span class=3D"hljs-keyword">break</span>
	    }
	}
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclSet=
PortsConfig</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime bootloaderVerDepend=
ent
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">if</span> {$bootloaderVerDependent(p1p3p4_=
config)} then {
	<span class=3D"hljs-keyword">foreach</span> p {p1 p3 p4} d1 {<span class=
=3D"hljs-number">02</span> <span class=3D"hljs-number">03</span> <span clas=
s=3D"hljs-number">04</span>} {
	    <span class=3D"hljs-keyword">set</span> frame <span class=3D"hljs-stri=
ng">""</span>
	    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-key=
word">append</span> frame <span class=3D"hljs-string">":0300000306"</span> =
${d1} $::deviceArray(${p}_config)]
	    <span class=3D"hljs-keyword">set</span> lFrame [<span class=3D"hljs-ke=
yword">list</span>]
	    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">=
set</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=
=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</span> l=
ength $frame] - <span class=3D"hljs-number">2</span>]} {<span class=3D"hljs=
-keyword">incr</span> i <span class=3D"hljs-number">2</span>} {
		<span class=3D"hljs-keyword">lappend</span> lFrame [<span class=3D"hljs-k=
eyword">string</span> range $frame $i [<span class=3D"hljs-keyword">expr</s=
pan> $i + <span class=3D"hljs-number">1</span>]]
	    }
	    ptclSendFrame [<span class=3D"hljs-keyword">append</span> frame [check=
Sum $lFrame]]
	    <span class=3D"hljs-keyword">set</span> status [ptclGetAck $waitTime(s=
tandard)]
	    <span class=3D"hljs-keyword">if</span> {! $status} then {
		<span class=3D"hljs-keyword">break</span>
	    }
	}
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-comment">#dbgEndSrc [info script]</span>
<span class=3D"hljs-comment">#dbgBeginSrc [info script]</span>
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> USB_CAN=
_Close</span> {hUSB_CAN} {
    USB_CAN_Close_C [<span class=3D"hljs-keyword">format</span> %<span clas=
s=3D"hljs-number">08</span>X $hUSB_CAN]
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> USB_CAN=
_ResetPipe</span> {hUSB_CAN pipeNum} {
    USB_CAN_ResetPipe_C [<span class=3D"hljs-keyword">format</span> %<span =
class=3D"hljs-number">08</span>X $hUSB_CAN] [<span class=3D"hljs-keyword">f=
ormat</span> %<span class=3D"hljs-number">02</span>X $pipeNum]
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> USB_CAN=
_ResetDevice</span> {hUSB_CAN} {
    USB_CAN_ResetDevice_C [<span class=3D"hljs-keyword">format</span> %<spa=
n class=3D"hljs-number">08</span>X $hUSB_CAN]
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> USB_CAN=
_ReadPipe00</span> {hUSB_CAN setupPacket size} {
    <span class=3D"hljs-keyword">global</span> bufferPipe00read
    <span class=3D"hljs-keyword">set</span> status [USB_CAN_ReadPipe00_C [<=
span class=3D"hljs-keyword">format</span> %<span class=3D"hljs-number">08</=
span>X $hUSB_CAN] [<span class=3D"hljs-keyword">format</span> %<span class=
=3D"hljs-number">016</span>X $setupPacket] [<span class=3D"hljs-keyword">fo=
rmat</span> %<span class=3D"hljs-number">08</span>X $size]]
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> USB_CAN=
_WritePipe00</span> {hUSB_CAN setupPacket size} {
    <span class=3D"hljs-keyword">global</span> bufferPipe00write
    <span class=3D"hljs-keyword">set</span> status [USB_CAN_WritePipe00_C [=
<span class=3D"hljs-keyword">format</span> %<span class=3D"hljs-number">08<=
/span>X $hUSB_CAN] [<span class=3D"hljs-keyword">format</span> %<span class=
=3D"hljs-number">016</span>X $setupPacket] [<span class=3D"hljs-keyword">fo=
rmat</span> %<span class=3D"hljs-number">08</span>X $size]]
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> USB_CAN=
_StopTransferPipe00</span> {hUSB_CAN} {
    USB_CAN_StopTransferPipe00_C [<span class=3D"hljs-keyword">format</span=
> %<span class=3D"hljs-number">08</span>X $hUSB_CAN]
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> USB_CAN=
_ReadPipe81</span> {hUSB_CAN} {
    <span class=3D"hljs-keyword">global</span> bufferPipe81read usbConst
    <span class=3D"hljs-keyword">set</span> bufferPipe81read <span class=3D=
"hljs-string">""</span>
    <span class=3D"hljs-keyword">set</span> status [USB_CAN_ReadPipe81_C [<=
span class=3D"hljs-keyword">format</span> %<span class=3D"hljs-number">08</=
span>X $hUSB_CAN] [<span class=3D"hljs-keyword">format</span> %<span class=
=3D"hljs-number">08</span>X <span class=3D"hljs-number">64</span>]]
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> USB_CAN=
_StopTransferPipe81</span> {hUSB_CAN} {
    USB_CAN_StopTransferPipe81_C [<span class=3D"hljs-keyword">format</span=
> %<span class=3D"hljs-number">08</span>X $hUSB_CAN]
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> USB_CAN=
_WritePipe02</span> {hUSB_CAN} {
    <span class=3D"hljs-keyword">global</span> bufferPipe02write
    <span class=3D"hljs-keyword">set</span> size [<span class=3D"hljs-keywo=
rd">expr</span> [<span class=3D"hljs-keyword">string</span> length $bufferP=
ipe02write] / <span class=3D"hljs-number">2</span>]
    <span class=3D"hljs-keyword">set</span> status [USB_CAN_WritePipe02_C [=
<span class=3D"hljs-keyword">format</span> %<span class=3D"hljs-number">08<=
/span>X $hUSB_CAN] [<span class=3D"hljs-keyword">format</span> %<span class=
=3D"hljs-number">08</span>X $size]]
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> USB_CAN=
_StopTransferPipe02</span> {hUSB_CAN} {
    USB_CAN_StopTransferPipe02_C [<span class=3D"hljs-keyword">format</span=
> %<span class=3D"hljs-number">08</span>X $hUSB_CAN]
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-comment">#dbgEndSrc [info script]</span>
<span class=3D"hljs-comment">#dbgBeginSrc [info script]</span>
<span class=3D"hljs-keyword">global</span> canProtocol protocol retryPossib=
le
<span class=3D"hljs-keyword">global</span> select_node prog_start prog_data=
 display_data write_command read_command ciError dongle
<span class=3D"hljs-keyword">source</span> $projDir/tcl/protocol/usb/usb_ca=
n_lib.tcl
<span class=3D"hljs-keyword">source</span> $projDir/tcl/protocol/usb/usb_ca=
n_utils.tcl
<span class=3D"hljs-keyword">set</span> canProtocol(id_select_node) <span c=
lass=3D"hljs-number">0000</span>
<span class=3D"hljs-keyword">set</span> canProtocol(id_prog_start) <span cl=
ass=3D"hljs-number">0001</span>
<span class=3D"hljs-keyword">set</span> canProtocol(id_prog_data) <span cla=
ss=3D"hljs-number">0002</span>
<span class=3D"hljs-keyword">set</span> canProtocol(id_display_data) <span =
class=3D"hljs-number">0003</span>
<span class=3D"hljs-keyword">set</span> canProtocol(id_write_command) <span=
 class=3D"hljs-number">0004</span>
<span class=3D"hljs-keyword">set</span> canProtocol(id_read_command) <span =
class=3D"hljs-number">0005</span>
<span class=3D"hljs-keyword">set</span> canProtocol(id_error) <span class=
=3D"hljs-number">0006</span>
<span class=3D"hljs-keyword">set</span> canProtocol(dongle) FFFF
<span class=3D"hljs-comment">#Format command identifier ready to send for a=
ll the frame of atmel protocol</span>
<span class=3D"hljs-keyword">set</span> select_node [<span class=3D"hljs-ke=
yword">format</span> %<span class=3D"hljs-number">04</span>X [<span class=
=3D"hljs-keyword">expr</span> $canProtocol(id_select_node) - <span class=3D=
"hljs-number">0</span>x$::deviceArray(crisConnect)0]]
<span class=3D"hljs-keyword">set</span> prog_start [<span class=3D"hljs-key=
word">format</span> %<span class=3D"hljs-number">04</span>X [<span class=3D=
"hljs-keyword">expr</span> $canProtocol(id_prog_start) - <span class=3D"hlj=
s-number">0</span>x$::deviceArray(crisConnect)0]]
<span class=3D"hljs-keyword">set</span> prog_data [<span class=3D"hljs-keyw=
ord">format</span> %<span class=3D"hljs-number">04</span>X [<span class=3D"=
hljs-keyword">expr</span> $canProtocol(id_prog_data) - <span class=3D"hljs-=
number">0</span>x$::deviceArray(crisConnect)0]]
<span class=3D"hljs-keyword">set</span> display_data [<span class=3D"hljs-k=
eyword">format</span> %<span class=3D"hljs-number">04</span>X [<span class=
=3D"hljs-keyword">expr</span> $canProtocol(id_display_data) - <span class=
=3D"hljs-number">0</span>x$::deviceArray(crisConnect)0]]
<span class=3D"hljs-keyword">set</span> write_command [<span class=3D"hljs-=
keyword">format</span> %<span class=3D"hljs-number">04</span>X [<span class=
=3D"hljs-keyword">expr</span> $canProtocol(id_write_command) - <span class=
=3D"hljs-number">0</span>x$::deviceArray(crisConnect)0]]
<span class=3D"hljs-keyword">set</span> read_command [<span class=3D"hljs-k=
eyword">format</span> %<span class=3D"hljs-number">04</span>X [<span class=
=3D"hljs-keyword">expr</span> $canProtocol(id_read_command) - <span class=
=3D"hljs-number">0</span>x$::deviceArray(crisConnect)0]]
<span class=3D"hljs-keyword">set</span> ciError [<span class=3D"hljs-keywor=
d">format</span> %<span class=3D"hljs-number">04</span>X [<span class=3D"hl=
js-keyword">expr</span> $canProtocol(id_error) - <span class=3D"hljs-number=
">0</span>x$::deviceArray(crisConnect)0]]
<span class=3D"hljs-keyword">set</span> dongle [<span class=3D"hljs-keyword=
">format</span> %<span class=3D"hljs-number">04</span>X <span class=3D"hljs=
-number">0</span>x$canProtocol(dongle)]
<span class=3D"hljs-keyword">if</span> {! [<span class=3D"hljs-keyword">inf=
o</span> exists protocol(frameLengthW)]} then {
    <span class=3D"hljs-keyword">set</span> protocol(frameLengthW) <span cl=
ass=3D"hljs-number">512</span>
    <span class=3D"hljs-keyword">set</span> protocol(frameLengthR) <span cl=
ass=3D"hljs-number">512</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclIni=
tCANinterface</span> {} {
    <span class=3D"hljs-keyword">global</span> canBaud flipStates canProtoc=
ol
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">if</span> {$flipStates(rs232Comm) =3D=3D <=
span class=3D"hljs-string">"on"</span>} then {
	<span class=3D"hljs-keyword">catch</span> [ptclCancelRs232Comm]
    }
    <span class=3D"hljs-keyword">if</span> {$flipStates(canNode) =3D=3D <sp=
an class=3D"hljs-string">"open"</span>} then {
	ptclSelectNode
    }
    <span class=3D"hljs-keyword">if</span> {$flipStates(canComm) =3D=3D <sp=
an class=3D"hljs-string">"on"</span>} then {
	ptclCancelCANComm
    }
    .f_status.l_message configure -bg red -fg yellow -text <span class=3D"h=
ljs-string">"Initializing the CAN interface..."</span>
    <span class=3D"hljs-keyword">update</span> idletasks
    <span class=3D"hljs-keyword">set</span> res [USB_CAN_LocateAndOpenDevic=
e]
    <span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-key=
word">format</span> <span class=3D"hljs-string">"%01d"</span> $res]
<span class=3D"hljs-comment">    #dbgShowInfo "USB status  &gt; $status"</s=
pan>
    <span class=3D"hljs-keyword">if</span> {$status &gt; <span class=3D"hlj=
s-number">0</span>} then {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>1</span>
    }
    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"h=
ljs-number">1</span>} then {
<span class=3D"hljs-comment">	#set dongle parameters </span>
	<span class=3D"hljs-keyword">set</span> CRIS [<span class=3D"hljs-keyword"=
>format</span> %<span class=3D"hljs-number">08</span>X <span class=3D"hljs-=
number">0</span>x$::deviceArray(crisConnect)]
	<span class=3D"hljs-keyword">set</span> bitrate [<span class=3D"hljs-keywo=
rd">format</span> %<span class=3D"hljs-number">04</span>X [<span class=3D"h=
ljs-keyword">string</span> range $canBaud <span class=3D"hljs-number">0</sp=
an> end<span class=3D"hljs-number">-1</span>]]
	<span class=3D"hljs-keyword">set</span> protocol <span class=3D"hljs-strin=
g">"00"</span>
	<span class=3D"hljs-keyword">set</span> status [ptclInitDongle $bitrate $p=
rotocol $CRIS]
    }
    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"h=
ljs-number">0</span>} then {
	init dongle failed
<span class=3D"hljs-comment">	#Close the USB COM</span>
	USB_CAN_Close $hUSB_CAN
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
    .f_status.l_message configure -bg white -fg black
    <span class=3D"hljs-keyword">if</span> {$status=3D=3D<span class=3D"hlj=
s-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> flipStates(canComm) <span class=3D=
"hljs-string">"on"</span>
	log_message <span class=3D"hljs-string">"Select CAN Node..."</span>
    } else {
	<span class=3D"hljs-keyword">set</span> flipStates(canComm) <span class=3D=
"hljs-string">"off"</span>
	log_message <span class=3D"hljs-string">"CAN Init Fail"</span>
    }
    updateGUI onCanCommStatusModified
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclSen=
dFrame</span> {frame} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> bufferPipe02write hUSB_CAN
<span class=3D"hljs-comment">    #reset Pipe 81 </span>
    USB_CAN_ResetPipe $hUSB_CAN <span class=3D"hljs-number">81</span>
<span class=3D"hljs-comment">    #is frame  modulo 64</span>
<span class=3D"hljs-comment">    #we send a dummyData more</span>
<span class=3D"hljs-comment">    #because ZLP is not implemented on Jungo D=
river</span>
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">e=
xpr</span> [<span class=3D"hljs-keyword">string</span> length $frame] % <sp=
an class=3D"hljs-number">64</span>]=3D=3D<span class=3D"hljs-number">0</spa=
n>} then {
	<span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyword=
">append</span> frame <span class=3D"hljs-string">"FF"</span>]
<span class=3D"hljs-comment">	#dbgShowInfo "frame  &gt; $frame"</span>
    }
    <span class=3D"hljs-keyword">set</span> bufferPipe02write $frame
<span class=3D"hljs-comment">    #send the frame on USB line</span>
<span class=3D"hljs-comment">    #dbgShowInfo "hUSB_CAN  &gt; $hUSB_CAN"</s=
pan>
    USB_CAN_WritePipe02 $hUSB_CAN
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $frame
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclGet=
Ack</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> errCode readframe dongle ciE=
rror
    <span class=3D"hljs-keyword">global</span> bufferPipe81read hUSB_CAN
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">0</span>
    <span class=3D"hljs-keyword">set</span> errCode <span class=3D"hljs-num=
ber">0</span>
    <span class=3D"hljs-keyword">while</span> {$status =3D=3D <span class=
=3D"hljs-number">0</span>} {
	<span class=3D"hljs-keyword">set</span> status [USB_CAN_ReadPipe81 $hUSB_C=
AN]
<span class=3D"hljs-comment">	#dbgShowInfo "status  &gt; $status"</span>
	<span class=3D"hljs-keyword">update</span>
    }
    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"h=
ljs-number">-1</span>} then {
<span class=3D"hljs-comment">	#TIME OUT occured!!!!!!!!!!!</span>
	<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-string=
">"Time Out Error."</span>
	cmdsResetProgressBar
	<span class=3D"hljs-keyword">set</span> errCode <span class=3D"hljs-number=
">-10</span>
    }
    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"h=
ljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> readframe $bufferPipe81read
<span class=3D"hljs-comment">	#dbgShowInfo "readframe  &gt; $readframe"</sp=
an>
	<span class=3D"hljs-keyword">set</span> id [<span class=3D"hljs-keyword">s=
tring</span> range $readframe <span class=3D"hljs-number">4</span> <span cl=
ass=3D"hljs-number">7</span>]
<span class=3D"hljs-comment">	#dbgShowInfo "id  &gt; $id"</span>
<span class=3D"hljs-comment">	#dbgShowInfo "ciError  &gt; $ciError"</span>
	<span class=3D"hljs-keyword">if</span> {$id =3D=3D $ciError} then {
<span class=3D"hljs-comment">	    #error message</span>
	    <span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-st=
ring">"Software Security Bit set.\n  Cannot access device data."</span>
	    <span class=3D"hljs-keyword">set</span> errCode <span class=3D"hljs-nu=
mber">-12</span>
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	}
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists message]} then {
	messageBox <span class=3D"hljs-string">"Communication Information"</span> =
<span class=3D"hljs-keyword">error</span> $message
	cmdsResetProgressBar
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclCan=
celCANComm</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]   =
 </span>
    <span class=3D"hljs-keyword">global</span> hUSB_CAN flipStates canProto=
col
    <span class=3D"hljs-keyword">if</span> {$flipStates(canNode) =3D=3D <sp=
an class=3D"hljs-string">"open"</span>} then {
	ptclSelectNode
    }
    <span class=3D"hljs-keyword">if</span> {! $flipStates(simul)} then {
	USB_CAN_Close $hUSB_CAN
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>1</span>
    } else {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>1</span>
    }
    <span class=3D"hljs-keyword">if</span> {$status} then {
	log_message <span class=3D"hljs-string">"CAN interface disabled"</span>
	<span class=3D"hljs-keyword">set</span> flipStates(canComm) <span class=3D=
"hljs-string">"off"</span>
	updateGUI onAnyCommunicationOff
	updateGUI onCanCommStatusModified
	<span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-number">0</spa=
n>} then {
	    <span class=3D"hljs-keyword">if</span> {[winfo exists .main.f_buffer.b=
_memSelect]} then {
		pack forget .main.f_buffer.b_memSelect
	    }
	}
    } else {
	log_message <span class=3D"hljs-string">"Board Cancel Fail"</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">=
1</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclUpd=
ateOrCompareBuffer</span> {addr6digit action} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> readframe
    <span class=3D"hljs-keyword">set</span> addr <span class=3D"hljs-number=
">1</span>
    <span class=3D"hljs-keyword">set</span> len <span class=3D"hljs-number"=
>0</span>x[<span class=3D"hljs-keyword">string</span> range $readframe <spa=
n class=3D"hljs-number">0</span> <span class=3D"hljs-number">3</span>]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">0</span>; <span class=3D"hljs-keywo=
rd">set</span> j <span class=3D"hljs-number">10</span>} {$i &lt; $len} {<sp=
an class=3D"hljs-keyword">incr</span> i; <span class=3D"hljs-keyword">incr<=
/span> j <span class=3D"hljs-number">2</span>} {
	<span class=3D"hljs-keyword">if</span> {$action =3D=3D <span class=3D"hljs=
-string">"update"</span>} then {
	    writeBuffer [<span class=3D"hljs-keyword">format</span> <span class=3D=
"hljs-string">"%06X"</span> [<span class=3D"hljs-keyword">expr</span> $addr=
6digit + $i]] [<span class=3D"hljs-keyword">string</span> range $readframe =
$j [<span class=3D"hljs-keyword">expr</span> $j + <span class=3D"hljs-numbe=
r">1</span>]]
	} else {
	    <span class=3D"hljs-keyword">set</span> addr <span class=3D"hljs-numbe=
r">-1</span>
	    <span class=3D"hljs-keyword">if</span> {[readBuffer [<span class=3D"hl=
js-keyword">format</span> <span class=3D"hljs-string">"%06X"</span> [<span =
class=3D"hljs-keyword">expr</span> $addr6digit + $i]]] !=3D [<span class=3D=
"hljs-keyword">string</span> range $readframe $j [<span class=3D"hljs-keywo=
rd">expr</span> $j + <span class=3D"hljs-number">1</span>]]} then {
		<span class=3D"hljs-keyword">set</span> addr [<span class=3D"hljs-keyword=
">format</span> <span class=3D"hljs-string">"%#06X"</span> [<span class=3D"=
hljs-keyword">expr</span> $addr6digit + $i]]
		<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-strin=
g">"Memory Verify Fail at: $addr"</span>
		log_message $message
		actionsLog_message <span class=3D"hljs-string">"Memory Verify Fail at: $a=
ddr"</span>
		cmdsResetProgressBar
<span class=3D"hljs-comment">		#dbgShowInfo "Verify FAIL."</span>
		<span class=3D"hljs-keyword">break</span>
	    }
	}
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $addr
}
<span class=3D"hljs-comment">#modifications en cours pour l'USB</span>
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclSel=
ectNode</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> flipStates canProtocol readf=
rame
    <span class=3D"hljs-keyword">global</span> dongle select_node canBaud
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">set</span> CRIS [<span class=3D"hljs-keywo=
rd">format</span> %<span class=3D"hljs-number">08</span>X <span class=3D"hl=
js-number">0</span>x$::deviceArray(crisConnect)]
    <span class=3D"hljs-keyword">set</span> bitrate [<span class=3D"hljs-ke=
yword">format</span> %<span class=3D"hljs-number">04</span>X [<span class=
=3D"hljs-keyword">string</span> range $canBaud <span class=3D"hljs-number">=
0</span> end<span class=3D"hljs-number">-1</span>]]
    <span class=3D"hljs-keyword">set</span> protocol <span class=3D"hljs-st=
ring">"00"</span>
    ptclInitDongle $bitrate $protocol $CRIS
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">"0001"</span> $select_=
node <span class=3D"hljs-string">"00"</span> $::deviceArray(nnbConnect)]
<span class=3D"hljs-comment">    #dbgShowInfo "FRAME  &gt; $frame"</span>
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck]
    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"h=
ljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(bootlId) [<span clas=
s=3D"hljs-keyword">string</span> range $readframe <span class=3D"hljs-numbe=
r">10</span> <span class=3D"hljs-number">11</span>]
	<span class=3D"hljs-keyword">set</span> canProtocol(commState) [<span clas=
s=3D"hljs-keyword">string</span> range $readframe <span class=3D"hljs-numbe=
r">12</span> <span class=3D"hljs-number">13</span>]
	<span class=3D"hljs-keyword">if</span> {$canProtocol(commState) =3D=3D <sp=
an class=3D"hljs-string">"01"</span>} then {
	    <span class=3D"hljs-keyword">if</span> {[winfo exists .main.f_buffer.b=
_memSelect]} then {
		pack .main.f_buffer.b_memSelect -side bottom -expand <span class=3D"hljs-=
number">0</span> -pady <span class=3D"hljs-number">17</span>
	    }
	    updateGUI onAnyCommunicationOn
	    updateGUI onCanNodeSelectionOpened
	    log_message <span class=3D"hljs-string">"CAN node $::deviceArray(nnbCo=
nnect) opened."</span>
	} else {
	    <span class=3D"hljs-keyword">if</span> {[winfo exists .main.f_buffer.b=
_memSelect]} then {
		pack forget .main.f_buffer.b_memSelect
	    }
	    updateGUI onAnyCommunicationOff
	    updateGUI onCanNodeSelectionClosed
	    log_message <span class=3D"hljs-string">"CAN node $::deviceArray(nnbCo=
nnect) closed."</span>
	}
    } else {
	<span class=3D"hljs-keyword">set</span> flipStates(anyComm) <span class=3D=
"hljs-string">"off"</span>
	updateGUI onAnyCommunicationOff
	updateGUI onCanNodeSelectionClosed
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclSen=
dIdProgStart</span> {addLo addHi {<span class=3D"hljs-keyword">memory</span=
> <span class=3D"hljs-string">"00"</span>}} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> buffer canProtocol prog_star=
t
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">"0005"</span> $prog_st=
art <span class=3D"hljs-string">"00"</span> $memory [<span class=3D"hljs-ke=
yword">format</span> %<span class=3D"hljs-number">04</span>X <span class=3D=
"hljs-number">0</span>x$addLo] [<span class=3D"hljs-keyword">format</span> =
%<span class=3D"hljs-number">04</span>X <span class=3D"hljs-number">0</span=
>x$addHi]]
<span class=3D"hljs-comment">    #dbgShowInfo "FRAME  &gt; $frame"</span>
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck]
    <span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-key=
word">expr</span> $status=3D=3D<span class=3D"hljs-number">1</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclPro=
gramData</span> {addLo addHi dummyArg} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> temp prog_data readframe don=
gle sendframe
<span class=3D"hljs-comment">    #dbgShowVar "addLo  &gt; $addLo"</span>
<span class=3D"hljs-comment">    #dbgShowVar "addHi  &gt; $addHi"</span>
    <span class=3D"hljs-keyword">set</span> len [<span class=3D"hljs-keywor=
d">format</span> <span class=3D"hljs-string">"%04X"</span> [<span class=3D"=
hljs-keyword">expr</span> $addHi - $addLo + <span class=3D"hljs-number">1</=
span>]]
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame $len $prog_data <span class=3D"hljs-string">"00"</=
span>]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i $addLo} {$i &lt;=3D $addHi} {<span class=3D"hljs-keyword">incr<=
/span> i} {
	<span class=3D"hljs-keyword">set</span> frame ${frame}[readBuffer [<span c=
lass=3D"hljs-keyword">format</span> <span class=3D"hljs-string">"%06X"</spa=
n> $i]]
    }
<span class=3D"hljs-comment">    #dbgShowVar "frame =3D $frame"</span>
<span class=3D"hljs-comment">    #dbgShowInfo "FRAME  &gt; $frame"</span>
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck]
    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"h=
ljs-number">1</span>} then {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> index $readframe end] =3D=3D <span class=3D"hljs-number">0</span>=
} then {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">1</span>
	} elseif {[<span class=3D"hljs-keyword">string</span> index $readframe end=
] =3D=3D <span class=3D"hljs-number">1</span>} {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	} elseif {[<span class=3D"hljs-keyword">string</span> index $readframe end=
] =3D=3D <span class=3D"hljs-number">2</span>} {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">2</span>
	}
    } else {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dBlock</span> {addrLo addrHi {<span class=3D"hljs-keyword">memory</span> <s=
pan class=3D"hljs-string">"00"</span>} {action <span class=3D"hljs-string">=
"update"</span>}} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> display_data protocol readfr=
ame
<span class=3D"hljs-comment">    #Flip asks to read memories by 1024 bytes =
Block</span>
<span class=3D"hljs-comment">    #USB protocol asks to read  memories by 10=
24 bytes Block</span>
    <span class=3D"hljs-keyword">set</span> nbFrame [<span class=3D"hljs-ke=
yword">expr</span> (($addrHi - $addrLo) / $protocol(frameLengthR)) +<span c=
lass=3D"hljs-number">1</span>]
<span class=3D"hljs-comment">    #dbgShowVar "nbFrame $nbFrame"</span>
<span class=3D"hljs-comment">    #initialize the addrLow toread the first F=
rame</span>
    <span class=3D"hljs-keyword">set</span> addrLow $addrLo
    <span class=3D"hljs-keyword">while</span> {$nbFrame &gt;<span class=3D"=
hljs-number">0</span>} {
<span class=3D"hljs-comment">	#find the addrHig</span>
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">expr=
</span> ($addrHi - $addrLow)+<span class=3D"hljs-number">1</span>] &gt; $pr=
otocol(frameLengthR)} then {
	    <span class=3D"hljs-keyword">set</span> addrHig [<span class=3D"hljs-k=
eyword">expr</span> ($addrLow + $protocol(frameLengthR))<span class=3D"hljs=
-number">-1</span>]
	} else {
	    <span class=3D"hljs-keyword">set</span> addrHig $addrHi
	}
<span class=3D"hljs-comment">	#bonne boucle</span>
<span class=3D"hljs-comment">	#initialize the temporary variables</span>
	<span class=3D"hljs-keyword">set</span> tempFrame <span class=3D"hljs-stri=
ng">""</span>
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>1</span>
	<span class=3D"hljs-keyword">set</span> leng <span class=3D"hljs-number">1=
28</span>
	<span class=3D"hljs-keyword">set</span> frame <span class=3D"hljs-string">=
""</span>
	<span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyword=
">append</span> frame <span class=3D"hljs-string">"0005"</span> $display_da=
ta <span class=3D"hljs-string">"00"</span> $memory [<span class=3D"hljs-key=
word">format</span> %<span class=3D"hljs-number">04</span>X $addrLow] [<spa=
n class=3D"hljs-keyword">format</span> %<span class=3D"hljs-number">04</spa=
n>X $addrHig]]
	ptclSendFrame $frame
<span class=3D"hljs-comment">	#Read all the packets</span>
<span class=3D"hljs-comment">	#we read until we have  complete frame</span>
	<span class=3D"hljs-keyword">while</span> {$leng =3D=3D <span class=3D"hlj=
s-number">128</span>} {
	    <span class=3D"hljs-keyword">set</span> status [ptclGetAck]
	    <span class=3D"hljs-keyword">if</span> {$status=3D=3D<span class=3D"hl=
js-number">-1</span>} then {
<span class=3D"hljs-comment">		#time out occured</span>
		<span class=3D"hljs-keyword">set</span> nbFrame <span class=3D"hljs-numbe=
r">0</span>
		<span class=3D"hljs-keyword">break</span>
	    } else {
		<span class=3D"hljs-keyword">set</span> leng [<span class=3D"hljs-keyword=
">string</span> length $readframe]
		<span class=3D"hljs-keyword">append</span> tempFrame $readframe
<span class=3D"hljs-comment">		#dbgShowVar "tempFrame $tempFrame"</span>
	    }
	    <span class=3D"hljs-keyword">update</span>
	}
<span class=3D"hljs-comment">	#bonne boucle	</span>
<span class=3D"hljs-comment">	#set tempFrame in readframe because  readfram=
e </span>
<span class=3D"hljs-comment">	#is used to update Flip buffer</span>
	<span class=3D"hljs-keyword">set</span> readframe $tempFrame
<span class=3D"hljs-comment">	#dbgShowVar "readframe before compare $readfr=
ame"</span>
	<span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"hljs=
-number">1</span>} then {
	    <span class=3D"hljs-keyword">set</span> failAddr [ptclUpdateOrCompareB=
uffer [<span class=3D"hljs-keyword">format</span> <span class=3D"hljs-strin=
g">"%#06X"</span> $addrLow] $action]
	    <span class=3D"hljs-keyword">if</span> {(($failAddr =3D=3D <span class=
=3D"hljs-number">1</span>) &amp;&amp;($action=3D=3D<span class=3D"hljs-stri=
ng">"update"</span>)) ||(($failAddr =3D=3D <span class=3D"hljs-number">-1</=
span>) &amp;&amp;($action=3D=3D<span class=3D"hljs-string">"compare"</span>=
))} then {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">1</span>
	    } else {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
<span class=3D"hljs-comment">		#dbgShowInfo "break flip"</span>
		<span class=3D"hljs-keyword">break</span>
	    }
	}
<span class=3D"hljs-comment">	#the frame asked is correctly read so</span>
<span class=3D"hljs-comment">	#so we initialize the next addrLow</span>
	<span class=3D"hljs-keyword">set</span> addrLow [<span class=3D"hljs-keywo=
rd">expr</span> $addrHig+<span class=3D"hljs-number">1</span>]
	<span class=3D"hljs-keyword">incr</span> nbFrame <span class=3D"hljs-numbe=
r">-1</span>
	<span class=3D"hljs-keyword">update</span>
    }
<span class=3D"hljs-comment">    #Return 1 or 0 if status !=3D1</span>
    <span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-key=
word">expr</span> $status=3D=3D<span class=3D"hljs-number">1</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclBla=
nkCheck</span> {addrLo addrHi {<span class=3D"hljs-keyword">memory</span> <=
span class=3D"hljs-string">"01"</span>}} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> readframe display_data dongl=
e
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">"0005"</span> $display=
_data <span class=3D"hljs-string">"00"</span> $memory [<span class=3D"hljs-=
keyword">format</span> %<span class=3D"hljs-number">04</span>X <span class=
=3D"hljs-string">"0x$addrLo"</span>] [<span class=3D"hljs-keyword">format</=
span> %<span class=3D"hljs-number">04</span>X <span class=3D"hljs-string">"=
0x$addrHi"</span>]]
<span class=3D"hljs-comment">    #dbgShowVar "assembled frame: $frame"</spa=
n>
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck]
    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"h=
ljs-number">0</span> || $status=3D=3D<span class=3D"hljs-number">-1</span>}=
 then {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>-2</span>
    }
    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"h=
ljs-number">1</span>} then {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> length $readframe] =3D=3D <span class=3D"hljs-number">14</span>} =
then {
	    <span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-ke=
yword">string</span> range $readframe end<span class=3D"hljs-number">-3</sp=
an> end]
	} else {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">-1</span>
	}
    }
<span class=3D"hljs-comment">    #dbgShowVar "status $status"</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclEra=
seBlock0</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> write_command
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">"0002"</span> $write_c=
ommand <span class=3D"hljs-string">"000000"</span>]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck]
    <span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-key=
word">expr</span> $status=3D=3D<span class=3D"hljs-number">1</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclEra=
seBlock1</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> write_command
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">"0002"</span> $write_c=
ommand <span class=3D"hljs-string">"000020"</span>]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck]
    <span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-key=
word">expr</span> $status=3D=3D<span class=3D"hljs-number">1</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclEra=
seBlock2</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> write_command
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">"0002"</span> $write_c=
ommand <span class=3D"hljs-string">"000040"</span>]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck]
    <span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-key=
word">expr</span> $status=3D=3D<span class=3D"hljs-number">1</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclFul=
lChipErase</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> write_command
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">"0002"</span> $write_c=
ommand <span class=3D"hljs-string">"0000FF"</span>]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck]
    <span class=3D"hljs-keyword">set</span> loadConfig(programDevice) <span=
 class=3D"hljs-string">"setupProgramDevice"</span>
    <span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-key=
word">expr</span> $status=3D=3D<span class=3D"hljs-number">1</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teBSB</span> {data} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> write_command
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">"0003"</span> $write_c=
ommand <span class=3D"hljs-string">"000100"</span> $data]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck]
    <span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-key=
word">expr</span> $status=3D=3D<span class=3D"hljs-number">1</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teSBV</span> {data} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> write_command
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">"0003"</span> $write_c=
ommand <span class=3D"hljs-string">"000101"</span> $data]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck]
    <span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-key=
word">expr</span> $status=3D=3D<span class=3D"hljs-number">1</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclPro=
gSSBlev1</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> write_command
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">"0003"</span> $write_c=
ommand <span class=3D"hljs-string">"000105FE"</span>]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck]
    <span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-key=
word">expr</span> $status=3D=3D<span class=3D"hljs-number">1</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclPro=
gSSBlev2</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> write_command
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">"0003"</span> $write_c=
ommand <span class=3D"hljs-string">"000105FC"</span>]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck]
    <span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-key=
word">expr</span> $status=3D=3D<span class=3D"hljs-number">1</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teEB</span> {data} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> write_command
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">"0003"</span> $write_c=
ommand <span class=3D"hljs-string">"000106"</span> $data]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck]
    <span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-key=
word">expr</span> $status=3D=3D<span class=3D"hljs-number">1</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teBTC1</span> {data} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> write_command
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">"0003"</span> $write_c=
ommand <span class=3D"hljs-string">"00011C"</span> $data]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck]
    <span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-key=
word">expr</span> $status=3D=3D<span class=3D"hljs-number">1</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teBTC2</span> {data} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> write_command
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">"0003"</span> $write_c=
ommand <span class=3D"hljs-string">"00011D"</span> $data]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck]
    <span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-key=
word">expr</span> $status=3D=3D<span class=3D"hljs-number">1</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teBTC3</span> {data} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> write_command
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">"0003"</span> $write_c=
ommand <span class=3D"hljs-string">"00011E"</span> $data]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck]
    <span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-key=
word">expr</span> $status=3D=3D<span class=3D"hljs-number">1</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teNNB</span> {data} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> write_command
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">"0003"</span> $write_c=
ommand <span class=3D"hljs-string">"00011F"</span> $data]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck]
    <span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-key=
word">expr</span> $status=3D=3D<span class=3D"hljs-number">1</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teCRIS</span> {data} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> write_command
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">"0003"</span> $write_c=
ommand <span class=3D"hljs-string">"000120"</span> $data]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck]
    <span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-key=
word">expr</span> $status=3D=3D<span class=3D"hljs-number">1</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teHwByte</span> {{data <span class=3D"hljs-string">"X"</span>}} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> write_command
    <span class=3D"hljs-keyword">if</span> {$data =3D=3D <span class=3D"hlj=
s-string">"X"</span>} then {
	<span class=3D"hljs-keyword">set</span> data [<span class=3D"hljs-keyword"=
>format</span> %<span class=3D"hljs-number">02</span>X [<span class=3D"hljs=
-keyword">expr</span> [<span class=3D"hljs-keyword">expr</span> <span class=
=3D"hljs-number">0</span>x$::deviceArray(hsb) &amp; <span class=3D"hljs-num=
ber">0x3F</span>] | [<span class=3D"hljs-keyword">expr</span> <span class=
=3D"hljs-number">0</span>x$::deviceArray(x2Fuse) &lt;&lt; <span class=3D"hl=
js-number">7</span>] | [<span class=3D"hljs-keyword">expr</span> <span clas=
s=3D"hljs-number">0</span>x$::deviceArray(bljbFuse) &lt;&lt; <span class=3D=
"hljs-number">6</span>]]]
    }
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">"0003"</span> $write_c=
ommand <span class=3D"hljs-string">"000200"</span> $data]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck]
    <span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-key=
word">expr</span> $status=3D=3D<span class=3D"hljs-number">1</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teHwReset</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> write_command
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">"0002"</span> $write_c=
ommand <span class=3D"hljs-string">"000300"</span>]
    ptclSendFrame $frame
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teLJMP</span> {address} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> write_command
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">"0004"</span> $write_c=
ommand <span class=3D"hljs-string">"000301"</span> $address]
    ptclSendFrame $frame
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dBootlVer</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> read_command readframe
    <span class=3D"hljs-keyword">set</span> p <span class=3D"hljs-string">"=
bootlVer"</span>
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">"0002"</span> $read_co=
mmand <span class=3D"hljs-string">"000000"</span>]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck]
    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"h=
ljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> c1 [<span class=3D"hljs-keyword">s=
tring</span> index $readframe end<span class=3D"hljs-number">-1</span>]
	<span class=3D"hljs-keyword">set</span> c2 [<span class=3D"hljs-keyword">s=
tring</span> index $readframe end]
	<span class=3D"hljs-keyword">set</span> ::deviceArray($p) <span class=3D"h=
ljs-string">"1.$c1.$c2"</span>
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($p) =3D $::deviceA=
rray($p)" </span>
    } else {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dDevBootId1</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> testFlag read_command readfr=
ame
    <span class=3D"hljs-keyword">set</span> p <span class=3D"hljs-string">"=
deviceBootId1"</span>
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">if</span> {$testFlag(readDevBootId1)} then=
 {
	<span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyword=
">append</span> frame <span class=3D"hljs-string">"0002"</span> $read_comma=
nd <span class=3D"hljs-string">"000001"</span>]
	ptclSendFrame $frame
	<span class=3D"hljs-keyword">set</span> status [ptclGetAck]
	<span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"hljs=
-number">1</span>} then {
	    <span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=
=3D"hljs-keyword">string</span> range $readframe end<span class=3D"hljs-num=
ber">-1</span> end]
<span class=3D"hljs-comment">	    #dbgShowVar "::deviceArray($p) =3D $::dev=
iceArray($p)"</span>
	} else {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	}
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dDevBootId2</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> testFlag read_command readfr=
ame
    <span class=3D"hljs-keyword">set</span> p <span class=3D"hljs-string">"=
deviceBootId2"</span>
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">if</span> {$testFlag(readDevBootId2)} then=
 {
	<span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyword=
">append</span> frame <span class=3D"hljs-string">"0002"</span> $read_comma=
nd <span class=3D"hljs-string">"000002"</span>]
	ptclSendFrame $frame
	<span class=3D"hljs-keyword">set</span> status [ptclGetAck]
	<span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"hljs=
-number">1</span>} then {
	    <span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=
=3D"hljs-keyword">string</span> range $readframe end<span class=3D"hljs-num=
ber">-1</span> end]
<span class=3D"hljs-comment">	    #dbgShowVar "::deviceArray($p) =3D $::dev=
iceArray($p)"</span>
	} else {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	}
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dBSB</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> read_command readframe
    <span class=3D"hljs-keyword">set</span> p <span class=3D"hljs-string">"=
bsb"</span>
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">"0002"</span> $read_co=
mmand <span class=3D"hljs-string">"000100"</span>]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck]
    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"h=
ljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=3D"=
hljs-keyword">string</span> range $readframe end<span class=3D"hljs-number"=
>-1</span> end]
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($p) =3D $::deviceA=
rray($p)"</span>
    } else {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dSBV</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> read_command readframe
    <span class=3D"hljs-keyword">set</span> p <span class=3D"hljs-string">"=
sbv"</span>
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">"0002"</span> $read_co=
mmand <span class=3D"hljs-string">"000101"</span>]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck]
    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"h=
ljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=3D"=
hljs-keyword">string</span> range $readframe end<span class=3D"hljs-number"=
>-1</span> end]
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($p) =3D $::deviceA=
rray($p)"</span>
    } else {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dSSB</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> expAnsw read_command readfra=
me
    <span class=3D"hljs-keyword">set</span> p <span class=3D"hljs-string">"=
ssb"</span>
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">"0002"</span> $read_co=
mmand <span class=3D"hljs-string">"000105"</span>]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck]
    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"h=
ljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=3D"=
hljs-keyword">string</span> range $readframe end<span class=3D"hljs-number"=
>-1</span> end]
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($p) =3D $::deviceA=
rray($p)"</span>
	<span class=3D"hljs-keyword">set</span> ::deviceArray(level) X
	<span class=3D"hljs-keyword">foreach</span> lev {<span class=3D"hljs-numbe=
r">0</span> <span class=3D"hljs-number">1</span> <span class=3D"hljs-number=
">2</span>} {
	    <span class=3D"hljs-keyword">foreach</span> i $expAnsw(readSSBlev$lev)=
 {
		<span class=3D"hljs-keyword">if</span> {$::deviceArray(ssb) =3D=3D $i} th=
en {
		    <span class=3D"hljs-keyword">set</span> ::deviceArray(level) $lev
		}
	    }
	}
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray(level) =3D $::devi=
ceArray(level)"</span>
    } else {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dEB</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> read_command readframe
    <span class=3D"hljs-keyword">set</span> p <span class=3D"hljs-string">"=
eb"</span>
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">"0002"</span> $read_co=
mmand <span class=3D"hljs-string">"000106"</span>]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck]
    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"h=
ljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=3D"=
hljs-keyword">string</span> range $readframe end<span class=3D"hljs-number"=
>-1</span> end]
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($p) =3D $::deviceA=
rray($p)"</span>
    } else {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dManufId</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> read_command readframe
    <span class=3D"hljs-keyword">set</span> p <span class=3D"hljs-string">"=
manufId"</span>
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">"0002"</span> $read_co=
mmand <span class=3D"hljs-string">"000130"</span>]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck]
    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"h=
ljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=3D"=
hljs-keyword">string</span> range $readframe end<span class=3D"hljs-number"=
>-1</span> end]
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($p) =3D $::deviceA=
rray($p)"</span>
    } else {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dDeviceId1</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> read_command readframe
    <span class=3D"hljs-keyword">set</span> p <span class=3D"hljs-string">"=
deviceId1"</span>
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">"0002"</span> $read_co=
mmand <span class=3D"hljs-string">"000131"</span>]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck]
    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"h=
ljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=3D"=
hljs-keyword">string</span> range $readframe end<span class=3D"hljs-number"=
>-1</span> end]
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($p) =3D $::deviceA=
rray($p)"</span>
    } else {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dDeviceId2</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> read_command readframe
    <span class=3D"hljs-keyword">set</span> p <span class=3D"hljs-string">"=
deviceId2"</span>
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">"0002"</span> $read_co=
mmand <span class=3D"hljs-string">"000160"</span>]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck]
    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"h=
ljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=3D"=
hljs-keyword">string</span> range $readframe end<span class=3D"hljs-number"=
>-1</span> end]
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($p) =3D $::deviceA=
rray($p)"</span>
    } else {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dDeviceId3</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> read_command readframe
    <span class=3D"hljs-keyword">set</span> p <span class=3D"hljs-string">"=
deviceId3"</span>
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">"0002"</span> $read_co=
mmand <span class=3D"hljs-string">"000161"</span>]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck]
    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"h=
ljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=3D"=
hljs-keyword">string</span> range $readframe end<span class=3D"hljs-number"=
>-1</span> end]
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($p) =3D $::deviceA=
rray($p)"</span>
    } else {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dBTC1</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> read_command readframe
    <span class=3D"hljs-keyword">set</span> p <span class=3D"hljs-string">"=
btc1"</span>
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">"0002"</span> $read_co=
mmand <span class=3D"hljs-string">"00011C"</span>]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck]
    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"h=
ljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=3D"=
hljs-keyword">string</span> range $readframe end<span class=3D"hljs-number"=
>-1</span> end]
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($p) =3D $::deviceA=
rray($p)"</span>
    } else {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dBTC2</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> read_command readframe
    <span class=3D"hljs-keyword">set</span> p <span class=3D"hljs-string">"=
btc2"</span>
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">"0002"</span> $read_co=
mmand <span class=3D"hljs-string">"00011D"</span>]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck]
    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"h=
ljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=3D"=
hljs-keyword">string</span> range $readframe end<span class=3D"hljs-number"=
>-1</span> end]
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($p) =3D $::deviceA=
rray($p)"</span>
    } else {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dBTC3</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> read_command readframe
    <span class=3D"hljs-keyword">set</span> p <span class=3D"hljs-string">"=
btc3"</span>
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">"0002"</span> $read_co=
mmand <span class=3D"hljs-string">"00011E"</span>]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck]
    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"h=
ljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=3D"=
hljs-keyword">string</span> range $readframe end<span class=3D"hljs-number"=
>-1</span> end]
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($p) =3D $::deviceA=
rray($p)"</span>
    } else {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dNNB</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> read_command readframe
    <span class=3D"hljs-keyword">set</span> p <span class=3D"hljs-string">"=
nnbProg"</span>
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">"0002"</span> $read_co=
mmand <span class=3D"hljs-string">"00011F"</span>]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck]
    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"h=
ljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=3D"=
hljs-keyword">string</span> range $readframe end<span class=3D"hljs-number"=
>-1</span> end]
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($p) =3D $::deviceA=
rray($p)"</span>
    } else {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dCRIS</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> read_command readframe
    <span class=3D"hljs-keyword">set</span> p crisProg
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">"0002"</span> $read_co=
mmand <span class=3D"hljs-string">"000120"</span>]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck]
    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"h=
ljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=3D"=
hljs-keyword">string</span> range $readframe end<span class=3D"hljs-number"=
>-1</span> end]
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($p) =3D $::deviceA=
rray($p)"</span>
    } else {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dHwByte</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> read_command readframe
    <span class=3D"hljs-keyword">set</span> p <span class=3D"hljs-string">"=
hsb"</span>
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">"0002"</span> $read_co=
mmand <span class=3D"hljs-string">"000200"</span>]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck]
    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"h=
ljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray($p) [<span class=3D"=
hljs-keyword">string</span> range $readframe end<span class=3D"hljs-number"=
>-1</span> end]
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($p) =3D $::deviceA=
rray($p)"</span>
	<span class=3D"hljs-keyword">set</span> ::deviceArray(x2Fuse) [<span class=
=3D"hljs-keyword">expr</span> (<span class=3D"hljs-number">0</span>x$::devi=
ceArray(hsb) | <span class=3D"hljs-number">0x7F</span>) &gt;&gt; <span clas=
s=3D"hljs-number">7</span>]
	<span class=3D"hljs-keyword">set</span> ::deviceArray(bljbFuse) [<span cla=
ss=3D"hljs-keyword">expr</span> ((<span class=3D"hljs-number">0</span>x$::d=
eviceArray(hsb) | <span class=3D"hljs-number">0xBF</span>) &amp; <span clas=
s=3D"hljs-number">0x7F</span>) &gt;&gt; <span class=3D"hljs-number">6</span=
>]
    } else {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRes=
et</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> dongle
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">"0000"</span> $dongle =
<span class=3D"hljs-string">"01"</span>]
    ptclSendFrame $frame
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclIni=
tDongle</span> {bitrate protocol CRIS} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> readframe dongle
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">"0007"</span> $dongle =
<span class=3D"hljs-string">"02"</span> $bitrate $protocol $CRIS]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck]
    <span class=3D"hljs-keyword">if</span> {$status=3D=3D<span class=3D"hlj=
s-number">1</span>} then {
	log_message <span class=3D"hljs-string">"Dongle initialized"</span>
	log_message <span class=3D"hljs-string">"File &gt; Load..."</span>
    } else {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
	log_message <span class=3D"hljs-string">"Dongle Initialization Failed"</sp=
an>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclSta=
rtBootloader</span> {num_chip} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> dongle
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">set</span> frame [<span class=3D"hljs-keyw=
ord">append</span> frame <span class=3D"hljs-string">"0001"</span> $dongle =
<span class=3D"hljs-string">"03"</span> $num_chip]
    ptclSendFrame $frame
    <span class=3D"hljs-keyword">set</span> status [ptclGetAck]
    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"h=
ljs-number">1</span>} then {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> range $readframe <span class=3D"hljs-number">9</span> <span class=
=3D"hljs-number">10</span>] =3D=3D $num_chip} then {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">1</span>
	} else {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	}
    } else {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclChe=
ckCanEntries</span> {} {
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">if</span> {! [isValidHexaInput $::deviceAr=
ray(nnbProg)]} then {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
    <span class=3D"hljs-keyword">if</span> {! [isValidHexaInput $::deviceAr=
ray(crisProg)]} then {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
    <span class=3D"hljs-keyword">if</span> {! [isValidHexaInput $::deviceAr=
ray(btc1)]} then {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
    <span class=3D"hljs-keyword">if</span> {! [isValidHexaInput $::deviceAr=
ray(btc2)]} then {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
    <span class=3D"hljs-keyword">if</span> {! [isValidHexaInput $::deviceAr=
ray(btc3)]} then {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dCanConfig</span> {} {
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">0</span>
    <span class=3D"hljs-keyword">while</span> {<span class=3D"hljs-number">=
1</span>} {
	<span class=3D"hljs-keyword">if</span> {! [ptclReadNNB]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">if</span> {! [ptclReadCRIS]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">if</span> {! [ptclReadBTC1]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">if</span> {! [ptclReadBTC2]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">if</span> {! [ptclReadBTC3]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>1</span>
	<span class=3D"hljs-keyword">break</span>
    }
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclSet=
CanConfig</span> {} {
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">0</span>
    <span class=3D"hljs-keyword">while</span> {<span class=3D"hljs-number">=
1</span>} {
	<span class=3D"hljs-keyword">if</span> {! [ptclCheckCanEntries]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">if</span> {! [ptclWriteNNB $::deviceArray(nnb=
Prog)]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">if</span> {! [ptclWriteCRIS $::deviceArray(cr=
isProg)]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">if</span> {! [ptclWriteBTC1 $::deviceArray(bt=
c1)]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">if</span> {! [ptclWriteBTC2 $::deviceArray(bt=
c2)]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">if</span> {! [ptclWriteBTC3 $::deviceArray(bt=
c3)]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>1</span>
	<span class=3D"hljs-keyword">break</span>
    }
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclSta=
rtAppli</span> {reset} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">if</span> {$reset} then {
	<span class=3D"hljs-keyword">set</span> status [ptclWriteHwReset]
    } else {
	<span class=3D"hljs-keyword">set</span> status [ptclWriteLJMP <span class=
=3D"hljs-number">0000</span>]
    }
    updateGUI onAnyCommunicationOff
    updateGUI onCanNodeSelectionClosed
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-comment">#dbgEndSrc [info script]</span>
<span class=3D"hljs-comment">#dbgBeginSrc [info script]</span>
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> USB_CAN=
_LocateAndOpenDevice</span> {} {
    <span class=3D"hljs-keyword">global</span> hUSB_CAN
    <span class=3D"hljs-keyword">set</span> hUSB_CAN [USB_CAN_LocateAndOpen=
Device_C]
    <span class=3D"hljs-keyword">return</span> $hUSB_CAN
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> listPro=
cs</span> {} {
    <span class=3D"hljs-keyword">foreach</span> P [<span class=3D"hljs-keyw=
ord">info</span> procs USB*] {
	<span class=3D"hljs-keyword">puts</span> <span class=3D"hljs-string">"$P\t=
\t[info args $P]"</span>
    }
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-comment">#dbgEndSrc [info script]</span>
<span class=3D"hljs-comment">#dbgBeginSrc [info script]</span>
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> USB_DFU=
_Close</span> {hUSB_DFU} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">if</span> {$hUSB_DFU &gt; <span class=3D"h=
ljs-number">0</span>} then {
	USB_DFU_Close_C [<span class=3D"hljs-keyword">format</span> %<span class=
=3D"hljs-number">08</span>X $hUSB_DFU]
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> USB_DFU=
_ResetPipe</span> {hUSB_DFU pipeNum} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">if</span> {$hUSB_DFU &gt; <span class=3D"h=
ljs-number">0</span>} then {
	USB_DFU_ResetPipe_C [<span class=3D"hljs-keyword">format</span> %<span cla=
ss=3D"hljs-number">08</span>X $hUSB_DFU] [<span class=3D"hljs-keyword">form=
at</span> %<span class=3D"hljs-number">02</span>X $pipeNum]
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> USB_DFU=
_ResetDevice</span> {hUSB_DFU} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">if</span> {$hUSB_DFU &gt; <span class=3D"h=
ljs-number">0</span>} then {
	USB_DFU_ResetDevice_C [<span class=3D"hljs-keyword">format</span> %<span c=
lass=3D"hljs-number">08</span>X $hUSB_DFU]
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> USB_DFU=
_ReadPipe00</span> {hUSB_DFU setupPacket size} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">if</span> {$hUSB_DFU &gt; <span class=3D"h=
ljs-number">0</span>} then {
	<span class=3D"hljs-keyword">set</span> status [USB_DFU_ReadPipe00_C [<spa=
n class=3D"hljs-keyword">format</span> %<span class=3D"hljs-number">08</spa=
n>X $hUSB_DFU] $setupPacket [<span class=3D"hljs-keyword">format</span> %<s=
pan class=3D"hljs-number">08</span>X $size]]
    } else {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> USB_DFU=
_WritePipe00</span> {hUSB_DFU setupPacket size} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">if</span> {$hUSB_DFU &gt; <span class=3D"h=
ljs-number">0</span>} then {
	<span class=3D"hljs-keyword">set</span> status [USB_DFU_WritePipe00_C [<sp=
an class=3D"hljs-keyword">format</span> %<span class=3D"hljs-number">08</sp=
an>X $hUSB_DFU] $setupPacket [<span class=3D"hljs-keyword">format</span> %<=
span class=3D"hljs-number">08</span>X $size]]
    } else {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> USB_DFU=
_StopTransferPipe00</span> {hUSB_DFU} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">if</span> {$hUSB_DFU &gt; <span class=3D"h=
ljs-number">0</span>} then {
	USB_DFU_StopTransferPipe00_C [<span class=3D"hljs-keyword">format</span> %=
<span class=3D"hljs-number">08</span>X $hUSB_DFU]
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-comment">#dbgBeginSrc [info script]</span>
<span class=3D"hljs-keyword">global</span> protocol dfuRequest projDir hUSB=
_DFU
<span class=3D"hljs-keyword">global</span> bStatus bState bStatusMessage df=
uSuffix
<span class=3D"hljs-keyword">source</span> $projDir/tcl/protocol/usb/usb_df=
u_lib.tcl
<span class=3D"hljs-keyword">source</span> $projDir/tcl/protocol/usb/usb_df=
u_utils.tcl
<span class=3D"hljs-keyword">set</span> dfuRequest(detach) <span class=3D"h=
ljs-string">"2100"</span>
<span class=3D"hljs-keyword">set</span> dfuRequest(dnload) <span class=3D"h=
ljs-string">"2101"</span>
<span class=3D"hljs-keyword">set</span> dfuRequest(upload) <span class=3D"h=
ljs-string">"A102"</span>
<span class=3D"hljs-keyword">set</span> dfuRequest(getStatus) <span class=
=3D"hljs-string">"A103"</span>
<span class=3D"hljs-keyword">set</span> dfuRequest(clrStatus) <span class=
=3D"hljs-string">"2104"</span>
<span class=3D"hljs-keyword">set</span> dfuRequest(getState) <span class=3D=
"hljs-string">"A105"</span>
<span class=3D"hljs-keyword">set</span> dfuRequest(abort) <span class=3D"hl=
js-string">"2106"</span>
<span class=3D"hljs-keyword">set</span> dfuRequest(interface) <span class=
=3D"hljs-string">"0004"</span>
<span class=3D"hljs-keyword">set</span> dfuRequest(pipe0Length) <span class=
=3D"hljs-number">32</span>
<span class=3D"hljs-keyword">set</span> dfuRequest(wBlockMax) <span class=
=3D"hljs-number">0xFFFF</span>
<span class=3D"hljs-keyword">set</span> dfuRequest(wBlock) $dfuRequest(wBlo=
ckMax)
<span class=3D"hljs-keyword">set</span> dfuSuffix(dwCRC) <span class=3D"hlj=
s-string">"00000000"</span>
<span class=3D"hljs-keyword">set</span> dfuSuffix(bLength) <span class=3D"h=
ljs-string">"00"</span>
<span class=3D"hljs-keyword">set</span> dfuSuffix(ucDfuSignature) <span cla=
ss=3D"hljs-string">"000000"</span>
<span class=3D"hljs-keyword">set</span> dfuSuffix(bcdDFU) <span class=3D"hl=
js-string">"0000"</span>
<span class=3D"hljs-keyword">set</span> dfuSuffix(idVendor) <span class=3D"=
hljs-string">"0000"</span>
<span class=3D"hljs-keyword">set</span> dfuSuffix(idProduct) <span class=3D=
"hljs-string">"0000"</span>
<span class=3D"hljs-keyword">set</span> dfuSuffix(bcdDevice) <span class=3D=
"hljs-string">"0000"</span>
<span class=3D"hljs-keyword">set</span> protocol(frameLengthW) <span class=
=3D"hljs-number">2048</span>
<span class=3D"hljs-keyword">set</span> protocol(frameLengthR) <span class=
=3D"hljs-number">2048</span>
<span class=3D"hljs-keyword">set</span> protocol(blankCheck) <span class=3D=
"hljs-string">"0301"</span>
<span class=3D"hljs-keyword">set</span> protocol(progStart) <span class=3D"=
hljs-string">"01MMYYYYZZZZ"</span>
<span class=3D"hljs-keyword">set</span> protocol(displayData) <span class=
=3D"hljs-string">"03MMYYYYZZZZ"</span>
<span class=3D"hljs-keyword">set</span> protocol(eraseBlock0) <span class=
=3D"hljs-string">"040000"</span>
<span class=3D"hljs-keyword">set</span> protocol(eraseBlock1) <span class=
=3D"hljs-string">"040020"</span>
<span class=3D"hljs-keyword">set</span> protocol(eraseBlock2) <span class=
=3D"hljs-string">"040040"</span>
<span class=3D"hljs-keyword">set</span> protocol(eraseBlock3) <span class=
=3D"hljs-string">"040080"</span>
<span class=3D"hljs-keyword">set</span> protocol(eraseBlock4) <span class=
=3D"hljs-string">"0400C0"</span>
<span class=3D"hljs-keyword">set</span> protocol(fullErase) <span class=3D"=
hljs-string">"0400FF"</span>
<span class=3D"hljs-keyword">set</span> protocol(writeBSB) <span class=3D"h=
ljs-string">"040100"</span>
<span class=3D"hljs-keyword">set</span> protocol(writeSBV) <span class=3D"h=
ljs-string">"040101"</span>
<span class=3D"hljs-keyword">set</span> protocol(writeP1) <span class=3D"hl=
js-string">"040102"</span>
<span class=3D"hljs-keyword">set</span> protocol(writeP3) <span class=3D"hl=
js-string">"040103"</span>
<span class=3D"hljs-keyword">set</span> protocol(writeP4) <span class=3D"hl=
js-string">"040104"</span>
<span class=3D"hljs-keyword">set</span> protocol(writeSSB) <span class=3D"h=
ljs-string">"040105"</span>
<span class=3D"hljs-keyword">set</span> protocol(writeEB) <span class=3D"hl=
js-string">"040106"</span>
<span class=3D"hljs-keyword">set</span> protocol(writeHWB) <span class=3D"h=
ljs-string">"040200"</span>
<span class=3D"hljs-keyword">set</span> protocol(hwReset) <span class=3D"hl=
js-string">"040300"</span>
<span class=3D"hljs-keyword">set</span> protocol(ljmpAddress) <span class=
=3D"hljs-string">"040301"</span>
<span class=3D"hljs-keyword">set</span> protocol(readBootlVer) <span class=
=3D"hljs-string">"050000"</span>
<span class=3D"hljs-keyword">set</span> protocol(readBootId1) <span class=
=3D"hljs-string">"050001"</span>
<span class=3D"hljs-keyword">set</span> protocol(readBootId2) <span class=
=3D"hljs-string">"050002"</span>
<span class=3D"hljs-keyword">set</span> protocol(readBSB) <span class=3D"hl=
js-string">"050100"</span>
<span class=3D"hljs-keyword">set</span> protocol(readSBV) <span class=3D"hl=
js-string">"050101"</span>
<span class=3D"hljs-keyword">set</span> protocol(readP1) <span class=3D"hlj=
s-string">"050102"</span>
<span class=3D"hljs-keyword">set</span> protocol(readP3) <span class=3D"hlj=
s-string">"050103"</span>
<span class=3D"hljs-keyword">set</span> protocol(readP4) <span class=3D"hlj=
s-string">"050104"</span>
<span class=3D"hljs-keyword">set</span> protocol(readSSB) <span class=3D"hl=
js-string">"050105"</span>
<span class=3D"hljs-keyword">set</span> protocol(readEB) <span class=3D"hlj=
s-string">"050106"</span>
<span class=3D"hljs-keyword">set</span> protocol(readManufId) <span class=
=3D"hljs-string">"050130"</span>
<span class=3D"hljs-keyword">set</span> protocol(readDevId1) <span class=3D=
"hljs-string">"050131"</span>
<span class=3D"hljs-keyword">set</span> protocol(readDevId2) <span class=3D=
"hljs-string">"050160"</span>
<span class=3D"hljs-keyword">set</span> protocol(readDevId3) <span class=3D=
"hljs-string">"050161"</span>
<span class=3D"hljs-keyword">set</span> protocol(readHSB) <span class=3D"hl=
js-string">"050200"</span>
<span class=3D"hljs-keyword">set</span> bStatus(OK) <span class=3D"hljs-num=
ber">0x00</span>
<span class=3D"hljs-keyword">set</span> bStatus(errTARGET) <span class=3D"h=
ljs-number">0x01</span>
<span class=3D"hljs-keyword">set</span> bStatus(errFILE) <span class=3D"hlj=
s-number">0x02</span>
<span class=3D"hljs-keyword">set</span> bStatus(errWRITE) <span class=3D"hl=
js-number">0x03</span>
<span class=3D"hljs-keyword">set</span> bStatus(errERASE) <span class=3D"hl=
js-number">0x04</span>
<span class=3D"hljs-keyword">set</span> bStatus(errCHECK_ERASED) <span clas=
s=3D"hljs-number">0x05</span>
<span class=3D"hljs-keyword">set</span> bStatus(errPROG) <span class=3D"hlj=
s-number">0x06</span>
<span class=3D"hljs-keyword">set</span> bStatus(errVERIFY) <span class=3D"h=
ljs-number">0x07</span>
<span class=3D"hljs-keyword">set</span> bStatus(errADDRESS) <span class=3D"=
hljs-number">0x08</span>
<span class=3D"hljs-keyword">set</span> bStatus(errNOTDONE) <span class=3D"=
hljs-number">0x09</span>
<span class=3D"hljs-keyword">set</span> bStatus(errFIRMWARE) <span class=3D=
"hljs-number">0x0A</span>
<span class=3D"hljs-keyword">set</span> bStatus(errVENDOR) <span class=3D"h=
ljs-number">0x0B</span>
<span class=3D"hljs-keyword">set</span> bStatus(errUSBR) <span class=3D"hlj=
s-number">0x0C</span>
<span class=3D"hljs-keyword">set</span> bStatus(errPOR) <span class=3D"hljs=
-number">0x0D</span>
<span class=3D"hljs-keyword">set</span> bStatus(errUNKNOWN) <span class=3D"=
hljs-number">0x0E</span>
<span class=3D"hljs-keyword">set</span> bStatus(errSTALLEDPK) <span class=
=3D"hljs-number">0x0F</span>
<span class=3D"hljs-keyword">set</span> bStatus(errTIMEOUT) <span class=3D"=
hljs-number">0x10</span>
<span class=3D"hljs-keyword">set</span> bStatus(errWRITEPIPE0) <span class=
=3D"hljs-number">0x11</span>
<span class=3D"hljs-keyword">set</span> bStatusMessage($bStatus(errTARGET))=
 <span class=3D"hljs-string">"File is not targeted for use by this device."=
</span>
<span class=3D"hljs-keyword">set</span> bStatusMessage($bStatus(errFILE)) <=
span class=3D"hljs-string">"File is for this device, but fails\n  some vend=
or-specific verification test."</span>
<span class=3D"hljs-keyword">set</span> bStatusMessage($bStatus(errWRITE)) =
<span class=3D"hljs-string">"Device is unable to write memory."</span>
<span class=3D"hljs-keyword">set</span> bStatusMessage($bStatus(errERASE)) =
<span class=3D"hljs-string">"Memory erase function failed."</span>
<span class=3D"hljs-keyword">set</span> bStatusMessage($bStatus(errCHECK_ER=
ASED)) <span class=3D"hljs-string">"Memory erase check failed."</span>
<span class=3D"hljs-keyword">set</span> bStatusMessage($bStatus(errPROG)) <=
span class=3D"hljs-string">"Program memory function failed."</span>
<span class=3D"hljs-keyword">set</span> bStatusMessage($bStatus(errVERIFY))=
 <span class=3D"hljs-string">"Programmed memory failed verification."</span=
>
<span class=3D"hljs-keyword">set</span> bStatusMessage($bStatus(errADDRESS)=
) <span class=3D"hljs-string">"Cannot program memory due to received\n addr=
ess which is out of range."</span>
<span class=3D"hljs-keyword">set</span> bStatusMessage($bStatus(errNOTDONE)=
) <span class=3D"hljs-string">"Received DFU_DNLOAD with wLength =3D 0 but\n=
 device does not think it has all the data yet."</span>
<span class=3D"hljs-keyword">set</span> bStatusMessage($bStatus(errFIRMWARE=
)) <span class=3D"hljs-string">"Device's firmware is corrupted.\n It cannot=
 return to run-time operations."</span>
<span class=3D"hljs-keyword">set</span> bStatusMessage($bStatus(errVENDOR))=
 <span class=3D"hljs-string">"iString indicates a vendor-specific error."</=
span>
<span class=3D"hljs-keyword">set</span> bStatusMessage($bStatus(errUSBR)) <=
span class=3D"hljs-string">"Device detected unexpected USB reset signaling.=
"</span>
<span class=3D"hljs-keyword">set</span> bStatusMessage($bStatus(errPOR)) <s=
pan class=3D"hljs-string">"Device detected unexpected power on reset."</spa=
n>
<span class=3D"hljs-keyword">set</span> bStatusMessage($bStatus(errUNKNOWN)=
) <span class=3D"hljs-string">"Something went wrong, but the device\n does =
not know what it was."</span>
<span class=3D"hljs-keyword">set</span> bStatusMessage($bStatus(errSTALLEDP=
K)) <span class=3D"hljs-string">"Device stalled an unexpected request."</sp=
an>
<span class=3D"hljs-keyword">set</span> bStatusMessage($bStatus(errTIMEOUT)=
) <span class=3D"hljs-string">"Time Out error."</span>
<span class=3D"hljs-keyword">set</span> bStatusMessage($bStatus(errWRITEPIP=
E0)) <span class=3D"hljs-string">"Cannot write to the USB device Pipe 0."</=
span>
<span class=3D"hljs-keyword">set</span> bState(appIDLE) <span class=3D"hljs=
-number">0x00</span>
<span class=3D"hljs-keyword">set</span> bState(appDETACH) <span class=3D"hl=
js-number">0x01</span>
<span class=3D"hljs-keyword">set</span> bState(dfuIDLE) <span class=3D"hljs=
-number">0x02</span>
<span class=3D"hljs-keyword">set</span> bState(dfuDNLOADSYNC) <span class=
=3D"hljs-number">0x03</span>
<span class=3D"hljs-keyword">set</span> bState(dfuDNBUSY) <span class=3D"hl=
js-number">0x04</span>
<span class=3D"hljs-keyword">set</span> bState(dfuDNLOADIDLE) <span class=
=3D"hljs-number">0x05</span>
<span class=3D"hljs-keyword">set</span> bState(dfuMANIFESTSYNC) <span class=
=3D"hljs-number">0x06</span>
<span class=3D"hljs-keyword">set</span> bState(dfuMANIFEST) <span class=3D"=
hljs-number">0x07</span>
<span class=3D"hljs-keyword">set</span> bState(dfuMANIFESTWAITRESET) <span =
class=3D"hljs-number">0x08</span>
<span class=3D"hljs-keyword">set</span> bState(dfuUPLOADIDLE) <span class=
=3D"hljs-number">0x09</span>
<span class=3D"hljs-keyword">set</span> bState(dfuERROR) <span class=3D"hlj=
s-number">0x0A</span>
<span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keyword">=
eval</span> ::USB_DFU_SETUP:: {
    <span class=3D"hljs-keyword">variable</span> frame <span class=3D"hljs-=
string">""</span>
    <span class=3D"hljs-keyword">variable</span> frameMaxLength <span class=
=3D"hljs-number">1024</span>
    <span class=3D"hljs-keyword">namespace</span> export fclear fappend
}
<span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keyword">=
eval</span> ::USB_DFU_OUT:: {
    <span class=3D"hljs-keyword">variable</span> frame <span class=3D"hljs-=
string">""</span>
    <span class=3D"hljs-keyword">variable</span> frameMaxLength <span class=
=3D"hljs-number">1024</span>
    <span class=3D"hljs-keyword">namespace</span> export fclear fappend
}
<span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keyword">=
eval</span> ::USB_DFU_IN:: {
    <span class=3D"hljs-keyword">variable</span> frame <span class=3D"hljs-=
string">""</span>
    <span class=3D"hljs-keyword">variable</span> frameMaxLength <span class=
=3D"hljs-number">1024</span>
    <span class=3D"hljs-keyword">namespace</span> export fclear fappend
}
<span class=3D"hljs-keyword">foreach</span> NMSP {USB_DFU_SETUP USB_DFU_OUT=
 USB_DFU_IN} {
    <span class=3D"hljs-keyword">proc</span> ::${NMSP}::fclear {} {
<span class=3D"hljs-comment">	#dbgBeginProc [info level [info level]]</span=
>
	<span class=3D"hljs-keyword">variable</span> frame
	<span class=3D"hljs-keyword">set</span> frame <span class=3D"hljs-string">=
""</span>
<span class=3D"hljs-comment">	#dbgEndProc [info level [info level]]</span>
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">proc</span> ::${NMSP}::fappend {data} {
<span class=3D"hljs-comment">	#dbgBeginProc [info level [info level]]</span=
>
	<span class=3D"hljs-keyword">variable</span> frame
	<span class=3D"hljs-keyword">append</span> frame $data
<span class=3D"hljs-comment">	#dbgEndProc [info level [info level]]</span>
	<span class=3D"hljs-keyword">return</span>
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> decreme=
ntBlockNum</span> {} {
    <span class=3D"hljs-keyword">global</span> dfuRequest
    <span class=3D"hljs-keyword">incr</span> dfuRequest(wBlock) <span class=
=3D"hljs-number">-1</span>
    <span class=3D"hljs-keyword">set</span> dfuRequest(wBlock) [<span class=
=3D"hljs-keyword">expr</span> $dfuRequest(wBlock) % ($dfuRequest(wBlockMax)=
 + <span class=3D"hljs-number">1</span>)]
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclPro=
gramData</span> {addrLo addrHi {<span class=3D"hljs-keyword">memory</span> =
<span class=3D"hljs-string">"00"</span>}} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> dfuRequest dfuSuffix hUSB_DF=
U bStatus
    <span class=3D"hljs-keyword">global</span> bStatusMessage protocol
    <span class=3D"hljs-keyword">set</span> nZeroBytePrefix [<span class=3D=
"hljs-keyword">expr</span> $addrLo % $dfuRequest(pipe0Length)]
    buildSetupPacket dnload [<span class=3D"hljs-keyword">expr</span> $dfuR=
equest(pipe0Length) + $nZeroBytePrefix + $addrHi - $addrLo + <span class=3D=
"hljs-number">1</span> + <span class=3D"hljs-number">16</span>] <span class=
=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::USB_DFU_OUT::frame [<span cla=
ss=3D"hljs-keyword">string</span> replace $protocol(progStart) <span class=
=3D"hljs-number">2</span> <span class=3D"hljs-number">3</span> $memory]
    <span class=3D"hljs-keyword">set</span> ::USB_DFU_OUT::frame [<span cla=
ss=3D"hljs-keyword">string</span> replace $::USB_DFU_OUT::frame <span class=
=3D"hljs-number">4</span> <span class=3D"hljs-number">7</span> [<span class=
=3D"hljs-keyword">format</span> %<span class=3D"hljs-number">04</span>X $ad=
drLo]]
    <span class=3D"hljs-keyword">set</span> ::USB_DFU_OUT::frame [<span cla=
ss=3D"hljs-keyword">string</span> replace $::USB_DFU_OUT::frame <span class=
=3D"hljs-number">8</span> end [<span class=3D"hljs-keyword">format</span> %=
<span class=3D"hljs-number">04</span>X $addrHi]]
    ::USB_DFU_OUT::fappend <span class=3D"hljs-string">"0000000000000000000=
000000000000000000000000000000000"</span>
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D $nZeroBytePre=
fix} {<span class=3D"hljs-keyword">incr</span> i} {
	::USB_DFU_OUT::fappend <span class=3D"hljs-string">"00"</span>
    }
    ::USB_DFU_OUT::fappend [buildUsbDfuOutFrame_C [<span class=3D"hljs-keyw=
ord">format</span> %d $addrLo] [<span class=3D"hljs-keyword">format</span> =
%d $addrHi]]
    <span class=3D"hljs-keyword">foreach</span> field {bcdDevice idProduct =
idVendor bcdDFU ucDfuSignature bLength dwCRC} {
	::USB_DFU_OUT::fappend $dfuSuffix($field)
    }
    <span class=3D"hljs-keyword">set</span> outFrameSize [<span class=3D"hl=
js-keyword">format</span> <span class=3D"hljs-string">"%#010X"</span> [<spa=
n class=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</=
span> length $::USB_DFU_OUT::frame] / <span class=3D"hljs-number">2</span>]=
]
<span class=3D"hljs-comment">    #dbgShowVar "OUT Packet =3D $::USB_DFU_OUT=
::frame"</span>
    USB_DFU_WritePipe00 $hUSB_DFU $::USB_DFU_SETUP::frame $outFrameSize
    <span class=3D"hljs-keyword">set</span> s [getDfuStatus]
    <span class=3D"hljs-keyword">if</span> {$s =3D=3D $bStatus(OK)} then {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>1</span>
    } else {
	messageBox <span class=3D"hljs-string">"USB Status"</span> <span class=3D"=
hljs-keyword">error</span> $bStatusMessage($s)
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dBlock</span> {addrLo addrHi {<span class=3D"hljs-keyword">memory</span> <s=
pan class=3D"hljs-string">"00"</span>} {action <span class=3D"hljs-string">=
"update"</span>}} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> nAddrBits waitTime protocol =
buffer
    <span class=3D"hljs-keyword">global</span> bStatus hUSB_DFU bStatusMess=
age
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    buildSetupPacket dnload [<span class=3D"hljs-keyword">expr</span> [<spa=
n class=3D"hljs-keyword">string</span> length $protocol(displayData)] / <sp=
an class=3D"hljs-number">2</span>] <span class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::USB_DFU_OUT::frame [<span cla=
ss=3D"hljs-keyword">string</span> replace $protocol(displayData) <span clas=
s=3D"hljs-number">2</span> <span class=3D"hljs-number">3</span> $memory]
    <span class=3D"hljs-keyword">set</span> ::USB_DFU_OUT::frame [<span cla=
ss=3D"hljs-keyword">string</span> replace $::USB_DFU_OUT::frame <span class=
=3D"hljs-number">4</span> <span class=3D"hljs-number">7</span> [<span class=
=3D"hljs-keyword">format</span> %<span class=3D"hljs-number">04</span>X $ad=
drLo]]
    <span class=3D"hljs-keyword">set</span> ::USB_DFU_OUT::frame [<span cla=
ss=3D"hljs-keyword">string</span> replace $::USB_DFU_OUT::frame <span class=
=3D"hljs-number">8</span> end [<span class=3D"hljs-keyword">format</span> %=
<span class=3D"hljs-number">04</span>X $addrHi]]
    <span class=3D"hljs-keyword">set</span> outFrameSize [<span class=3D"hl=
js-keyword">format</span> <span class=3D"hljs-string">"%#010X"</span> [<spa=
n class=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</=
span> length $::USB_DFU_OUT::frame] / <span class=3D"hljs-number">2</span>]=
]
<span class=3D"hljs-comment">    #dbgShowVar "OUT Packet =3D $::USB_DFU_OUT=
::frame"</span>
    USB_DFU_WritePipe00 $hUSB_DFU $::USB_DFU_SETUP::frame $outFrameSize
    buildSetupPacket upload [<span class=3D"hljs-keyword">expr</span> $addr=
Hi - $addrLo + <span class=3D"hljs-number">1</span>] <span class=3D"hljs-nu=
mber">0</span>
    ::USB_DFU_IN::fclear
    USB_DFU_ReadPipe00 $hUSB_DFU $::USB_DFU_SETUP::frame [<span class=3D"hl=
js-keyword">format</span> <span class=3D"hljs-string">"%#010X"</span> [<spa=
n class=3D"hljs-keyword">expr</span> $addrHi - $addrLo + <span class=3D"hlj=
s-number">1</span>]]
    <span class=3D"hljs-keyword">set</span> temp $::USB_DFU_IN::frame
    <span class=3D"hljs-keyword">set</span> s [getDfuStatus]
    <span class=3D"hljs-keyword">if</span> {$s =3D=3D $bStatus(OK)} then {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>1</span>
	<span class=3D"hljs-keyword">set</span> addr $addrLo
	<span class=3D"hljs-keyword">if</span> {$action =3D=3D <span class=3D"hljs=
-string">"update"</span>} then {
	    ptclUpdateBuffer $temp $addr
	} else {
	    <span class=3D"hljs-keyword">set</span> usbReadFrameLength [<span clas=
s=3D"hljs-keyword">string</span> length $temp]
	    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">=
set</span> i <span class=3D"hljs-number">0</span>} {$i &lt;=3D [<span class=
=3D"hljs-keyword">expr</span> $usbReadFrameLength - <span class=3D"hljs-num=
ber">1</span>]} {<span class=3D"hljs-keyword">incr</span> i <span class=3D"=
hljs-number">2</span>; <span class=3D"hljs-keyword">incr</span> addr <span =
class=3D"hljs-number">1</span>} {
<span class=3D"hljs-comment">		#dbgShowVar "addr =3D $addr"</span>
		<span class=3D"hljs-keyword">if</span> {[readBuffer [<span class=3D"hljs-=
keyword">format</span> %<span class=3D"hljs-number">06</span>X $addr]] !=3D=
 [<span class=3D"hljs-keyword">string</span> range $temp $i [<span class=3D=
"hljs-keyword">expr</span> $i + <span class=3D"hljs-number">1</span>]]} the=
n {
		    <span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-s=
tring">"Memory Verify Fail at: [format %#06X $addr]"</span>
		    <span class=3D"hljs-keyword">set</span> buffer(verifyFail) [<span cla=
ss=3D"hljs-keyword">format</span> <span class=3D"hljs-string">"%#06X"</span=
> $addr]
		    log_message $message
		    actionsLog_message $message
		    cmdsResetProgressBar
<span class=3D"hljs-comment">		    #dbgShowInfo "Verify FAIL."</span>
		    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-nu=
mber">0</span>
		    <span class=3D"hljs-keyword">break</span>
		} else {
		    <span class=3D"hljs-keyword">set</span> buffer(verifyFail) <span clas=
s=3D"hljs-number">-1</span>
		}
	    }
	}
    } else {
	messageBox <span class=3D"hljs-string">"USB Status"</span> <span class=3D"=
hljs-keyword">error</span> $bStatusMessage($s)
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclUpd=
ateBuffer</span> {frame addr} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> nAddr [<span class=3D"hljs-keyw=
ord">expr</span> [<span class=3D"hljs-keyword">string</span> length $frame]=
 / <span class=3D"hljs-number">2</span>]
    <span class=3D"hljs-keyword">set</span> indexMax [<span class=3D"hljs-k=
eyword">expr</span> [<span class=3D"hljs-keyword">string</span> length $fra=
me] - <span class=3D"hljs-number">1</span>]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">0</span>} {$i &lt; $indexMax} {<spa=
n class=3D"hljs-keyword">incr</span> i <span class=3D"hljs-number">2</span>=
; <span class=3D"hljs-keyword">incr</span> addr <span class=3D"hljs-number"=
>1</span>} {
	writeBuffer [<span class=3D"hljs-keyword">format</span> %<span class=3D"hl=
js-number">06</span>X $addr] [<span class=3D"hljs-keyword">string</span> ra=
nge $frame $i [<span class=3D"hljs-keyword">expr</span> $i + <span class=3D=
"hljs-number">1</span>]]
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclFul=
lChipErase</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> protocol bStatus
    <span class=3D"hljs-keyword">set</span> status [bStatus2Boolean [ptclWr=
iteByte $protocol(fullErase) <span class=3D"hljs-string">""</span> <span cl=
ass=3D"hljs-number">1</span>]]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclEra=
seBlock0</span> {} {
    <span class=3D"hljs-keyword">return</span> [ptclEraseBlock <span class=
=3D"hljs-number">0</span>]
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclEra=
seBlock1</span> {} {
    <span class=3D"hljs-keyword">return</span> [ptclEraseBlock <span class=
=3D"hljs-number">1</span>]
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclEra=
seBlock2</span> {} {
    <span class=3D"hljs-keyword">return</span> [ptclEraseBlock <span class=
=3D"hljs-number">2</span>]
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclEra=
seBlock3</span> {} {
    <span class=3D"hljs-keyword">return</span> [ptclEraseBlock <span class=
=3D"hljs-number">3</span>]
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclEra=
seBlock4</span> {} {
    <span class=3D"hljs-keyword">return</span> [ptclEraseBlock <span class=
=3D"hljs-number">4</span>]
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclEra=
seBlock</span> block {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> protocol bStatus
    <span class=3D"hljs-keyword">set</span> status [bStatus2Boolean [ptclWr=
iteByte $protocol(eraseBlock$block) <span class=3D"hljs-string">""</span> <=
span class=3D"hljs-number">1</span>]]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclBla=
nkCheck</span> {addrLo addrHi} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> protocol bStatus bStatusMess=
age hUSB_DFU
    <span class=3D"hljs-keyword">set</span> status [ptclWriteByte $protocol=
(blankCheck) [<span class=3D"hljs-keyword">format</span> %<span class=3D"hl=
js-number">04</span>X <span class=3D"hljs-string">"0x$addrLo"</span>][<span=
 class=3D"hljs-keyword">format</span> %<span class=3D"hljs-number">04</span=
>X <span class=3D"hljs-string">"0x$addrHi"</span>] <span class=3D"hljs-numb=
er">1</span>]
    <span class=3D"hljs-keyword">if</span> {$status =3D=3D $bStatus(OK)} th=
en {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>-1</span>
    } elseif {$status =3D=3D $bStatus(errCHECK_ERASED)} {
	buildSetupPacket upload <span class=3D"hljs-number">2</span> <span class=
=3D"hljs-number">0</span>
	::USB_DFU_IN::fclear
	USB_DFU_ReadPipe00 $hUSB_DFU $::USB_DFU_SETUP::frame [<span class=3D"hljs-=
keyword">format</span> <span class=3D"hljs-string">"%#010X"</span> <span cl=
ass=3D"hljs-number">2</span>]
	<span class=3D"hljs-keyword">set</span> status $::USB_DFU_IN::frame
    } else {
	messageBox <span class=3D"hljs-string">"USB Status"</span> <span class=3D"=
hljs-keyword">error</span> $bStatusMessage($status)
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>-2</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> bStatus=
2Boolean</span> {bs} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> bStatus bStatusMessage
    <span class=3D"hljs-keyword">if</span> {$bs !=3D $bStatus(OK)} then {
	messageBox <span class=3D"hljs-string">"USB Status"</span> <span class=3D"=
hljs-keyword">error</span> $bStatusMessage($bs)
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    } else {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>1</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclSet=
PortsConfig</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime bootloaderVerDepend=
ent protocol
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">if</span> {$bootloaderVerDependent(p1p3p4_=
config)} then {
	ptclWriteByte $protocol(writeP1) $::deviceArray(p1_config) <span class=3D"=
hljs-number">1</span>
	ptclWriteByte $protocol(writeP3) $::deviceArray(p3_config) <span class=3D"=
hljs-number">1</span>
	ptclWriteByte $protocol(writeP4) $::deviceArray(p4_config) <span class=3D"=
hljs-number">1</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teBSB</span> {data} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> protocol
    <span class=3D"hljs-keyword">set</span> status [bStatus2Boolean [ptclWr=
iteByte $protocol(writeBSB) $data <span class=3D"hljs-number">1</span>]]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teSBV</span> {data} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> protocol
    <span class=3D"hljs-keyword">set</span> status [bStatus2Boolean [ptclWr=
iteByte $protocol(writeSBV) $data <span class=3D"hljs-number">1</span>]]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teSSB</span> {data} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> protocol
    <span class=3D"hljs-keyword">set</span> status [bStatus2Boolean [ptclWr=
iteByte $protocol(writeSSB) $data <span class=3D"hljs-number">1</span>]]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclPro=
gSSBlev1</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclWriteSSB <span clas=
s=3D"hljs-string">"FE"</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclPro=
gSSBlev2</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclWriteSSB <span clas=
s=3D"hljs-string">"FC"</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teEB</span> {data} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> protocol
    <span class=3D"hljs-keyword">set</span> status [bStatus2Boolean [ptclWr=
iteByte $protocol(writeEB) $data <span class=3D"hljs-number">1</span>]]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teHwByte</span> {{data <span class=3D"hljs-string">"X"</span>}} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> protocol
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::deviceArray(oscCtrl)]} then {
	<span class=3D"hljs-keyword">if</span> {$data =3D=3D <span class=3D"hljs-s=
tring">"X"</span>} then {
	    <span class=3D"hljs-keyword">set</span> data [<span class=3D"hljs-keyw=
ord">format</span> %<span class=3D"hljs-number">02</span>X [<span class=3D"=
hljs-keyword">expr</span> [<span class=3D"hljs-keyword">expr</span> <span c=
lass=3D"hljs-number">0</span>x$::deviceArray(hsb) &amp; <span class=3D"hljs=
-number">0x0F</span>] | [<span class=3D"hljs-keyword">expr</span> <span cla=
ss=3D"hljs-number">0</span>x$::deviceArray(x2Fuse) &lt;&lt; <span class=3D"=
hljs-number">7</span>] | [<span class=3D"hljs-keyword">expr</span> <span cl=
ass=3D"hljs-number">0</span>x$::deviceArray(bljbFuse) &lt;&lt; <span class=
=3D"hljs-number">6</span>] | [<span class=3D"hljs-keyword">expr</span> <spa=
n class=3D"hljs-number">0</span>x$::deviceArray(oscCtrl) &lt;&lt; <span cla=
ss=3D"hljs-number">4</span>]]]
	}
    } else {
	<span class=3D"hljs-keyword">if</span> {$data =3D=3D <span class=3D"hljs-s=
tring">"X"</span>} then {
	    <span class=3D"hljs-keyword">catch</span> [<span class=3D"hljs-keyword=
">set</span> data [<span class=3D"hljs-keyword">format</span> %<span class=
=3D"hljs-number">02</span>X [<span class=3D"hljs-keyword">expr</span> [<spa=
n class=3D"hljs-keyword">expr</span> <span class=3D"hljs-number">0</span>x$=
::deviceArray(hsb) &amp; <span class=3D"hljs-number">0x3F</span>] | [<span =
class=3D"hljs-keyword">expr</span> <span class=3D"hljs-number">0</span>x$::=
deviceArray(x2Fuse) &lt;&lt; <span class=3D"hljs-number">7</span>] | [<span=
 class=3D"hljs-keyword">expr</span> <span class=3D"hljs-number">0</span>x$:=
:deviceArray(bljbFuse) &lt;&lt; <span class=3D"hljs-number">6</span>]]]]
	}
    }
    <span class=3D"hljs-keyword">set</span> status [bStatus2Boolean [ptclWr=
iteByte $protocol(writeHWB) $data <span class=3D"hljs-number">1</span>]]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclSta=
rtAppli</span> {{reset <span class=3D"hljs-number">0</span>}} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> protocol
    <span class=3D"hljs-keyword">if</span> {$reset} then {
	<span class=3D"hljs-keyword">set</span> status [bStatus2Boolean [ptclWrite=
Byte $protocol(hwReset) <span class=3D"hljs-string">""</span> <span class=
=3D"hljs-number">0</span>]]
    } else {
	<span class=3D"hljs-keyword">set</span> status [bStatus2Boolean [ptclWrite=
Byte $protocol(ljmpAddress) <span class=3D"hljs-string">"0000"</span> <span=
 class=3D"hljs-number">0</span>]]
	<span class=3D"hljs-keyword">if</span> {$status} then {
	    <span class=3D"hljs-keyword">set</span> status [bStatus2Boolean [ptclW=
riteByte <span class=3D"hljs-string">""</span> <span class=3D"hljs-string">=
""</span> <span class=3D"hljs-number">0</span>]]
	}
    }
    ptclCancelUSBComm
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teByte</span> {command {data <span class=3D"hljs-string">""</span>} getStat=
us} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> hUSB_DFU bStatus
    <span class=3D"hljs-keyword">set</span> stream $command
    <span class=3D"hljs-keyword">append</span> stream $data
    buildSetupPacket dnload [<span class=3D"hljs-keyword">expr</span> [<spa=
n class=3D"hljs-keyword">string</span> length $stream] / <span class=3D"hlj=
s-number">2</span>] <span class=3D"hljs-number">0</span>
    ::USB_DFU_OUT::fclear
    ::USB_DFU_OUT::fappend $command
    ::USB_DFU_OUT::fappend $data
<span class=3D"hljs-comment">    #dbgShowVar "OUT Packet =3D $::USB_DFU_OUT=
::frame"</span>
    <span class=3D"hljs-keyword">set</span> outFrameSize [<span class=3D"hl=
js-keyword">format</span> <span class=3D"hljs-string">"%#010X"</span> [<spa=
n class=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</=
span> length $::USB_DFU_OUT::frame] / <span class=3D"hljs-number">2</span>]=
]
    <span class=3D"hljs-keyword">if</span> {[USB_DFU_WritePipe00 $hUSB_DFU =
$::USB_DFU_SETUP::frame $outFrameSize]} then {
	<span class=3D"hljs-keyword">if</span> {$getStatus} then {
	    <span class=3D"hljs-keyword">set</span> status [getDfuStatus]
	} else {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0x00</span>
	}
    } else {
	<span class=3D"hljs-keyword">set</span> status $bStatus(errWRITEPIPE0)
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> getDfuS=
tatus</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> hUSB_DFU bState bStatus
    <span class=3D"hljs-keyword">global</span> timeout
    <span class=3D"hljs-keyword">set</span> timeout <span class=3D"hljs-num=
ber">0</span>
    <span class=3D"hljs-keyword">set</span> timeoutId [<span class=3D"hljs-=
keyword">after</span> <span class=3D"hljs-number">12000</span> <span class=
=3D"hljs-string">"set timeout 1"</span>]
    buildSetupPacket getStatus <span class=3D"hljs-number">6</span> <span c=
lass=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> state <span class=3D"hljs-keywo=
rd">unknown</span>
    <span class=3D"hljs-keyword">while</span> {$state !=3D $bState(dfuIDLE)=
} {
	::USB_DFU_IN::fclear
	USB_DFU_ReadPipe00 $hUSB_DFU $::USB_DFU_SETUP::frame [<span class=3D"hljs-=
keyword">format</span> <span class=3D"hljs-string">"%#010X"</span> <span cl=
ass=3D"hljs-number">6</span>]
	<span class=3D"hljs-keyword">set</span> state <span class=3D"hljs-number">=
0</span>x[<span class=3D"hljs-keyword">string</span> range $::USB_DFU_IN::f=
rame <span class=3D"hljs-number">8</span> <span class=3D"hljs-number">9</sp=
an>]
	<span class=3D"hljs-keyword">if</span> {$timeout} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">update</span>
    }
    <span class=3D"hljs-keyword">if</span> {$timeout} then {
	<span class=3D"hljs-keyword">set</span> status $bStatus(errTIMEOUT)
    } else {
	<span class=3D"hljs-keyword">after</span> cancel $timeoutId
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>x[<span class=3D"hljs-keyword">string</span> range $::USB_DFU_IN::=
frame <span class=3D"hljs-number">0</span> <span class=3D"hljs-number">1</s=
pan>]
	<span class=3D"hljs-keyword">if</span> {$status !=3D $bStatus(OK)} then {
	    buildSetupPacket clrStatus <span class=3D"hljs-number">0</span> <span =
class=3D"hljs-number">1</span>
	}
    }
<span class=3D"hljs-comment">    #dbgShowVar "DFU Status =3D $status"</span=
>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dEB</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime bootloaderVerDepend=
ent protocol
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">if</span> {$bootloaderVerDependent(eb)} th=
en {
	<span class=3D"hljs-keyword">set</span> byte [ptclReadByte $protocol(readE=
B)]
	<span class=3D"hljs-keyword">if</span> {$byte !=3D <span class=3D"hljs-num=
ber">-1</span>} then {
	    <span class=3D"hljs-keyword">set</span> ::deviceArray(eb) $byte
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">1</span>
	} else {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	}
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dPortsConfig</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime bootloaderVerDepend=
ent protocol
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">if</span> {$bootloaderVerDependent(p1p3p4_=
config)} then {
	<span class=3D"hljs-keyword">set</span> byte [ptclReadByte $protocol(readP=
1)]
	<span class=3D"hljs-keyword">if</span> {$byte !=3D <span class=3D"hljs-num=
ber">-1</span>} then {
	    <span class=3D"hljs-keyword">set</span> ::deviceArray(p1_config) $byte
	} else {
	    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number"=
>0</span>
	}
	<span class=3D"hljs-keyword">set</span> byte [ptclReadByte $protocol(readP=
3)]
	<span class=3D"hljs-keyword">if</span> {$byte !=3D <span class=3D"hljs-num=
ber">-1</span>} then {
	    <span class=3D"hljs-keyword">set</span> ::deviceArray(p3_config) $byte
	} else {
	    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number"=
>0</span>
	}
	<span class=3D"hljs-keyword">set</span> byte [ptclReadByte $protocol(readP=
4)]
	<span class=3D"hljs-keyword">if</span> {$byte !=3D <span class=3D"hljs-num=
ber">-1</span>} then {
	    <span class=3D"hljs-keyword">set</span> ::deviceArray(p4_config) $byte
	} else {
	    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number"=
>0</span>
	}
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dBootlVer</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> protocol
    <span class=3D"hljs-keyword">set</span> byte [ptclReadByte $protocol(re=
adBootlVer)]
    <span class=3D"hljs-keyword">if</span> {$byte !=3D <span class=3D"hljs-=
number">-1</span>} then {
	<span class=3D"hljs-keyword">set</span> c1 [<span class=3D"hljs-keyword">s=
tring</span> index $byte <span class=3D"hljs-number">0</span>]
	<span class=3D"hljs-keyword">set</span> c2 [<span class=3D"hljs-keyword">s=
tring</span> index $byte <span class=3D"hljs-number">1</span>]
	<span class=3D"hljs-keyword">set</span> ::deviceArray(bootlVer) <span clas=
s=3D"hljs-string">"1.$c1.$c2"</span>
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>1</span>
    } else {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dDevBootId1</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> protocol
    <span class=3D"hljs-keyword">set</span> byte [ptclReadByte $protocol(re=
adBootId1)]
    <span class=3D"hljs-keyword">if</span> {$byte !=3D <span class=3D"hljs-=
number">-1</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(deviceBootId1) $byte
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>1</span>
    } else {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dDevBootId2</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> protocol
    <span class=3D"hljs-keyword">set</span> byte [ptclReadByte $protocol(re=
adBootId2)]
    <span class=3D"hljs-keyword">if</span> {$byte !=3D <span class=3D"hljs-=
number">-1</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(deviceBootId2) $byte
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>1</span>
    } else {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dBSB</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> protocol
    <span class=3D"hljs-keyword">set</span> byte [ptclReadByte $protocol(re=
adBSB)]
    <span class=3D"hljs-keyword">if</span> {$byte !=3D <span class=3D"hljs-=
number">-1</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(bsb) $byte
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>1</span>
    } else {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dSBV</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> protocol
    <span class=3D"hljs-keyword">set</span> byte [ptclReadByte $protocol(re=
adSBV)]
    <span class=3D"hljs-keyword">if</span> {$byte !=3D <span class=3D"hljs-=
number">-1</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(sbv) $byte
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>1</span>
    } else {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dSSB</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> protocol expAnsw
    <span class=3D"hljs-keyword">set</span> byte [ptclReadByte $protocol(re=
adSSB)]
    <span class=3D"hljs-keyword">if</span> {$byte !=3D <span class=3D"hljs-=
number">-1</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(ssb) $byte
	<span class=3D"hljs-keyword">foreach</span> i $expAnsw(readSSBlev0) {
	    <span class=3D"hljs-keyword">if</span> {$::deviceArray(ssb) =3D=3D $i}=
 then {
		<span class=3D"hljs-keyword">set</span> ::deviceArray(level) <span class=
=3D"hljs-number">0</span>
	    }
	}
	<span class=3D"hljs-keyword">foreach</span> i $expAnsw(readSSBlev1) {
	    <span class=3D"hljs-keyword">if</span> {$::deviceArray(ssb) =3D=3D $i}=
 then {
		<span class=3D"hljs-keyword">set</span> ::deviceArray(level) <span class=
=3D"hljs-number">1</span>
	    }
	}
	<span class=3D"hljs-keyword">foreach</span> i $expAnsw(readSSBlev2) {
	    <span class=3D"hljs-keyword">if</span> {$::deviceArray(ssb) =3D=3D $i}=
 then {
		<span class=3D"hljs-keyword">set</span> ::deviceArray(level) <span class=
=3D"hljs-number">2</span>
	    }
	}
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray(level) =3D $::devi=
ceArray(level)"</span>
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>1</span>
    } else {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
    updateGUI onSecurityLevelChange
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dManufId</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> protocol
    <span class=3D"hljs-keyword">set</span> byte [ptclReadByte $protocol(re=
adManufId)]
    <span class=3D"hljs-keyword">if</span> {$byte !=3D <span class=3D"hljs-=
number">-1</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(manufId) $byte
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>1</span>
    } else {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dDeviceId1</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> protocol
    <span class=3D"hljs-keyword">set</span> byte [ptclReadByte $protocol(re=
adDevId1)]
    <span class=3D"hljs-keyword">if</span> {$byte !=3D <span class=3D"hljs-=
number">-1</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(deviceId1) $byte
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>1</span>
    } else {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dDeviceId2</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> protocol
    <span class=3D"hljs-keyword">set</span> byte [ptclReadByte $protocol(re=
adDevId2)]
    <span class=3D"hljs-keyword">if</span> {$byte !=3D <span class=3D"hljs-=
number">-1</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(deviceId2) $byte
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>1</span>
    } else {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dDeviceId3</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> protocol
    <span class=3D"hljs-keyword">set</span> byte [ptclReadByte $protocol(re=
adDevId3)]
    <span class=3D"hljs-keyword">if</span> {$byte !=3D <span class=3D"hljs-=
number">-1</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(deviceId3) $byte
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>1</span>
    } else {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dHwByte</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> protocol
    <span class=3D"hljs-keyword">set</span> byte [ptclReadByte $protocol(re=
adHSB)]
    <span class=3D"hljs-keyword">if</span> {$byte !=3D <span class=3D"hljs-=
number">-1</span>} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(hsb) $byte
	<span class=3D"hljs-keyword">set</span> ::deviceArray(x2Fuse) [<span class=
=3D"hljs-keyword">expr</span> (<span class=3D"hljs-number">0</span>x$::devi=
ceArray(hsb) | <span class=3D"hljs-number">0x7F</span>) &gt;&gt; <span clas=
s=3D"hljs-number">7</span>]
	<span class=3D"hljs-keyword">set</span> ::deviceArray(bljbFuse) [<span cla=
ss=3D"hljs-keyword">expr</span> ((<span class=3D"hljs-number">0</span>x$::d=
eviceArray(hsb) | <span class=3D"hljs-number">0xBF</span>) &amp; <span clas=
s=3D"hljs-number">0x7F</span>) &gt;&gt; <span class=3D"hljs-number">6</span=
>]
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info=
</span> exists ::deviceArray(oscCtrl)]} then {
	    <span class=3D"hljs-keyword">set</span> ::deviceArray(oscCtrl) [<span =
class=3D"hljs-keyword">expr</span> (<span class=3D"hljs-number">0</span>x$:=
:deviceArray(hsb) &amp; <span class=3D"hljs-number">0x30</span>) &gt;&gt; <=
span class=3D"hljs-number">4</span>]
	}
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>1</span>
    } else {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dByte</span> {command} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> hUSB_DFU
    buildSetupPacket dnload [<span class=3D"hljs-keyword">expr</span> [<spa=
n class=3D"hljs-keyword">string</span> length $command] / <span class=3D"hl=
js-number">2</span>] <span class=3D"hljs-number">0</span>
    ::USB_DFU_OUT::fclear
    ::USB_DFU_OUT::fappend $command
    <span class=3D"hljs-keyword">set</span> outFrameSize [<span class=3D"hl=
js-keyword">format</span> <span class=3D"hljs-string">"%#010X"</span> [<spa=
n class=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">string</=
span> length $::USB_DFU_OUT::frame] / <span class=3D"hljs-number">2</span>]=
]
    <span class=3D"hljs-keyword">if</span> {[USB_DFU_WritePipe00 $hUSB_DFU =
$::USB_DFU_SETUP::frame $outFrameSize]} then {
	buildSetupPacket upload <span class=3D"hljs-number">1</span> <span class=
=3D"hljs-number">0</span>
	::USB_DFU_IN::fclear
	<span class=3D"hljs-keyword">if</span> {[USB_DFU_ReadPipe00 $hUSB_DFU $::U=
SB_DFU_SETUP::frame [<span class=3D"hljs-keyword">format</span> <span class=
=3D"hljs-string">"%#010X"</span> <span class=3D"hljs-number">1</span>]]} th=
en {
	    <span class=3D"hljs-keyword">set</span> byte $::USB_DFU_IN::frame
	} else {
	    <span class=3D"hljs-keyword">set</span> byte <span class=3D"hljs-numbe=
r">-1</span>
	}
    } else {
	<span class=3D"hljs-keyword">set</span> byte <span class=3D"hljs-number">-=
1</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $byte
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> buildSe=
tupPacket</span> {bRequest length noBlockValue} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> dfuRequest protocol
    ::USB_DFU_SETUP::fclear
    ::USB_DFU_SETUP::fappend $dfuRequest($bRequest)
    <span class=3D"hljs-keyword">if</span> {$noBlockValue} then {
	::USB_DFU_SETUP::fappend <span class=3D"hljs-string">"0000"</span>
	::USB_DFU_SETUP::fappend [bigEndian $dfuRequest(interface)]
	::USB_DFU_SETUP::fappend [bigEndian [<span class=3D"hljs-keyword">format</=
span> %<span class=3D"hljs-number">04</span>X $length]]
    } else {
	::USB_DFU_SETUP::fappend [bigEndian [<span class=3D"hljs-keyword">format</=
span> %<span class=3D"hljs-number">04</span>X $dfuRequest(wBlock)]]
	::USB_DFU_SETUP::fappend [bigEndian $dfuRequest(interface)]
	::USB_DFU_SETUP::fappend [bigEndian [<span class=3D"hljs-keyword">format</=
span> %<span class=3D"hljs-number">04</span>X $length]]
	decrementBlockNum
    }
<span class=3D"hljs-comment">    #dbgShowVar "SETUP Packet =3D $::USB_DFU_S=
ETUP::frame"</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $::USB_DFU_SETUP::frame
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> tstDecB=
lockNum</span> {} {
    <span class=3D"hljs-keyword">global</span> dfuRequest
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">1</span>} {$i &lt;=3D [<span class=
=3D"hljs-keyword">expr</span> $dfuRequest(wBlockMax) + <span class=3D"hljs-=
number">10</span>]} {<span class=3D"hljs-keyword">incr</span> i} {
	<span class=3D"hljs-keyword">puts</span> $dfuRequest(wBlock)
	decrementBlockNum
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclCan=
celUSBComm</span> {} {
    <span class=3D"hljs-keyword">global</span> hUSB_DFU
    USB_DFU_Close $hUSB_DFU
    updateGUI onUsbCommunicationOff
    updateGUI onAnyCommunicationOff
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> bigEndi=
an</span> {word} {
    <span class=3D"hljs-keyword">set</span> hiByte [<span class=3D"hljs-key=
word">string</span> range $word <span class=3D"hljs-number">0</span> <span =
class=3D"hljs-number">1</span>]
    <span class=3D"hljs-keyword">set</span> loByte [<span class=3D"hljs-key=
word">string</span> range $word <span class=3D"hljs-number">2</span> <span =
class=3D"hljs-number">3</span>]
    <span class=3D"hljs-keyword">set</span> swp ${loByte}${hiByte}
    <span class=3D"hljs-keyword">return</span> $swp
}
<span class=3D"hljs-comment">#dbgEndSrc [info script]</span>
<span class=3D"hljs-comment">#dbgBeginSrc [info script]</span>
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> USB_DFU=
_LocateAndOpenDevice</span> {pId} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> hUSB_DFU
    <span class=3D"hljs-keyword">set</span> hUSB_DFU [USB_DFU_LocateAndOpen=
Device_C $pId]
    <span class=3D"hljs-keyword">if</span> {$hUSB_DFU =3D=3D <span class=3D=
"hljs-number">-1</span>} then {
	messageBox <span class=3D"hljs-string">"USB Device Connection"</span> <spa=
n class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">"USB driv=
er not loaded"</span>
	updateGUI onUsbCommunicationOff
	updateGUI onAnyCommunicationOff
    } elseif {$hUSB_DFU =3D=3D <span class=3D"hljs-number">-2</span>} {
	messageBox <span class=3D"hljs-string">"USB Device Connection"</span> <spa=
n class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">"Cannot o=
pen the USB device"</span>
	updateGUI onUsbCommunicationOff
	updateGUI onAnyCommunicationOff
    } else {
	updateGUI onUsbCommunicationOn
	updateGUI onAnyCommunicationOn
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $hUSB_DFU
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> listPro=
cs</span> {} {
    <span class=3D"hljs-keyword">foreach</span> P [<span class=3D"hljs-keyw=
ord">info</span> procs USB*] {
	<span class=3D"hljs-keyword">puts</span> <span class=3D"hljs-string">"$P [=
info args $P]"</span>
    }
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-comment">#dbgEndSrc [info script]</span>
<span class=3D"hljs-comment">#dbgBeginSrc [info script]</span>
<span class=3D"hljs-keyword">global</span> buffer protocol expAnsw testFlag=
 canProtocol waitTime doTestArray flipStates errCode
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">lsear=
ch</span> [<span class=3D"hljs-keyword">namespace</span> children] ::<span =
class=3D"hljs-keyword">tcltest</span>] =3D=3D <span class=3D"hljs-number">-=
1</span>} then {
    <span class=3D"hljs-keyword">package</span> require <span class=3D"hljs=
-keyword">tcltest</span>
    <span class=3D"hljs-keyword">namespace</span> import ::<span class=3D"h=
ljs-keyword">tcltest</span>::*
}
<span class=3D"hljs-keyword">set</span> skipList {}
<span class=3D"hljs-keyword">foreach</span> test [<span class=3D"hljs-keywo=
rd">array</span> names doTestArray] {
    <span class=3D"hljs-keyword">if</span> {! $doTestArray($test)} then {
	<span class=3D"hljs-keyword">append</span> skipList <span class=3D"hljs-st=
ring">" ${test}* "</span>
    }
}
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info<=
/span> exists ::deviceArray(skipList)]} then {
    <span class=3D"hljs-keyword">append</span> skipList $::deviceArray(skip=
List)
}
<span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">tclt=
est</span>::skip $skipList
<span class=3D"hljs-comment">#dbgShowVar "skip =3D $::tcltest::skip"</span>
<span class=3D"hljs-keyword">set</span> flipStates(mssgBox) <span class=3D"=
hljs-number">0</span>
<span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">tclt=
est</span>::verbose <span class=3D"hljs-string">"ps"</span>
<span class=3D"hljs-keyword">set</span> PASS <span class=3D"hljs-number">1<=
/span>
<span class=3D"hljs-keyword">set</span> FAIL <span class=3D"hljs-number">0<=
/span>
cmdsReadSpecialBytes
debug_log <span class=3D"hljs-string">"************************************=
******"</span>
debug_log <span class=3D"hljs-string">"********** CAN Standard TESTS ******=
******"</span>
debug_log <span class=3D"hljs-string">"************************************=
******"</span>
cmdsImportCurrentMemoryNameSpace <span class=3D"hljs-string">"FLASH"</span>
<span class=3D"hljs-keyword">catch</span> [.testSelectionDbox.f_skip.b_skip=
1 configure -fg red]
debug_log <span class=3D"hljs-string">"*************** XAF TESTS **********=
******"</span>
test xaf<span class=3D"hljs-number">-1.0</span> {Full Chip Erase} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.0 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.0 "</span>
ptclFullChipErase
} $PASS
test xaf<span class=3D"hljs-number">-1.1</span> {Write BSB =3D <span class=
=3D"hljs-number">0x55</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.1 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.1 "</span>
ptclWriteBSB <span class=3D"hljs-string">"55"</span>
} $PASS
test xaf<span class=3D"hljs-number">-1.2</span> {Read BSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.2 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.2 "</span>
ptclReadBSB
<span class=3D"hljs-keyword">set</span> ::deviceArray(bsb)
} {<span class=3D"hljs-number">55</span>}
test xaf<span class=3D"hljs-number">-1.3</span> {Write SBV =3D <span class=
=3D"hljs-number">0x55</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.3 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.3 "</span>
ptclWriteSBV <span class=3D"hljs-string">"55"</span>
} $PASS
test xaf<span class=3D"hljs-number">-1.4</span> {Read SBV} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.4 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.4 "</span>
ptclReadSBV
<span class=3D"hljs-keyword">set</span> ::deviceArray(sbv)
} {<span class=3D"hljs-number">55</span>}
test xaf<span class=3D"hljs-number">-1.5</span> {Write EB =3D <span class=
=3D"hljs-number">0x55</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.5 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.5 "</span>
ptclWriteEB <span class=3D"hljs-string">"55"</span>
} $PASS
test xaf<span class=3D"hljs-number">-1.6</span> {Read EB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.6 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.6 "</span>
ptclReadEB
<span class=3D"hljs-keyword">set</span> ::deviceArray(eb)
} {<span class=3D"hljs-number">55</span>}
test xaf<span class=3D"hljs-number">-1.7</span> {Write SSB =3D level <span =
class=3D"hljs-number">1</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.7 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.7 "</span>
ptclProgSSBlev1
} $PASS
test xaf<span class=3D"hljs-number">-1.8</span> {Read SSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.8 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.8 "</span>
ptclReadSSB
<span class=3D"hljs-keyword">set</span> ::deviceArray(ssb)
} $expAnsw(readSSBlev1Test)
test xaf<span class=3D"hljs-number">-1.9</span> {Write BSB =3D <span class=
=3D"hljs-number">0xAA</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.9 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.9 "</span>
ptclWriteBSB <span class=3D"hljs-string">"AA"</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test xaf<span class=3D"hljs-number">-1.10</span> {Read BSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.10 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.10 "</span>
ptclReadBSB
<span class=3D"hljs-keyword">set</span> ::deviceArray(bsb)
} {<span class=3D"hljs-number">55</span>}
test xaf<span class=3D"hljs-number">-1.11</span> {Write SBV =3D <span class=
=3D"hljs-number">0xAA</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.11 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.11 "</span>
ptclWriteSBV <span class=3D"hljs-string">"AA"</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test xaf<span class=3D"hljs-number">-1.12</span> {Read SBV} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.12 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.12 "</span>
ptclReadSBV
<span class=3D"hljs-keyword">set</span> ::deviceArray(sbv)
} {<span class=3D"hljs-number">55</span>}
test xaf<span class=3D"hljs-number">-1.13</span> {Write EB =3D <span class=
=3D"hljs-number">0xAA</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.13 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.13 "</span>
ptclWriteEB <span class=3D"hljs-string">"AA"</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test xaf<span class=3D"hljs-number">-1.14</span> {Read EB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.14 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.14 "</span>
ptclReadEB
<span class=3D"hljs-keyword">set</span> ::deviceArray(eb)
} {<span class=3D"hljs-number">55</span>}
test xaf<span class=3D"hljs-number">-1.15</span> {Write SSB =3D level <span=
 class=3D"hljs-number">2</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.15 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.15 "</span>
ptclProgSSBlev2
} $PASS
test xaf<span class=3D"hljs-number">-1.16</span> {Read SSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.16 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.16 "</span>
ptclReadSSB
<span class=3D"hljs-keyword">set</span> ::deviceArray(ssb)
} $expAnsw(readSSBlev2Test)
test xaf<span class=3D"hljs-number">-1.17</span> {Write BSB =3D <span class=
=3D"hljs-number">0x00</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.17 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.17 "</span>
ptclWriteBSB <span class=3D"hljs-string">"00"</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test xaf<span class=3D"hljs-number">-1.18</span> {Read BSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.18 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.18 "</span>
ptclReadBSB
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test xaf<span class=3D"hljs-number">-1.19</span> {Write SBV =3D <span class=
=3D"hljs-number">0x00</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.19 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.19 "</span>
ptclWriteSBV <span class=3D"hljs-string">"00"</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test xaf<span class=3D"hljs-number">-1.20</span> {Read SBV} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.20 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.20 "</span>
ptclReadSBV
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test xaf<span class=3D"hljs-number">-1.21</span> {Write EB =3D <span class=
=3D"hljs-number">0x00</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.21 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.21 "</span>
ptclWriteEB <span class=3D"hljs-string">"00"</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test xaf<span class=3D"hljs-number">-1.22</span> {Read EB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.22 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.22 "</span>
ptclReadEB
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test xaf<span class=3D"hljs-number">-1.23</span> {Write SSB =3D level <span=
 class=3D"hljs-number">1</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.23 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.23 "</span>
ptclProgSSBlev1
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test xaf<span class=3D"hljs-number">-1.24</span> {Read SSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.24 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.24 "</span>
ptclReadSSB
<span class=3D"hljs-keyword">set</span> ::deviceArray(ssb)
} $expAnsw(readSSBlev2Test)
test xaf<span class=3D"hljs-number">-1.25</span> {Full Chip Erase} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.25 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.25 "</span>
ptclFullChipErase
} $PASS
test xaf<span class=3D"hljs-number">-1.26</span> {Read BSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.26 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.26 "</span>
ptclReadBSB
<span class=3D"hljs-keyword">set</span> ::deviceArray(bsb)
} {FF}
test xaf<span class=3D"hljs-number">-1.27</span> {Read SBV} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.27 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.27 "</span>
ptclReadSBV
<span class=3D"hljs-keyword">set</span> ::deviceArray(sbv)
} {FF}
test xaf<span class=3D"hljs-number">-1.28</span> {Read EB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.28 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.28 "</span>
ptclReadEB
<span class=3D"hljs-keyword">set</span> ::deviceArray(eb)
} {FF}
test xaf<span class=3D"hljs-number">-1.29</span> {Read SSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.29 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.29 "</span>
ptclReadSSB
<span class=3D"hljs-keyword">set</span> ::deviceArray(ssb)
} $expAnsw(readSSBlev0Test)
<span class=3D"hljs-keyword">catch</span> [.testSelectionDbox.f_skip.b_skip=
1 configure -fg black]
<span class=3D"hljs-keyword">catch</span> [.testSelectionDbox.f_skip.b_skip=
2 configure -fg red]
debug_log <span class=3D"hljs-string">"**************** FLASH *************=
******"</span>
test flash<span class=3D"hljs-number">-2.0</span> {Full Chip Erase} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.0 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.0 "</span>
ptclFullChipErase
} $PASS
test flash<span class=3D"hljs-number">-2.1</span> {Write randomize data fro=
m <span class=3D"hljs-number">0000</span> to [readBuffer maxAddr]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.1 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.1 "</span>
randomizeBuffer
cmdsDeviceProgram <span class=3D"hljs-string">"000000"</span> [readBuffer m=
axAddr]
} $PASS
test flash<span class=3D"hljs-number">-2.2</span> {Read from <span class=3D=
"hljs-number">0000</span> to [readBuffer maxAddr]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.2 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.2 "</span>
cmdsDeviceVerify <span class=3D"hljs-number">0</span> [readBuffer maxAddr]
} $PASS
test flash<span class=3D"hljs-number">-2.3</span> {Full Chip Erase} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.3 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.3 "</span>
ptclFullChipErase
} $PASS
test flash<span class=3D"hljs-number">-2.4</span> {Write AA at address <spa=
n class=3D"hljs-number">0X1FFF</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.4 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.4 "</span>
fillBuffer <span class=3D"hljs-string">"001FFF"</span> <span class=3D"hljs-=
string">"001FFF"</span> <span class=3D"hljs-string">"AA"</span>
cmdsDeviceProgram <span class=3D"hljs-string">"001FFF"</span> <span class=
=3D"hljs-string">"001FFF"</span>
} $PASS
test flash<span class=3D"hljs-number">-2.5</span> {Read at address <span cl=
ass=3D"hljs-number">0X1FFF</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.5 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.5 "</span>
cmdsReadAddrRange <span class=3D"hljs-string">"001FFF"</span> <span class=
=3D"hljs-string">"001FFF"</span>
checkBuffer <span class=3D"hljs-string">"001FFF"</span> <span class=3D"hljs=
-string">"001FFF"</span> <span class=3D"hljs-string">"AA"</span>
} $PASS
test flash<span class=3D"hljs-number">-2.6</span> {Blank Check between <spa=
n class=3D"hljs-number">0000</span> and [readBuffer maxAddr]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.6 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.6 "</span>
ptclBlankCheck <span class=3D"hljs-string">"000000"</span> [readBuffer maxA=
ddr]
} {<span class=3D"hljs-number">1</span>FFF}
test flash<span class=3D"hljs-number">-2.7</span> {Full Chip Erase} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.7 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.7 "</span>
ptclFullChipErase
} $PASS
test flash<span class=3D"hljs-number">-2.8</span> {Blank Check between <spa=
n class=3D"hljs-number">0000</span> and [readBuffer maxAddr]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.8 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.8 "</span>
ptclBlankCheck <span class=3D"hljs-string">"000000"</span> [readBuffer maxA=
ddr]
} {<span class=3D"hljs-number">-1</span>}
test flash<span class=3D"hljs-number">-2.9</span> {Write SSB =3D level <spa=
n class=3D"hljs-number">1</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.9 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.9 "</span>
ptclProgSSBlev1
} $PASS
test flash<span class=3D"hljs-number">-2.10</span> {Read SSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.10 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.10 "</span>
ptclReadSSB
<span class=3D"hljs-keyword">set</span> ::deviceArray(ssb)
} $expAnsw(readSSBlev1Test)
test flash<span class=3D"hljs-number">-2.11</span> {Write AA at address <sp=
an class=3D"hljs-number">0X1FFF</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.11 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.11 "</span>
fillBuffer <span class=3D"hljs-string">"001FFF"</span> <span class=3D"hljs-=
string">"001FFF"</span> <span class=3D"hljs-string">"AA"</span>
cmdsDeviceProgram <span class=3D"hljs-string">"001FFF"</span> <span class=
=3D"hljs-string">"001FFF"</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test flash<span class=3D"hljs-number">-2.12</span> {Read at address <span c=
lass=3D"hljs-number">1</span>FFF} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.12 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.12 "</span>
cmdsReadAddrRange <span class=3D"hljs-string">"001FFF"</span> <span class=
=3D"hljs-string">"001FFF"</span>
checkBuffer <span class=3D"hljs-string">"001FFF"</span> <span class=3D"hljs=
-string">"001FFF"</span> <span class=3D"hljs-string">"FF"</span>
} $PASS
test flash<span class=3D"hljs-number">-2.13</span> {Write SSB =3D level <sp=
an class=3D"hljs-number">2</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.13 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.13 "</span>
ptclProgSSBlev2
} $PASS
test flash<span class=3D"hljs-number">-2.14</span> {Read SSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.14 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.14 "</span>
ptclReadSSB
<span class=3D"hljs-keyword">set</span> ::deviceArray(ssb)
} $expAnsw(readSSBlev2Test)
test flash<span class=3D"hljs-number">-2.15</span> {Write AA at address <sp=
an class=3D"hljs-number">1</span>FFF} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.15 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.15 "</span>
fillBuffer <span class=3D"hljs-string">"001FFF"</span> <span class=3D"hljs-=
string">"001FFF"</span> <span class=3D"hljs-string">"AA"</span>
cmdsDeviceProgram <span class=3D"hljs-string">"001FFF"</span> <span class=
=3D"hljs-string">"001FFF"</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test flash<span class=3D"hljs-number">-2.16</span> {Read at address <span c=
lass=3D"hljs-number">1</span>FFF} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.16 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.16 "</span>
cmdsReadAddrRange <span class=3D"hljs-string">"001FFF"</span> <span class=
=3D"hljs-string">"001FFF"</span>
checkBuffer <span class=3D"hljs-string">"001FFF"</span> <span class=3D"hljs=
-string">"001FFF"</span> <span class=3D"hljs-string">"AA"</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test flash<span class=3D"hljs-number">-2.17</span> {Full Chip Erase} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.17 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.17 "</span>
ptclFullChipErase
} $PASS
test flash<span class=3D"hljs-number">-2.18</span> {Write randomize data fr=
om <span class=3D"hljs-number">0000</span> to [readBuffer maxAddr]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.18 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.18 "</span>
randomizeBuffer
cmdsDeviceProgram <span class=3D"hljs-string">"000000"</span> [readBuffer m=
axAddr]
} $PASS
test flash<span class=3D"hljs-number">-2.19</span> {Read from <span class=
=3D"hljs-number">0000</span> to [readBuffer maxAddr]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.19 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.19 "</span>
cmdsDeviceVerify <span class=3D"hljs-number">0</span> [readBuffer maxAddr]
} $PASS
test flash<span class=3D"hljs-number">-2.20</span> {Erase Block <span class=
=3D"hljs-number">0</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.20 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.20 "</span>
ptclEraseBlock0
} $PASS
test flash<span class=3D"hljs-number">-2.21</span> {Blank Check between <sp=
an class=3D"hljs-number">0000</span> and [readBuffer maxAddr]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.21 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.21 "</span>
ptclBlankCheck <span class=3D"hljs-string">"000000"</span> [readBuffer maxA=
ddr]
} {<span class=3D"hljs-number">2000</span>}
test flash<span class=3D"hljs-number">-2.22</span> {Erase Block <span class=
=3D"hljs-number">1</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.22 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.22 "</span>
ptclEraseBlock1
} $PASS
test flash<span class=3D"hljs-number">-2.23</span> {Blank Check between <sp=
an class=3D"hljs-number">0000</span> and [readBuffer maxAddr]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.23 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.23 "</span>
ptclBlankCheck <span class=3D"hljs-string">"000000"</span> [readBuffer maxA=
ddr]
} {<span class=3D"hljs-number">4000</span>}
test flash<span class=3D"hljs-number">-2.23</span><span class=3D"hljs-numbe=
r">.1</span> {Blank Check between <span class=3D"hljs-number">0000</span> a=
nd [readBuffer maxAddr]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.23.1 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.23.1"</span>
ptclBlankCheck <span class=3D"hljs-string">"000000"</span> [readBuffer maxA=
ddr]
} {<span class=3D"hljs-number">-1</span>}
test flash<span class=3D"hljs-number">-2.24</span> {Erase Block <span class=
=3D"hljs-number">2</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.24 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.24 "</span>
ptclEraseBlock2
} $PASS
test flash<span class=3D"hljs-number">-2.25</span> {Blank Check between <sp=
an class=3D"hljs-number">0000</span> and [readBuffer maxAddr]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.25 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.25 "</span>
ptclBlankCheck <span class=3D"hljs-string">"000000"</span> [readBuffer maxA=
ddr]
} {<span class=3D"hljs-number">-1</span>}
test flash<span class=3D"hljs-number">-2.26</span> {Blank Check between <sp=
an class=3D"hljs-number">0000</span> and [readBuffer maxAddr]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.26 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.26"</span>
ptclBlankCheck <span class=3D"hljs-string">"000000"</span> [readBuffer maxA=
ddr]
} {<span class=3D"hljs-number">8000</span>}
test flash<span class=3D"hljs-number">-2.27</span> {Erase Block <span class=
=3D"hljs-number">3</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.27 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.27"</span>
ptclEraseBlock3
} $PASS
test flash<span class=3D"hljs-number">-2.28</span> {Blank Check between <sp=
an class=3D"hljs-number">0000</span> and [readBuffer maxAddr]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.28 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.28"</span>
ptclBlankCheck <span class=3D"hljs-string">"000000"</span> [readBuffer maxA=
ddr]
} {C000}
test flash<span class=3D"hljs-number">-2.29</span> {Erase Block <span class=
=3D"hljs-number">4</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.29 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.29"</span>
ptclEraseBlock4
} $PASS
test flash<span class=3D"hljs-number">-2.30</span> {Blank Check between <sp=
an class=3D"hljs-number">0000</span> and [readBuffer maxAddr]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.30 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.30"</span>
ptclBlankCheck <span class=3D"hljs-string">"000000"</span> [readBuffer maxA=
ddr]
} {<span class=3D"hljs-number">-1</span>}
<span class=3D"hljs-keyword">catch</span> [.testSelectionDbox.f_skip.b_skip=
2 configure -fg black]
<span class=3D"hljs-keyword">catch</span> [.testSelectionDbox.f_skip.b_skip=
3 configure -fg red]
<span class=3D"hljs-comment">#dbgShowInfo  "***************** FUSE TESTS **=
*****************"</span>
test fuse<span class=3D"hljs-number">-3.0</span> {Full Chip Erase} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test fuse-3.0 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test fuse-3.0"</span>
ptclFullChipErase
} $PASS
test fuse<span class=3D"hljs-number">-3.1</span> {Write HSB =3D <span class=
=3D"hljs-number">0xFF</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test fuse-3.1 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test fuse-3.1"</span>
ptclWriteHwByte <span class=3D"hljs-string">"FF"</span>
} $PASS
test fuse<span class=3D"hljs-number">-3.2</span> {Read HSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test fuse-3.2 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test fuse-3.2"</span>
ptclReadHwByte
<span class=3D"hljs-keyword">set</span> result [<span class=3D"hljs-keyword=
">format</span> %<span class=3D"hljs-number">02</span>X [<span class=3D"hlj=
s-keyword">expr</span> <span class=3D"hljs-number">0</span>X$::deviceArray(=
hsb) &amp; <span class=3D"hljs-number">0XF0</span>]]
} {F0}
test fuse<span class=3D"hljs-number">-3.3</span> {Write HSB =3D <span class=
=3D"hljs-number">0x0F</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test fuse-3.3 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test fuse-3.3"</span>
ptclWriteHwByte <span class=3D"hljs-string">"0F"</span>
} $PASS
test fuse<span class=3D"hljs-number">-3.4</span> {Read HSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test fuse-3.4 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test fuse-3.4"</span>
ptclReadHwByte
<span class=3D"hljs-keyword">set</span> result [<span class=3D"hljs-keyword=
">format</span> %<span class=3D"hljs-number">02</span>X [<span class=3D"hlj=
s-keyword">expr</span> <span class=3D"hljs-number">0</span>X$::deviceArray(=
hsb) &amp; <span class=3D"hljs-number">0XF0</span>]]
} {<span class=3D"hljs-number">00</span>}
test fuse<span class=3D"hljs-number">-3.5</span> {Write SSB =3D level <span=
 class=3D"hljs-number">1</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test fuse-3.5 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test fuse-3.5"</span>
ptclProgSSBlev1
} $PASS
test fuse<span class=3D"hljs-number">-3.6</span> {Read SSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test fuse-3.6 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test fuse-3.6"</span>
ptclReadSSB
<span class=3D"hljs-keyword">set</span> ::deviceArray(ssb)
} $expAnsw(readSSBlev1Test)
test fuse<span class=3D"hljs-number">-3.7</span> {Write HSB =3D <span class=
=3D"hljs-number">0x5F</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test fuse-3.7 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test fuse-3.7"</span>
ptclWriteHwByte <span class=3D"hljs-string">"5F"</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test fuse<span class=3D"hljs-number">-3.8</span> {Read HSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test fuse-3.8 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test fuse-3.8"</span>
ptclReadHwByte
<span class=3D"hljs-keyword">set</span> result [<span class=3D"hljs-keyword=
">format</span> %<span class=3D"hljs-number">02</span>X [<span class=3D"hlj=
s-keyword">expr</span> <span class=3D"hljs-number">0</span>X$::deviceArray(=
hsb) &amp; <span class=3D"hljs-number">0XF0</span>]]
} {<span class=3D"hljs-number">00</span>}
test fuse<span class=3D"hljs-number">-3.9</span> {Write SSB =3D level <span=
 class=3D"hljs-number">2</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test fuse-3.9 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test fuse-3.9"</span>
ptclProgSSBlev2
} $PASS
test fuse<span class=3D"hljs-number">-3.10</span> {Read SSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test fuse-3.10 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test fuse-3.10"</span>
ptclReadSSB
<span class=3D"hljs-keyword">set</span> ::deviceArray(ssb)
} $expAnsw(readSSBlev2Test)
test fuse<span class=3D"hljs-number">-3.11</span> {Write HSB =3D <span clas=
s=3D"hljs-number">0x5F</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test fuse-3.11 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test fuse-3.11"</span>
ptclWriteHwByte <span class=3D"hljs-string">"5F"</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test fuse<span class=3D"hljs-number">-3.12</span> {Read HSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test fuse-3.12 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test fuse-3.12"</span>
ptclReadHwByte
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test fuse<span class=3D"hljs-number">-3.13</span> {Full Chip Erase} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test fuse-3.13 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test fuse-3.13"</span>
ptclFullChipErase
} $PASS
test fuse<span class=3D"hljs-number">-3.14</span> {Read HSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test fuse-3.14 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test fuse-3.14"</span>
ptclReadHwByte
<span class=3D"hljs-keyword">set</span> result [<span class=3D"hljs-keyword=
">format</span> %<span class=3D"hljs-number">02</span>X [<span class=3D"hlj=
s-keyword">expr</span> <span class=3D"hljs-number">0</span>X$::deviceArray(=
hsb) &amp; <span class=3D"hljs-number">0XF0</span>]]
} {<span class=3D"hljs-number">00</span>}
test fuse<span class=3D"hljs-number">-3.15</span> {Write HSB =3D <span clas=
s=3D"hljs-number">0x5F</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test fuse-3.15 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test fuse-3.15"</span>
ptclWriteHwByte <span class=3D"hljs-string">"5F"</span>
} $PASS
test fuse<span class=3D"hljs-number">-3.16</span> {Read HSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test fuse-3.16 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test fuse-3.16"</span>
ptclReadHwByte
<span class=3D"hljs-keyword">set</span> result [<span class=3D"hljs-keyword=
">format</span> %<span class=3D"hljs-number">02</span>X [<span class=3D"hlj=
s-keyword">expr</span> <span class=3D"hljs-number">0</span>X$::deviceArray(=
hsb) &amp; <span class=3D"hljs-number">0XF0</span>]]
} {<span class=3D"hljs-number">50</span>}
<span class=3D"hljs-keyword">catch</span> [.testSelectionDbox.f_skip.b_skip=
3 configure -fg black]
<span class=3D"hljs-keyword">catch</span> [.testSelectionDbox.f_skip.b_skip=
4 configure -fg red]
debug_log <span class=3D"hljs-string">"********* SPECIFIC INFORMATIONS ****=
******"</span>
test specific<span class=3D"hljs-number">-4.0</span> {Full Chip Erase} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-4.0 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-4.0"</span>
ptclFullChipErase
} $PASS
test specific<span class=3D"hljs-number">-4.1</span> {Read Bootloader Versi=
on} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-4.1 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-4.1"</span>
ptclReadBootlVer
} $PASS
test specific<span class=3D"hljs-number">-4.2</span> {Read Device Boot Id <=
span class=3D"hljs-number">1</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-4.2 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-4.2"</span>
ptclReadDevBootId1
} $PASS
test specific<span class=3D"hljs-number">-4.3</span> {Read Device Boot Id <=
span class=3D"hljs-number">2</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-4.3 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-4.3"</span>
ptclReadDevBootId2
} $PASS
test specific<span class=3D"hljs-number">-4.4</span> {Read Manuf Id} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-4.4 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-4.4"</span>
ptclReadManufId
} $PASS
test specific<span class=3D"hljs-number">-4.5</span> {Read Device Id <span =
class=3D"hljs-number">1</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-4.5 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-4.5"</span>
ptclReadDeviceId1
} $PASS
test specific<span class=3D"hljs-number">-4.6</span> {Read Device Id <span =
class=3D"hljs-number">2</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-4.6 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-4.6"</span>
ptclReadDeviceId2
} $PASS
test specific<span class=3D"hljs-number">-4.7</span> {Read Device Id <span =
class=3D"hljs-number">3</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-4.7 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-4.7"</span>
ptclReadDeviceId3
} $PASS
test specific<span class=3D"hljs-number">-4.8</span> {Write SSB =3D level <=
span class=3D"hljs-number">2</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-4.8 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-4.8"</span>
ptclProgSSBlev2
} $PASS
test specific<span class=3D"hljs-number">-4.9</span> {Read SSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-4.9 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-4.9"</span>
ptclReadSSB
<span class=3D"hljs-keyword">set</span> ::deviceArray(ssb)
} $expAnsw(readSSBlev2Test)
test specific<span class=3D"hljs-number">-4.10</span> {Read Bootloader Vers=
ion} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-4.10 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-4.10"</span>
ptclReadBootlVer
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test specific<span class=3D"hljs-number">-4.11</span> {Read Device Boot Id =
<span class=3D"hljs-number">1</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-4.11 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-4.11"</span>
ptclReadDevBootId1
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test specific<span class=3D"hljs-number">-4.12</span> {Read Device Boot Id =
<span class=3D"hljs-number">2</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-4.12 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-4.12"</span>
ptclReadDevBootId2
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test specific<span class=3D"hljs-number">-4.13</span> {Read Manuf Id} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-4.13 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-4.13"</span>
ptclReadManufId
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test specific<span class=3D"hljs-number">-4.14</span> {Read Device Id <span=
 class=3D"hljs-number">1</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-4.14 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-4.14"</span>
ptclReadDeviceId1
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test specific<span class=3D"hljs-number">-4.15</span> {Read Device Id <span=
 class=3D"hljs-number">2</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-4.15 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-4.15"</span>
ptclReadDeviceId2
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test specific<span class=3D"hljs-number">-4.16</span> {Read Device Id <span=
 class=3D"hljs-number">3</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-4.16 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-4.16"</span>
ptclReadDeviceId3
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test specific<span class=3D"hljs-number">-4.17</span> {Full Chip Erase} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-4.17 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-4.17"</span>
ptclFullChipErase
} $PASS
<span class=3D"hljs-keyword">catch</span> [.testSelectionDbox.f_skip.b_skip=
4 configure -fg black]
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">strin=
g</span> first <span class=3D"hljs-string">"EEPROM"</span> [<span class=3D"=
hljs-keyword">namespace</span> children ::]] !=3D <span class=3D"hljs-numbe=
r">-1</span>} then {
    cmdsImportCurrentMemoryNameSpace <span class=3D"hljs-string">"EEPROM"</=
span>
    <span class=3D"hljs-keyword">catch</span> [.testSelectionDbox.f_skip.b_=
skip6 configure -fg red]
<span class=3D"hljs-comment">    #dbgShowInfo "**************** EEPROM ****=
*************"</span>
    test eeprom<span class=3D"hljs-number">-6.0</span> {Fill EEPROM with <s=
pan class=3D"hljs-number">0xFF</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test eeprom-6.0 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test eeprom-6.0"</span>
fillBuffer <span class=3D"hljs-string">"000000"</span> [readBuffer maxAddr]=
 <span class=3D"hljs-string">"FF"</span>
cmdsDeviceProgram <span class=3D"hljs-string">"000000"</span> [readBuffer m=
axAddr]
} $PASS
    test eeprom<span class=3D"hljs-number">-6.1</span> {Verify the whole EE=
PROM} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test eeprom-6.1 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test eeprom-6.1"</span>
fillBuffer <span class=3D"hljs-string">"000000"</span> [readBuffer maxAddr]=
 <span class=3D"hljs-string">"00"</span>
cmdsReadAddrRange <span class=3D"hljs-string">"000000"</span> [readBuffer m=
axAddr]
checkBuffer <span class=3D"hljs-string">"000000"</span> [readBuffer maxAddr=
] <span class=3D"hljs-string">"FF"</span>
} $PASS
    test eeprom<span class=3D"hljs-number">-6.2</span> {Fill EEPROM with <s=
pan class=3D"hljs-number">0x00</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test eeprom-6.2 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test eeprom-6.2"</span>
fillBuffer <span class=3D"hljs-string">"000000"</span> [readBuffer maxAddr]=
 <span class=3D"hljs-string">"00"</span>
cmdsDeviceProgram <span class=3D"hljs-string">"000000"</span> [readBuffer m=
axAddr]
} $PASS
    test eeprom<span class=3D"hljs-number">-6.3</span> {Verify the whole EE=
PROM} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test eeprom-6.3 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test eeprom-6.3"</span>
fillBuffer <span class=3D"hljs-string">"000000"</span> [readBuffer maxAddr]=
 <span class=3D"hljs-string">"FF"</span>
cmdsReadAddrRange <span class=3D"hljs-string">"000000"</span> [readBuffer m=
axAddr]
checkBuffer <span class=3D"hljs-string">"000000"</span> [readBuffer maxAddr=
] <span class=3D"hljs-string">"00"</span>
} $PASS
    test eeprom<span class=3D"hljs-number">-6.4</span> {Fill EEPROM with <s=
pan class=3D"hljs-number">0x55</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test eeprom-6.4 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test eeprom-6.4"</span>
fillBuffer <span class=3D"hljs-string">"000000"</span> [readBuffer maxAddr]=
 <span class=3D"hljs-string">"55"</span>
cmdsDeviceProgram <span class=3D"hljs-string">"000000"</span> [readBuffer m=
axAddr]
} $PASS
    test eeprom<span class=3D"hljs-number">-6.5</span> {Verify the whole EE=
PROM} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test eeprom-6.5 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test eeprom-6.5"</span>
fillBuffer <span class=3D"hljs-string">"000000"</span> [readBuffer maxAddr]=
 <span class=3D"hljs-string">"AA"</span>
cmdsReadAddrRange <span class=3D"hljs-string">"000000"</span> [readBuffer m=
axAddr]
checkBuffer <span class=3D"hljs-string">"000000"</span> [readBuffer maxAddr=
] <span class=3D"hljs-string">"55"</span>
} $PASS
    test eeprom<span class=3D"hljs-number">-6.6</span> {Fill EEPROM with <s=
pan class=3D"hljs-number">0xAA</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test eeprom-6.6 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test eeprom-6.6"</span>
fillBuffer <span class=3D"hljs-string">"000000"</span> [readBuffer maxAddr]=
 <span class=3D"hljs-string">"AA"</span>
cmdsDeviceProgram <span class=3D"hljs-string">"000000"</span> [readBuffer m=
axAddr]
} $PASS
    test eeprom<span class=3D"hljs-number">-6.7</span> {Verify the whole EE=
PROM} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test eeprom-6.7 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test eeprom-6.7"</span>
fillBuffer <span class=3D"hljs-string">"000000"</span> [readBuffer maxAddr]=
 <span class=3D"hljs-string">"55"</span>
cmdsReadAddrRange <span class=3D"hljs-string">"000000"</span> [readBuffer m=
axAddr]
checkBuffer <span class=3D"hljs-string">"000000"</span> [readBuffer maxAddr=
] <span class=3D"hljs-string">"AA"</span>
} $PASS
    test eeprom<span class=3D"hljs-number">-6.8</span> {Fill EEPROM with <s=
pan class=3D"hljs-number">0xFF</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test eeprom-6.8 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test eeprom-6.8"</span>
fillBuffer <span class=3D"hljs-string">"000000"</span> [readBuffer maxAddr]=
 <span class=3D"hljs-string">"FF"</span>
cmdsDeviceProgram <span class=3D"hljs-string">"000000"</span> [readBuffer m=
axAddr]
} $PASS
    test eeprom<span class=3D"hljs-number">-6.9</span> {Verify the whole EE=
PROM} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test eeprom-6.9 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test eeprom-6.9"</span>
fillBuffer <span class=3D"hljs-string">"000000"</span> [readBuffer maxAddr]=
 <span class=3D"hljs-string">"00"</span>
cmdsReadAddrRange <span class=3D"hljs-string">"000000"</span> [readBuffer m=
axAddr]
checkBuffer <span class=3D"hljs-string">"000000"</span> [readBuffer maxAddr=
] <span class=3D"hljs-string">"FF"</span>
} $PASS
    <span class=3D"hljs-keyword">catch</span> [.testSelectionDbox.f_skip.b_=
skip6 configure -fg black]
    cmdsImportCurrentMemoryNameSpace <span class=3D"hljs-string">"FLASH"</s=
pan>
}
::<span class=3D"hljs-keyword">tcltest</span>::cleanupTests
log_message <span class=3D"hljs-string">"CANstd tests completed. Check the =
log file for errors."</span>
cmdsRestoreSpecialBytes
<span class=3D"hljs-keyword">set</span> flipStates(mssgBox) <span class=3D"=
hljs-number">1</span>
<span class=3D"hljs-keyword">return</span>
<span class=3D"hljs-comment">#dbgEndSrc [info script]    #dbgBeginSrc [info=
 script]</span>
<span class=3D"hljs-keyword">global</span> buffer
debug_log <span class=3D"hljs-string">"file: /tests/non_regr.tcl"</span>
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">lsear=
ch</span> [<span class=3D"hljs-keyword">namespace</span> children] ::<span =
class=3D"hljs-keyword">tcltest</span>] =3D=3D <span class=3D"hljs-number">-=
1</span>} then {
    <span class=3D"hljs-keyword">package</span> require <span class=3D"hljs=
-keyword">tcltest</span>
    <span class=3D"hljs-keyword">namespace</span> import ::<span class=3D"h=
ljs-keyword">tcltest</span>::*
}
<span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">tclt=
est</span>::verbose <span class=3D"hljs-string">"bps"</span>
debug_log <span class=3D"hljs-string">"************************************=
******"</span>
debug_log <span class=3D"hljs-string">"********* NON REGRESSION TESTS *****=
******"</span>
debug_log <span class=3D"hljs-string">"************************************=
******"</span>
<span class=3D"hljs-keyword">return</span>
debug_log <span class=3D"hljs-string">"********* INITIALIZATION TESTS *****=
******"</span>
test initialization<span class=3D"hljs-number">-1.0</span> {Check the buffe=
r options <span class=3D"hljs-keyword">after</span> init} {
init
} {<span class=3D"hljs-number">65556</span> <span class=3D"hljs-number">0xF=
FFF</span>}
test initialization<span class=3D"hljs-number">-1.1</span> {Check the buffe=
r first/last addresses contents <span class=3D"hljs-keyword">after</span> r=
eset} {
resetBuffer
} {<span class=3D"hljs-number">64</span> <span class=3D"hljs-number">0xFFFF=
</span> FF FF}
debug_log <span class=3D"hljs-string">"************** FILE TESTS **********=
******"</span>
test files<span class=3D"hljs-number">-2.0</span> {Create the devices files=
 <span class=3D"hljs-keyword">list</span>} {
buildDeviceFilesList
} {coyote.dat racoon.dat}
test files<span class=3D"hljs-number">-2.1</span> {Create the devices <span=
 class=3D"hljs-keyword">list</span> when files exist} {
buildDeviceList <span class=3D"hljs-string">"coyote.dat racoon.dat"</span>
} {coyote racoon}
test files<span class=3D"hljs-number">-2.2</span> {Display warning when fil=
es do not exist} {
buildDeviceList <span class=3D"hljs-string">"device1.no device2.no"</span>
} <span class=3D"hljs-number">0</span>
test files<span class=3D"hljs-number">-2.3</span> {Check <span class=3D"hlj=
s-keyword">file</span> pathname - empty path} {
checkFilePathname <span class=3D"hljs-string">""</span>
} <span class=3D"hljs-number">0</span>
test files<span class=3D"hljs-number">-2.4</span> {Check <span class=3D"hlj=
s-keyword">file</span> pathname - dir does not exist} {
checkFilePathname <span class=3D"hljs-string">"/dummy/foo/crash.txt"</span>
} <span class=3D"hljs-number">-1</span>
debug_log <span class=3D"hljs-string">"******** DEVICE DEPENDENT TESTS ****=
******"</span>
<span class=3D"hljs-keyword">set</span> device coyote
test devices<span class=3D"hljs-number">-3.0</span> {Check the device depen=
dencies} {
cbOnDeviceSelection $device
} {deviceDependent deviceDependent normal}
test devices<span class=3D"hljs-number">-3.1</span> {Device selected =3D&gt=
; <span class=3D"hljs-keyword">update</span> GUI dependencies} {
updateStatesAndGui $device
<span class=3D"hljs-keyword">list</span> [readBuffer sizeType] [readBuffer =
blankValueType]
} {deviceDependent deviceDependent}
::<span class=3D"hljs-keyword">tcltest</span>::cleanupTests
log_message <span class=3D"hljs-string">"Non regression tests completed. Ch=
eck the log file for errors."</span>
debug_log <span class=3D"hljs-string">"************************************=
******"</span>
<span class=3D"hljs-keyword">return</span>
<span class=3D"hljs-comment">#dbgEndSrc [info script]                      =
 #dbgBeginSrc [info script]</span>
<span class=3D"hljs-keyword">global</span> buffer protocol expAnsw testFlag=
 canProtocol waitTime doTestArray flipStates errCode
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">lsear=
ch</span> [<span class=3D"hljs-keyword">namespace</span> children] ::<span =
class=3D"hljs-keyword">tcltest</span>] =3D=3D <span class=3D"hljs-number">-=
1</span>} then {
    <span class=3D"hljs-keyword">package</span> require <span class=3D"hljs=
-keyword">tcltest</span>
    <span class=3D"hljs-keyword">namespace</span> import ::<span class=3D"h=
ljs-keyword">tcltest</span>::*
}
<span class=3D"hljs-keyword">set</span> skipList {}
<span class=3D"hljs-keyword">foreach</span> test [<span class=3D"hljs-keywo=
rd">array</span> names doTestArray] {
    <span class=3D"hljs-keyword">if</span> {! $doTestArray($test)} then {
	<span class=3D"hljs-keyword">append</span> skipList <span class=3D"hljs-st=
ring">" ${test}* "</span>
    }
}
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info<=
/span> exists ::deviceArray(skipList)]} then {
    <span class=3D"hljs-keyword">append</span> skipList $::deviceArray(skip=
List)
}
<span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">tclt=
est</span>::skip $skipList
<span class=3D"hljs-comment">#dbgShowVar "skip =3D $::tcltest::skip"</span>
<span class=3D"hljs-keyword">set</span> flipStates(mssgBox) <span class=3D"=
hljs-number">0</span>
<span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">tclt=
est</span>::verbose <span class=3D"hljs-string">"bps"</span>
<span class=3D"hljs-keyword">set</span> PASS <span class=3D"hljs-number">1<=
/span>
<span class=3D"hljs-keyword">set</span> FAIL <span class=3D"hljs-number">0<=
/span>
cmdsReadSpecialBytes
debug_log <span class=3D"hljs-string">"************************************=
******"</span>
debug_log <span class=3D"hljs-string">"********** CAN Standard TESTS ******=
******"</span>
debug_log <span class=3D"hljs-string">"************************************=
******"</span>
cmdsImportCurrentMemoryNameSpace <span class=3D"hljs-string">"FLASH"</span>
<span class=3D"hljs-keyword">catch</span> [.testSelectionDbox.f_skip.b_skip=
1 configure -fg red]
debug_log <span class=3D"hljs-string">"*************** XAF TESTS **********=
******"</span>
test xaf<span class=3D"hljs-number">-1.0</span> {Full Chip Erase} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.0 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.0 "</span>
ptclFullChipErase
} $PASS
test xaf<span class=3D"hljs-number">-1.1</span> {Write BSB =3D <span class=
=3D"hljs-number">0x55</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.1 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.1 "</span>
ptclWriteBSB <span class=3D"hljs-string">"55"</span>
} $PASS
test xaf<span class=3D"hljs-number">-1.2</span> {Read BSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.2 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.2 "</span>
ptclReadBSB
<span class=3D"hljs-keyword">set</span> ::deviceArray(bsb)
} {<span class=3D"hljs-number">55</span>}
test xaf<span class=3D"hljs-number">-1.3</span> {Write SBV =3D <span class=
=3D"hljs-number">0x55</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.3 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.3 "</span>
ptclWriteSBV <span class=3D"hljs-string">"55"</span>
} $PASS
test xaf<span class=3D"hljs-number">-1.4</span> {Read SBV} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.4 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.4 "</span>
ptclReadSBV
<span class=3D"hljs-keyword">set</span> ::deviceArray(sbv)
} {<span class=3D"hljs-number">55</span>}
test xaf<span class=3D"hljs-number">-1.5</span> {Write EB =3D <span class=
=3D"hljs-number">0x55</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.5 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.5 "</span>
ptclWriteEB <span class=3D"hljs-string">"55"</span>
} $PASS
test xaf<span class=3D"hljs-number">-1.6</span> {Read EB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.6 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.6 "</span>
ptclReadEB
<span class=3D"hljs-keyword">set</span> ::deviceArray(eb)
} {<span class=3D"hljs-number">55</span>}
test xaf<span class=3D"hljs-number">-1.7</span> {Write SSB =3D level <span =
class=3D"hljs-number">1</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.7 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.7 "</span>
ptclProgSSBlev1
} $PASS
test xaf<span class=3D"hljs-number">-1.8</span> {Read SSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.8 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.8 "</span>
ptclReadSSB
<span class=3D"hljs-keyword">set</span> ::deviceArray(ssb)
} $expAnsw(readSSBlev1Test)
test xaf<span class=3D"hljs-number">-1.9</span> {Write BSB =3D <span class=
=3D"hljs-number">0xAA</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.9 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.9 "</span>
ptclWriteBSB <span class=3D"hljs-string">"AA"</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test xaf<span class=3D"hljs-number">-1.10</span> {Read BSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.10 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.10 "</span>
ptclReadBSB
<span class=3D"hljs-keyword">set</span> ::deviceArray(bsb)
} {<span class=3D"hljs-number">55</span>}
test xaf<span class=3D"hljs-number">-1.11</span> {Write SBV =3D <span class=
=3D"hljs-number">0xAA</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.11 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.11 "</span>
ptclWriteSBV <span class=3D"hljs-string">"AA"</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test xaf<span class=3D"hljs-number">-1.12</span> {Read SBV} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.12 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.12 "</span>
ptclReadSBV
<span class=3D"hljs-keyword">set</span> ::deviceArray(sbv)
} {<span class=3D"hljs-number">55</span>}
test xaf<span class=3D"hljs-number">-1.13</span> {Write EB =3D <span class=
=3D"hljs-number">0xAA</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.13 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.13 "</span>
ptclWriteEB <span class=3D"hljs-string">"AA"</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test xaf<span class=3D"hljs-number">-1.14</span> {Read EB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.14 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.14 "</span>
ptclReadEB
<span class=3D"hljs-keyword">set</span> ::deviceArray(eb)
} {<span class=3D"hljs-number">55</span>}
test xaf<span class=3D"hljs-number">-1.15</span> {Write SSB =3D level <span=
 class=3D"hljs-number">2</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.15 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.15 "</span>
ptclProgSSBlev2
} $PASS
test xaf<span class=3D"hljs-number">-1.16</span> {Read SSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.16 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.16 "</span>
ptclReadSSB
<span class=3D"hljs-keyword">set</span> ::deviceArray(ssb)
} $expAnsw(readSSBlev2Test)
test xaf<span class=3D"hljs-number">-1.17</span> {Write BSB =3D <span class=
=3D"hljs-number">0x00</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.17 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.17 "</span>
ptclWriteBSB <span class=3D"hljs-string">"00"</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test xaf<span class=3D"hljs-number">-1.18</span> {Read BSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.18 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.18 "</span>
ptclReadBSB
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test xaf<span class=3D"hljs-number">-1.19</span> {Write SBV =3D <span class=
=3D"hljs-number">0x00</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.19 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.19 "</span>
ptclWriteSBV <span class=3D"hljs-string">"00"</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test xaf<span class=3D"hljs-number">-1.20</span> {Read SBV} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.20 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.20 "</span>
ptclReadSBV
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test xaf<span class=3D"hljs-number">-1.21</span> {Write EB =3D <span class=
=3D"hljs-number">0x00</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.21 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.21 "</span>
ptclWriteEB <span class=3D"hljs-string">"00"</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test xaf<span class=3D"hljs-number">-1.22</span> {Read EB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.22 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.22 "</span>
ptclReadEB
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test xaf<span class=3D"hljs-number">-1.23</span> {Write SSB =3D level <span=
 class=3D"hljs-number">1</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.23 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.23 "</span>
ptclProgSSBlev1
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test xaf<span class=3D"hljs-number">-1.24</span> {Read SSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.24 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.24 "</span>
ptclReadSSB
<span class=3D"hljs-keyword">set</span> ::deviceArray(ssb)
} $expAnsw(readSSBlev2Test)
test xaf<span class=3D"hljs-number">-1.25</span> {Full Chip Erase} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.25 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.25 "</span>
ptclFullChipErase
} $PASS
test xaf<span class=3D"hljs-number">-1.26</span> {Read BSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.26 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.26 "</span>
ptclReadBSB
<span class=3D"hljs-keyword">set</span> ::deviceArray(bsb)
} {FF}
test xaf<span class=3D"hljs-number">-1.27</span> {Read SBV} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.27 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.27 "</span>
ptclReadSBV
<span class=3D"hljs-keyword">set</span> ::deviceArray(sbv)
} {FF}
test xaf<span class=3D"hljs-number">-1.28</span> {Read EB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.28 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.28 "</span>
ptclReadEB
<span class=3D"hljs-keyword">set</span> ::deviceArray(eb)
} {FF}
test xaf<span class=3D"hljs-number">-1.29</span> {Read SSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.29 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.29 "</span>
ptclReadSSB
<span class=3D"hljs-keyword">set</span> ::deviceArray(ssb)
} $expAnsw(readSSBlev0Test)
<span class=3D"hljs-keyword">catch</span> [.testSelectionDbox.f_skip.b_skip=
1 configure -fg black]
<span class=3D"hljs-keyword">catch</span> [.testSelectionDbox.f_skip.b_skip=
2 configure -fg red]
debug_log <span class=3D"hljs-string">"**************** FLASH *************=
******"</span>
test flash<span class=3D"hljs-number">-2.0</span> {Full Chip Erase} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.0 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.0 "</span>
ptclFullChipErase
} $PASS
test flash<span class=3D"hljs-number">-2.1</span> {Write randomize data fro=
m <span class=3D"hljs-number">0000</span> to [readBuffer maxAddr]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.1 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.1 "</span>
randomizeBuffer
cmdsDeviceProgram <span class=3D"hljs-string">"000000"</span> [readBuffer m=
axAddr]
} $PASS
test flash<span class=3D"hljs-number">-2.2</span> {Read from <span class=3D=
"hljs-number">0000</span> to [readBuffer maxAddr]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.2 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.2 "</span>
cmdsDeviceVerify <span class=3D"hljs-number">0</span> [readBuffer maxAddr]
} $PASS
test flash<span class=3D"hljs-number">-2.3</span> {Full Chip Erase} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.3 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.3 "</span>
ptclFullChipErase
} $PASS
test flash<span class=3D"hljs-number">-2.4</span> {Write AA at address <spa=
n class=3D"hljs-number">0X1FFF</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.4 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.4 "</span>
fillBuffer <span class=3D"hljs-string">"001FFF"</span> <span class=3D"hljs-=
string">"001FFF"</span> <span class=3D"hljs-string">"AA"</span>
cmdsDeviceProgram <span class=3D"hljs-string">"001FFF"</span> <span class=
=3D"hljs-string">"001FFF"</span>
} $PASS
test flash<span class=3D"hljs-number">-2.5</span> {Read at address <span cl=
ass=3D"hljs-number">0X1FFF</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.5 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.5 "</span>
cmdsReadAddrRange <span class=3D"hljs-string">"001FFF"</span> <span class=
=3D"hljs-string">"001FFF"</span>
checkBuffer <span class=3D"hljs-string">"001FFF"</span> <span class=3D"hljs=
-string">"001FFF"</span> <span class=3D"hljs-string">"AA"</span>
} $PASS
test flash<span class=3D"hljs-number">-2.6</span> {Blank Check between <spa=
n class=3D"hljs-number">0000</span> and [readBuffer maxAddr]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.6 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.6 "</span>
ptclBlankCheck <span class=3D"hljs-string">"000000"</span> [readBuffer maxA=
ddr]
} {<span class=3D"hljs-number">1</span>FFF}
test flash<span class=3D"hljs-number">-2.7</span> {Full Chip Erase} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.7 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.7 "</span>
ptclFullChipErase
} $PASS
test flash<span class=3D"hljs-number">-2.8</span> {Blank Check between <spa=
n class=3D"hljs-number">0000</span> and [readBuffer maxAddr]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.8 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.8 "</span>
ptclBlankCheck <span class=3D"hljs-string">"000000"</span> [readBuffer maxA=
ddr]
} {<span class=3D"hljs-number">-1</span>}
test flash<span class=3D"hljs-number">-2.9</span> {Write SSB =3D level <spa=
n class=3D"hljs-number">1</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.9 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.9 "</span>
ptclProgSSBlev1
} $PASS
test flash<span class=3D"hljs-number">-2.10</span> {Read SSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.10 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.10 "</span>
ptclReadSSB
<span class=3D"hljs-keyword">set</span> ::deviceArray(ssb)
} $expAnsw(readSSBlev1Test)
test flash<span class=3D"hljs-number">-2.11</span> {Write AA at address <sp=
an class=3D"hljs-number">1</span>FFF} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.11 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.11 "</span>
fillBuffer <span class=3D"hljs-string">"001FFF"</span> <span class=3D"hljs-=
string">"001FFF"</span> <span class=3D"hljs-string">"AA"</span>
cmdsDeviceProgram <span class=3D"hljs-string">"001FFF"</span> <span class=
=3D"hljs-string">"001FFF"</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test flash<span class=3D"hljs-number">-2.12</span> {Read at address <span c=
lass=3D"hljs-number">1</span>FFF} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.12 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.12 "</span>
cmdsReadAddrRange <span class=3D"hljs-string">"001FFF"</span> <span class=
=3D"hljs-string">"001FFF"</span>
checkBuffer <span class=3D"hljs-string">"001FFF"</span> <span class=3D"hljs=
-string">"001FFF"</span> <span class=3D"hljs-string">"AA"</span>
} {<span class=3D"hljs-number">001</span>FFF}
test flash<span class=3D"hljs-number">-2.13</span> {Write SSB =3D level <sp=
an class=3D"hljs-number">2</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.13 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.13 "</span>
ptclProgSSBlev2
} $PASS
test flash<span class=3D"hljs-number">-2.14</span> {Read SSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.14 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.14 "</span>
ptclReadSSB
<span class=3D"hljs-keyword">set</span> ::deviceArray(ssb)
} $expAnsw(readSSBlev2Test)
test flash<span class=3D"hljs-number">-2.15</span> {Write AA at address <sp=
an class=3D"hljs-number">1</span>FFF} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.15 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.15 "</span>
fillBuffer <span class=3D"hljs-string">"001FFF"</span> <span class=3D"hljs-=
string">"001FFF"</span> <span class=3D"hljs-string">"AA"</span>
cmdsDeviceProgram <span class=3D"hljs-string">"001FFF"</span> <span class=
=3D"hljs-string">"001FFF"</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test flash<span class=3D"hljs-number">-2.16</span> {Read at address <span c=
lass=3D"hljs-number">1</span>FFF} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.16 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.16 "</span>
cmdsReadAddrRange <span class=3D"hljs-string">"001FFF"</span> <span class=
=3D"hljs-string">"001FFF"</span>
checkBuffer <span class=3D"hljs-string">"001FFF"</span> <span class=3D"hljs=
-string">"001FFF"</span> <span class=3D"hljs-string">"AA"</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test flash<span class=3D"hljs-number">-2.17</span> {Full Chip Erase} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.17 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.17 "</span>
ptclFullChipErase
} $PASS
test flash<span class=3D"hljs-number">-2.18</span> {Write randomize data fr=
om <span class=3D"hljs-number">0000</span> to [readBuffer maxAddr]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.18 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.18 "</span>
randomizeBuffer
cmdsDeviceProgram <span class=3D"hljs-string">"000000"</span> [readBuffer m=
axAddr]
} $PASS
test flash<span class=3D"hljs-number">-2.19</span> {Read from <span class=
=3D"hljs-number">0000</span> to [readBuffer maxAddr]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.19 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.19 "</span>
cmdsDeviceVerify <span class=3D"hljs-number">0</span> [readBuffer maxAddr]
} $PASS
test flash<span class=3D"hljs-number">-2.20</span> {Erase Block <span class=
=3D"hljs-number">0</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.20 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.20 "</span>
ptclEraseBlock0
} $PASS
test flash<span class=3D"hljs-number">-2.21</span> {Blank Check between <sp=
an class=3D"hljs-number">0000</span> and [readBuffer maxAddr]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.21 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.21 "</span>
ptclBlankCheck <span class=3D"hljs-string">"000000"</span> [readBuffer maxA=
ddr]
} {<span class=3D"hljs-number">2000</span>}
test flash<span class=3D"hljs-number">-2.22</span> {Erase Block <span class=
=3D"hljs-number">1</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.22 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.22 "</span>
ptclEraseBlock1
} $PASS
test flash<span class=3D"hljs-number">-2.23</span> {Blank Check between <sp=
an class=3D"hljs-number">0000</span> and [readBuffer maxAddr]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.23 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.23 "</span>
ptclBlankCheck <span class=3D"hljs-string">"000000"</span> [readBuffer maxA=
ddr]
} {<span class=3D"hljs-number">4000</span>}
test flash<span class=3D"hljs-number">-2.23</span><span class=3D"hljs-numbe=
r">.1</span> {Blank Check between <span class=3D"hljs-number">0000</span> a=
nd [readBuffer maxAddr]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.23.1 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.23.1"</span>
ptclBlankCheck <span class=3D"hljs-string">"000000"</span> [readBuffer maxA=
ddr]
} {<span class=3D"hljs-number">-1</span>}
test flash<span class=3D"hljs-number">-2.24</span> {Erase Block <span class=
=3D"hljs-number">2</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.24 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.24 "</span>
ptclEraseBlock2
} $PASS
test flash<span class=3D"hljs-number">-2.25</span> {Blank Check between <sp=
an class=3D"hljs-number">0000</span> and [readBuffer maxAddr]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.25 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.25 "</span>
ptclBlankCheck <span class=3D"hljs-string">"000000"</span> [readBuffer maxA=
ddr]
} {<span class=3D"hljs-number">-1</span>}
test flash<span class=3D"hljs-number">-2.26</span> {Blank Check between <sp=
an class=3D"hljs-number">0000</span> and [readBuffer maxAddr]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.26 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.26"</span>
ptclBlankCheck <span class=3D"hljs-string">"000000"</span> [readBuffer maxA=
ddr]
} {<span class=3D"hljs-number">8000</span>}
test flash<span class=3D"hljs-number">-2.27</span> {Erase Block <span class=
=3D"hljs-number">3</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.27 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.27"</span>
ptclEraseBlock3
} $PASS
test flash<span class=3D"hljs-number">-2.28</span> {Blank Check between <sp=
an class=3D"hljs-number">0000</span> and [readBuffer maxAddr]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.28 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.28"</span>
ptclBlankCheck <span class=3D"hljs-string">"000000"</span> [readBuffer maxA=
ddr]
} {C000}
test flash<span class=3D"hljs-number">-2.29</span> {Erase Block <span class=
=3D"hljs-number">4</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.29 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.29"</span>
ptclEraseBlock4
} $PASS
test flash<span class=3D"hljs-number">-2.30</span> {Blank Check between <sp=
an class=3D"hljs-number">0000</span> and [readBuffer maxAddr]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.30 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.30"</span>
ptclBlankCheck <span class=3D"hljs-string">"000000"</span> [readBuffer maxA=
ddr]
} {<span class=3D"hljs-number">-1</span>}
<span class=3D"hljs-keyword">catch</span> [.testSelectionDbox.f_skip.b_skip=
2 configure -fg black]
<span class=3D"hljs-keyword">catch</span> [.testSelectionDbox.f_skip.b_skip=
3 configure -fg red]
<span class=3D"hljs-comment">#dbgShowInfo  "***************** FUSE TESTS **=
*****************"</span>
test fuse<span class=3D"hljs-number">-3.0</span> {Full Chip Erase} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test fuse-3.0 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test fuse-3.0"</span>
ptclFullChipErase
} $PASS
test fuse<span class=3D"hljs-number">-3.1</span> {Write HSB =3D <span class=
=3D"hljs-number">0xFF</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test fuse-3.1 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test fuse-3.1"</span>
ptclWriteHwByte <span class=3D"hljs-string">"FF"</span>
} $PASS
test fuse<span class=3D"hljs-number">-3.2</span> {Read HSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test fuse-3.2 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test fuse-3.2"</span>
ptclReadHwByte
<span class=3D"hljs-keyword">set</span> result [<span class=3D"hljs-keyword=
">format</span> %<span class=3D"hljs-number">02</span>X [<span class=3D"hlj=
s-keyword">expr</span> <span class=3D"hljs-number">0</span>X$::deviceArray(=
hsb) &amp; <span class=3D"hljs-number">0XF0</span>]]
} {F0}
test fuse<span class=3D"hljs-number">-3.3</span> {Write HSB =3D <span class=
=3D"hljs-number">0x0F</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test fuse-3.3 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test fuse-3.3"</span>
ptclWriteHwByte <span class=3D"hljs-string">"0F"</span>
} $PASS
test fuse<span class=3D"hljs-number">-3.4</span> {Read HSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test fuse-3.4 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test fuse-3.4"</span>
ptclReadHwByte
<span class=3D"hljs-keyword">set</span> result [<span class=3D"hljs-keyword=
">format</span> %<span class=3D"hljs-number">02</span>X [<span class=3D"hlj=
s-keyword">expr</span> <span class=3D"hljs-number">0</span>X$::deviceArray(=
hsb) &amp; <span class=3D"hljs-number">0XF0</span>]]
} {<span class=3D"hljs-number">00</span>}
test fuse<span class=3D"hljs-number">-3.5</span> {Write SSB =3D level <span=
 class=3D"hljs-number">1</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test fuse-3.5 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test fuse-3.5"</span>
ptclProgSSBlev1
} $PASS
test fuse<span class=3D"hljs-number">-3.6</span> {Read SSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test fuse-3.6 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test fuse-3.6"</span>
ptclReadSSB
<span class=3D"hljs-keyword">set</span> ::deviceArray(ssb)
} $expAnsw(readSSBlev1Test)
test fuse<span class=3D"hljs-number">-3.7</span> {Write HSB =3D <span class=
=3D"hljs-number">0x5F</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test fuse-3.7 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test fuse-3.7"</span>
ptclWriteHwByte <span class=3D"hljs-string">"5F"</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test fuse<span class=3D"hljs-number">-3.8</span> {Read HSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test fuse-3.8 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test fuse-3.8"</span>
ptclReadHwByte
<span class=3D"hljs-keyword">set</span> result [<span class=3D"hljs-keyword=
">format</span> %<span class=3D"hljs-number">02</span>X [<span class=3D"hlj=
s-keyword">expr</span> <span class=3D"hljs-number">0</span>X$::deviceArray(=
hsb) &amp; <span class=3D"hljs-number">0XF0</span>]]
} {<span class=3D"hljs-number">00</span>}
test fuse<span class=3D"hljs-number">-3.9</span> {Write SSB =3D level <span=
 class=3D"hljs-number">2</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test fuse-3.9 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test fuse-3.9"</span>
ptclProgSSBlev2
} $PASS
test fuse<span class=3D"hljs-number">-3.10</span> {Read SSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test fuse-3.10 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test fuse-3.10"</span>
ptclReadSSB
<span class=3D"hljs-keyword">set</span> ::deviceArray(ssb)
} $expAnsw(readSSBlev2Test)
test fuse<span class=3D"hljs-number">-3.11</span> {Write HSB =3D <span clas=
s=3D"hljs-number">0x5F</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test fuse-3.11 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test fuse-3.11"</span>
ptclWriteHwByte <span class=3D"hljs-string">"5F"</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test fuse<span class=3D"hljs-number">-3.12</span> {Read HSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test fuse-3.12 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test fuse-3.12"</span>
ptclReadHwByte
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test fuse<span class=3D"hljs-number">-3.13</span> {Full Chip Erase} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test fuse-3.13 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test fuse-3.13"</span>
ptclFullChipErase
} $PASS
test fuse<span class=3D"hljs-number">-3.14</span> {Read HSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test fuse-3.14 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test fuse-3.14"</span>
ptclReadHwByte
<span class=3D"hljs-keyword">set</span> result [<span class=3D"hljs-keyword=
">format</span> %<span class=3D"hljs-number">02</span>X [<span class=3D"hlj=
s-keyword">expr</span> <span class=3D"hljs-number">0</span>X$::deviceArray(=
hsb) &amp; <span class=3D"hljs-number">0XF0</span>]]
} {<span class=3D"hljs-number">00</span>}
test fuse<span class=3D"hljs-number">-3.15</span> {Write HSB =3D <span clas=
s=3D"hljs-number">0x5F</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test fuse-3.15 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test fuse-3.15"</span>
ptclWriteHwByte <span class=3D"hljs-string">"5F"</span>
} $PASS
test fuse<span class=3D"hljs-number">-3.16</span> {Read HSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test fuse-3.16 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test fuse-3.16"</span>
ptclReadHwByte
<span class=3D"hljs-keyword">set</span> result [<span class=3D"hljs-keyword=
">format</span> %<span class=3D"hljs-number">02</span>X [<span class=3D"hlj=
s-keyword">expr</span> <span class=3D"hljs-number">0</span>X$::deviceArray(=
hsb) &amp; <span class=3D"hljs-number">0XF0</span>]]
} {<span class=3D"hljs-number">50</span>}
<span class=3D"hljs-keyword">catch</span> [.testSelectionDbox.f_skip.b_skip=
3 configure -fg black]
<span class=3D"hljs-keyword">catch</span> [.testSelectionDbox.f_skip.b_skip=
4 configure -fg red]
debug_log <span class=3D"hljs-string">"********* SPECIFIC INFORMATIONS ****=
******"</span>
test specific<span class=3D"hljs-number">-4.0</span> {Full Chip Erase} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-4.0 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-4.0"</span>
ptclFullChipErase
} $PASS
test specific<span class=3D"hljs-number">-4.1</span> {Read Bootloader Versi=
on} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-4.1 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-4.1"</span>
ptclReadBootlVer
} $PASS
test specific<span class=3D"hljs-number">-4.2</span> {Read Device Boot Id <=
span class=3D"hljs-number">1</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-4.2 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-4.2"</span>
ptclReadDevBootId1
} $PASS
test specific<span class=3D"hljs-number">-4.3</span> {Read Device Boot Id <=
span class=3D"hljs-number">2</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-4.3 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-4.3"</span>
ptclReadDevBootId2
} $PASS
test specific<span class=3D"hljs-number">-4.4</span> {Read Manuf Id} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-4.4 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-4.4"</span>
ptclReadManufId
} $PASS
test specific<span class=3D"hljs-number">-4.5</span> {Read Device Id <span =
class=3D"hljs-number">1</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-4.5 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-4.5"</span>
ptclReadDeviceId1
} $PASS
test specific<span class=3D"hljs-number">-4.6</span> {Read Device Id <span =
class=3D"hljs-number">2</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-4.6 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-4.6"</span>
ptclReadDeviceId2
} $PASS
test specific<span class=3D"hljs-number">-4.7</span> {Read Device Id <span =
class=3D"hljs-number">3</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-4.7 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-4.7"</span>
ptclReadDeviceId3
} $PASS
test specific<span class=3D"hljs-number">-4.8</span> {Write SSB =3D level <=
span class=3D"hljs-number">2</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-4.8 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-4.8"</span>
ptclProgSSBlev2
} $PASS
test specific<span class=3D"hljs-number">-4.9</span> {Read SSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-4.9 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-4.9"</span>
ptclReadSSB
<span class=3D"hljs-keyword">set</span> ::deviceArray(ssb)
} $expAnsw(readSSBlev2Test)
test specific<span class=3D"hljs-number">-4.10</span> {Read Bootloader Vers=
ion} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-4.10 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-4.10"</span>
ptclReadBootlVer
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test specific<span class=3D"hljs-number">-4.11</span> {Read Device Boot Id =
<span class=3D"hljs-number">1</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-4.11 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-4.11"</span>
ptclReadDevBootId1
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test specific<span class=3D"hljs-number">-4.12</span> {Read Device Boot Id =
<span class=3D"hljs-number">2</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-4.12 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-4.12"</span>
ptclReadDevBootId2
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test specific<span class=3D"hljs-number">-4.13</span> {Read Manuf Id} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-4.13 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-4.13"</span>
ptclReadManufId
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test specific<span class=3D"hljs-number">-4.14</span> {Read Device Id <span=
 class=3D"hljs-number">1</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-4.14 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-4.14"</span>
ptclReadDeviceId1
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test specific<span class=3D"hljs-number">-4.15</span> {Read Device Id <span=
 class=3D"hljs-number">2</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-4.15 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-4.15"</span>
ptclReadDeviceId2
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test specific<span class=3D"hljs-number">-4.16</span> {Read Device Id <span=
 class=3D"hljs-number">3</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-4.16 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-4.16"</span>
ptclReadDeviceId3
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test specific<span class=3D"hljs-number">-4.17</span> {Full Chip Erase} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-4.17 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-4.17"</span>
ptclFullChipErase
} $PASS
<span class=3D"hljs-keyword">catch</span> [.testSelectionDbox.f_skip.b_skip=
4 configure -fg black]
::<span class=3D"hljs-keyword">tcltest</span>::cleanupTests
log_message <span class=3D"hljs-string">"CANstd tests completed. Check the =
log file for errors."</span>
cmdsRestoreSpecialBytes
<span class=3D"hljs-keyword">set</span> flipStates(mssgBox) <span class=3D"=
hljs-number">1</span>
<span class=3D"hljs-keyword">return</span>
<span class=3D"hljs-comment">#dbgEndSrc [info script]                      =
    #dbgBeginSrc [info script]</span>
<span class=3D"hljs-keyword">global</span> buffer protocol expAnsw testFlag=
 flipStates waitTime doTestArray errCode
<span class=3D"hljs-keyword">global</span> bootloaderVerDependent
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">lsear=
ch</span> [<span class=3D"hljs-keyword">namespace</span> children] ::<span =
class=3D"hljs-keyword">tcltest</span>] =3D=3D <span class=3D"hljs-number">-=
1</span>} then {
    <span class=3D"hljs-keyword">package</span> require <span class=3D"hljs=
-keyword">tcltest</span>
    <span class=3D"hljs-keyword">namespace</span> import ::<span class=3D"h=
ljs-keyword">tcltest</span>::*
}
<span class=3D"hljs-keyword">set</span> skipList {}
<span class=3D"hljs-keyword">foreach</span> test [<span class=3D"hljs-keywo=
rd">array</span> names doTestArray] {
    <span class=3D"hljs-keyword">if</span> {! $doTestArray($test)} then {
	<span class=3D"hljs-keyword">append</span> skipList <span class=3D"hljs-st=
ring">" ${test}* "</span>
    }
}
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info<=
/span> exists ::deviceArray(skipList)]} then {
    <span class=3D"hljs-keyword">append</span> skipList $::deviceArray(skip=
List)
}
<span class=3D"hljs-keyword">set</span> skipEB <span class=3D"hljs-string">=
"  xaf-1.5  xaf-1.6  xaf-1.13  xaf-1.14  xaf-1.21  xaf-1.22  xaf-1.28 "</sp=
an>
<span class=3D"hljs-keyword">set</span> skipEEPROM <span class=3D"hljs-stri=
ng">" eeprom-*"</span>
<span class=3D"hljs-keyword">if</span> {! $bootloaderVerDependent(eb)} then=
 {
    <span class=3D"hljs-keyword">append</span> skipList $skipEB
}
<span class=3D"hljs-keyword">if</span> {! $bootloaderVerDependent(eeprom)} =
then {
    <span class=3D"hljs-keyword">append</span> skipList $skipEEPROM
}
<span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">tclt=
est</span>::skip $skipList
<span class=3D"hljs-comment">#dbgShowVar "skip =3D $::tcltest::skip"</span>
<span class=3D"hljs-keyword">set</span> flipStates(mssgBox) <span class=3D"=
hljs-number">0</span>
<span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">tclt=
est</span>::verbose <span class=3D"hljs-string">"bps"</span>
<span class=3D"hljs-keyword">set</span> FAIL <span class=3D"hljs-number">0<=
/span>
<span class=3D"hljs-keyword">set</span> PASS <span class=3D"hljs-number">1<=
/span>
<span class=3D"hljs-keyword">set</span> DONTCARE <span class=3D"hljs-number=
">2</span>
cmdsReadSpecialBytes
<span class=3D"hljs-comment">#dbgShowInfo "********************************=
**********"</span>
<span class=3D"hljs-comment">#dbgShowInfo "************ RS232STD TESTS ****=
**********"</span>
<span class=3D"hljs-comment">#dbgShowInfo "********************************=
**********"</span>
<span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">tclt=
est</span>::testConstraints(constraint) <span class=3D"hljs-number">1</span=
>
cmdsImportCurrentMemoryNameSpace <span class=3D"hljs-string">"FLASH"</span>
<span class=3D"hljs-keyword">catch</span> [.testSelectionDbox.f_skip.b_skip=
1 configure -fg red]
<span class=3D"hljs-comment">#dbgShowInfo "*************** XAF TESTS ******=
**********"</span>
test xaf<span class=3D"hljs-number">-1.0</span> {Full Chip Erase} {constrai=
nt} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.0 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.0"</span>
ptclFullChipErase
} $PASS
test xaf<span class=3D"hljs-number">-1.1</span> {Write BSB =3D <span class=
=3D"hljs-number">0x55</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.1 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.1"</span>
ptclWriteBSB <span class=3D"hljs-string">"55"</span>
} $PASS
test xaf<span class=3D"hljs-number">-1.2</span> {Read BSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.2 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.2"</span>
ptclReadBSB
<span class=3D"hljs-keyword">set</span> ::deviceArray(bsb)
} {<span class=3D"hljs-number">55</span>}
test xaf<span class=3D"hljs-number">-1.3</span> {Write SBV =3D <span class=
=3D"hljs-number">0x55</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.3 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.3"</span>
ptclWriteSBV <span class=3D"hljs-string">"55"</span>
} $PASS
test xaf<span class=3D"hljs-number">-1.4</span> {Read SBV} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.4 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.4"</span>
ptclReadSBV
<span class=3D"hljs-keyword">set</span> ::deviceArray(sbv)
} {<span class=3D"hljs-number">55</span>}
test xaf<span class=3D"hljs-number">-1.5</span> {Write EB =3D <span class=
=3D"hljs-number">0x55</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.5 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.5 "</span>
ptclWriteEB <span class=3D"hljs-string">"55"</span>
} $PASS
test xaf<span class=3D"hljs-number">-1.6</span> {Read EB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.6 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.6 "</span>
ptclReadEB
<span class=3D"hljs-keyword">set</span> ::deviceArray(eb)
} {<span class=3D"hljs-number">55</span>}
test xaf<span class=3D"hljs-number">-1.7</span> {Write SSB =3D level <span =
class=3D"hljs-number">1</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.7 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.7"</span>
ptclProgSSBlev1
} $PASS
test xaf<span class=3D"hljs-number">-1.8</span><span class=3D"hljs-number">=
.1</span> {Read SSB} {! bootloaderId_0001_Only} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.8.1 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.8.1"</span>
ptclReadSSB
<span class=3D"hljs-keyword">set</span> ::deviceArray(ssb)
} $expAnsw(readSSBlev1)
test xaf<span class=3D"hljs-number">-1.8</span><span class=3D"hljs-number">=
.2</span> {Read SSB} {bootloaderId_0001_Only} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.8.2 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.8.2"</span>
ptclReadSSB
<span class=3D"hljs-keyword">set</span> ssb [<span class=3D"hljs-keyword">f=
ormat</span> %<span class=3D"hljs-number">02</span>X [<span class=3D"hljs-k=
eyword">expr</span> <span class=3D"hljs-number">0X0F</span> &amp; <span cla=
ss=3D"hljs-number">0</span>X$::deviceArray(ssb)]]
} $expAnsw(readSSBlev1Test)
test xaf<span class=3D"hljs-number">-1.9</span> {Write BSB =3D <span class=
=3D"hljs-number">0xAA</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.9 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.9"</span>
ptclWriteBSB <span class=3D"hljs-string">"AA"</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test xaf<span class=3D"hljs-number">-1.10</span> {Read BSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.10 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.10"</span>
ptclReadBSB
<span class=3D"hljs-keyword">set</span> ::deviceArray(bsb)
} {<span class=3D"hljs-number">55</span>}
test xaf<span class=3D"hljs-number">-1.11</span> {Write SBV =3D <span class=
=3D"hljs-number">0xAA</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.11 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.11"</span>
ptclWriteSBV <span class=3D"hljs-string">"AA"</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test xaf<span class=3D"hljs-number">-1.12</span> {Read SBV} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.12 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.12"</span>
ptclReadSBV
<span class=3D"hljs-keyword">set</span> ::deviceArray(sbv)
} {<span class=3D"hljs-number">55</span>}
test xaf<span class=3D"hljs-number">-1.13</span> {Write EB =3D <span class=
=3D"hljs-number">0xAA</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.13 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.13 "</span>
ptclWriteEB <span class=3D"hljs-string">"AA"</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test xaf<span class=3D"hljs-number">-1.14</span> {Read EB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.14 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.14 "</span>
ptclReadEB
<span class=3D"hljs-keyword">set</span> ::deviceArray(eb)
} {<span class=3D"hljs-number">55</span>}
test xaf<span class=3D"hljs-number">-1.15</span> {Write SSB =3D level <span=
 class=3D"hljs-number">2</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.15 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.15"</span>
ptclProgSSBlev2
} $PASS
test xaf<span class=3D"hljs-number">-1.16</span><span class=3D"hljs-number"=
>.1</span> {Read SSB} {! bootloaderId_0001_Only} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.16.1 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.16.1"</span>
ptclReadSSB
<span class=3D"hljs-keyword">set</span> ::deviceArray(ssb)
} $expAnsw(readSSBlev2Test)
test xaf<span class=3D"hljs-number">-1.16</span><span class=3D"hljs-number"=
>.2</span> {Read SSB} {bootloaderId_0001_Only} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.16.2 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.16.2"</span>
ptclReadSSB
<span class=3D"hljs-keyword">set</span> ssb [<span class=3D"hljs-keyword">f=
ormat</span> %<span class=3D"hljs-number">02</span>X [<span class=3D"hljs-k=
eyword">expr</span> <span class=3D"hljs-number">0X0F</span> &amp; <span cla=
ss=3D"hljs-number">0</span>X$::deviceArray(ssb)]]
} $expAnsw(readSSBlev2Test)
test xaf<span class=3D"hljs-number">-1.17</span> {Write BSB =3D <span class=
=3D"hljs-number">0x00</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.17 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.17"</span>
ptclWriteBSB <span class=3D"hljs-string">"00"</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test xaf<span class=3D"hljs-number">-1.18</span> {Read BSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.18 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.18"</span>
ptclReadBSB
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test xaf<span class=3D"hljs-number">-1.19</span> {Write SBV =3D <span class=
=3D"hljs-number">0x00</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.19 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.19"</span>
ptclWriteSBV <span class=3D"hljs-string">"00"</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test xaf<span class=3D"hljs-number">-1.20</span> {Read SBV} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.20 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.20"</span>
ptclReadSBV
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test xaf<span class=3D"hljs-number">-1.21</span> {Write EB =3D <span class=
=3D"hljs-number">0x00</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.21 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.21 "</span>
ptclWriteEB <span class=3D"hljs-string">"00"</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test xaf<span class=3D"hljs-number">-1.22</span> {Read EB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.22 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.22 "</span>
ptclReadEB
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test xaf<span class=3D"hljs-number">-1.23</span> {Write SSB =3D level <span=
 class=3D"hljs-number">1</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.23 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.23"</span>
ptclProgSSBlev1
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test xaf<span class=3D"hljs-number">-1.24</span><span class=3D"hljs-number"=
>.1</span> {Read SSB} {! bootloaderId_0001_Only} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.24.1 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.24.1"</span>
ptclReadSSB
<span class=3D"hljs-keyword">set</span> ::deviceArray(ssb)
} $expAnsw(readSSBlev2Test)
test xaf<span class=3D"hljs-number">-1.24</span><span class=3D"hljs-number"=
>.2</span> {Read SSB} {bootloaderId_0001_Only} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.24.2 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.24.2"</span>
ptclReadSSB
<span class=3D"hljs-keyword">set</span> ssb [<span class=3D"hljs-keyword">f=
ormat</span> %<span class=3D"hljs-number">02</span>X [<span class=3D"hljs-k=
eyword">expr</span> <span class=3D"hljs-number">0X0F</span> &amp; <span cla=
ss=3D"hljs-number">0</span>X$::deviceArray(ssb)]]
} $expAnsw(readSSBlev2Test)
test xaf<span class=3D"hljs-number">-1.25</span> {Full Chip Erase} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.25 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.25"</span>
ptclFullChipErase
} $PASS
test xaf<span class=3D"hljs-number">-1.26</span> {Read BSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.26 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.26"</span>
ptclReadBSB
<span class=3D"hljs-keyword">set</span> ::deviceArray(bsb)
} {FF}
test xaf<span class=3D"hljs-number">-1.27</span> {Read SBV} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.27 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.27"</span>
ptclReadSBV
<span class=3D"hljs-keyword">set</span> ::deviceArray(sbv)
} $testFlag(sbv)
test xaf<span class=3D"hljs-number">-1.28</span> {Read EB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.28 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.28 "</span>
ptclReadEB
<span class=3D"hljs-keyword">set</span> ::deviceArray(eb)
} {<span class=3D"hljs-number">55</span>}
test xaf<span class=3D"hljs-number">-1.29</span><span class=3D"hljs-number"=
>.1</span> {Read SSB} {! bootloaderId_0001_Only} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.29.1 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.29.1"</span>
ptclReadSSB
<span class=3D"hljs-keyword">set</span> ::deviceArray(ssb)
} $expAnsw(readSSBlev0)
test xaf<span class=3D"hljs-number">-1.29</span><span class=3D"hljs-number"=
>.2</span> {Read SSB} {bootloaderId_0001_Only} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.29.2 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.29.2"</span>
ptclReadSSB
<span class=3D"hljs-keyword">set</span> ssb [<span class=3D"hljs-keyword">f=
ormat</span> %<span class=3D"hljs-number">02</span>X [<span class=3D"hljs-k=
eyword">expr</span> <span class=3D"hljs-number">0X0F</span> &amp; <span cla=
ss=3D"hljs-number">0</span>X$::deviceArray(ssb)]]
} $expAnsw(readSSBlev0Test)
<span class=3D"hljs-keyword">catch</span> [.testSelectionDbox.f_skip.b_skip=
1 configure -fg black]
<span class=3D"hljs-keyword">catch</span> [.testSelectionDbox.f_skip.b_skip=
2 configure -fg red]
<span class=3D"hljs-comment">#dbgShowInfo "**************** FLASH *********=
**********"</span>
test flash<span class=3D"hljs-number">-2.0</span> {Full Chip Erase} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.0 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.0"</span>
ptclFullChipErase
} $PASS
test flash<span class=3D"hljs-number">-2.1</span> {Write randomize data fro=
m <span class=3D"hljs-number">0000</span> to [readBuffer maxAddr]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.1 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.1"</span>
randomizeBuffer
cmdsDeviceProgram <span class=3D"hljs-string">"000000"</span> [readBuffer m=
axAddr]
} $PASS
test flash<span class=3D"hljs-number">-2.2</span><span class=3D"hljs-number=
">.1</span> {Read from <span class=3D"hljs-number">0000</span> to [readBuff=
er maxAddr]} {! bootloaderId_0001_Only} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.2.1 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.2.1"</span>
cmdsDeviceVerify <span class=3D"hljs-number">0</span> [readBuffer maxAddr]
} $PASS
test flash<span class=3D"hljs-number">-2.2</span><span class=3D"hljs-number=
">.2</span> {Read from <span class=3D"hljs-number">0000</span> to [readBuff=
er maxAddr] - <span class=3D"hljs-number">3</span>} {bootloaderId_0001_Only=
} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.2.2 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.2.2"</span>
cmdsDeviceVerify <span class=3D"hljs-number">0</span> [<span class=3D"hljs-=
keyword">expr</span> <span class=3D"hljs-number">0</span>X[readBuffer maxAd=
dr] - <span class=3D"hljs-number">0X3</span>]
} $PASS
test flash<span class=3D"hljs-number">-2.3</span> {Full Chip Erase} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.3 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.3"</span>
ptclFullChipErase
} $PASS
test flash<span class=3D"hljs-number">-2.4</span> {Write AA at address <spa=
n class=3D"hljs-number">7</span>FF} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.4 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.4"</span>
<span class=3D"hljs-keyword">set</span> x $::deviceArray(bootloaderId)
<span class=3D"hljs-keyword">set</span> ::deviceArray(bootloaderId) <span c=
lass=3D"hljs-string">"0000"</span>
fillBuffer <span class=3D"hljs-string">"000000"</span> <span class=3D"hljs-=
string">"0007FE"</span> <span class=3D"hljs-string">"FF"</span>
fillBuffer <span class=3D"hljs-string">"0007FF"</span> <span class=3D"hljs-=
string">"0007FF"</span> <span class=3D"hljs-string">"AA"</span>
<span class=3D"hljs-keyword">set</span> status [cmdsDeviceProgram <span cla=
ss=3D"hljs-string">"0007FF"</span> <span class=3D"hljs-string">"0007FF"</sp=
an>]
<span class=3D"hljs-keyword">set</span> ::deviceArray(bootloaderId) $x
<span class=3D"hljs-keyword">set</span> status
} $PASS
test flash<span class=3D"hljs-number">-2.5</span> {Read at address <span cl=
ass=3D"hljs-number">07</span>FF} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.5 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.5"</span>
cmdsReadAddrRange <span class=3D"hljs-string">"0007FF"</span> <span class=
=3D"hljs-string">"0007FF"</span>
checkBuffer <span class=3D"hljs-string">"0007FF"</span> <span class=3D"hljs=
-string">"0007FF"</span> <span class=3D"hljs-string">"AA"</span>
} $PASS
test flash<span class=3D"hljs-number">-2.6</span> {Blank Check between <spa=
n class=3D"hljs-number">0000</span> and [readBuffer maxAddr]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.6 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.6"</span>
ptclBlankCheck <span class=3D"hljs-string">"000000"</span> [readBuffer maxA=
ddr]
} {<span class=3D"hljs-number">07</span>FF}
test flash<span class=3D"hljs-number">-2.7</span> {Full Chip Erase} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.7 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.7"</span>
ptclFullChipErase
} $PASS
test flash<span class=3D"hljs-number">-2.8</span> {Blank Check between <spa=
n class=3D"hljs-number">0000</span> and [readBuffer maxAddr]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.8 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.8"</span>
ptclBlankCheck <span class=3D"hljs-string">"000000"</span> [readBuffer maxA=
ddr]
} {<span class=3D"hljs-number">-1</span>}
test flash<span class=3D"hljs-number">-2.9</span> {Write SSB =3D level <spa=
n class=3D"hljs-number">1</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.9 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.9"</span>
ptclProgSSBlev1
} $PASS
test flash<span class=3D"hljs-number">-2.10</span><span class=3D"hljs-numbe=
r">.1</span> {Read SSB} {! bootloaderId_0001_Only} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.10.1 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.10.1"</span>
ptclReadSSB
<span class=3D"hljs-keyword">set</span> ::deviceArray(ssb)
} $expAnsw(readSSBlev1)
test flash<span class=3D"hljs-number">-2.10</span><span class=3D"hljs-numbe=
r">.2</span> {Read SSB} {bootloaderId_0001_Only} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.10.2 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.10.2"</span>
ptclReadSSB
<span class=3D"hljs-keyword">set</span> ssb [<span class=3D"hljs-keyword">f=
ormat</span> %<span class=3D"hljs-number">02</span>X [<span class=3D"hljs-k=
eyword">expr</span> <span class=3D"hljs-number">0X0F</span> &amp; <span cla=
ss=3D"hljs-number">0</span>X$::deviceArray(ssb)]]
} $expAnsw(readSSBlev1Test)
test flash<span class=3D"hljs-number">-2.11</span> {Write AA at address <sp=
an class=3D"hljs-number">07</span>FF} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.11 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.11"</span>
fillBuffer <span class=3D"hljs-string">"0007FF"</span> <span class=3D"hljs-=
string">"0007FF"</span> <span class=3D"hljs-string">"AA"</span>
cmdsDeviceProgram <span class=3D"hljs-string">"0007FF"</span> <span class=
=3D"hljs-string">"0007FF"</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test flash<span class=3D"hljs-number">-2.12</span> {Read at address <span c=
lass=3D"hljs-number">07</span>FF} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.12 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.12"</span>
cmdsReadAddrRange <span class=3D"hljs-string">"0007FF"</span> <span class=
=3D"hljs-string">"0007FF"</span>
checkBuffer <span class=3D"hljs-string">"0007FF"</span> <span class=3D"hljs=
-string">"0007FF"</span> <span class=3D"hljs-string">"AA"</span>
} {<span class=3D"hljs-number">0007</span>FF}
test flash<span class=3D"hljs-number">-2.13</span> {Write SSB =3D level <sp=
an class=3D"hljs-number">2</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.13 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.13"</span>
ptclProgSSBlev2
} $PASS
test flash<span class=3D"hljs-number">-2.14</span><span class=3D"hljs-numbe=
r">.1</span> {Read SSB} {! bootloaderId_0001_Only} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.14.1 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.14.1"</span>
ptclReadSSB
<span class=3D"hljs-keyword">set</span> ::deviceArray(ssb)
} $expAnsw(readSSBlev2Test)
test flash<span class=3D"hljs-number">-2.14</span><span class=3D"hljs-numbe=
r">.2</span> {Read SSB} {bootloaderId_0001_Only} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.14.2 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.14.2"</span>
ptclReadSSB
<span class=3D"hljs-keyword">set</span> ssb [<span class=3D"hljs-keyword">f=
ormat</span> %<span class=3D"hljs-number">02</span>X [<span class=3D"hljs-k=
eyword">expr</span> <span class=3D"hljs-number">0X0F</span> &amp; <span cla=
ss=3D"hljs-number">0</span>X$::deviceArray(ssb)]]
} $expAnsw(readSSBlev2Test)
test flash<span class=3D"hljs-number">-2.15</span> {Write AA at address <sp=
an class=3D"hljs-number">07</span>FF} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.15 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.15"</span>
fillBuffer <span class=3D"hljs-string">"0007FF"</span> <span class=3D"hljs-=
string">"0007FF"</span> <span class=3D"hljs-string">"AA"</span>
cmdsDeviceProgram <span class=3D"hljs-string">"0007FF"</span> <span class=
=3D"hljs-string">"0007FF"</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test flash<span class=3D"hljs-number">-2.16</span> {Read at address <span c=
lass=3D"hljs-number">07</span>FF} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.16 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.16"</span>
cmdsReadAddrRange <span class=3D"hljs-string">"0007FF"</span> <span class=
=3D"hljs-string">"0007FF"</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test flash<span class=3D"hljs-number">-2.17</span> {Full Chip Erase} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.17 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.17"</span>
ptclFullChipErase
} $PASS
test flash<span class=3D"hljs-number">-2.18</span> {Write AA from <span cla=
ss=3D"hljs-number">0000</span> to [readBuffer maxAddr]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.18 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.18"</span>
fillBuffer <span class=3D"hljs-string">"000000"</span> [readBuffer maxAddr]=
 <span class=3D"hljs-string">"AA"</span>
cmdsDeviceProgram <span class=3D"hljs-string">"000000"</span> [readBuffer m=
axAddr]
} $PASS
test flash<span class=3D"hljs-number">-2.19</span><span class=3D"hljs-numbe=
r">.1</span> {Read from <span class=3D"hljs-number">0000</span> to [readBuf=
fer maxAddr]} {! bootloaderId_0001_Only} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.19.1 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.19.1"</span>
cmdsDeviceVerify <span class=3D"hljs-number">0</span> [readBuffer maxAddr]
} $PASS
test flash<span class=3D"hljs-number">-2.19</span><span class=3D"hljs-numbe=
r">.2</span> {Read from <span class=3D"hljs-number">0000</span> to [readBuf=
fer maxAddr] - <span class=3D"hljs-number">3</span>} {bootloaderId_0001_Onl=
y} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.19.2 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.19.2"</span>
cmdsDeviceVerify <span class=3D"hljs-number">0</span> [<span class=3D"hljs-=
keyword">expr</span> <span class=3D"hljs-number">0</span>X[readBuffer maxAd=
dr] - <span class=3D"hljs-number">0X3</span>]
} $PASS
test flash<span class=3D"hljs-number">-2.20</span> {Erase Block <span class=
=3D"hljs-number">0</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.20 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.20"</span>
ptclEraseBlock0
} $PASS
test flash<span class=3D"hljs-number">-2.21</span> {Blank Check between <sp=
an class=3D"hljs-number">0000</span> and [readBuffer maxAddr]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.21 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.21"</span>
ptclBlankCheck <span class=3D"hljs-string">"000000"</span> [readBuffer maxA=
ddr]
} {<span class=3D"hljs-number">2000</span>}
test flash<span class=3D"hljs-number">-2.22</span> {Erase Block <span class=
=3D"hljs-number">1</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.22 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.22"</span>
ptclEraseBlock1
} $PASS
test flash<span class=3D"hljs-number">-2.23</span> {Blank Check between <sp=
an class=3D"hljs-number">0000</span> and [readBuffer maxAddr]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.23 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.23"</span>
ptclBlankCheck <span class=3D"hljs-string">"000000"</span> [readBuffer maxA=
ddr]
} {<span class=3D"hljs-number">4000</span>}
test flash<span class=3D"hljs-number">-2.23</span><span class=3D"hljs-numbe=
r">.1</span> {Blank Check between <span class=3D"hljs-number">0000</span> a=
nd [readBuffer maxAddr]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.23.1 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.23.1"</span>
ptclBlankCheck <span class=3D"hljs-string">"000000"</span> [readBuffer maxA=
ddr]
} {<span class=3D"hljs-number">-1</span>}
test flash<span class=3D"hljs-number">-2.24</span> {Erase Block <span class=
=3D"hljs-number">2</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.24 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.24"</span>
ptclEraseBlock2
} $PASS
test flash<span class=3D"hljs-number">-2.25</span> {Blank Check between <sp=
an class=3D"hljs-number">0000</span> and [readBuffer maxAddr]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.25 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.25"</span>
ptclBlankCheck <span class=3D"hljs-string">"000000"</span> [readBuffer maxA=
ddr]
} {<span class=3D"hljs-number">-1</span>}
test flash<span class=3D"hljs-number">-2.26</span> {Blank Check between <sp=
an class=3D"hljs-number">0000</span> and [readBuffer maxAddr]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.26 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.26"</span>
ptclBlankCheck <span class=3D"hljs-string">"000000"</span> [readBuffer maxA=
ddr]
} {<span class=3D"hljs-number">8000</span>}
test flash<span class=3D"hljs-number">-2.27</span> {Erase Block <span class=
=3D"hljs-number">3</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.27 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.27"</span>
ptclEraseBlock3
} $PASS
test flash<span class=3D"hljs-number">-2.28</span> {Blank Check between <sp=
an class=3D"hljs-number">0000</span> and [readBuffer maxAddr]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.28 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.28"</span>
ptclBlankCheck <span class=3D"hljs-string">"000000"</span> [readBuffer maxA=
ddr]
} {C000}
test flash<span class=3D"hljs-number">-2.29</span> {Erase Block <span class=
=3D"hljs-number">4</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.29 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.29"</span>
ptclEraseBlock4
} $PASS
test flash<span class=3D"hljs-number">-2.30</span> {Blank Check between <sp=
an class=3D"hljs-number">0000</span> and [readBuffer maxAddr]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.30 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.30"</span>
ptclBlankCheck <span class=3D"hljs-string">"000000"</span> [readBuffer maxA=
ddr]
} {<span class=3D"hljs-number">-1</span>}
test flash<span class=3D"hljs-number">-2.31</span> {Write <span class=3D"hl=
js-number">00</span> at address <span class=3D"hljs-number">0000</span>} {b=
ootloaderId_0002_Only} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.31 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.31"</span>
fillBuffer <span class=3D"hljs-string">"000000"</span> <span class=3D"hljs-=
string">"000000"</span> <span class=3D"hljs-string">"00"</span>
cmdsDeviceProgram <span class=3D"hljs-string">"000000"</span> <span class=
=3D"hljs-string">"000000"</span>
<span class=3D"hljs-keyword">set</span> status $DONTCARE
} $DONTCARE
test flash<span class=3D"hljs-number">-2.32</span> {Read addresses <span cl=
ass=3D"hljs-number">0000</span> to <span class=3D"hljs-number">0003</span>}=
 {bootloaderId_0002_Only} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.32 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.32"</span>
cmdsReadAddrRange <span class=3D"hljs-string">"000000"</span> <span class=
=3D"hljs-string">"000003"</span>
<span class=3D"hljs-keyword">if</span> { [checkBuffer <span class=3D"hljs-s=
tring">"000000"</span> <span class=3D"hljs-string">"000000"</span> <span cl=
ass=3D"hljs-string">"00"</span>] } {
checkBuffer <span class=3D"hljs-string">"000001"</span> <span class=3D"hljs=
-string">"000003"</span> <span class=3D"hljs-string">"FF"</span>
} else {
<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number">=
0</span>
}
} $PASS
test flash<span class=3D"hljs-number">-2.33</span> {Blank Check} {bootloade=
rId_0002_Only} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.33 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.33"</span>
ptclBlankCheck <span class=3D"hljs-string">"000000"</span> [readBuffer maxA=
ddr]
} {<span class=3D"hljs-number">0000</span>}
test flash<span class=3D"hljs-number">-2.34</span> {Full Chip Erase} {bootl=
oaderId_0002_Only} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.34 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.34"</span>
ptclFullChipErase
} $PASS
test flash<span class=3D"hljs-number">-2.35</span> {Blank Check} {bootloade=
rId_0002_Only} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.35 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.35"</span>
ptclBlankCheck <span class=3D"hljs-string">"000000"</span> [readBuffer maxA=
ddr]
} {<span class=3D"hljs-number">-1</span>}
test flash<span class=3D"hljs-number">-2.36</span> {Write <span class=3D"hl=
js-number">55</span> at address <span class=3D"hljs-number">07</span>FFF} {=
bootloaderId_0002_Only} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.36 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.36"</span>
<span class=3D"hljs-keyword">set</span> ::deviceArray(bootloaderId) <span c=
lass=3D"hljs-string">"0000"</span>
fillBuffer [readBuffer maxAddr] [readBuffer maxAddr] <span class=3D"hljs-st=
ring">"55"</span>
cmdsDeviceProgram [readBuffer maxAddr] [readBuffer maxAddr]
<span class=3D"hljs-keyword">set</span> ::deviceArray(bootloaderId) <span c=
lass=3D"hljs-string">"0002"</span>
<span class=3D"hljs-keyword">set</span> status $DONTCARE
} $DONTCARE
test flash<span class=3D"hljs-number">-2.37</span> {Read from <span class=
=3D"hljs-number">07</span>FFD to <span class=3D"hljs-number">07</span>FFF} =
{bootloaderId_0002_Only} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.37 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.37"</span>
cmdsReadAddrRange <span class=3D"hljs-string">"007FFD"</span> <span class=
=3D"hljs-string">"007FFF"</span>
<span class=3D"hljs-keyword">if</span> { [checkBuffer <span class=3D"hljs-s=
tring">"007FFD"</span> <span class=3D"hljs-string">"007FFE"</span> <span cl=
ass=3D"hljs-string">"FF"</span>] } {
checkBuffer <span class=3D"hljs-string">"007FFF"</span> <span class=3D"hljs=
-string">"007FFF"</span> <span class=3D"hljs-string">"55"</span>
} else {
<span class=3D"hljs-keyword">set</span> X <span class=3D"hljs-number">0</sp=
an>
}
} $PASS
test flash<span class=3D"hljs-number">-2.38</span> {Blank Check} {bootloade=
rId_0002_Only} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.38 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.38"</span>
ptclBlankCheck <span class=3D"hljs-string">"000000"</span> [readBuffer maxA=
ddr]
} [<span class=3D"hljs-keyword">format</span> %<span class=3D"hljs-number">=
04</span>X <span class=3D"hljs-number">0</span>X[readBuffer maxAddr]]
test flash<span class=3D"hljs-number">-2.39</span> {Write <span class=3D"hl=
js-keyword">memory</span> with wrong CRC} {bootloaderId_0002_Only} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.39 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.39"</span>
<span class=3D"hljs-keyword">set</span> ::deviceArray(bootloaderId) <span c=
lass=3D"hljs-string">"0000"</span>
randomizeBuffer
cmdsDeviceProgram <span class=3D"hljs-string">"000000"</span> [readBuffer m=
axAddr]
<span class=3D"hljs-keyword">set</span> ::deviceArray(bootloaderId) <span c=
lass=3D"hljs-string">"0002"</span>
<span class=3D"hljs-keyword">set</span> status [readBootloaderCrcCheck]
} $FAIL
<span class=3D"hljs-keyword">catch</span> [.testSelectionDbox.f_skip.b_skip=
2 configure -fg black]
<span class=3D"hljs-keyword">catch</span> [.testSelectionDbox.f_skip.b_skip=
3 configure -fg red]
<span class=3D"hljs-comment">#dbgShowInfo "***************** FUSE *********=
**********"</span>
test fuse<span class=3D"hljs-number">-3.0</span> {Full Chip Erase} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D fuse-3.0 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"fuse-3.0"</span>
ptclFullChipErase
} $PASS
test fuse<span class=3D"hljs-number">-3.1</span> {Write SSB =3D level <span=
 class=3D"hljs-number">2</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D fuse-3.1 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"fuse-3.1"</span>
ptclProgSSBlev2
} $PASS
test fuse<span class=3D"hljs-number">-3.2</span> {Read SSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D fuse-3.2 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"fuse-3.2"</span>
ptclReadSSB
<span class=3D"hljs-keyword">set</span> ::deviceArray(ssb)
} $expAnsw(readSSBlev2Test)
test fuse<span class=3D"hljs-number">-3.3</span> {Read Hardware Byte} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D fuse-3.3 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"fuse-3.3"</span>
ptclReadHwByte
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-12</span>}
test fuse<span class=3D"hljs-number">-3.4</span> {Full Chip Erase} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D fuse-3.4 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"fuse-3.4"</span>
ptclFullChipErase
} $PASS
test fuse<span class=3D"hljs-number">-3.5</span> {Read Hardware Byte} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D fuse-3.5 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"fuse-3.5"</span>
ptclReadHwByte
} $PASS
<span class=3D"hljs-keyword">catch</span> [.testSelectionDbox.f_skip.b_skip=
3 configure -fg black]
<span class=3D"hljs-keyword">catch</span> [.testSelectionDbox.f_skip.b_skip=
4 configure -fg red]
<span class=3D"hljs-comment">#dbgShowInfo "********* SPECIFIC INFORMATIONS =
**********"</span>
test specific<span class=3D"hljs-number">-4.0</span> {Full Chip Erase} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D specific-4.0 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"specific-4.0"</span>
ptclFullChipErase
} $PASS
test specific<span class=3D"hljs-number">-4.1</span> {Read Bootloader Versi=
on} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D specific-4.1 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"specific-4.1"</span>
ptclReadBootlVer
} $PASS
test specific<span class=3D"hljs-number">-4.2</span> {Read Device Boot Id <=
span class=3D"hljs-number">1</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D specific-4.2 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"specific-4.2"</span>
ptclReadDevBootId1
} $PASS
test specific<span class=3D"hljs-number">-4.3</span> {Read Device Boot Id <=
span class=3D"hljs-number">2</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D specific-4.3 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"specific-4.3"</span>
ptclReadDevBootId2
} $PASS
test specific<span class=3D"hljs-number">-4.4</span> {Read Manufacturer Cod=
e} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D specific-4.4 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"specific-4.4"</span>
ptclReadManufId
} $PASS
test specific<span class=3D"hljs-number">-4.5</span> {Read Device Id <span =
class=3D"hljs-number">1</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D specific-4.5 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"specific-4.5"</span>
ptclReadDeviceId1
} $PASS
test specific<span class=3D"hljs-number">-4.6</span> {Read Device Id <span =
class=3D"hljs-number">2</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D specific-4.6 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"specific-4.6"</span>
ptclReadDeviceId2
} $PASS
test specific<span class=3D"hljs-number">-4.7</span> {Read Device Id <span =
class=3D"hljs-number">3</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D specific-4.7 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"specific-4.7"</span>
ptclReadDeviceId3
} $PASS
test specific<span class=3D"hljs-number">-4.8</span> {Write SSB =3D level <=
span class=3D"hljs-number">2</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D specific-4.8 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"specific-4.8"</span>
ptclProgSSBlev2
} $PASS
test specific<span class=3D"hljs-number">-4.9</span> {Read SSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D specific-4.9 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"specific-4.9"</span>
ptclReadSSB
} $PASS
test specific<span class=3D"hljs-number">-4.10</span> {Read Bootloader Vers=
ion} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D specific-4.10 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"specific-4.10"</span>
ptclReadBootlVer
} $PASS
test specific<span class=3D"hljs-number">-4.11</span> {Read Device Boot Id =
<span class=3D"hljs-number">1</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D specific-4.11 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"specific-4.11"</span>
ptclReadDevBootId1
} $PASS
test specific<span class=3D"hljs-number">-4.12</span> {Read Device Boot Id =
<span class=3D"hljs-number">2</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D specific-4.12 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"specific-4.12"</span>
ptclReadDevBootId2
} $PASS
test specific<span class=3D"hljs-number">-4.13</span> {Read Manufacturer Co=
de} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D specific-4.13 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"specific-4.13"</span>
ptclReadManufId
} $PASS
test specific<span class=3D"hljs-number">-4.14</span> {Read Device Id <span=
 class=3D"hljs-number">1</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D specific-4.14 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"specific-4.14"</span>
ptclReadDeviceId1
} $PASS
test specific<span class=3D"hljs-number">-4.15</span> {Read Device Id <span=
 class=3D"hljs-number">2</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D specific-4.15 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"specific-4.15"</span>
ptclReadDeviceId2
} $PASS
test specific<span class=3D"hljs-number">-4.16</span> {Read Device Id <span=
 class=3D"hljs-number">3</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D specific-4.16 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"specific-4.16"</span>
ptclReadDeviceId3
} $PASS
test specific<span class=3D"hljs-number">-4.17</span> {Full Chip Erase} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D specific-4.17 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"specific-4.17"</span>
ptclFullChipErase
} $PASS
<span class=3D"hljs-keyword">catch</span> [.testSelectionDbox.f_skip.b_skip=
4 configure -fg black]
<span class=3D"hljs-keyword">catch</span> [.testSelectionDbox.f_skip.b_skip=
5 configure -fg red]
<span class=3D"hljs-comment">#dbgShowInfo "**************** CHECKSUM ******=
***********"</span>
test checksum<span class=3D"hljs-number">-5.0</span> {Full Chip Erase} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test checksum-5.0 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test checksum-5.0"</span>
ptclFullChipErase
} $PASS
test checksum<span class=3D"hljs-number">-5.1</span> {Write Program Data} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test checksum-5.1 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test checksum-5.1"</span>
ptclSendFrame <span class=3D"hljs-string">":010000005500"</span>
ptclGetAck <span class=3D"hljs-number">2000</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-15</span>}
test checksum<span class=3D"hljs-number">-5.2</span> {Erase Block <span cla=
ss=3D"hljs-number">0</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test checksum-5.2 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test checksum-5.2"</span>
ptclSendFrame <span class=3D"hljs-string">":02000003010000"</span>
ptclGetAck <span class=3D"hljs-number">2000</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-15</span>}
test checksum<span class=3D"hljs-number">-5.3</span> {Erase Block <span cla=
ss=3D"hljs-number">1</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test checksum-5.3 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test checksum-5.3"</span>
ptclSendFrame <span class=3D"hljs-string">":02000003012000"</span>
ptclGetAck <span class=3D"hljs-number">2000</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-15</span>}
test checksum<span class=3D"hljs-number">-5.4</span> {Erase Block <span cla=
ss=3D"hljs-number">2</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test checksum-5.4 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test checksum-5.4"</span>
ptclSendFrame <span class=3D"hljs-string">":02000003014000"</span>
ptclGetAck <span class=3D"hljs-number">2000</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-15</span>}
test checksum<span class=3D"hljs-number">-5.5</span> {Erase Block <span cla=
ss=3D"hljs-number">3</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test checksum-5.5 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test checksum-5.5"</span>
ptclSendFrame <span class=3D"hljs-string">":02000003018000"</span>
ptclGetAck <span class=3D"hljs-number">2000</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-15</span>}
test checksum<span class=3D"hljs-number">-5.6</span> {Erase Block <span cla=
ss=3D"hljs-number">4</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test checksum-5.6 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test checksum-5.6"</span>
ptclSendFrame <span class=3D"hljs-string">":0200000301C000"</span>
ptclGetAck <span class=3D"hljs-number">2000</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-15</span>}
test checksum<span class=3D"hljs-number">-5.7</span> {Erase SBV and BSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test checksum-5.7 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test checksum-5.7"</span>
ptclSendFrame <span class=3D"hljs-string">":02000003040000"</span>
ptclGetAck <span class=3D"hljs-number">2000</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-15</span>}
test checksum<span class=3D"hljs-number">-5.8</span> {Program SSB level <sp=
an class=3D"hljs-number">1</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test checksum-5.8 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test checksum-5.8"</span>
ptclSendFrame <span class=3D"hljs-string">":02000003050000"</span>
ptclGetAck <span class=3D"hljs-number">2000</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-15</span>}
test checksum<span class=3D"hljs-number">-5.9</span> {Program SSB level <sp=
an class=3D"hljs-number">2</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test checksum-5.9 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test checksum-5.9"</span>
ptclSendFrame <span class=3D"hljs-string">":02000003050100"</span>
ptclGetAck <span class=3D"hljs-number">2000</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-15</span>}
test checksum<span class=3D"hljs-number">-5.10</span> {Program BSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test checksum-5.10 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test checksum-5.10"</span>
ptclSendFrame <span class=3D"hljs-string">":0300000306005500"</span>
ptclGetAck <span class=3D"hljs-number">2000</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-15</span>}
test checksum<span class=3D"hljs-number">-5.11</span> {Program SBV} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test checksum-5.11 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test checksum-5.11"</span>
ptclSendFrame <span class=3D"hljs-string">":0300000306005500"</span>
ptclGetAck <span class=3D"hljs-number">2000</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-15</span>}
test checksum<span class=3D"hljs-number">-5.12</span> {Full Chip Erase} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test checksum-5.12 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test checksum-5.12"</span>
ptclSendFrame <span class=3D"hljs-string">":010000030700"</span>
ptclGetAck <span class=3D"hljs-number">2000</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-15</span>}
test checksum<span class=3D"hljs-number">-5.13</span> {Program Osc Fuse} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test checksum-5.13 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test checksum-5.13"</span>
ptclSendFrame <span class=3D"hljs-string">":030000030A025500"</span>
ptclGetAck <span class=3D"hljs-number">2000</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-15</span>}
test checksum<span class=3D"hljs-number">-5.14</span> {Program BLJB Fuse} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test checksum-5.14 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test checksum-5.14"</span>
ptclSendFrame <span class=3D"hljs-string">":030000030A045500"</span>
ptclGetAck <span class=3D"hljs-number">2000</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-15</span>}
test checksum<span class=3D"hljs-number">-5.15</span> {Program X2 Fuse} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test checksum-5.15 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test checksum-5.15"</span>
ptclSendFrame <span class=3D"hljs-string">":030000030A085500"</span>
ptclGetAck <span class=3D"hljs-number">2000</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-15</span>}
test checksum<span class=3D"hljs-number">-5.16</span> {Display Data} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test checksum-5.16 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test checksum-5.16"</span>
ptclSendFrame <span class=3D"hljs-string">":05000004000055550000"</span>
ptclGetAck <span class=3D"hljs-number">2000</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-15</span>}
test checksum<span class=3D"hljs-number">-5.17</span> {Blank Check} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test checksum-5.17 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test checksum-5.17"</span>
ptclSendFrame <span class=3D"hljs-string">":05000004000055550100"</span>
ptclGetAck <span class=3D"hljs-number">2000</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-15</span>}
test checksum<span class=3D"hljs-number">-5.18</span> {Read Manuf Id} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test checksum-5.18 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test checksum-5.18"</span>
ptclSendFrame <span class=3D"hljs-string">":02000005000000"</span>
ptclGetAck <span class=3D"hljs-number">2000</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-15</span>}
test checksum<span class=3D"hljs-number">-5.19</span> {Read Device Id <span=
 class=3D"hljs-number">1</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test checksum-5.19 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test checksum-5.19"</span>
ptclSendFrame <span class=3D"hljs-string">":02000005000100"</span>
ptclGetAck <span class=3D"hljs-number">2000</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-15</span>}
test checksum<span class=3D"hljs-number">-5.20</span> {Read Device Id <span=
 class=3D"hljs-number">2</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test checksum-5.20 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test checksum-5.20"</span>
ptclSendFrame <span class=3D"hljs-string">":02000005000200"</span>
ptclGetAck <span class=3D"hljs-number">2000</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-15</span>}
test checksum<span class=3D"hljs-number">-5.21</span> {Read Device Id <span=
 class=3D"hljs-number">3</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test checksum-5.21 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test checksum-5.21"</span>
ptclSendFrame <span class=3D"hljs-string">":02000005000300"</span>
ptclGetAck <span class=3D"hljs-number">2000</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-15</span>}
test checksum<span class=3D"hljs-number">-5.22</span> {Read SSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test checksum-5.22 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test checksum-5.22"</span>
ptclSendFrame <span class=3D"hljs-string">":02000005070000"</span>
ptclGetAck <span class=3D"hljs-number">2000</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-15</span>}
test checksum<span class=3D"hljs-number">-5.23</span> {Read BSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test checksum-5.23 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test checksum-5.23"</span>
ptclSendFrame <span class=3D"hljs-string">":02000005070100"</span>
ptclGetAck <span class=3D"hljs-number">2000</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-15</span>}
test checksum<span class=3D"hljs-number">-5.24</span> {Read SBV} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test checksum-5.24 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test checksum-5.24"</span>
ptclSendFrame <span class=3D"hljs-string">":02000005070200"</span>
ptclGetAck <span class=3D"hljs-number">2000</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-15</span>}
test checksum<span class=3D"hljs-number">-5.25</span> {Read Hardware Byte} =
{
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test checksum-5.25 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test checksum-5.25"</span>
ptclSendFrame <span class=3D"hljs-string">":02000005070300"</span>
ptclGetAck <span class=3D"hljs-number">2000</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-15</span>}
test checksum<span class=3D"hljs-number">-5.26</span> {Read Bootloader Vers=
ion} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test checksum-5.26 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test checksum-5.26"</span>
ptclSendFrame <span class=3D"hljs-string">":02000005080000"</span>
ptclGetAck <span class=3D"hljs-number">2000</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-15</span>}
test checksum<span class=3D"hljs-number">-5.27</span> {Read SSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test checksum-5.27 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test checksum-5.27"</span>
ptclSendFrame <span class=3D"hljs-string">":020000050B0000"</span>
ptclGetAck <span class=3D"hljs-number">2000</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-15</span>}
test checksum<span class=3D"hljs-number">-5.28</span> {Read Device Boot Id =
<span class=3D"hljs-number">1</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test checksum-5.28 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test checksum-5.28"</span>
ptclSendFrame <span class=3D"hljs-string">":020000050E0000"</span>
ptclGetAck <span class=3D"hljs-number">2000</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-15</span>}
test checksum<span class=3D"hljs-number">-5.29</span> {Read Device Boot Id =
<span class=3D"hljs-number">2</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test checksum-5.29 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test checksum-5.29"</span>
ptclSendFrame <span class=3D"hljs-string">":020000050E0100"</span>
ptclGetAck <span class=3D"hljs-number">2000</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-15</span>}
test checksum<span class=3D"hljs-number">-5.30</span> {Read Bootloader Vers=
ion} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test checksum-5.30 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test checksum-5.30"</span>
ptclSendFrame <span class=3D"hljs-string">":020000050F0000"</span>
ptclGetAck <span class=3D"hljs-number">2000</span>
<span class=3D"hljs-keyword">set</span> errCode
} {<span class=3D"hljs-number">-15</span>}
test checksum<span class=3D"hljs-number">-5.31</span> {Full Chip Erase} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test checksum-5.31 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test checksum-5.31"</span>
ptclFullChipErase
} $PASS
<span class=3D"hljs-keyword">catch</span> [.testSelectionDbox.f_skip.b_skip=
5 configure -fg black]
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">strin=
g</span> first <span class=3D"hljs-string">"EEPROM"</span> [<span class=3D"=
hljs-keyword">namespace</span> children ::]] !=3D <span class=3D"hljs-numbe=
r">-1</span>} then {
    cmdsImportCurrentMemoryNameSpace <span class=3D"hljs-string">"EEPROM"</=
span>
    <span class=3D"hljs-keyword">catch</span> [.testSelectionDbox.f_skip.b_=
skip6 configure -fg red]
<span class=3D"hljs-comment">    #dbgShowInfo "**************** EEPROM ****=
*************"</span>
    test eeprom<span class=3D"hljs-number">-6.0</span> {Fill EEPROM with <s=
pan class=3D"hljs-number">0xFF</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test eeprom-6.0 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test eeprom-6.0"</span>
fillBuffer <span class=3D"hljs-string">"000000"</span> [readBuffer maxAddr]=
 <span class=3D"hljs-string">"FF"</span>
cmdsDeviceProgram <span class=3D"hljs-string">"000000"</span> [readBuffer m=
axAddr]
} $PASS
    test eeprom<span class=3D"hljs-number">-6.1</span> {Verify the whole EE=
PROM} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test eeprom-6.1 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test eeprom-6.1"</span>
fillBuffer <span class=3D"hljs-string">"000000"</span> [readBuffer maxAddr]=
 <span class=3D"hljs-string">"00"</span>
cmdsReadAddrRange <span class=3D"hljs-string">"000000"</span> [readBuffer m=
axAddr]
checkBuffer <span class=3D"hljs-string">"000000"</span> [readBuffer maxAddr=
] <span class=3D"hljs-string">"FF"</span>
} $PASS
    test eeprom<span class=3D"hljs-number">-6.2</span> {Fill EEPROM with <s=
pan class=3D"hljs-number">0x00</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test eeprom-6.2 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test eeprom-6.2"</span>
fillBuffer <span class=3D"hljs-string">"000000"</span> [readBuffer maxAddr]=
 <span class=3D"hljs-string">"00"</span>
cmdsDeviceProgram <span class=3D"hljs-string">"000000"</span> [readBuffer m=
axAddr]
} $PASS
    test eeprom<span class=3D"hljs-number">-6.3</span> {Verify the whole EE=
PROM} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test eeprom-6.3 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test eeprom-6.3"</span>
fillBuffer <span class=3D"hljs-string">"000000"</span> [readBuffer maxAddr]=
 <span class=3D"hljs-string">"FF"</span>
cmdsReadAddrRange <span class=3D"hljs-string">"000000"</span> [readBuffer m=
axAddr]
checkBuffer <span class=3D"hljs-string">"000000"</span> [readBuffer maxAddr=
] <span class=3D"hljs-string">"00"</span>
} $PASS
    test eeprom<span class=3D"hljs-number">-6.4</span> {Fill EEPROM with <s=
pan class=3D"hljs-number">0x55</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test eeprom-6.4 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test eeprom-6.4"</span>
fillBuffer <span class=3D"hljs-string">"000000"</span> [readBuffer maxAddr]=
 <span class=3D"hljs-string">"55"</span>
cmdsDeviceProgram <span class=3D"hljs-string">"000000"</span> [readBuffer m=
axAddr]
} $PASS
    test eeprom<span class=3D"hljs-number">-6.5</span> {Verify the whole EE=
PROM} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test eeprom-6.5 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test eeprom-6.5"</span>
fillBuffer <span class=3D"hljs-string">"000000"</span> [readBuffer maxAddr]=
 <span class=3D"hljs-string">"AA"</span>
cmdsReadAddrRange <span class=3D"hljs-string">"000000"</span> [readBuffer m=
axAddr]
checkBuffer <span class=3D"hljs-string">"000000"</span> [readBuffer maxAddr=
] <span class=3D"hljs-string">"55"</span>
} $PASS
    test eeprom<span class=3D"hljs-number">-6.6</span> {Fill EEPROM with <s=
pan class=3D"hljs-number">0xAA</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test eeprom-6.6 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test eeprom-6.6"</span>
fillBuffer <span class=3D"hljs-string">"000000"</span> [readBuffer maxAddr]=
 <span class=3D"hljs-string">"AA"</span>
cmdsDeviceProgram <span class=3D"hljs-string">"000000"</span> [readBuffer m=
axAddr]
} $PASS
    test eeprom<span class=3D"hljs-number">-6.7</span> {Verify the whole EE=
PROM} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test eeprom-6.7 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test eeprom-6.7"</span>
fillBuffer <span class=3D"hljs-string">"000000"</span> [readBuffer maxAddr]=
 <span class=3D"hljs-string">"55"</span>
cmdsReadAddrRange <span class=3D"hljs-string">"000000"</span> [readBuffer m=
axAddr]
checkBuffer <span class=3D"hljs-string">"000000"</span> [readBuffer maxAddr=
] <span class=3D"hljs-string">"AA"</span>
} $PASS
    test eeprom<span class=3D"hljs-number">-6.8</span> {Fill EEPROM with <s=
pan class=3D"hljs-number">0xFF</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test eeprom-6.8 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test eeprom-6.8"</span>
fillBuffer <span class=3D"hljs-string">"000000"</span> [readBuffer maxAddr]=
 <span class=3D"hljs-string">"FF"</span>
cmdsDeviceProgram <span class=3D"hljs-string">"000000"</span> [readBuffer m=
axAddr]
} $PASS
    test eeprom<span class=3D"hljs-number">-6.9</span> {Verify the whole EE=
PROM} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test eeprom-6.9 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test eeprom-6.9"</span>
fillBuffer <span class=3D"hljs-string">"000000"</span> [readBuffer maxAddr]=
 <span class=3D"hljs-string">"00"</span>
cmdsReadAddrRange <span class=3D"hljs-string">"000000"</span> [readBuffer m=
axAddr]
checkBuffer <span class=3D"hljs-string">"000000"</span> [readBuffer maxAddr=
] <span class=3D"hljs-string">"FF"</span>
} $PASS
    <span class=3D"hljs-keyword">catch</span> [.testSelectionDbox.f_skip.b_=
skip6 configure -fg black]
    cmdsImportCurrentMemoryNameSpace <span class=3D"hljs-string">"FLASH"</s=
pan>
}
::<span class=3D"hljs-keyword">tcltest</span>::cleanupTests
log_message <span class=3D"hljs-string">"Rs232std tests completed. Check th=
e log file for errors."</span>
cmdsRestoreSpecialBytes
<span class=3D"hljs-keyword">set</span> flipStates(mssgBox) <span class=3D"=
hljs-number">1</span>
<span class=3D"hljs-keyword">return</span>
<span class=3D"hljs-comment">#dbgEndSrc [info script]</span>
<span class=3D"hljs-comment">#dbgBeginSrc [info script]</span>
<span class=3D"hljs-keyword">global</span> buffer protocol expAnsw testFlag=
 canProtocol waitTime doTestArray flipStates hUSB_DFU bStatus
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">lsear=
ch</span> [<span class=3D"hljs-keyword">namespace</span> children] ::<span =
class=3D"hljs-keyword">tcltest</span>] =3D=3D <span class=3D"hljs-number">-=
1</span>} then {
    <span class=3D"hljs-keyword">package</span> require <span class=3D"hljs=
-keyword">tcltest</span>
    <span class=3D"hljs-keyword">namespace</span> import ::<span class=3D"h=
ljs-keyword">tcltest</span>::*
}
<span class=3D"hljs-keyword">set</span> skipList {}
<span class=3D"hljs-keyword">foreach</span> test [<span class=3D"hljs-keywo=
rd">array</span> names doTestArray] {
    <span class=3D"hljs-keyword">if</span> {! $doTestArray($test)} then {
	<span class=3D"hljs-keyword">append</span> skipList <span class=3D"hljs-st=
ring">" ${test}* "</span>
    }
}
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info<=
/span> exists ::deviceArray(skipList)]} then {
    <span class=3D"hljs-keyword">append</span> skipList $::deviceArray(skip=
List)
}
<span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">tclt=
est</span>::skip $skipList
<span class=3D"hljs-comment">#dbgShowVar "skip =3D $::tcltest::skip"</span>
<span class=3D"hljs-keyword">set</span> flipStates(mssgBox) <span class=3D"=
hljs-number">0</span>
<span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">tclt=
est</span>::verbose <span class=3D"hljs-string">"ps"</span>
<span class=3D"hljs-keyword">set</span> PASS <span class=3D"hljs-number">1<=
/span>
<span class=3D"hljs-keyword">set</span> FAIL <span class=3D"hljs-number">0<=
/span>
cmdsReadSpecialBytes
debug_log <span class=3D"hljs-string">"************************************=
**********"</span>
debug_log <span class=3D"hljs-string">"********** USB DFU Standard TESTS **=
**********"</span>
debug_log <span class=3D"hljs-string">"************************************=
**********"</span>
cmdsImportCurrentMemoryNameSpace [<span class=3D"hljs-keyword">lindex</span=
> $::deviceArray(memoryList) <span class=3D"hljs-number">0</span>]
<span class=3D"hljs-keyword">catch</span> [.testSelectionDbox.f_skip.b_skip=
1 configure -fg red]
debug_log <span class=3D"hljs-string">"*************** XAF TESTS **********=
******"</span>
test xaf<span class=3D"hljs-number">-1.0</span> {Full Chip Erase} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.0 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.0 "</span>
ptclFullChipErase
} $PASS
test xaf<span class=3D"hljs-number">-1.1</span> {Write BSB =3D <span class=
=3D"hljs-number">0x55</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.1 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.1 "</span>
ptclWriteBSB <span class=3D"hljs-string">"55"</span>
} $PASS
test xaf<span class=3D"hljs-number">-1.2</span> {Read BSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.2 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.2 "</span>
ptclReadBSB
<span class=3D"hljs-keyword">set</span> ::deviceArray(bsb)
} {<span class=3D"hljs-number">55</span>}
test xaf<span class=3D"hljs-number">-1.3</span> {Write SBV =3D <span class=
=3D"hljs-number">0x55</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.3 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.3 "</span>
ptclWriteSBV <span class=3D"hljs-string">"55"</span>
} $PASS
test xaf<span class=3D"hljs-number">-1.4</span> {Read SBV} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.4 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.4 "</span>
ptclReadSBV
<span class=3D"hljs-keyword">set</span> ::deviceArray(sbv)
} {<span class=3D"hljs-number">55</span>}
test xaf<span class=3D"hljs-number">-1.5</span> {Write EB =3D <span class=
=3D"hljs-number">0x55</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.5 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.5 "</span>
ptclWriteEB <span class=3D"hljs-string">"55"</span>
} $PASS
test xaf<span class=3D"hljs-number">-1.6</span> {Read EB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.6 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.6 "</span>
ptclReadEB
<span class=3D"hljs-keyword">set</span> ::deviceArray(eb)
} {<span class=3D"hljs-number">55</span>}
test xaf<span class=3D"hljs-number">-1.6</span><span class=3D"hljs-number">=
.1</span> {Write P1_CF =3D <span class=3D"hljs-number">0x55</span>} {[<span=
 class=3D"hljs-keyword">string</span> equal $::deviceArray(name) <span clas=
s=3D"hljs-string">"AT89C5131"</span>]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.6.1 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.6.1"</span>
ptclWriteByte $protocol(writeP1) <span class=3D"hljs-string">"55"</span> <s=
pan class=3D"hljs-number">1</span>
} $bStatus(OK)
test xaf<span class=3D"hljs-number">-1.6</span><span class=3D"hljs-number">=
.2</span> {Read P1_CF} {[<span class=3D"hljs-keyword">string</span> equal $=
::deviceArray(name) <span class=3D"hljs-string">"AT89C5131"</span>]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.6.2 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.6.2"</span>
ptclReadByte $protocol(readP1)
} {<span class=3D"hljs-number">55</span>}
test xaf<span class=3D"hljs-number">-1.6</span><span class=3D"hljs-number">=
.3</span> {Write P3_CF =3D <span class=3D"hljs-number">0x55</span>} {[<span=
 class=3D"hljs-keyword">string</span> equal $::deviceArray(name) <span clas=
s=3D"hljs-string">"AT89C5131"</span>]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.6.3 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.6.3"</span>
ptclWriteByte $protocol(writeP3) <span class=3D"hljs-string">"55"</span> <s=
pan class=3D"hljs-number">1</span>
} $bStatus(OK)
test xaf<span class=3D"hljs-number">-1.6</span><span class=3D"hljs-number">=
.4</span> {Read P3_CF} {[<span class=3D"hljs-keyword">string</span> equal $=
::deviceArray(name) <span class=3D"hljs-string">"AT89C5131"</span>]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.6.4 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.6.4"</span>
ptclReadByte $protocol(readP3)
} {<span class=3D"hljs-number">55</span>}
test xaf<span class=3D"hljs-number">-1.6</span><span class=3D"hljs-number">=
.5</span> {Write P4_CF =3D <span class=3D"hljs-number">0x55</span>} {[<span=
 class=3D"hljs-keyword">string</span> equal $::deviceArray(name) <span clas=
s=3D"hljs-string">"AT89C5131"</span>]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.6.5 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.6.5"</span>
ptclWriteByte $protocol(writeP4) <span class=3D"hljs-string">"55"</span> <s=
pan class=3D"hljs-number">1</span>
} $bStatus(OK)
test xaf<span class=3D"hljs-number">-1.6</span><span class=3D"hljs-number">=
.6</span> {Read P4_CF} {[<span class=3D"hljs-keyword">string</span> equal $=
::deviceArray(name) <span class=3D"hljs-string">"AT89C5131"</span>]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.6.6 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.6.6"</span>
ptclReadByte $protocol(readP4)
} {<span class=3D"hljs-number">55</span>}
test xaf<span class=3D"hljs-number">-1.7</span> {Write SSB =3D level <span =
class=3D"hljs-number">1</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.7 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.7 "</span>
ptclProgSSBlev1
} $PASS
test xaf<span class=3D"hljs-number">-1.8</span> {Read SSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.8 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.8 "</span>
ptclReadSSB
<span class=3D"hljs-keyword">set</span> ::deviceArray(ssb)
} $expAnsw(readSSBlev1Test)
test xaf<span class=3D"hljs-number">-1.9</span> {Write BSB =3D <span class=
=3D"hljs-number">0xAA</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.9 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.9 "</span>
ptclWriteBSB <span class=3D"hljs-string">"AA"</span>
} $FAIL
test xaf<span class=3D"hljs-number">-1.10</span> {Read BSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.10 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.10 "</span>
ptclReadBSB
<span class=3D"hljs-keyword">set</span> ::deviceArray(bsb)
} {<span class=3D"hljs-number">55</span>}
test xaf<span class=3D"hljs-number">-1.11</span> {Write SBV =3D <span class=
=3D"hljs-number">0xAA</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.11 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.11 "</span>
ptclWriteSBV <span class=3D"hljs-string">"AA"</span>
} $FAIL
test xaf<span class=3D"hljs-number">-1.12</span> {Read SBV} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.12 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.12 "</span>
ptclReadSBV
<span class=3D"hljs-keyword">set</span> ::deviceArray(sbv)
} {<span class=3D"hljs-number">55</span>}
test xaf<span class=3D"hljs-number">-1.13</span> {Write EB =3D <span class=
=3D"hljs-number">0xAA</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.13 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.13 "</span>
ptclWriteEB <span class=3D"hljs-string">"AA"</span>
} $FAIL
test xaf<span class=3D"hljs-number">-1.14</span> {Read EB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.14 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.14 "</span>
ptclReadEB
<span class=3D"hljs-keyword">set</span> ::deviceArray(eb)
} {<span class=3D"hljs-number">55</span>}
test xaf<span class=3D"hljs-number">-1.14</span><span class=3D"hljs-number"=
>.1</span> {Write P1_CF =3D <span class=3D"hljs-number">0xAA</span>} {[<spa=
n class=3D"hljs-keyword">string</span> equal $::deviceArray(name) <span cla=
ss=3D"hljs-string">"AT89C5131"</span>]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.14.1 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.14.1"</span>
ptclWriteByte $protocol(writeP1) <span class=3D"hljs-string">"AA"</span> <s=
pan class=3D"hljs-number">1</span>
} $bStatus(errWRITE)
test xaf<span class=3D"hljs-number">-1.14</span><span class=3D"hljs-number"=
>.2</span> {Read P1_CF} {[<span class=3D"hljs-keyword">string</span> equal =
$::deviceArray(name) <span class=3D"hljs-string">"AT89C5131"</span>]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.14.2 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.14.2"</span>
ptclReadByte $protocol(readP1)
} {<span class=3D"hljs-number">55</span>}
test xaf<span class=3D"hljs-number">-1.14</span><span class=3D"hljs-number"=
>.3</span> {Write P3_CF =3D <span class=3D"hljs-number">0xAA</span>} {[<spa=
n class=3D"hljs-keyword">string</span> equal $::deviceArray(name) <span cla=
ss=3D"hljs-string">"AT89C5131"</span>]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.14.3 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.14.3"</span>
ptclWriteByte $protocol(writeP3) <span class=3D"hljs-string">"AA"</span> <s=
pan class=3D"hljs-number">1</span>
} $bStatus(errWRITE)
test xaf<span class=3D"hljs-number">-1.14</span><span class=3D"hljs-number"=
>.4</span> {Read P3_CF} {[<span class=3D"hljs-keyword">string</span> equal =
$::deviceArray(name) <span class=3D"hljs-string">"AT89C5131"</span>]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.14.4 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.14.4"</span>
ptclReadByte $protocol(readP3)
} {<span class=3D"hljs-number">55</span>}
test xaf<span class=3D"hljs-number">-1.14</span><span class=3D"hljs-number"=
>.5</span> {Write P4_CF =3D <span class=3D"hljs-number">0xAA</span>} {[<spa=
n class=3D"hljs-keyword">string</span> equal $::deviceArray(name) <span cla=
ss=3D"hljs-string">"AT89C5131"</span>]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.14.5 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.14.5"</span>
ptclWriteByte $protocol(writeP4) <span class=3D"hljs-string">"AA"</span> <s=
pan class=3D"hljs-number">1</span>
} $bStatus(errWRITE)
test xaf<span class=3D"hljs-number">-1.14</span><span class=3D"hljs-number"=
>.6</span> {Read P4_CF} {[<span class=3D"hljs-keyword">string</span> equal =
$::deviceArray(name) <span class=3D"hljs-string">"AT89C5131"</span>]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.14.6 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.14.6"</span>
ptclReadByte $protocol(readP4)
} {<span class=3D"hljs-number">55</span>}
test xaf<span class=3D"hljs-number">-1.15</span> {Write SSB =3D level <span=
 class=3D"hljs-number">2</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.15 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.15 "</span>
ptclProgSSBlev2
} $PASS
test xaf<span class=3D"hljs-number">-1.16</span> {Read SSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.16 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.16 "</span>
ptclReadSSB
<span class=3D"hljs-keyword">set</span> ::deviceArray(ssb)
} $expAnsw(readSSBlev2Test)
test xaf<span class=3D"hljs-number">-1.17</span> {Write BSB =3D <span class=
=3D"hljs-number">0x00</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.17 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.17 "</span>
ptclWriteBSB <span class=3D"hljs-string">"00"</span>
} $FAIL
test xaf<span class=3D"hljs-number">-1.18</span> {Read BSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.18 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.18 "</span>
ptclReadBSB
<span class=3D"hljs-keyword">set</span> ::deviceArray(bsb)
} {<span class=3D"hljs-number">55</span>}
test xaf<span class=3D"hljs-number">-1.19</span> {Write SBV =3D <span class=
=3D"hljs-number">0x00</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.19 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.19 "</span>
ptclWriteSBV <span class=3D"hljs-string">"00"</span>
} $FAIL
test xaf<span class=3D"hljs-number">-1.20</span> {Read SBV} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.20 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.20 "</span>
ptclReadSBV
<span class=3D"hljs-keyword">set</span> ::deviceArray(sbv)
} {<span class=3D"hljs-number">55</span>}
test xaf<span class=3D"hljs-number">-1.21</span> {Write EB =3D <span class=
=3D"hljs-number">0x00</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.21 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.21 "</span>
ptclWriteEB <span class=3D"hljs-string">"00"</span>
} $FAIL
test xaf<span class=3D"hljs-number">-1.22</span> {Read EB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.22 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.22 "</span>
ptclReadEB
<span class=3D"hljs-keyword">set</span> ::deviceArray(eb)
} {<span class=3D"hljs-number">55</span>}
test xaf<span class=3D"hljs-number">-1.22</span><span class=3D"hljs-number"=
>.1</span> {Write P1_CF =3D <span class=3D"hljs-number">0xAA</span>} {[<spa=
n class=3D"hljs-keyword">string</span> equal $::deviceArray(name) <span cla=
ss=3D"hljs-string">"AT89C5131"</span>]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.22.1 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.22.1"</span>
ptclWriteByte $protocol(writeP1) <span class=3D"hljs-string">"AA"</span> <s=
pan class=3D"hljs-number">1</span>
} $bStatus(errWRITE)
test xaf<span class=3D"hljs-number">-1.22</span><span class=3D"hljs-number"=
>.2</span> {Read P1_CF} {[<span class=3D"hljs-keyword">string</span> equal =
$::deviceArray(name) <span class=3D"hljs-string">"AT89C5131"</span>]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.22.2 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.22.2"</span>
ptclReadByte $protocol(readP1)
} {<span class=3D"hljs-number">55</span>}
test xaf<span class=3D"hljs-number">-1.22</span><span class=3D"hljs-number"=
>.3</span> {Write P3_CF =3D <span class=3D"hljs-number">0xAA</span>} {[<spa=
n class=3D"hljs-keyword">string</span> equal $::deviceArray(name) <span cla=
ss=3D"hljs-string">"AT89C5131"</span>]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.22.3 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.22.3"</span>
ptclWriteByte $protocol(writeP3) <span class=3D"hljs-string">"AA"</span> <s=
pan class=3D"hljs-number">1</span>
} $bStatus(errWRITE)
test xaf<span class=3D"hljs-number">-1.22</span><span class=3D"hljs-number"=
>.4</span> {Read P3_CF} {[<span class=3D"hljs-keyword">string</span> equal =
$::deviceArray(name) <span class=3D"hljs-string">"AT89C5131"</span>]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.22.4 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.22.4"</span>
ptclReadByte $protocol(readP3)
} {<span class=3D"hljs-number">55</span>}
test xaf<span class=3D"hljs-number">-1.22</span><span class=3D"hljs-number"=
>.5</span> {Write P4_CF =3D <span class=3D"hljs-number">0xAA</span>} {[<spa=
n class=3D"hljs-keyword">string</span> equal $::deviceArray(name) <span cla=
ss=3D"hljs-string">"AT89C5131"</span>]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.22.5 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.22.5"</span>
ptclWriteByte $protocol(writeP4) <span class=3D"hljs-string">"AA"</span> <s=
pan class=3D"hljs-number">1</span>
} $bStatus(errWRITE)
test xaf<span class=3D"hljs-number">-1.22</span><span class=3D"hljs-number"=
>.6</span> {Read P4_CF} {[<span class=3D"hljs-keyword">string</span> equal =
$::deviceArray(name) <span class=3D"hljs-string">"AT89C5131"</span>]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.22.6 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.22.6"</span>
ptclReadByte $protocol(readP4)
} {<span class=3D"hljs-number">55</span>}
test xaf<span class=3D"hljs-number">-1.23</span> {Write SSB =3D level <span=
 class=3D"hljs-number">1</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.23 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.23 "</span>
ptclProgSSBlev1
} $FAIL
test xaf<span class=3D"hljs-number">-1.24</span> {Read SSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.24 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.24 "</span>
ptclReadSSB
<span class=3D"hljs-keyword">set</span> ::deviceArray(ssb)
} $expAnsw(readSSBlev2Test)
test xaf<span class=3D"hljs-number">-1.25</span> {Full Chip Erase} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.25 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.25 "</span>
ptclFullChipErase
} $PASS
test xaf<span class=3D"hljs-number">-1.26</span> {Read BSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.26 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.26 "</span>
ptclReadBSB
<span class=3D"hljs-keyword">set</span> ::deviceArray(bsb)
} {FF}
test xaf<span class=3D"hljs-number">-1.27</span> {Read SBV} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.27 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.27 "</span>
ptclReadSBV
<span class=3D"hljs-keyword">set</span> ::deviceArray(sbv)
} {FF}
test xaf<span class=3D"hljs-number">-1.28</span> {Read EB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.28 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.28 "</span>
ptclReadEB
<span class=3D"hljs-keyword">set</span> ::deviceArray(eb)
} {FF}
test xaf<span class=3D"hljs-number">-1.28</span><span class=3D"hljs-number"=
>.1</span> {Read P1_CF} {[<span class=3D"hljs-keyword">string</span> equal =
$::deviceArray(name) <span class=3D"hljs-string">"AT89C5131"</span>]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.28.1 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.28.1"</span>
ptclReadByte $protocol(readP1)
} {<span class=3D"hljs-number">55</span>}
test xaf<span class=3D"hljs-number">-1.28</span><span class=3D"hljs-number"=
>.2</span> {Read P3_CF} {[<span class=3D"hljs-keyword">string</span> equal =
$::deviceArray(name) <span class=3D"hljs-string">"AT89C5131"</span>]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.28.2 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.28.2"</span>
ptclReadByte $protocol(readP3)
} {<span class=3D"hljs-number">55</span>}
test xaf<span class=3D"hljs-number">-1.28</span><span class=3D"hljs-number"=
>.3</span> {Read P4_CF} {[<span class=3D"hljs-keyword">string</span> equal =
$::deviceArray(name) <span class=3D"hljs-string">"AT89C5131"</span>]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.28.3 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.28.3"</span>
ptclReadByte $protocol(readP4)
} {<span class=3D"hljs-number">55</span>}
test xaf<span class=3D"hljs-number">-1.29</span> {Read SSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test xaf-1.29 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test xaf-1.29 "</span>
ptclReadSSB
<span class=3D"hljs-keyword">set</span> ::deviceArray(ssb)
} $expAnsw(readSSBlev0Test)
<span class=3D"hljs-keyword">catch</span> [.testSelectionDbox.f_skip.b_skip=
1 configure -fg black]
<span class=3D"hljs-keyword">catch</span> [.testSelectionDbox.f_skip.b_skip=
2 configure -fg red]
debug_log <span class=3D"hljs-string">"**************** FLASH *************=
******"</span>
test flash<span class=3D"hljs-number">-2.0</span> {Full Chip Erase} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.0 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.0 "</span>
ptclFullChipErase
} $PASS
test flash<span class=3D"hljs-number">-2.1</span> {Write randomize data fro=
m <span class=3D"hljs-number">0000</span> to [readBuffer maxAddr]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.1 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.1 "</span>
randomizeBuffer
cmdsDeviceProgram <span class=3D"hljs-string">"000000"</span> [readBuffer m=
axAddr]
} $PASS
test flash<span class=3D"hljs-number">-2.2</span> {Read from <span class=3D=
"hljs-number">0000</span> to [readBuffer maxAddr]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.2 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.2 "</span>
cmdsDeviceVerify <span class=3D"hljs-number">0</span> [readBuffer maxAddr]
} $PASS
test flash<span class=3D"hljs-number">-2.3</span> {Full Chip Erase} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.3 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.3 "</span>
ptclFullChipErase
} $PASS
test flash<span class=3D"hljs-number">-2.4</span> {Write AA at address <spa=
n class=3D"hljs-number">0X5555</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.4 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.4 "</span>
fillBuffer <span class=3D"hljs-string">"005555"</span> <span class=3D"hljs-=
string">"005555"</span> <span class=3D"hljs-string">"AA"</span>
cmdsDeviceProgram <span class=3D"hljs-string">"005555"</span> <span class=
=3D"hljs-string">"005555"</span>
} $PASS
test flash<span class=3D"hljs-number">-2.5</span> {Read at address <span cl=
ass=3D"hljs-number">0X5555</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.5 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.5 "</span>
cmdsReadAddrRange <span class=3D"hljs-string">"005555"</span> <span class=
=3D"hljs-string">"005555"</span>
checkBuffer <span class=3D"hljs-string">"005555"</span> <span class=3D"hljs=
-string">"005555"</span> <span class=3D"hljs-string">"AA"</span>
} $PASS
test flash<span class=3D"hljs-number">-2.6</span> {Blank Check between <spa=
n class=3D"hljs-number">0000</span> and [readBuffer maxAddr]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.6 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.6 "</span>
ptclBlankCheck <span class=3D"hljs-string">"000000"</span> [readBuffer maxA=
ddr]
} {<span class=3D"hljs-number">5555</span>}
test flash<span class=3D"hljs-number">-2.7</span> {Full Chip Erase} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.7 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.7 "</span>
ptclFullChipErase
} $PASS
test flash<span class=3D"hljs-number">-2.8</span> {Blank Check between <spa=
n class=3D"hljs-number">0000</span> and [readBuffer maxAddr]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.8 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.8 "</span>
ptclBlankCheck <span class=3D"hljs-string">"000000"</span> [readBuffer maxA=
ddr]
} {<span class=3D"hljs-number">-1</span>}
test flash<span class=3D"hljs-number">-2.9</span> {Write SSB =3D level <spa=
n class=3D"hljs-number">1</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.9 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.9 "</span>
ptclProgSSBlev1
} $PASS
test flash<span class=3D"hljs-number">-2.10</span> {Read SSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.10 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.10 "</span>
ptclReadSSB
<span class=3D"hljs-keyword">set</span> ::deviceArray(ssb)
} $expAnsw(readSSBlev1Test)
test flash<span class=3D"hljs-number">-2.11</span> {Write AA at address <sp=
an class=3D"hljs-number">0X5555</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.11 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.11 "</span>
fillBuffer <span class=3D"hljs-string">"005555"</span> <span class=3D"hljs-=
string">"005555"</span> <span class=3D"hljs-string">"AA"</span>
cmdsDeviceProgram <span class=3D"hljs-string">"005555"</span> <span class=
=3D"hljs-string">"005555"</span>
} $FAIL
test flash<span class=3D"hljs-number">-2.12</span> {Read at address <span c=
lass=3D"hljs-number">0X5555</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.12 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.12 "</span>
cmdsReadAddrRange <span class=3D"hljs-string">"005555"</span> <span class=
=3D"hljs-string">"005555"</span>
checkBuffer <span class=3D"hljs-string">"005555"</span> <span class=3D"hljs=
-string">"005555"</span> <span class=3D"hljs-string">"FF"</span>
} $PASS
test flash<span class=3D"hljs-number">-2.13</span> {Write SSB =3D level <sp=
an class=3D"hljs-number">2</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.13 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.13 "</span>
ptclProgSSBlev2
} $PASS
test flash<span class=3D"hljs-number">-2.14</span> {Read SSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.14 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.14 "</span>
ptclReadSSB
<span class=3D"hljs-keyword">set</span> ::deviceArray(ssb)
} $expAnsw(readSSBlev2Test)
test flash<span class=3D"hljs-number">-2.15</span> {Write AA at address <sp=
an class=3D"hljs-number">005555</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.15 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.15 "</span>
fillBuffer <span class=3D"hljs-string">"005555"</span> <span class=3D"hljs-=
string">"005555"</span> <span class=3D"hljs-string">"AA"</span>
cmdsDeviceProgram <span class=3D"hljs-string">"005555"</span> <span class=
=3D"hljs-string">"005555"</span>
} $FAIL
test flash<span class=3D"hljs-number">-2.16</span> {Read at address <span c=
lass=3D"hljs-number">005555</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.16 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.16 "</span>
fillBuffer <span class=3D"hljs-string">"005555"</span> <span class=3D"hljs-=
string">"005555"</span> <span class=3D"hljs-string">"FF"</span>
cmdsReadAddrRange <span class=3D"hljs-string">"005555"</span> <span class=
=3D"hljs-string">"005555"</span>
checkBuffer <span class=3D"hljs-string">"005555"</span> <span class=3D"hljs=
-string">"005555"</span> <span class=3D"hljs-string">"AA"</span>
} {<span class=3D"hljs-number">005555</span>}
test flash<span class=3D"hljs-number">-2.17</span> {Full Chip Erase} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.17 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.17 "</span>
ptclFullChipErase
} $PASS
test flash<span class=3D"hljs-number">-2.18</span> {Write randomize data fr=
om <span class=3D"hljs-number">0000</span> to [readBuffer maxAddr]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.18 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.18 "</span>
randomizeBuffer
cmdsDeviceProgram <span class=3D"hljs-string">"000000"</span> [readBuffer m=
axAddr]
} $PASS
test flash<span class=3D"hljs-number">-2.19</span> {Read from <span class=
=3D"hljs-number">0000</span> to [readBuffer maxAddr]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.19 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.19 "</span>
cmdsDeviceVerify <span class=3D"hljs-number">0</span> [readBuffer maxAddr]
} $PASS
test flash<span class=3D"hljs-number">-2.20</span> {Erase Block <span class=
=3D"hljs-number">0</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.20 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.20 "</span>
ptclEraseBlock0
} $PASS
test flash<span class=3D"hljs-number">-2.21</span> {Blank Check between <sp=
an class=3D"hljs-number">0000</span> and [readBuffer maxAddr]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.21 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.21 "</span>
ptclBlankCheck <span class=3D"hljs-string">"000000"</span> [readBuffer maxA=
ddr]
} {<span class=3D"hljs-number">2000</span>}
test flash<span class=3D"hljs-number">-2.22</span> {Erase Block <span class=
=3D"hljs-number">1</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.22 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.22 "</span>
ptclEraseBlock1
} $PASS
test flash<span class=3D"hljs-number">-2.23</span> {Blank Check between <sp=
an class=3D"hljs-number">0000</span> and [readBuffer maxAddr]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.23 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.23 "</span>
ptclBlankCheck <span class=3D"hljs-string">"000000"</span> [readBuffer maxA=
ddr]
} {<span class=3D"hljs-number">4000</span>}
test flash<span class=3D"hljs-number">-2.23</span><span class=3D"hljs-numbe=
r">.1</span> {Blank Check between <span class=3D"hljs-number">0000</span> a=
nd [readBuffer maxAddr]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.23.1 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.23.1"</span>
ptclBlankCheck <span class=3D"hljs-string">"000000"</span> [readBuffer maxA=
ddr]
} {<span class=3D"hljs-number">-1</span>}
test flash<span class=3D"hljs-number">-2.24</span> {Erase Block <span class=
=3D"hljs-number">2</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.24 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.24 "</span>
ptclEraseBlock2
} $PASS
test flash<span class=3D"hljs-number">-2.25</span> {Blank Check between <sp=
an class=3D"hljs-number">0000</span> and [readBuffer maxAddr]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.25 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.25 "</span>
ptclBlankCheck <span class=3D"hljs-string">"000000"</span> [readBuffer maxA=
ddr]
} {<span class=3D"hljs-number">-1</span>}
test flash<span class=3D"hljs-number">-2.26</span> {Blank Check between <sp=
an class=3D"hljs-number">0000</span> and [readBuffer maxAddr]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.26 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.26"</span>
ptclBlankCheck <span class=3D"hljs-string">"000000"</span> [readBuffer maxA=
ddr]
} {<span class=3D"hljs-number">8000</span>}
test flash<span class=3D"hljs-number">-2.27</span> {Erase Block <span class=
=3D"hljs-number">3</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.27 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.27"</span>
ptclEraseBlock3
} $PASS
test flash<span class=3D"hljs-number">-2.28</span> {Blank Check between <sp=
an class=3D"hljs-number">0000</span> and [readBuffer maxAddr]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.28 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.28"</span>
ptclBlankCheck <span class=3D"hljs-string">"000000"</span> [readBuffer maxA=
ddr]
} {C000}
test flash<span class=3D"hljs-number">-2.29</span> {Erase Block <span class=
=3D"hljs-number">4</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.29 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.29"</span>
ptclEraseBlock4
} $PASS
test flash<span class=3D"hljs-number">-2.30</span> {Blank Check between <sp=
an class=3D"hljs-number">0000</span> and [readBuffer maxAddr]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test flash-2.30 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test flash-2.30"</span>
ptclBlankCheck <span class=3D"hljs-string">"000000"</span> [readBuffer maxA=
ddr]
} {<span class=3D"hljs-number">-1</span>}
<span class=3D"hljs-keyword">catch</span> [.testSelectionDbox.f_skip.b_skip=
2 configure -fg black]
<span class=3D"hljs-keyword">catch</span> [.testSelectionDbox.f_skip.b_skip=
3 configure -fg red]
<span class=3D"hljs-comment">#dbgShowInfo  "***************** FUSE TESTS **=
*****************"</span>
test fuse<span class=3D"hljs-number">-3.0</span> {Full Chip Erase} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test fuse-3.0 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test fuse-3.0"</span>
ptclFullChipErase
} $PASS
test fuse<span class=3D"hljs-number">-3.1</span> {Write HSB =3D <span class=
=3D"hljs-number">0xFF</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test fuse-3.1 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test fuse-3.1"</span>
ptclWriteHwByte <span class=3D"hljs-string">"FF"</span>
} $PASS
test fuse<span class=3D"hljs-number">-3.2</span> {Read HSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test fuse-3.2 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test fuse-3.2"</span>
ptclReadHwByte
<span class=3D"hljs-keyword">set</span> ::deviceArray(hsb)
} {FF}
test fuse<span class=3D"hljs-number">-3.3</span> {Write HSB =3D <span class=
=3D"hljs-number">0x0F</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test fuse-3.3 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test fuse-3.3"</span>
ptclWriteHwByte <span class=3D"hljs-string">"0F"</span>
} $PASS
test fuse<span class=3D"hljs-number">-3.4</span> {Read HSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test fuse-3.4 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test fuse-3.4"</span>
ptclReadHwByte
<span class=3D"hljs-keyword">set</span> ::deviceArray(hsb)
} {<span class=3D"hljs-number">0</span>F}
test fuse<span class=3D"hljs-number">-3.5</span> {Write SSB =3D level <span=
 class=3D"hljs-number">1</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test fuse-3.5 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test fuse-3.5"</span>
ptclProgSSBlev1
} $PASS
test fuse<span class=3D"hljs-number">-3.6</span> {Read SSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test fuse-3.6 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test fuse-3.6"</span>
ptclReadSSB
<span class=3D"hljs-keyword">set</span> ::deviceArray(ssb)
} $expAnsw(readSSBlev1Test)
test fuse<span class=3D"hljs-number">-3.7</span> {Write HSB =3D <span class=
=3D"hljs-number">0x5F</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test fuse-3.7 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test fuse-3.7"</span>
ptclWriteHwByte <span class=3D"hljs-string">"5F"</span>
} $FAIL
test fuse<span class=3D"hljs-number">-3.8</span> {Read HSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test fuse-3.8 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test fuse-3.8"</span>
ptclReadHwByte
<span class=3D"hljs-keyword">set</span> ::deviceArray(hsb)
} {<span class=3D"hljs-number">0</span>F}
test fuse<span class=3D"hljs-number">-3.9</span> {Write SSB =3D level <span=
 class=3D"hljs-number">2</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test fuse-3.9 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test fuse-3.9"</span>
ptclProgSSBlev2
} $PASS
test fuse<span class=3D"hljs-number">-3.10</span> {Read SSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test fuse-3.10 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test fuse-3.10"</span>
ptclReadSSB
<span class=3D"hljs-keyword">set</span> ::deviceArray(ssb)
} $expAnsw(readSSBlev2Test)
test fuse<span class=3D"hljs-number">-3.11</span> {Write HSB =3D <span clas=
s=3D"hljs-number">0x5F</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test fuse-3.11 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test fuse-3.11"</span>
ptclWriteHwByte <span class=3D"hljs-string">"5F"</span>
} $FAIL
test fuse<span class=3D"hljs-number">-3.12</span> {Read HSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test fuse-3.12 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test fuse-3.12"</span>
ptclReadHwByte
} $PASS
test fuse<span class=3D"hljs-number">-3.13</span> {Full Chip Erase} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test fuse-3.13 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test fuse-3.13"</span>
ptclFullChipErase
} $PASS
test fuse<span class=3D"hljs-number">-3.14</span> {Read HSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test fuse-3.14 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test fuse-3.14"</span>
ptclReadHwByte
<span class=3D"hljs-keyword">set</span> ::deviceArray(hsb)
} {<span class=3D"hljs-number">0</span>F}
test fuse<span class=3D"hljs-number">-3.15</span> {Write HSB =3D <span clas=
s=3D"hljs-number">0x5F</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test fuse-3.15 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test fuse-3.15"</span>
ptclWriteHwByte <span class=3D"hljs-string">"5F"</span>
} $PASS
test fuse<span class=3D"hljs-number">-3.16</span> {Read HSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test fuse-3.16 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test fuse-3.16"</span>
ptclReadHwByte
<span class=3D"hljs-keyword">set</span> ::deviceArray(hsb)
} {<span class=3D"hljs-number">5</span>F}
<span class=3D"hljs-keyword">catch</span> [.testSelectionDbox.f_skip.b_skip=
3 configure -fg black]
<span class=3D"hljs-keyword">catch</span> [.testSelectionDbox.f_skip.b_skip=
4 configure -fg red]
debug_log <span class=3D"hljs-string">"********* SPECIFIC INFORMATIONS ****=
******"</span>
test specific<span class=3D"hljs-number">-4.0</span> {Full Chip Erase} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-4.0 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-4.0"</span>
ptclFullChipErase
} $PASS
test specific<span class=3D"hljs-number">-4.1</span> {Read Bootloader Versi=
on} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-4.1 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-4.1"</span>
ptclReadBootlVer
} $PASS
test specific<span class=3D"hljs-number">-4.2</span> {Read Device Boot Id <=
span class=3D"hljs-number">1</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-4.2 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-4.2"</span>
ptclReadDevBootId1
} $PASS
test specific<span class=3D"hljs-number">-4.3</span> {Read Device Boot Id <=
span class=3D"hljs-number">2</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-4.3 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-4.3"</span>
ptclReadDevBootId2
} $PASS
test specific<span class=3D"hljs-number">-4.4</span> {Read Manuf Id} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-4.4 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-4.4"</span>
ptclReadManufId
} $PASS
test specific<span class=3D"hljs-number">-4.5</span> {Read Device Id <span =
class=3D"hljs-number">1</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-4.5 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-4.5"</span>
ptclReadDeviceId1
} $PASS
test specific<span class=3D"hljs-number">-4.6</span> {Read Device Id <span =
class=3D"hljs-number">2</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-4.6 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-4.6"</span>
ptclReadDeviceId2
} $PASS
test specific<span class=3D"hljs-number">-4.7</span> {Read Device Id <span =
class=3D"hljs-number">3</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-4.7 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-4.7"</span>
ptclReadDeviceId3
} $PASS
test specific<span class=3D"hljs-number">-4.8</span> {Write SSB =3D level <=
span class=3D"hljs-number">2</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-4.8 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-4.8"</span>
ptclProgSSBlev2
} $PASS
test specific<span class=3D"hljs-number">-4.9</span> {Read SSB} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-4.9 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-4.9"</span>
ptclReadSSB
<span class=3D"hljs-keyword">set</span> ::deviceArray(ssb)
} $expAnsw(readSSBlev2Test)
test specific<span class=3D"hljs-number">-4.10</span> {Read Bootloader Vers=
ion} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-4.10 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-4.10"</span>
ptclReadBootlVer
} $PASS
test specific<span class=3D"hljs-number">-4.11</span> {Read Device Boot Id =
<span class=3D"hljs-number">1</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-4.11 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-4.11"</span>
ptclReadDevBootId1
} $PASS
test specific<span class=3D"hljs-number">-4.12</span> {Read Device Boot Id =
<span class=3D"hljs-number">2</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-4.12 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-4.12"</span>
ptclReadDevBootId2
} $PASS
test specific<span class=3D"hljs-number">-4.13</span> {Read Manuf Id} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-4.13 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-4.13"</span>
ptclReadManufId
} $PASS
test specific<span class=3D"hljs-number">-4.14</span> {Read Device Id <span=
 class=3D"hljs-number">1</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-4.14 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-4.14"</span>
ptclReadDeviceId1
} $PASS
test specific<span class=3D"hljs-number">-4.15</span> {Read Device Id <span=
 class=3D"hljs-number">2</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-4.15 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-4.15"</span>
ptclReadDeviceId2
} $PASS
test specific<span class=3D"hljs-number">-4.16</span> {Read Device Id <span=
 class=3D"hljs-number">3</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-4.16 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-4.16"</span>
ptclReadDeviceId3
} $PASS
test specific<span class=3D"hljs-number">-4.17</span> {Full Chip Erase} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-4.17 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-4.17"</span>
ptclFullChipErase
} $PASS
test specific<span class=3D"hljs-number">-5.0</span> {Full Chip Erase} {[<s=
pan class=3D"hljs-keyword">string</span> equal $::deviceArray(name) <span c=
lass=3D"hljs-string">"AT8XC5122"</span>]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-5.0 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-5.0"</span>
<span class=3D"hljs-keyword">set</span> flipStates(bufferInInitialState) <s=
pan class=3D"hljs-number">0</span>
ptclFullChipErase
} $PASS
test specific<span class=3D"hljs-number">-5.1</span> {Blank Check} {[<span =
class=3D"hljs-keyword">string</span> equal $::deviceArray(name) <span class=
=3D"hljs-string">"AT8XC5122"</span>]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-5.1 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-5.1"</span>
ptclBlankCheck <span class=3D"hljs-string">"000000"</span> [readBuffer maxA=
ddr]
} <span class=3D"hljs-number">-1</span>
test specific<span class=3D"hljs-number">-5.2</span> {Read Device Boot ID <=
span class=3D"hljs-number">1</span>} {[<span class=3D"hljs-keyword">string<=
/span> equal $::deviceArray(name) <span class=3D"hljs-string">"AT8XC5122"</=
span>]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-5.2 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-5.2"</span>
ptclReadDevBootId1
} $PASS
test specific<span class=3D"hljs-number">-5.3</span> {Read Device Boot ID <=
span class=3D"hljs-number">2</span>} {[<span class=3D"hljs-keyword">string<=
/span> equal $::deviceArray(name) <span class=3D"hljs-string">"AT8XC5122"</=
span>]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-5.3 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-5.3"</span>
ptclReadDevBootId2
} $PASS
test specific<span class=3D"hljs-number">-5.4</span> {Read Bootloader Versi=
on} {[<span class=3D"hljs-keyword">string</span> equal $::deviceArray(name)=
 <span class=3D"hljs-string">"AT8XC5122"</span>]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-5.4 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-5.4"</span>
ptclReadBootlVer
} $PASS
test specific<span class=3D"hljs-number">-5.5</span> {Write the whole CRAM}=
 {[<span class=3D"hljs-keyword">string</span> equal $::deviceArray(name) <s=
pan class=3D"hljs-string">"AT8XC5122"</span>]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-5.5 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-5.5"</span>
randomizeBuffer
cmdsDeviceProgram <span class=3D"hljs-string">"000000"</span> [readBuffer m=
axAddr]
} $PASS
test specific<span class=3D"hljs-number">-5.6</span> {Verify CRAM} {[<span =
class=3D"hljs-keyword">string</span> equal $::deviceArray(name) <span class=
=3D"hljs-string">"AT8XC5122"</span>]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-5.6 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-5.6"</span>
cmdsDeviceVerify <span class=3D"hljs-number">0</span> [readBuffer maxAddr]
} $PASS
test specific<span class=3D"hljs-number">-5.7</span> {Full Chip Erase} {[<s=
pan class=3D"hljs-keyword">string</span> equal $::deviceArray(name) <span c=
lass=3D"hljs-string">"AT8XC5122"</span>]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-5.7 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-5.7"</span>
ptclFullChipErase
} $PASS
test specific<span class=3D"hljs-number">-5.8</span> {Blank Check} {[<span =
class=3D"hljs-keyword">string</span> equal $::deviceArray(name) <span class=
=3D"hljs-string">"AT8XC5122"</span>]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-5.8 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-5.8"</span>
ptclBlankCheck <span class=3D"hljs-string">"000000"</span> [readBuffer maxA=
ddr]
} <span class=3D"hljs-number">-1</span>
test specific<span class=3D"hljs-number">-5.9</span> {Write the CRAM partia=
lly} {[<span class=3D"hljs-keyword">string</span> equal $::deviceArray(name=
) <span class=3D"hljs-string">"AT8XC5122"</span>]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-5.9 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-5.9"</span>
resetBuffer
<span class=3D"hljs-keyword">set</span> flipStates(bufferInInitialState) <s=
pan class=3D"hljs-number">0</span>
fillBuffer <span class=3D"hljs-string">"000085"</span> <span class=3D"hljs-=
string">"00016D"</span> <span class=3D"hljs-string">"55"</span>
cmdsDeviceProgram <span class=3D"hljs-string">"000085"</span> <span class=
=3D"hljs-string">"00016D"</span>
} $PASS
test specific<span class=3D"hljs-number">-5.10</span> {Verify CRAM} {[<span=
 class=3D"hljs-keyword">string</span> equal $::deviceArray(name) <span clas=
s=3D"hljs-string">"AT8XC5122"</span>]} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-5.10 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-5.10"</span>
cmdsDeviceVerify <span class=3D"hljs-number">0</span> [readBuffer maxAddr]
} $PASS
<span class=3D"hljs-keyword">set</span> ::<span class=3D"hljs-keyword">tclt=
est</span>::testConstraints(constraint) [<span class=3D"hljs-keyword">expr<=
/span> [<span class=3D"hljs-keyword">string</span> equal $::deviceArray(nam=
e) <span class=3D"hljs-string">"AT8XC5122"</span>] || [<span class=3D"hljs-=
keyword">string</span> equal $::deviceArray(name) <span class=3D"hljs-strin=
g">"AT89C5131"</span>]]
test specific<span class=3D"hljs-number">-5.11</span> {Full Chip Erase} {co=
nstraint} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-5.11 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-5.11"</span>
ptclFullChipErase
} $PASS
test specific<span class=3D"hljs-number">-5.12</span> {Start Application st=
ep <span class=3D"hljs-number">1</span>} {constraint} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-5.12 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-5.12"</span>
<span class=3D"hljs-keyword">set</span> index <span class=3D"hljs-number">0=
</span>
<span class=3D"hljs-keyword">foreach</span> data $::deviceArray(startAppliT=
est) {
writeBuffer [<span class=3D"hljs-keyword">format</span> %<span class=3D"hlj=
s-number">06</span>X $index] $data
<span class=3D"hljs-keyword">incr</span> index
}
<span class=3D"hljs-keyword">set</span> maxAddr [<span class=3D"hljs-keywor=
d">format</span> %<span class=3D"hljs-number">06</span>X $index]
cmdsDeviceProgram <span class=3D"hljs-string">"000000"</span> $maxAddr
} $PASS
test specific<span class=3D"hljs-number">-5.13</span> {Start Application st=
ep <span class=3D"hljs-number">2</span>} {constraint} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-5.13 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-5.13"</span>
ptclStartAppli <span class=3D"hljs-number">0</span>
} $PASS
test specific<span class=3D"hljs-number">-5.14</span> {Start Application st=
ep <span class=3D"hljs-number">3</span>} {constraint} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-5.14 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-5.14"</span>
<span class=3D"hljs-keyword">after</span> <span class=3D"hljs-number">4000<=
/span>
<span class=3D"hljs-keyword">update</span>
<span class=3D"hljs-keyword">set</span> hUSB_DFU [USB_DFU_LocateAndOpenDevi=
ce $::deviceArray(usb_dfu_default_product_id)]
<span class=3D"hljs-keyword">if</span> { ($hUSB_DFU !=3D <span class=3D"hlj=
s-number">-1</span>) &amp;&amp; ($hUSB_DFU !=3D <span class=3D"hljs-number"=
>-2</span>) } {
<span class=3D"hljs-keyword">set</span> status $PASS
} else {
<span class=3D"hljs-keyword">set</span> status $FAIL
}
} $PASS
test specific<span class=3D"hljs-number">-5.15</span> {Start Application st=
ep <span class=3D"hljs-number">4</span>} {constraint} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-5.15 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-5.15"</span>
cmdsDeviceVerify <span class=3D"hljs-number">0</span> [readBuffer maxAddr]
<span class=3D"hljs-keyword">set</span> buffer(verifyFail)
} $::deviceArray(startAppliFailAddr)
test specific<span class=3D"hljs-number">-5.16</span> {Full Chip Erase} {co=
nstraint} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test Specific-5.16 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test Specific-5.16"</span>
ptclFullChipErase
} $PASS
<span class=3D"hljs-keyword">catch</span> [.testSelectionDbox.f_skip.b_skip=
4 configure -fg black]
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">strin=
g</span> first <span class=3D"hljs-string">"EEPROM"</span> [<span class=3D"=
hljs-keyword">namespace</span> children ::]] !=3D <span class=3D"hljs-numbe=
r">-1</span>} then {
    cmdsImportCurrentMemoryNameSpace <span class=3D"hljs-string">"EEPROM"</=
span>
    <span class=3D"hljs-keyword">catch</span> [.testSelectionDbox.f_skip.b_=
skip6 configure -fg red]
<span class=3D"hljs-comment">    #dbgShowInfo "**************** EEPROM ****=
*************"</span>
    test eeprom<span class=3D"hljs-number">-6.0</span> {Fill EEPROM with <s=
pan class=3D"hljs-number">0xFF</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test eeprom-6.0 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test eeprom-6.0"</span>
fillBuffer <span class=3D"hljs-string">"000000"</span> [readBuffer maxAddr]=
 <span class=3D"hljs-string">"FF"</span>
cmdsDeviceProgram <span class=3D"hljs-string">"000000"</span> [readBuffer m=
axAddr]
} $PASS
    test eeprom<span class=3D"hljs-number">-6.1</span> {Verify the whole EE=
PROM} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test eeprom-6.1 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test eeprom-6.1"</span>
fillBuffer <span class=3D"hljs-string">"000000"</span> [readBuffer maxAddr]=
 <span class=3D"hljs-string">"00"</span>
cmdsReadAddrRange <span class=3D"hljs-string">"000000"</span> [readBuffer m=
axAddr]
checkBuffer <span class=3D"hljs-string">"000000"</span> [readBuffer maxAddr=
] <span class=3D"hljs-string">"FF"</span>
} $PASS
    test eeprom<span class=3D"hljs-number">-6.2</span> {Fill EEPROM with <s=
pan class=3D"hljs-number">0x00</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test eeprom-6.2 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test eeprom-6.2"</span>
fillBuffer <span class=3D"hljs-string">"000000"</span> [readBuffer maxAddr]=
 <span class=3D"hljs-string">"00"</span>
cmdsDeviceProgram <span class=3D"hljs-string">"000000"</span> [readBuffer m=
axAddr]
} $PASS
    test eeprom<span class=3D"hljs-number">-6.3</span> {Verify the whole EE=
PROM} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test eeprom-6.3 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test eeprom-6.3"</span>
fillBuffer <span class=3D"hljs-string">"000000"</span> [readBuffer maxAddr]=
 <span class=3D"hljs-string">"FF"</span>
cmdsReadAddrRange <span class=3D"hljs-string">"000000"</span> [readBuffer m=
axAddr]
checkBuffer <span class=3D"hljs-string">"000000"</span> [readBuffer maxAddr=
] <span class=3D"hljs-string">"00"</span>
} $PASS
    test eeprom<span class=3D"hljs-number">-6.4</span> {Fill EEPROM with <s=
pan class=3D"hljs-number">0x55</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test eeprom-6.4 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test eeprom-6.4"</span>
fillBuffer <span class=3D"hljs-string">"000000"</span> [readBuffer maxAddr]=
 <span class=3D"hljs-string">"55"</span>
cmdsDeviceProgram <span class=3D"hljs-string">"000000"</span> [readBuffer m=
axAddr]
} $PASS
    test eeprom<span class=3D"hljs-number">-6.5</span> {Verify the whole EE=
PROM} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test eeprom-6.5 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test eeprom-6.5"</span>
fillBuffer <span class=3D"hljs-string">"000000"</span> [readBuffer maxAddr]=
 <span class=3D"hljs-string">"AA"</span>
cmdsReadAddrRange <span class=3D"hljs-string">"000000"</span> [readBuffer m=
axAddr]
checkBuffer <span class=3D"hljs-string">"000000"</span> [readBuffer maxAddr=
] <span class=3D"hljs-string">"55"</span>
} $PASS
    test eeprom<span class=3D"hljs-number">-6.6</span> {Fill EEPROM with <s=
pan class=3D"hljs-number">0xAA</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test eeprom-6.6 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test eeprom-6.6"</span>
fillBuffer <span class=3D"hljs-string">"000000"</span> [readBuffer maxAddr]=
 <span class=3D"hljs-string">"AA"</span>
cmdsDeviceProgram <span class=3D"hljs-string">"000000"</span> [readBuffer m=
axAddr]
} $PASS
    test eeprom<span class=3D"hljs-number">-6.7</span> {Verify the whole EE=
PROM} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test eeprom-6.7 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test eeprom-6.7"</span>
fillBuffer <span class=3D"hljs-string">"000000"</span> [readBuffer maxAddr]=
 <span class=3D"hljs-string">"55"</span>
cmdsReadAddrRange <span class=3D"hljs-string">"000000"</span> [readBuffer m=
axAddr]
checkBuffer <span class=3D"hljs-string">"000000"</span> [readBuffer maxAddr=
] <span class=3D"hljs-string">"AA"</span>
} $PASS
    test eeprom<span class=3D"hljs-number">-6.8</span> {Fill EEPROM with <s=
pan class=3D"hljs-number">0xFF</span>} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test eeprom-6.8 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test eeprom-6.8"</span>
fillBuffer <span class=3D"hljs-string">"000000"</span> [readBuffer maxAddr]=
 <span class=3D"hljs-string">"FF"</span>
cmdsDeviceProgram <span class=3D"hljs-string">"000000"</span> [readBuffer m=
axAddr]
} $PASS
    test eeprom<span class=3D"hljs-number">-6.9</span> {Verify the whole EE=
PROM} {
<span class=3D"hljs-comment">#dbgShowInfo "=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D test eeprom-6.9 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D"</span>
log_message <span class=3D"hljs-string">"test eeprom-6.9"</span>
fillBuffer <span class=3D"hljs-string">"000000"</span> [readBuffer maxAddr]=
 <span class=3D"hljs-string">"00"</span>
cmdsReadAddrRange <span class=3D"hljs-string">"000000"</span> [readBuffer m=
axAddr]
checkBuffer <span class=3D"hljs-string">"000000"</span> [readBuffer maxAddr=
] <span class=3D"hljs-string">"FF"</span>
} $PASS
    <span class=3D"hljs-keyword">catch</span> [.testSelectionDbox.f_skip.b_=
skip6 configure -fg black]
    cmdsImportCurrentMemoryNameSpace <span class=3D"hljs-string">"FLASH"</s=
pan>
}
::<span class=3D"hljs-keyword">tcltest</span>::cleanupTests
log_message <span class=3D"hljs-string">"USB tests completed. Check the log=
 file for errors."</span>
cmdsRestoreSpecialBytes
<span class=3D"hljs-keyword">set</span> flipStates(mssgBox) <span class=3D"=
hljs-number">1</span>
<span class=3D"hljs-keyword">return</span>
<span class=3D"hljs-comment">#dbgEndSrc [info script]           proc create=
MainToolBar {} {</span>
<span class=3D"hljs-keyword">global</span> projDir
image create photo tool_device -<span class=3D"hljs-keyword">file</span> $p=
rojDir/images/selectdevice.gif
image create photo tool_connect -<span class=3D"hljs-keyword">file</span> $=
projDir/images/connect.gif
image create photo tool_help -<span class=3D"hljs-keyword">file</span> $pro=
jDir/images/help.gif
image create photo tool_erase -<span class=3D"hljs-keyword">file</span> $pr=
ojDir/images/erase.gif
image create photo tool_loadhex -<span class=3D"hljs-keyword">file</span> $=
projDir/images/loadhex.gif
image create photo tool_savehex -<span class=3D"hljs-keyword">file</span> $=
projDir/images/savehex.gif
image create photo tool_blankcheck -<span class=3D"hljs-keyword">file</span=
> $projDir/images/blkcheck.gif
image create photo tool_program -<span class=3D"hljs-keyword">file</span> $=
projDir/images/program.gif
image create photo tool_read -<span class=3D"hljs-keyword">file</span> $pro=
jDir/images/deviceread.gif
image create photo tool_verify -<span class=3D"hljs-keyword">file</span> $p=
rojDir/images/verify.gif
image create photo tool_bufferedit -<span class=3D"hljs-keyword">file</span=
> $projDir/images/bufferedit.gif
frame .main.toolbar
<span class=3D"hljs-keyword">set</span> B .main.toolbar.device
button $B -image tool_device -width <span class=3D"hljs-number">50</span> -=
state normal -command {cbDboxWakeUp .deviceSelectDbox}
setBalloon $B <span class=3D"hljs-string">"Select device"</span>
<span class=3D"hljs-keyword">set</span> B .main.toolbar.connect
button $B -image tool_connect -width <span class=3D"hljs-number">50</span> =
-state disabled -command {popupCommMenu}
setBalloon $B <span class=3D"hljs-string">"Set communication"</span>
<span class=3D"hljs-keyword">set</span> B .main.toolbar.erase
button $B -image tool_erase -width <span class=3D"hljs-number">50</span> -s=
tate disabled -command {cbDboxWakeUp .deviceErase}
setBalloon $B <span class=3D"hljs-string">"Erase device"</span>
<span class=3D"hljs-keyword">set</span> B .main.toolbar.blankcheck
button $B -image tool_blankcheck -width <span class=3D"hljs-number">50</spa=
n> -state disabled -command {cbDboxWakeUp .blankCheckDBox}
setBalloon $B <span class=3D"hljs-string">"Blank check device"</span>
<span class=3D"hljs-keyword">set</span> B .main.toolbar.program
button $B -image tool_program -width <span class=3D"hljs-number">50</span> =
-state disabled -command {cmdsDeviceProgram}
setBalloon $B <span class=3D"hljs-string">"Program device"</span>
<span class=3D"hljs-keyword">set</span> B .main.toolbar.verify
button $B -image tool_verify -width <span class=3D"hljs-number">50</span> -=
state disabled -command {cmdsDeviceVerify}
setBalloon $B <span class=3D"hljs-string">"Verify device"</span>
<span class=3D"hljs-keyword">set</span> B .main.toolbar.<span class=3D"hljs=
-keyword">read</span>
button $B -image tool_read -width <span class=3D"hljs-number">50</span> -st=
ate disabled -command {cbDboxWakeUp .deviceReadDBox}
setBalloon $B <span class=3D"hljs-string">"Read device"</span>
<span class=3D"hljs-keyword">set</span> B .main.toolbar.bufferedit
button $B -image tool_bufferedit -width <span class=3D"hljs-number">50</spa=
n> -state disabled -command {cbDboxWakeUp .bufferEditWindow}
setBalloon $B <span class=3D"hljs-string">"Edit buffer"</span>
<span class=3D"hljs-keyword">set</span> B .main.toolbar.loadhex
button $B -image tool_loadhex -width <span class=3D"hljs-number">50</span> =
-state disabled -command {cbParseHexFile}
setBalloon $B <span class=3D"hljs-string">"Load HEX file"</span>
<span class=3D"hljs-keyword">set</span> B .main.toolbar.savehex
button $B -image tool_savehex -width <span class=3D"hljs-number">50</span> =
-state disabled -command {cbWriteHexFile}
setBalloon $B <span class=3D"hljs-string">"Save HEX file"</span>
<span class=3D"hljs-keyword">set</span> B .main.toolbar.help
button $B -image tool_help -width <span class=3D"hljs-number">50</span> -st=
ate normal -command {htmlView <span class=3D"hljs-string">"Help"</span> ./d=
oc/flip_um.htm}
setBalloon $B <span class=3D"hljs-string">"Help"</span>
frame .main.toolbar.f_separator1 -width <span class=3D"hljs-number">20</spa=
n>
frame .main.toolbar.f_separator2 -width <span class=3D"hljs-number">20</spa=
n>
frame .main.toolbar.f_separator3 -width <span class=3D"hljs-number">20</spa=
n>
pack configure .main.toolbar.device .main.toolbar.connect .main.toolbar.f_s=
eparator1 .main.toolbar.erase .main.toolbar.blankcheck .main.toolbar.progra=
m .main.toolbar.verify .main.toolbar.<span class=3D"hljs-keyword">read</spa=
n> .main.toolbar.f_separator2 .main.toolbar.bufferedit .main.toolbar.loadhe=
x .main.toolbar.savehex .main.toolbar.f_separator3 .main.toolbar.help -side=
 left -anchor w
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> createB=
ufferToolBar</span> {w} {
    <span class=3D"hljs-keyword">global</span> projDir
    image create photo tool_loadhex -<span class=3D"hljs-keyword">file</spa=
n> $projDir/images/loadhex.gif
    image create photo tool_savehex -<span class=3D"hljs-keyword">file</spa=
n> $projDir/images/savehex.gif
    image create photo tool_fill -<span class=3D"hljs-keyword">file</span> =
$projDir/images/fill.gif
    image create photo tool_goto -<span class=3D"hljs-keyword">file</span> =
$projDir/images/goto.gif
    image create photo tool_modify -<span class=3D"hljs-keyword">file</span=
> $projDir/images/modify.gif
    image create photo tool_reset -<span class=3D"hljs-keyword">file</span>=
 $projDir/images/reset.gif
    image create photo tool_search -<span class=3D"hljs-keyword">file</span=
> $projDir/images/search.gif
    image create photo tool_program -<span class=3D"hljs-keyword">file</spa=
n> $projDir/images/program.gif
    image create photo tool_read -<span class=3D"hljs-keyword">file</span> =
$projDir/images/deviceread.gif
    image create photo tool_verify -<span class=3D"hljs-keyword">file</span=
> $projDir/images/verify.gif
    image create photo tool_help -<span class=3D"hljs-keyword">file</span> =
$projDir/images/help.gif
    frame $w.toolbar
    <span class=3D"hljs-keyword">set</span> B $w.toolbar.loadhex
    button $B -image tool_loadhex -width <span class=3D"hljs-number">40</sp=
an> -state normal -command {cbParseHexFile}
    setBalloon $B <span class=3D"hljs-string">"Load HEX file"</span>
    <span class=3D"hljs-keyword">set</span> B $w.toolbar.savehex
    button $B -image tool_savehex -width <span class=3D"hljs-number">40</sp=
an> -state normal -command {cbWriteHexFile}
    setBalloon $B <span class=3D"hljs-string">"Save HEX file"</span>
    <span class=3D"hljs-keyword">set</span> B $w.toolbar.fill
    button $B -image tool_fill -width <span class=3D"hljs-number">40</span>=
 -state normal -command {<span class=3D"hljs-keyword">set</span> eValue .bu=
fferFillDBox.f_addresses.f_value.e_value
	$eValue icursor end
	focus $eValue
	cbDboxWakeUp .bufferFillDBox}
    setBalloon $B <span class=3D"hljs-string">"Fill buffer"</span>
    <span class=3D"hljs-keyword">set</span> B $w.toolbar.goto
    button $B -image tool_goto -width <span class=3D"hljs-number">40</span>=
 -state normal -command {<span class=3D"hljs-keyword">set</span> eData .buf=
ferGotoDbox.f_address.e_address
	focus $eData
	cbDboxWakeUp .bufferGotoDbox}
    setBalloon $B <span class=3D"hljs-string">"Buffer goto"</span>
    <span class=3D"hljs-keyword">set</span> B $w.toolbar.modify
    button $B -image tool_modify -width <span class=3D"hljs-number">40</spa=
n> -state normal -command {<span class=3D"hljs-keyword">set</span> eData .b=
ufferModifyDbox.f_addressData.e_data
	$eData icursor end
	focus $eData
	cbDboxWakeUp .bufferModifyDbox}
    setBalloon $B <span class=3D"hljs-string">"Modify buffer"</span>
    <span class=3D"hljs-keyword">set</span> B $w.toolbar.reset
    button $B -image tool_reset -width <span class=3D"hljs-number">40</span=
> -state normal -command {resetBuffer}
    setBalloon $B <span class=3D"hljs-string">"Reset buffer"</span>
    <span class=3D"hljs-keyword">set</span> B $w.toolbar.search
    button $B -image tool_search -width <span class=3D"hljs-number">40</spa=
n> -state normal -command {cbDboxWakeUp .bufferSearchDbox}
    setBalloon $B <span class=3D"hljs-string">"Search buffer"</span>
    <span class=3D"hljs-keyword">set</span> B $w.toolbar.<span class=3D"hlj=
s-keyword">read</span>
    button $B -image tool_read -width <span class=3D"hljs-number">40</span>=
 -state disabled -command {cbDboxWakeUp .deviceReadDBox}
    setBalloon $B <span class=3D"hljs-string">"Read device"</span>
    <span class=3D"hljs-keyword">set</span> B $w.toolbar.program
    button $B -image tool_program -width <span class=3D"hljs-number">40</sp=
an> -state disabled -command {cmdsDeviceProgram}
    setBalloon $B <span class=3D"hljs-string">"Program device"</span>
    <span class=3D"hljs-keyword">set</span> B $w.toolbar.verify
    button $B -image tool_verify -width <span class=3D"hljs-number">40</spa=
n> -state disabled -command {cmdsDeviceVerify}
    setBalloon $B <span class=3D"hljs-string">"Verify device"</span>
    <span class=3D"hljs-keyword">set</span> B $w.toolbar.help
    button $B -image tool_help -width <span class=3D"hljs-number">40</span>=
 -state normal -command {htmlView <span class=3D"hljs-string">"Help"</span>=
 ./doc/flip_um.htm}
    setBalloon $B <span class=3D"hljs-string">"Help"</span>
    frame $w.toolbar.f_separator1 -width <span class=3D"hljs-number">20</sp=
an>
    frame $w.toolbar.f_separator2 -width <span class=3D"hljs-number">20</sp=
an>
    frame $w.toolbar.f_separator3 -width <span class=3D"hljs-number">20</sp=
an>
    pack $w.toolbar.loadhex $w.toolbar.savehex $w.toolbar.f_separator1 $w.t=
oolbar.fill $w.toolbar.goto $w.toolbar.modify $w.toolbar.reset $w.toolbar.s=
earch $w.toolbar.f_separator2 $w.toolbar.program $w.toolbar.verify $w.toolb=
ar.<span class=3D"hljs-keyword">read</span> $w.toolbar.f_separator3 $w.tool=
bar.help -side left -anchor w
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> updateG=
UI</span> {event} {
    <span class=3D"hljs-keyword">switch</span> $event {
    onDeviceSelection {
	    onDeviceSelectionGUI
	}
    onAnyCommunicationOn {
	    onAnyCommunicationGUI normal
	}
    onAnyCommunicationOff {
	    onAnyCommunicationGUI disabled
	}
    onRs232CommunicationOn {
	    onRs232CommunicationGUI normal
	}
    onRs232CommunicationOff {
	    onRs232CommunicationGUI disabled
	}
    onUsbCommunicationOn {
	    onUsbCommunicationGUI normal
	}
    onUsbCommunicationOff {
	    onUsbCommunicationGUI disabled
	}
    onConfigFileLoaded {
	    onConfigFileLoadedGUI
	}
    onTestDebugChanged {
	    onTestDebugChangedGUI
	}
    onAddrProgRangeChange {
	    onAddrProgRangeChangeGUI
	}
    onBlankCheckOptionsChange {
	    onBlankCheckOptionsChangeGUI
	}
    onBufferSizeTypeChange {
	    onBufferSizeTypeChangeGUI
	}
    onInitialBufferContentsChange {
	    onInitialBufferContentsChangeGUI
	}
    onCanCommStatusModified {
	    onCanCommStatusModifiedGUI
	}
    onCanNodeSelectionOpened {
	    onCanNodeSelectionGUI <span class=3D"hljs-keyword">open</span>
	}
    onCanNodeSelectionClosed {
	    onCanNodeSelectionGUI closed
	}
    onSecurityLevelChange {
	    onSecurityLevelChangeGUI
	}
    onHsbModified {
	    onHsbModifiedGUI
	}
    onProtocolTestSelection {
	    onProtocolTestSelectionGUI
	}
    onRunOperations {
	    onRunOperationsGUI
	}
    onRunOperationsCompleted {
	    onRunOperationsCompletedGUI
	}
    onCANDongleSelection {
	    onCANDongleSelectionGUI
	}
    onDeviceActionStart {
	    onDeviceActionGUI disabled
	}
    onDeviceActionStop {
	    onDeviceActionGUI normal
	}
    default {
<span class=3D"hljs-comment">	    #dbgShowInfo "Invalid updateGUI argument"=
 </span>
	}
    }
    <span class=3D"hljs-keyword">update</span> idletasks
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> onUsbCo=
mmunicationGUI</span> {state} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> flipStates port baud projDir=
 flipFont protcl bootloaderVerDependent
    <span class=3D"hljs-keyword">if</span> {$state =3D=3D <span class=3D"hl=
js-string">"normal"</span>} then {
	<span class=3D"hljs-keyword">set</span> flipStates(usbComm) <span class=3D=
"hljs-string">"on"</span>
	<span class=3D"hljs-keyword">catch</span> [.f_status.l_comm configure -rel=
ief sunken -anchor w -borderwidth <span class=3D"hljs-number">1</span> -bac=
kground grey -foreground black -text <span class=3D"hljs-string">"USB"</spa=
n> -font $flipFont]
	<span class=3D"hljs-keyword">catch</span> [.usbCommDbox.f_buttons.b_open c=
onfigure -state disabled]
	<span class=3D"hljs-keyword">catch</span> [.usbCommDbox.f_buttons.b_close =
configure -state normal]
	<span class=3D"hljs-keyword">set</span> ::deviceArray(currentMemory) [<spa=
n class=3D"hljs-keyword">lindex</span> $::deviceArray(memoryList) <span cla=
ss=3D"hljs-number">0</span>]
	cmdsImportCurrentMemoryNameSpace $::deviceArray(currentMemory)
	<span class=3D"hljs-keyword">if</span> {$bootloaderVerDependent(startAppli=
)} then {
	    <span class=3D"hljs-keyword">catch</span> [.main.f_device.f_startApp.b=
_start configure -state normal -bg red -fg yellow]
	    <span class=3D"hljs-keyword">catch</span> [.main.f_device.f_buttons.b_=
exec configure -state normal -bg red -fg yellow]
	    <span class=3D"hljs-keyword">catch</span> [.main.f_device.f_startApp.b=
_reset configure -state normal]
	}
	<span class=3D"hljs-keyword">if</span> {$bootloaderVerDependent(eeprom)} t=
hen {
	    <span class=3D"hljs-keyword">if</span> {[winfo exists .main.f_buffer.b=
_memSelect]} then {
		pack .main.f_buffer.b_memSelect -side bottom -expand <span class=3D"hljs-=
number">0</span> -pady <span class=3D"hljs-number">17</span>
		<span class=3D"hljs-keyword">catch</span> [.main.f_buffer.b_memSelect con=
figure -state normal -text [<span class=3D"hljs-keyword">lindex</span> $::d=
eviceArray(memoryButtonList) <span class=3D"hljs-number">0</span>] -bg [<sp=
an class=3D"hljs-keyword">lindex</span> $::deviceArray(memoryColor) <span c=
lass=3D"hljs-number">0</span>] -fg black]
	    }
	}
	updateGuiParameters
    } else {
	<span class=3D"hljs-keyword">set</span> flipStates(usbComm) <span class=3D=
"hljs-string">"off"</span>
	<span class=3D"hljs-keyword">catch</span> [.f_status.l_comm configure -rel=
ief sunken -anchor w -borderwidth <span class=3D"hljs-number">1</span> -bac=
kground grey -foreground black -text <span class=3D"hljs-string">"Comm. OFF=
"</span> -font $flipFont]
	<span class=3D"hljs-keyword">catch</span> [.usbCommDbox.f_buttons.b_open c=
onfigure -state normal]
	<span class=3D"hljs-keyword">catch</span> [.usbCommDbox.f_buttons.b_close =
configure -state disabled]
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> onDevic=
eActionGUI</span> {state} {
    <span class=3D"hljs-keyword">if</span> {$state =3D=3D <span class=3D"hl=
js-string">"normal"</span>} then {
	<span class=3D"hljs-keyword">catch</span> [.main.f_device.f_buttons.b_exec=
 configure -state $state -bg red -fg yellow]
    } else {
	<span class=3D"hljs-keyword">catch</span> [.main.f_device.f_buttons.b_exec=
 configure -state $state -bg grey]
    }
    <span class=3D"hljs-keyword">set</span> f .deviceReadDBox.f_buttons
    <span class=3D"hljs-keyword">if</span> {[winfo exists $f]} then {
	<span class=3D"hljs-keyword">catch</span> [$f.b_read configure -state $sta=
te]
	<span class=3D"hljs-keyword">catch</span> [$f.b_reset configure -state $st=
ate]
    }
    <span class=3D"hljs-keyword">set</span> f .main.f_flow.f_buttons
    <span class=3D"hljs-keyword">if</span> {[winfo exists $f]} then {
	<span class=3D"hljs-keyword">catch</span> [$f.b_run configure -state $stat=
e]
	<span class=3D"hljs-keyword">catch</span> [$f.b_clear configure -state $st=
ate]
    }
    <span class=3D"hljs-keyword">set</span> f .main.f_device.f_buttons
    <span class=3D"hljs-keyword">if</span> {[winfo exists $f]} then {
	<span class=3D"hljs-keyword">catch</span> [$f.b_update configure -state $s=
tate]
	<span class=3D"hljs-keyword">catch</span> [$f.b_write configure -state $st=
ate]
    }
    <span class=3D"hljs-keyword">set</span> f .deviceErase.f_buttons
    <span class=3D"hljs-keyword">if</span> {[winfo exists $f]} then {
	<span class=3D"hljs-keyword">catch</span> [$f.b_erase configure -state $st=
ate]
    }
    <span class=3D"hljs-keyword">set</span> f .blankCheckDBox.f_buttons
    <span class=3D"hljs-keyword">if</span> {[winfo exists $f]} then {
	<span class=3D"hljs-keyword">catch</span> [$f.b_check configure -state $st=
ate]
	<span class=3D"hljs-keyword">catch</span> [$f.b_reset configure -state $st=
ate]
    }
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> onCANDo=
ngleSelectionGUI</span> {} {
    <span class=3D"hljs-keyword">global</span> canProtocol canPort
    <span class=3D"hljs-keyword">if</span> {($canProtocol(hardware) =3D=3D =
<span class=3D"hljs-string">"SYSTEC"</span>) ||($canProtocol(hardware) =3D=
=3D <span class=3D"hljs-string">"ATMEL_USB"</span>)} then {
	<span class=3D"hljs-keyword">set</span> canPort <span class=3D"hljs-string=
">"USB"</span>
	<span class=3D"hljs-keyword">catch</span> [.canSetup.f_main.f_1.f_3.l_port=
 configure -state normal]
	<span class=3D"hljs-keyword">catch</span> [.canSetup.f_main.f_1.f_3.portSe=
lect configure -state disabled]
	<span class=3D"hljs-keyword">catch</span> [.canSetup.f_main.f_20.f_21.l_sl=
ot configure -state disabled]
	<span class=3D"hljs-keyword">catch</span> [.canSetup.f_main.f_20.f_21.b_s0=
 configure -state disabled]
	<span class=3D"hljs-keyword">catch</span> [.canSetup.f_main.f_20.f_21.b_s1=
 configure -state disabled]
	<span class=3D"hljs-keyword">catch</span> [.canSetup.f_main.f_20.f_22.l_ch=
annel configure -state disabled]
	<span class=3D"hljs-keyword">catch</span> [.canSetup.f_main.f_20.f_22.b_c0=
 configure -state disabled]
	<span class=3D"hljs-keyword">catch</span> [.canSetup.f_main.f_20.f_22.b_c1=
 configure -state disabled]
    } elseif {$canProtocol(hardware) =3D=3D <span class=3D"hljs-string">"CA=
NAC2"</span>} {
	<span class=3D"hljs-keyword">catch</span> [.canSetup.f_main.f_20.f_21.l_sl=
ot configure -state disabled]
	<span class=3D"hljs-keyword">catch</span> [.canSetup.f_main.f_20.f_21.b_s0=
 configure -state disabled]
	<span class=3D"hljs-keyword">catch</span> [.canSetup.f_main.f_20.f_21.b_s1=
 configure -state disabled]
	<span class=3D"hljs-keyword">catch</span> [.canSetup.f_main.f_20.f_22.l_ch=
annel configure -state disabled]
	<span class=3D"hljs-keyword">catch</span> [.canSetup.f_main.f_20.f_22.b_c0=
 configure -state disabled]
	<span class=3D"hljs-keyword">catch</span> [.canSetup.f_main.f_20.f_22.b_c1=
 configure -state disabled]
	<span class=3D"hljs-keyword">catch</span> [.canSetup.f_main.f_1.f_3.l_port=
 configure -state disabled]
	<span class=3D"hljs-keyword">catch</span> [.canSetup.f_main.f_1.f_3.portSe=
lect configure -state disabled]
    } elseif {$canProtocol(hardware) =3D=3D <span class=3D"hljs-string">"CA=
NCARDX"</span>} {
	<span class=3D"hljs-keyword">catch</span> [.canSetup.f_main.f_20.f_21.l_sl=
ot configure -state normal]
	<span class=3D"hljs-keyword">catch</span> [.canSetup.f_main.f_20.f_21.b_s0=
 configure -state normal]
	<span class=3D"hljs-keyword">catch</span> [.canSetup.f_main.f_20.f_21.b_s1=
 configure -state normal]
	<span class=3D"hljs-keyword">catch</span> [.canSetup.f_main.f_20.f_22.l_ch=
annel configure -state normal]
	<span class=3D"hljs-keyword">catch</span> [.canSetup.f_main.f_20.f_22.b_c0=
 configure -state normal]
	<span class=3D"hljs-keyword">catch</span> [.canSetup.f_main.f_20.f_22.b_c1=
 configure -state normal]
	<span class=3D"hljs-keyword">catch</span> [.canSetup.f_main.f_1.f_3.l_port=
 configure -state disabled]
	<span class=3D"hljs-keyword">catch</span> [.canSetup.f_main.f_1.f_3.portSe=
lect configure -state disabled]
    } elseif {$canProtocol(hardware) =3D=3D <span class=3D"hljs-string">"CA=
NPARI"</span>} {
	<span class=3D"hljs-keyword">catch</span> [.canSetup.f_main.f_20.f_21.l_sl=
ot configure -state disabled]
	<span class=3D"hljs-keyword">catch</span> [.canSetup.f_main.f_20.f_21.b_s0=
 configure -state disabled]
	<span class=3D"hljs-keyword">catch</span> [.canSetup.f_main.f_20.f_21.b_s1=
 configure -state disabled]
	<span class=3D"hljs-keyword">catch</span> [.canSetup.f_main.f_20.f_22.l_ch=
annel configure -state disabled]
	<span class=3D"hljs-keyword">catch</span> [.canSetup.f_main.f_20.f_22.b_c0=
 configure -state disabled]
	<span class=3D"hljs-keyword">catch</span> [.canSetup.f_main.f_20.f_22.b_c1=
 configure -state disabled]
	<span class=3D"hljs-keyword">catch</span> [.canSetup.f_main.f_1.f_3.l_port=
 configure -state normal]
	<span class=3D"hljs-keyword">catch</span> [.canSetup.f_main.f_1.f_3.portSe=
lect configure -state normal]
    } else {
	<span class=3D"hljs-keyword">set</span> canPort <span class=3D"hljs-string=
">"LPT1"</span>
	<span class=3D"hljs-keyword">catch</span> [.canSetup.f_main.f_20.f_21.l_sl=
ot configure -state disabled]
	<span class=3D"hljs-keyword">catch</span> [.canSetup.f_main.f_20.f_21.b_s0=
 configure -state disabled]
	<span class=3D"hljs-keyword">catch</span> [.canSetup.f_main.f_20.f_21.b_s1=
 configure -state disabled]
	<span class=3D"hljs-keyword">catch</span> [.canSetup.f_main.f_20.f_22.l_ch=
annel configure -state disabled]
	<span class=3D"hljs-keyword">catch</span> [.canSetup.f_main.f_20.f_22.b_c0=
 configure -state disabled]
	<span class=3D"hljs-keyword">catch</span> [.canSetup.f_main.f_20.f_22.b_c1=
 configure -state disabled]
	<span class=3D"hljs-keyword">catch</span> [.canSetup.f_main.f_1.f_3.l_port=
 configure -state normal]
	<span class=3D"hljs-keyword">catch</span> [.canSetup.f_main.f_1.f_3.portSe=
lect configure -state normal]
    }
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> onRunOp=
erationsGUI</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> color
    cmdsClearOperations <span class=3D"hljs-number">1</span>
    focus .
    <span class=3D"hljs-keyword">set</span> ff .main.f_flow
    <span class=3D"hljs-keyword">set</span> bRun $ff.f_buttons.b_run
    <span class=3D"hljs-keyword">set</span> bClear $ff.f_buttons.b_clear
    <span class=3D"hljs-keyword">set</span> bErase $ff.f_operations.b_erase
    <span class=3D"hljs-keyword">set</span> bBlankCheck $ff.f_operations.b_=
blankCheck
    <span class=3D"hljs-keyword">set</span> bProgram $ff.f_operations.b_pro=
gram
    <span class=3D"hljs-keyword">set</span> bVerify $ff.f_operations.b_veri=
fy
    <span class=3D"hljs-keyword">set</span> bSpecialBytes $ff.f_operations.=
b_specialBytes
    <span class=3D"hljs-keyword">set</span> fd .main.f_device
    <span class=3D"hljs-keyword">if</span> {[winfo exists $fd.f_fuses.b_osc=
]} then {
	<span class=3D"hljs-keyword">set</span> bOsc $fd.f_fuses.b_osc
    }
    <span class=3D"hljs-keyword">if</span> {[winfo exists $fd.f_fuses.b_blj=
b]} then {
	<span class=3D"hljs-keyword">set</span> bBLJB $fd.f_fuses.b_bljb
    }
    <span class=3D"hljs-keyword">if</span> {[winfo exists $fd.f_fuses.b_x2]=
} then {
	<span class=3D"hljs-keyword">set</span> bX2 $fd.f_fuses.b_x2
    }
    <span class=3D"hljs-keyword">set</span> eSBV $fd.f_bsb_sbv.f_sbv.e_sbv
    <span class=3D"hljs-keyword">set</span> eBSB $fd.f_bsb_sbv.f_bsb.e_bsb
    <span class=3D"hljs-keyword">if</span> {[winfo exists $fd.f_bsb_sbv.f_b=
sb.e_eb]} then {
	<span class=3D"hljs-keyword">set</span> eEB $fd.f_bsb_sbv.f_bsb.e_eb
    }
    <span class=3D"hljs-keyword">foreach</span> i {<span class=3D"hljs-numb=
er">0</span> <span class=3D"hljs-number">1</span> <span class=3D"hljs-numbe=
r">2</span>} {
	<span class=3D"hljs-keyword">set</span> wdgt $fd.f_ssb.f_level$i.b_level$i
	<span class=3D"hljs-keyword">if</span> {[winfo exists $wdgt]} then {
	    <span class=3D"hljs-keyword">set</span> bLev$i $wdgt
	}
    }
    <span class=3D"hljs-keyword">foreach</span> i {<span class=3D"hljs-numb=
er">0</span> <span class=3D"hljs-number">1</span> <span class=3D"hljs-numbe=
r">2</span>} {
	<span class=3D"hljs-keyword">set</span> wdgt $fd.f_ssb.f_level.b_level$i
	<span class=3D"hljs-keyword">if</span> {[winfo exists $wdgt]} then {
	    <span class=3D"hljs-keyword">set</span> bLev$i $wdgt
	}
    }
    <span class=3D"hljs-keyword">set</span> bRead $fd.f_buttons.b_update
    <span class=3D"hljs-keyword">set</span> bWrite $fd.f_buttons.b_write
    <span class=3D"hljs-keyword">set</span> mFile .menubar.<span class=3D"h=
ljs-keyword">file</span>
    <span class=3D"hljs-keyword">set</span> mBuffer .menubar.buffer
    <span class=3D"hljs-keyword">set</span> mDevice .menubar.device
    <span class=3D"hljs-keyword">set</span> mSettings .menubar.settings
    <span class=3D"hljs-keyword">set</span> mHelp .menubar.help
    <span class=3D"hljs-keyword">set</span> buttons_List [<span class=3D"hl=
js-keyword">list</span> $bRun $bClear $bRead $bWrite]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists bLev0]} then {
	<span class=3D"hljs-keyword">lappend</span> buttons_List $bLev0
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists bLev1]} then {
	<span class=3D"hljs-keyword">lappend</span> buttons_List $bLev1
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists bLev2]} then {
	<span class=3D"hljs-keyword">lappend</span> buttons_List $bLev2
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists bOsc]} then {
	<span class=3D"hljs-keyword">lappend</span> buttons_List $bOsc
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists bBLJB]} then {
	<span class=3D"hljs-keyword">lappend</span> buttons_List $bBLJB
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists bX2]} then {
	<span class=3D"hljs-keyword">lappend</span> buttons_List $bX2
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists bEraseSBV]} then {
	<span class=3D"hljs-keyword">lappend</span> buttons_List $bEraseSBV
    }
    <span class=3D"hljs-keyword">set</span> checkbuttons_List [<span class=
=3D"hljs-keyword">list</span> $bErase $bBlankCheck $bProgram $bVerify $bSpe=
cialBytes]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists eSBV]} then {
	<span class=3D"hljs-keyword">lappend</span> entries_List $eSBV
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists eBSB]} then {
	<span class=3D"hljs-keyword">lappend</span> entries_List $eBSB
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists eEB]} then {
	<span class=3D"hljs-keyword">lappend</span> entries_List $eEB
    }
    <span class=3D"hljs-keyword">set</span> menus_List [<span class=3D"hljs=
-keyword">list</span> $mFile $mBuffer $mDevice $mSettings $mHelp]
    <span class=3D"hljs-keyword">foreach</span> b $buttons_List {
	<span class=3D"hljs-keyword">catch</span> {$b configure -state disabled}
    }
    <span class=3D"hljs-keyword">foreach</span> e $entries_List {
	<span class=3D"hljs-keyword">if</span> {[winfo exists $e]} then {
	    <span class=3D"hljs-keyword">catch</span> {$e configure -takefocus <sp=
an class=3D"hljs-number">0</span> -state disabled}
	}
    }
    <span class=3D"hljs-keyword">foreach</span> m $menus_List {
	<span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">set<=
/span> i <span class=3D"hljs-number">0</span>} {$i &lt;=3D [$m index last]}=
 {<span class=3D"hljs-keyword">incr</span> i} {
	    <span class=3D"hljs-keyword">catch</span> {$m entryconfigure $i -state=
 disabled}
	}
    }
    <span class=3D"hljs-keyword">update</span>
<span class=3D"hljs-comment">    #update checkbuttons color before Run oper=
ations</span>
    writeBuffer flowProgramColor $color(systemWindow)
    writeBuffer flowEraseColor $color(systemWindow)
    writeBuffer flowBlankCheckColor $color(systemWindow)
    writeBuffer flowProgramColor $color(systemWindow)
    writeBuffer flowVerifyColor $color(systemWindow)
    writeBuffer flowSpecialBytesColor $color(systemWindow)
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> onRunOp=
erationsCompletedGUI</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> saveArray gui bootloaderVerD=
ependent
    <span class=3D"hljs-keyword">set</span> ff .main.f_flow
    <span class=3D"hljs-keyword">set</span> bRun $ff.f_buttons.b_run
    <span class=3D"hljs-keyword">set</span> bClear $ff.f_buttons.b_clear
    <span class=3D"hljs-keyword">set</span> bErase $ff.f_operations.b_erase
    <span class=3D"hljs-keyword">set</span> bBlankCheck $ff.f_operations.b_=
blankCheck
    <span class=3D"hljs-keyword">set</span> bProgram $ff.f_operations.b_pro=
gram
    <span class=3D"hljs-keyword">set</span> bVerify $ff.f_operations.b_veri=
fy
    <span class=3D"hljs-keyword">set</span> bSpecialBytes $ff.f_operations.=
b_specialBytes
    <span class=3D"hljs-keyword">set</span> mFile .menubar.<span class=3D"h=
ljs-keyword">file</span>
    <span class=3D"hljs-keyword">set</span> mBuffer .menubar.buffer
    <span class=3D"hljs-keyword">set</span> mDevice .menubar.device
    <span class=3D"hljs-keyword">set</span> mSettings .menubar.settings
    <span class=3D"hljs-keyword">set</span> mHelp .menubar.help
    <span class=3D"hljs-keyword">set</span> menus_List [<span class=3D"hljs=
-keyword">list</span> $mFile $mBuffer $mDevice $mSettings $mHelp]
    <span class=3D"hljs-keyword">foreach</span> menu $menus_List {
	<span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">set<=
/span> i <span class=3D"hljs-number">0</span>} {$i &lt;=3D [$menu index las=
t]} {<span class=3D"hljs-keyword">incr</span> i} {
	    <span class=3D"hljs-keyword">catch</span> {$menu entryconfigure $i -st=
ate normal}
	}
    }
    <span class=3D"hljs-keyword">set</span> gui(flowErase) $saveArray(flowE=
rase)
    <span class=3D"hljs-keyword">set</span> gui(flowBlankCheck) $saveArray(=
flowBlankCheck)
    <span class=3D"hljs-keyword">set</span> gui(flowProgram) $saveArray(flo=
wProgram)
    <span class=3D"hljs-keyword">set</span> gui(flowVerify) $saveArray(flow=
Verify)
    <span class=3D"hljs-keyword">set</span> gui(flowSpecialBytes) $saveArra=
y(flowSpecialBytes)
    modifyWidgetOption .main.f_device state normal
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">l=
search</span> [buildSkipProcList] ptclReadSSB] =3D=3D <span class=3D"hljs-n=
umber">-1</span>} then {
	updateGUI onSecurityLevelChange
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists bootloaderVerDependent(startAppli)]} then {
	<span class=3D"hljs-keyword">if</span> {! $bootloaderVerDependent(startApp=
li)} then {
	    <span class=3D"hljs-keyword">catch</span> [.main.f_device.f_startApp.b=
_start configure -state disabled]
	    <span class=3D"hljs-keyword">catch</span> [.main.f_device.f_buttons.b_=
exec configure -state disabled]
	}
    }
    updateGuiParameters
    <span class=3D"hljs-keyword">catch</span> [$bRun configure -state norma=
l]
    <span class=3D"hljs-keyword">catch</span> [$bClear configure -state nor=
mal]
    <span class=3D"hljs-keyword">update</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> onErase=
BlockWidgetChangeGUI</span> {w} {
    <span class=3D"hljs-keyword">global</span> gui
    <span class=3D"hljs-keyword">if</span> {$w =3D=3D <span class=3D"hljs-s=
tring">"blocks"</span>} then {
	<span class=3D"hljs-keyword">foreach</span> i {<span class=3D"hljs-number"=
>0</span> <span class=3D"hljs-number">1</span> <span class=3D"hljs-number">=
2</span> <span class=3D"hljs-number">3</span> <span class=3D"hljs-number">4=
</span>} {
	    <span class=3D"hljs-keyword">catch</span> {.deviceErase.f_erase.f_bloc=
ks.b_block$i configure -state $gui(erasePossibleBlock$i)}
	}
    } else {
	<span class=3D"hljs-keyword">foreach</span> i {<span class=3D"hljs-number"=
>0</span> <span class=3D"hljs-number">1</span> <span class=3D"hljs-number">=
2</span> <span class=3D"hljs-number">3</span> <span class=3D"hljs-number">4=
</span>} {
	    <span class=3D"hljs-keyword">catch</span> {.deviceErase.f_erase.f_bloc=
ks.b_block$i configure -state disabled}
	}
    }
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> onProto=
colTestSelectionGUI</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> testArray
    <span class=3D"hljs-keyword">set</span> wdgt <span class=3D"hljs-string=
">".testSelectionDbox.f_skip"</span>
    <span class=3D"hljs-keyword">if</span> {$testArray(protocol)} then {
	modifyWidgetOption $wdgt state normal
    } else {
	modifyWidgetOption $wdgt state disabled
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> onHsbMo=
difiedGUI</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> flipStates
    <span class=3D"hljs-keyword">if</span> {$flipStates(simul)} then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">if</span> {([<span class=3D"hljs-keyword">=
info</span> exists ::deviceArray(hsb)]) &amp;&amp;($::deviceArray(hsb) !=3D=
 <span class=3D"hljs-string">"XX"</span>)} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(x2Fuse) [<span class=
=3D"hljs-keyword">expr</span> <span class=3D"hljs-number">0</span>x$::devic=
eArray(hsb) &gt;&gt; <span class=3D"hljs-number">7</span>]
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info=
</span> exists ::deviceArray(x2Fuse)]} then {
	    <span class=3D"hljs-keyword">set</span> decal <span class=3D"hljs-numb=
er">0</span>x[<span class=3D"hljs-keyword">format</span> %X [<span class=3D=
"hljs-keyword">expr</span> $::deviceArray(x2Fuse) &lt;&lt; <span class=3D"h=
ljs-number">7</span>]]
	}
	<span class=3D"hljs-keyword">set</span> var2 <span class=3D"hljs-number">0=
</span>x[<span class=3D"hljs-keyword">format</span> %X [<span class=3D"hljs=
-keyword">expr</span> (<span class=3D"hljs-number">0</span>x$::deviceArray(=
hsb)-$decal)]]
	<span class=3D"hljs-keyword">set</span> ::deviceArray(bljbFuse) [<span cla=
ss=3D"hljs-keyword">expr</span> $var2 &gt;&gt; <span class=3D"hljs-number">=
6</span>]
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info=
</span> exists ::deviceArray(bljbFuse)]} then {
	    <span class=3D"hljs-keyword">set</span> decal <span class=3D"hljs-numb=
er">0</span>x[<span class=3D"hljs-keyword">format</span> %X [<span class=3D=
"hljs-keyword">expr</span> $::deviceArray(bljbFuse) &lt;&lt; <span class=3D=
"hljs-number">6</span>]]
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info=
</span> exists ::deviceArray(oscFuse)]} then {
	    <span class=3D"hljs-keyword">set</span> var3 <span class=3D"hljs-numbe=
r">0</span>x[<span class=3D"hljs-keyword">format</span> %X [<span class=3D"=
hljs-keyword">expr</span> ($var2-$decal)]]
	    <span class=3D"hljs-keyword">set</span> ::deviceArray(oscFuse) [<span =
class=3D"hljs-keyword">expr</span> $var3 &gt;&gt; <span class=3D"hljs-numbe=
r">5</span>]
	}
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> onSecur=
ityLevelChangeGUI</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> expAnsw flipStates bootloade=
rVerDependent
    <span class=3D"hljs-keyword">set</span> dFrame <span class=3D"hljs-stri=
ng">".main.f_device"</span>
    <span class=3D"hljs-keyword">if</span> {[checkSecurityLevel] =3D=3D <sp=
an class=3D"hljs-number">0</span>} then {
<span class=3D"hljs-comment">	#dbgEndProc [info level [info level]]</span>
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">catch</span> [<span class=3D"hljs-keyword"=
>set</span> eBSB $dFrame.f_bsb_sbv.f_bsb.e_bsb]
    <span class=3D"hljs-keyword">catch</span> [<span class=3D"hljs-keyword"=
>set</span> eSBV $dFrame.f_bsb_sbv.f_sbv.e_sbv]
    <span class=3D"hljs-keyword">catch</span> [<span class=3D"hljs-keyword"=
>set</span> eEB $dFrame.f_bsb_sbv.f_bsb.e_eb]
    <span class=3D"hljs-keyword">foreach</span> i {<span class=3D"hljs-numb=
er">0</span> <span class=3D"hljs-number">1</span> <span class=3D"hljs-numbe=
r">2</span>} {
	<span class=3D"hljs-keyword">set</span> wdgt $dFrame.f_ssb.f_level$i.b_lev=
el$i
	<span class=3D"hljs-keyword">if</span> {[winfo exists $wdgt]} then {
	    <span class=3D"hljs-keyword">set</span> bLevel$i $wdgt
	}
    }
    <span class=3D"hljs-keyword">foreach</span> i {<span class=3D"hljs-numb=
er">0</span> <span class=3D"hljs-number">1</span> <span class=3D"hljs-numbe=
r">2</span>} {
	<span class=3D"hljs-keyword">set</span> wdgt $dFrame.f_ssb.f_level.b_level=
$i
	<span class=3D"hljs-keyword">if</span> {[winfo exists $wdgt]} then {
	    <span class=3D"hljs-keyword">set</span> bLevel$i $wdgt
	}
    }
    <span class=3D"hljs-keyword">catch</span> [<span class=3D"hljs-keyword"=
>set</span> bUpdate $dFrame.f_buttons.b_update]
    <span class=3D"hljs-keyword">catch</span> [<span class=3D"hljs-keyword"=
>set</span> bWrite $dFrame.f_buttons.b_write]
    <span class=3D"hljs-keyword">catch</span> [<span class=3D"hljs-keyword"=
>set</span> bExec $dFrame.f_buttons.b_exec]
    <span class=3D"hljs-keyword">catch</span> [<span class=3D"hljs-keyword"=
>set</span> bUartBypass $dFrame.f_bypass.cb_bypassUart]
    <span class=3D"hljs-keyword">catch</span> [<span class=3D"hljs-keyword"=
>set</span> bI2cBypass $dFrame.f_bypass.cb_bypassI2c]
    <span class=3D"hljs-keyword">catch</span> [<span class=3D"hljs-keyword"=
>set</span> bOsc $dFrame.f_fuses.b_osc]
    <span class=3D"hljs-keyword">catch</span> [<span class=3D"hljs-keyword"=
>set</span> bBLJB $dFrame.f_fuses.b_bljb]
    <span class=3D"hljs-keyword">catch</span> [<span class=3D"hljs-keyword"=
>set</span> bX2 $dFrame.f_fuses.b_x2]
    <span class=3D"hljs-keyword">set</span> buttonList [<span class=3D"hljs=
-keyword">list</span>]
    <span class=3D"hljs-keyword">catch</span> [<span class=3D"hljs-keyword"=
>lappend</span> buttonList $bErase]
    <span class=3D"hljs-keyword">catch</span> [<span class=3D"hljs-keyword"=
>lappend</span> buttonList $bUpdate]
    <span class=3D"hljs-keyword">catch</span> [<span class=3D"hljs-keyword"=
>lappend</span> buttonList $bWrite]
    <span class=3D"hljs-keyword">catch</span> [<span class=3D"hljs-keyword"=
>lappend</span> buttonList $bExec]
    <span class=3D"hljs-keyword">set</span> ssbButtonList [<span class=3D"h=
ljs-keyword">list</span>]
    <span class=3D"hljs-keyword">catch</span> [<span class=3D"hljs-keyword"=
>lappend</span> ssbButtonList $bLevel0]
    <span class=3D"hljs-keyword">catch</span> [<span class=3D"hljs-keyword"=
>lappend</span> ssbButtonList $bLevel1]
    <span class=3D"hljs-keyword">catch</span> [<span class=3D"hljs-keyword"=
>lappend</span> ssbButtonList $bLevel2]
    <span class=3D"hljs-keyword">set</span> entryList [<span class=3D"hljs-=
keyword">list</span>]
    <span class=3D"hljs-keyword">catch</span> [<span class=3D"hljs-keyword"=
>lappend</span> entryList $eSBV]
    <span class=3D"hljs-keyword">catch</span> [<span class=3D"hljs-keyword"=
>lappend</span> entryList $eBSB]
    <span class=3D"hljs-keyword">catch</span> [<span class=3D"hljs-keyword"=
>lappend</span> entryList $eEB]
    <span class=3D"hljs-keyword">set</span> checkButtonList [<span class=3D=
"hljs-keyword">list</span>]
    <span class=3D"hljs-keyword">catch</span> [<span class=3D"hljs-keyword"=
>lappend</span> checkButtonList $bOsc]
    <span class=3D"hljs-keyword">catch</span> [<span class=3D"hljs-keyword"=
>lappend</span> checkButtonList $bBLJB]
    <span class=3D"hljs-keyword">catch</span> [<span class=3D"hljs-keyword"=
>lappend</span> checkButtonList $bX2]
    <span class=3D"hljs-keyword">if</span> {$flipStates(simul)} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(level) <span class=
=3D"hljs-number">0</span>
    }
    <span class=3D"hljs-keyword">if</span> {$::deviceArray(level) =3D=3D <s=
pan class=3D"hljs-number">0</span>} then {
	<span class=3D"hljs-keyword">foreach</span> entry $entryList {
	    <span class=3D"hljs-keyword">catch</span> [$entry configure -takefocus=
 <span class=3D"hljs-number">1</span> -state normal]
	}
	<span class=3D"hljs-keyword">if</span> {! $bootloaderVerDependent(eb)} the=
n {
	    <span class=3D"hljs-keyword">catch</span> [.main.f_device.f_bsb_sbv.f_=
bsb.e_eb configure -state disabled]
	}
	<span class=3D"hljs-keyword">foreach</span> button $buttonList {
	    <span class=3D"hljs-keyword">catch</span> [$button configure -state no=
rmal]
	}
	<span class=3D"hljs-keyword">foreach</span> button $ssbButtonList {
	    <span class=3D"hljs-keyword">catch</span> [$button configure -state no=
rmal]
	}
	<span class=3D"hljs-keyword">foreach</span> chkButt $checkButtonList {
	    <span class=3D"hljs-keyword">catch</span> [$chkButt configure -state n=
ormal]
	}
    } elseif {$::deviceArray(level) =3D=3D <span class=3D"hljs-number">1</s=
pan>} {
	<span class=3D"hljs-keyword">catch</span> [$eSBV configure -takefocus <spa=
n class=3D"hljs-number">0</span> -state disabled]
	<span class=3D"hljs-keyword">catch</span> [$eBSB configure -takefocus <spa=
n class=3D"hljs-number">0</span> -state disabled]
	<span class=3D"hljs-keyword">catch</span> [$eEB configure -takefocus <span=
 class=3D"hljs-number">0</span> -state disabled]
	<span class=3D"hljs-keyword">catch</span> [$bErase configure -state disabl=
ed]
	<span class=3D"hljs-keyword">catch</span> [$bLevel0 configure -state disab=
led]
	<span class=3D"hljs-keyword">catch</span> [$bLevel1 configure -state norma=
l]
	<span class=3D"hljs-keyword">catch</span> [$bLevel2 configure -state norma=
l]
	<span class=3D"hljs-keyword">catch</span> [$bUpdate configure -state norma=
l]
	<span class=3D"hljs-keyword">catch</span> [$bWrite configure -state normal=
]
	<span class=3D"hljs-keyword">foreach</span> chkButt $checkButtonList {
	    <span class=3D"hljs-keyword">catch</span> [$chkButt configure -state d=
isabled]
	}
    } elseif {$::deviceArray(level) =3D=3D <span class=3D"hljs-number">2</s=
pan>} {
	<span class=3D"hljs-keyword">foreach</span> entry $entryList {
	    <span class=3D"hljs-keyword">catch</span> [$entry configure -takefocus=
 <span class=3D"hljs-number">0</span> -state disabled]
	}
	<span class=3D"hljs-keyword">foreach</span> button $buttonList {
	    <span class=3D"hljs-keyword">catch</span> [$button configure -state di=
sabled]
	}
	<span class=3D"hljs-keyword">foreach</span> chkButt $checkButtonList {
	    <span class=3D"hljs-keyword">catch</span> [$chkButt configure -state d=
isabled]
	}
	<span class=3D"hljs-keyword">foreach</span> button $ssbButtonList {
	    <span class=3D"hljs-keyword">catch</span> [$button configure -state di=
sabled]
	}
    } else {
	<span class=3D"hljs-keyword">if</span> {! $flipStates(simul)} then {
	    <span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-st=
ring">"The security level value is not valid."</span>
	    messageBox <span class=3D"hljs-string">"Information"</span> <span clas=
s=3D"hljs-keyword">error</span> $message
	    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number"=
>0</span>
	}
    }
    <span class=3D"hljs-keyword">if</span> {([<span class=3D"hljs-keyword">=
info</span> exists ::deviceArray(ssb)]) &amp;&amp;($::deviceArray(ssb) =3D=
=3D <span class=3D"hljs-string">"XX"</span>)} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray(level) X
	<span class=3D"hljs-keyword">catch</span> [$bLevel2 configure -state disab=
led]
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> onCanNo=
deSelectionGUI</span> {state} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> canPort canBaud canProtocol =
flipStates port baud
    <span class=3D"hljs-keyword">global</span> protcl
    <span class=3D"hljs-keyword">set</span> flipStates(canNode) $state
    <span class=3D"hljs-keyword">if</span> {$state =3D=3D <span class=3D"hl=
js-string">"open"</span>} then {
	<span class=3D"hljs-keyword">if</span> {$protcl =3D=3D <span class=3D"hljs=
-string">"CANStandard"</span> || $protcl =3D=3D <span class=3D"hljs-string"=
>"usbcan"</span>} then {
	    <span class=3D"hljs-keyword">catch</span> [<span class=3D"hljs-keyword=
">set</span> fButtons .canSetup.f_b]
	    <span class=3D"hljs-keyword">catch</span> [focus .canSetup]
	    <span class=3D"hljs-keyword">catch</span> [.f_status.l_comm configure =
-text <span class=3D"hljs-string">"$canPort / $canBaud  / $::deviceArray(nn=
bConnect) / $::deviceArray(crisConnect) "</span>]
	    log_message <span class=3D"hljs-string">"CAN node $::deviceArray(nnbCo=
nnect) opened."</span>
	    <span class=3D"hljs-keyword">catch</span> [$fButtons.b_start configure=
 -text <span class=3D"hljs-string">"Node Disconnect"</span>]
	}
<span class=3D"hljs-comment">	#david eseo</span>
	<span class=3D"hljs-keyword">if</span> {($protcl =3D=3D <span class=3D"hlj=
s-string">"rs232can"</span>) ||($protcl =3D=3D <span class=3D"hljs-string">=
"canview"</span>)} then {
	    <span class=3D"hljs-keyword">set</span> fButtons .rs232canSetup.f_b
	    <span class=3D"hljs-keyword">catch</span> [focus .rs232canSetup]
	    <span class=3D"hljs-keyword">catch</span> [.f_status.l_comm configure =
-text <span class=3D"hljs-string">"$port / $baud  / $::deviceArray(nnbConne=
ct) / $::deviceArray(crisConnect) "</span>]
	    log_message <span class=3D"hljs-string">"CAN node $::deviceArray(nnbCo=
nnect) opened."</span>
	    <span class=3D"hljs-keyword">catch</span> [$fButtons.b_start configure=
 -text <span class=3D"hljs-string">"Node Disconnect"</span>]
	}
<span class=3D"hljs-comment">	#fin david eseo  </span>
	<span class=3D"hljs-keyword">set</span> ::deviceArray(currentMemory) [<spa=
n class=3D"hljs-keyword">lindex</span> $::deviceArray(memoryList) <span cla=
ss=3D"hljs-number">0</span>]
	cmdsImportCurrentMemoryNameSpace $::deviceArray(currentMemory)
	<span class=3D"hljs-keyword">catch</span> [.main.f_device.f_buttons.b_canc=
onfig configure -state normal]
	<span class=3D"hljs-keyword">catch</span> [.main.f_device.f_startApp.b_sta=
rt configure -state normal -bg red -fg yellow]
	<span class=3D"hljs-keyword">catch</span> [.main.f_device.f_buttons.b_exec=
 configure -state normal -bg red -fg yellow]
	<span class=3D"hljs-keyword">catch</span> [.main.f_device.f_startApp.b_res=
et configure -state normal]
	<span class=3D"hljs-keyword">catch</span> [.main.f_buffer.b_memSelect conf=
igure -state normal -text [<span class=3D"hljs-keyword">lindex</span> $::de=
viceArray(memoryButtonList) <span class=3D"hljs-number">0</span>] -bg [<spa=
n class=3D"hljs-keyword">lindex</span> $::deviceArray(memoryColor) <span cl=
ass=3D"hljs-number">0</span>] -fg black]
	<span class=3D"hljs-keyword">if</span> {[winfo exists .main.f_buffer.b_mem=
Select]} then {
	    pack .main.f_buffer.b_memSelect -side bottom -expand <span class=3D"hl=
js-number">0</span> -pady <span class=3D"hljs-number">17</span>
	}
	updateGuiParameters
    } else {
	<span class=3D"hljs-keyword">if</span> {$protcl =3D=3D <span class=3D"hljs=
-string">"CANStandard"</span> || $protcl =3D=3D <span class=3D"hljs-string"=
>"usbcan"</span>} then {
	    <span class=3D"hljs-keyword">catch</span> [<span class=3D"hljs-keyword=
">set</span> fButtons .canSetup.f_b]
	    <span class=3D"hljs-keyword">catch</span> [focus .canSetup]
	    <span class=3D"hljs-keyword">catch</span> [.f_status.l_comm configure =
-text <span class=3D"hljs-string">"$canPort / $canBaud  / $::deviceArray(nn=
bConnect) / $::deviceArray(crisConnect) "</span>]
	    log_message <span class=3D"hljs-string">"CAN node $::deviceArray(nnbCo=
nnect) closed."</span>
	    <span class=3D"hljs-keyword">catch</span> [$fButtons.b_start configure=
 -text <span class=3D"hljs-string">"Node Connect"</span>]
	}
<span class=3D"hljs-comment">	#david eseo</span>
	<span class=3D"hljs-keyword">if</span> {($protcl =3D=3D <span class=3D"hlj=
s-string">"rs232can"</span>) ||($protcl =3D=3D <span class=3D"hljs-string">=
"canview"</span>)} then {
	    <span class=3D"hljs-keyword">set</span> fButtons .rs232canSetup.f_b
	    <span class=3D"hljs-keyword">catch</span> [focus .rs232canSetup]
	    <span class=3D"hljs-keyword">catch</span> [.f_status.l_comm configure =
-text <span class=3D"hljs-string">"$port / $baud  / $::deviceArray(nnbConne=
ct) / $::deviceArray(crisConnect) "</span>]
	    log_message <span class=3D"hljs-string">"CAN node $::deviceArray(nnbCo=
nnect) closed."</span>
	    <span class=3D"hljs-keyword">catch</span> [$fButtons.b_start configure=
 -text <span class=3D"hljs-string">"Node Connect"</span>]
	}
<span class=3D"hljs-comment">	#fin david eseo  </span>
	<span class=3D"hljs-keyword">set</span> ::deviceArray(currentMemory) [<spa=
n class=3D"hljs-keyword">lindex</span> $::deviceArray(memoryList) <span cla=
ss=3D"hljs-number">0</span>]
	cmdsImportCurrentMemoryNameSpace $::deviceArray(currentMemory)
	<span class=3D"hljs-keyword">catch</span> [.main.f_device.f_buttons.b_canc=
onfig configure -state disabled]
	<span class=3D"hljs-keyword">catch</span> [.main.f_device.f_startApp.b_sta=
rt configure -state disabled -bg grey]
	<span class=3D"hljs-keyword">catch</span> [.main.f_device.f_startApp.b_res=
et configure -state disabled]
	<span class=3D"hljs-keyword">catch</span> [.main.f_device.f_buttons.b_exec=
 configure -state disabled -bg grey]
	<span class=3D"hljs-keyword">catch</span> [.main.f_buffer.b_memSelect conf=
igure -state disabled -text [<span class=3D"hljs-keyword">lindex</span> $::=
deviceArray(memoryButtonList) <span class=3D"hljs-number">0</span>] -bg [<s=
pan class=3D"hljs-keyword">lindex</span> $::deviceArray(memoryColor) <span =
class=3D"hljs-number">0</span>] -fg black]
	updateGuiParameters
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> onCanCo=
mmStatusModifiedGUI</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> flipStates canPort canBaud c=
anProtocol
    <span class=3D"hljs-keyword">catch</span> [<span class=3D"hljs-keyword"=
>set</span> fButtons .canSetup.f_b]
    <span class=3D"hljs-keyword">if</span> {$flipStates(canComm) =3D=3D <sp=
an class=3D"hljs-string">"on"</span>} then {
	<span class=3D"hljs-keyword">catch</span> [.f_status.l_comm configure -tex=
t <span class=3D"hljs-string">"$canPort / $canBaud"</span>]
	<span class=3D"hljs-keyword">if</span> {[winfo exists .canSetup]} then {
	    <span class=3D"hljs-keyword">catch</span> [$fButtons.b_init configure =
-text <span class=3D"hljs-string">"Cancel CAN"</span> -command {ptclCancelC=
ANComm} -state normal]
	    <span class=3D"hljs-keyword">catch</span> [$fButtons.b_start configure=
 -state normal]
	}
	<span class=3D"hljs-keyword">set</span> menuCAN <span class=3D"hljs-string=
">".menubar.settings.comm.select"</span>
	<span class=3D"hljs-keyword">foreach</span> m {<span class=3D"hljs-string"=
>"ATMEL RS232"</span> <span class=3D"hljs-string">"RM CANview"</span> <span=
 class=3D"hljs-string">"VECTOR"</span> <span class=3D"hljs-string">"IXXAT C=
ANdy"</span> <span class=3D"hljs-string">"PEAK PCAN-DONGLE"</span> <span cl=
ass=3D"hljs-string">"ATMEL USB"</span> <span class=3D"hljs-string">"SYSTEC =
USBCAN"</span>} {
	    <span class=3D"hljs-keyword">catch</span> [$menuCAN entryconfigure [$m=
enuCAN index $m] -state disabled]
	}
	<span class=3D"hljs-keyword">if</span> {$canProtocol(hardware) =3D=3D <spa=
n class=3D"hljs-string">"ATMEL_RS232"</span>} then {
	    <span class=3D"hljs-keyword">catch</span> [$menuCAN entryconfigure [$m=
enuCAN index <span class=3D"hljs-string">"ATMEL RS232"</span>] -state norma=
l]
	} elseif {$canProtocol(hardware) =3D=3D <span class=3D"hljs-string">"CANVI=
EW"</span>} {
	    <span class=3D"hljs-keyword">catch</span> [$menuCAN entryconfigure [$m=
enuCAN index <span class=3D"hljs-string">"RM CANview"</span>] -state normal=
]
	} elseif {$canProtocol(hardware) =3D=3D <span class=3D"hljs-string">"CANPA=
RI"</span>} {
	    <span class=3D"hljs-keyword">catch</span> [$menuCAN entryconfigure [$m=
enuCAN index <span class=3D"hljs-string">"VECTOR"</span>] -state normal]
	} elseif {$canProtocol(hardware) =3D=3D <span class=3D"hljs-string">"CANCA=
RDX"</span>} {
	    <span class=3D"hljs-keyword">catch</span> [$menuCAN entryconfigure [$m=
enuCAN index <span class=3D"hljs-string">"VECTOR"</span>] -state normal]
	} elseif {$canProtocol(hardware) =3D=3D <span class=3D"hljs-string">"CANDY=
"</span>} {
	    <span class=3D"hljs-keyword">catch</span> [$menuCAN entryconfigure [$m=
enuCAN index <span class=3D"hljs-string">"IXXAT CANdy"</span>] -state norma=
l]
	} elseif {$canProtocol(hardware) =3D=3D <span class=3D"hljs-string">"PEAK"=
</span>} {
	    <span class=3D"hljs-keyword">catch</span> [$menuCAN entryconfigure [$m=
enuCAN index <span class=3D"hljs-string">"PEAK PCAN-DONGLE"</span>] -state =
normal]
	} elseif {$canProtocol(hardware) =3D=3D <span class=3D"hljs-string">"ATMEL=
_USB"</span>} {
	    <span class=3D"hljs-keyword">catch</span> [$menuCAN entryconfigure [$m=
enuCAN index <span class=3D"hljs-string">"ATMEL USB"</span>] -state normal]
	} elseif {$canProtocol(hardware) =3D=3D <span class=3D"hljs-string">"SYSTE=
C"</span>} {
	    <span class=3D"hljs-keyword">catch</span> [$menuCAN entryconfigure [$m=
enuCAN index <span class=3D"hljs-string">"SYSTEC USBCAN"</span>] -state nor=
mal]
	}
    } else {
	<span class=3D"hljs-keyword">catch</span> [.f_status.l_comm configure -tex=
t <span class=3D"hljs-string">"Comm. OFF"</span>]
	<span class=3D"hljs-keyword">if</span> {[winfo exists .canSetup]} then {
	    <span class=3D"hljs-keyword">catch</span> [$fButtons.b_init configure =
-text <span class=3D"hljs-string">"Init"</span> -state normal -command {ptc=
lInitCANinterface}]
	    <span class=3D"hljs-keyword">catch</span> [$fButtons.b_start configure=
 -state disabled]
	}
	<span class=3D"hljs-keyword">set</span> menuCAN <span class=3D"hljs-string=
">".menubar.settings.comm.select"</span>
	<span class=3D"hljs-keyword">foreach</span> m {<span class=3D"hljs-string"=
>"ATMEL RS232"</span> <span class=3D"hljs-string">"RM CANview"</span> <span=
 class=3D"hljs-string">"VECTOR"</span> <span class=3D"hljs-string">"IXXAT C=
ANdy"</span> <span class=3D"hljs-string">"PEAK PCAN-DONGLE"</span> <span cl=
ass=3D"hljs-string">"SYSTEC USBCAN"</span>} {
	    <span class=3D"hljs-keyword">catch</span> [$menuCAN entryconfigure [$m=
enuCAN index $m] -state normal]
	}
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> onIniti=
alBufferContentsChangeGUI</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> gui flipStates
    <span class=3D"hljs-keyword">set</span> w .bufferOptionsWindow
    <span class=3D"hljs-keyword">catch</span> [$w.f_bufferInit.f_bufferCont=
entsValue.b_deviceDependent configure -text <span class=3D"hljs-string">"[r=
eadDeviceArray blankValue] / $::deviceArray(name)"</span> -state normal]
    <span class=3D"hljs-keyword">set</span> eBufferInitialContents .bufferO=
ptionsWindow.f_bufferInit.f_bufferContentsValue.e_bufferBlankValue
    <span class=3D"hljs-keyword">if</span> {$gui(blankValueType) =3D=3D <sp=
an class=3D"hljs-string">"deviceDependent"</span>} then {
	<span class=3D"hljs-keyword">set</span> gui(dDepBlankValue) [readDeviceArr=
ay blankValue]
	<span class=3D"hljs-keyword">set</span> gui(blankValue) $gui(dDepBlankValu=
e)
	<span class=3D"hljs-keyword">set</span> gui(fillValue) $gui(blankValue)
	<span class=3D"hljs-keyword">catch</span> [$eBufferInitialContents configu=
re -state disabled]
    } else {
	<span class=3D"hljs-keyword">set</span> gui(blankValue) $gui(uDefBlankValu=
e)
	<span class=3D"hljs-keyword">set</span> gui(fillValue) $gui(blankValue)
	<span class=3D"hljs-keyword">catch</span> [$eBufferInitialContents configu=
re -state normal]
    }
    <span class=3D"hljs-keyword">catch</span> [.main.f_buffer.l_bufferBlank=
 configure -text <span class=3D"hljs-string">"Blank:\t$gui(blankValue)"</sp=
an>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> onBuffe=
rSizeTypeChangeGUI</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> gui flipStates
    <span class=3D"hljs-keyword">set</span> memorySize [readDeviceArray mem=
orySize]
<span class=3D"hljs-comment">    #dbgShowVar "memory size =3D $memorySize"<=
/span>
    <span class=3D"hljs-keyword">set</span> w .bufferOptionsWindow
    <span class=3D"hljs-keyword">catch</span> [$w.f_bufferSize.f_bufferSize=
Value.b_deviceDependent configure -text <span class=3D"hljs-string">"$memor=
ySize / $::deviceArray(name)"</span> -state normal]
    <span class=3D"hljs-keyword">set</span> eBufferSize .bufferOptionsWindo=
w.f_bufferSize.f_bufferSizeValue.e_bufferSizeValue
    <span class=3D"hljs-keyword">if</span> {$gui(sizeType) =3D=3D <span cla=
ss=3D"hljs-string">"deviceDependent"</span>} then {
	<span class=3D"hljs-keyword">set</span> gui(dDepSizeValue) $memorySize
	<span class=3D"hljs-keyword">set</span> gui(sizeValue) $memorySize
	<span class=3D"hljs-keyword">if</span> {[winfo exists $eBufferSize]} then =
{
	    <span class=3D"hljs-keyword">catch</span> [$eBufferSize configure -sta=
te disabled]
	}
    } else {
	<span class=3D"hljs-keyword">set</span> gui(sizeValue) $gui(uDefSizeValue)
	<span class=3D"hljs-keyword">if</span> {[winfo exists $eBufferSize]} then =
{
	    <span class=3D"hljs-keyword">catch</span> [$eBufferSize configure -sta=
te normal]
	}
    }
    <span class=3D"hljs-keyword">set</span> gui(maxAddr) [<span class=3D"hl=
js-keyword">format</span> $gui(infoFormat) [<span class=3D"hljs-keyword">ex=
pr</span> ($gui(sizeValue) * <span class=3D"hljs-number">1024</span>) - <sp=
an class=3D"hljs-number">1</span>]]
    <span class=3D"hljs-keyword">set</span> gui(numberOfLines) [<span class=
=3D"hljs-keyword">expr</span> (<span class=3D"hljs-string">"0x$gui(maxAddr)=
"</span> + <span class=3D"hljs-number">1</span>) / <span class=3D"hljs-numb=
er">16</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> onBlank=
CheckOptionsChangeGUI</span> {} {
    <span class=3D"hljs-keyword">global</span> gui
    writeBuffer blankCheckMin $gui(blankCheckMin)
    writeBuffer blankCheckMax $gui(blankCheckMax)
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> onAddrP=
rogRangeChangeGUI</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> gui flipStates
    <span class=3D"hljs-keyword">set</span> memorySize [readBuffer sizeValu=
e]
<span class=3D"hljs-comment">    #dbgShowVar "memory size =3D $memorySize"<=
/span>
    <span class=3D"hljs-keyword">set</span> gui(maxAddr) [<span class=3D"hl=
js-keyword">format</span> $gui(infoFormat) [<span class=3D"hljs-keyword">ex=
pr</span> ($memorySize * <span class=3D"hljs-number">1024</span>) - <span c=
lass=3D"hljs-number">1</span>]]
    <span class=3D"hljs-keyword">set</span> wdgtMin .bufferOptionsWindow.f_=
bufferRange.f_uDefined.e_bufferRangeMin
    <span class=3D"hljs-keyword">set</span> wdgtMax .bufferOptionsWindow.f_=
bufferRange.f_uDefined.e_bufferRangeMax
    <span class=3D"hljs-keyword">if</span> {$gui(rangeOnDeviceProg) =3D=3D =
<span class=3D"hljs-string">"lastLoad"</span>} then {
	<span class=3D"hljs-keyword">catch</span> [$wdgtMin configure -state disab=
led]
	<span class=3D"hljs-keyword">catch</span> [$wdgtMax configure -state disab=
led]
	<span class=3D"hljs-keyword">if</span> {$gui(fileLoaded) =3D=3D <span clas=
s=3D"hljs-string">"no"</span>} then {
	    <span class=3D"hljs-keyword">set</span> gui(lastLoadMinProgAddr) [<spa=
n class=3D"hljs-keyword">format</span> $gui(infoFormat) <span class=3D"hljs=
-number">0x000000</span>]
	    <span class=3D"hljs-keyword">set</span> gui(lastLoadMaxProgAddr) [<spa=
n class=3D"hljs-keyword">format</span> $gui(infoFormat) <span class=3D"hljs=
-number">0</span>x$gui(maxAddr)]
	}
	<span class=3D"hljs-keyword">set</span> gui(minProgAddr) [<span class=3D"h=
ljs-keyword">format</span> $gui(infoFormat) <span class=3D"hljs-number">0</=
span>x$gui(lastLoadMinProgAddr)]
	<span class=3D"hljs-keyword">set</span> gui(maxProgAddr) [<span class=3D"h=
ljs-keyword">format</span> $gui(infoFormat) <span class=3D"hljs-number">0</=
span>x$gui(lastLoadMaxProgAddr)]
    } elseif {$gui(rangeOnDeviceProg) =3D=3D <span class=3D"hljs-string">"w=
hole"</span>} {
	<span class=3D"hljs-keyword">catch</span> [$wdgtMin configure -state disab=
led]
	<span class=3D"hljs-keyword">catch</span> [$wdgtMax configure -state disab=
led]
	<span class=3D"hljs-keyword">set</span> gui(minProgAddr) [<span class=3D"h=
ljs-keyword">format</span> $gui(infoFormat) <span class=3D"hljs-number">0x0=
00000</span>]
	<span class=3D"hljs-keyword">set</span> gui(maxProgAddr) [<span class=3D"h=
ljs-keyword">format</span> $gui(infoFormat) <span class=3D"hljs-number">0</=
span>x$gui(maxAddr)]
    } else {
	<span class=3D"hljs-keyword">catch</span> [$wdgtMin configure -state norma=
l]
	<span class=3D"hljs-keyword">catch</span> [$wdgtMax configure -state norma=
l]
	<span class=3D"hljs-keyword">set</span> gui(minProgAddr) [<span class=3D"h=
ljs-keyword">format</span> $gui(infoFormat) <span class=3D"hljs-number">0</=
span>x$gui(uDefMinProgAddr)]
	<span class=3D"hljs-keyword">set</span> gui(maxProgAddr) [<span class=3D"h=
ljs-keyword">format</span> $gui(infoFormat) <span class=3D"hljs-number">0</=
span>x$gui(uDefMaxProgAddr)]
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> onTestD=
ebugChangedGUI</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> testArray
    <span class=3D"hljs-keyword">if</span> {$testArray(debug) =3D=3D <span =
class=3D"hljs-string">"on"</span>} then {
<span class=3D"hljs-comment">	#dbgCtrl on</span>
    } else {
<span class=3D"hljs-comment">	#dbgCtrl off</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> onConfi=
gFileLoadedGUI</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> gui
    <span class=3D"hljs-keyword">set</span> menuF <span class=3D"hljs-strin=
g">".menubar.file"</span>
    <span class=3D"hljs-keyword">catch</span> [$menuF entryconfigure [$menu=
F index <span class=3D"hljs-string">"Execute Configuration File"</span>] -s=
tate normal]
    <span class=3D"hljs-keyword">foreach</span> i {flowErase flowBlankCheck=
 flowProgram flowVerify flowSpecialBytes} {
	<span class=3D"hljs-keyword">set</span> gui($i) <span class=3D"hljs-number=
">0</span>
<span class=3D"hljs-comment">	#dbgShowVar "gui($i) =3D $gui([subst $i])"</s=
pan>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> onRs232=
CommunicationGUI</span> {state} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> flipStates port baud projDir=
 flipFont protcl bootloaderVerDependent
    <span class=3D"hljs-keyword">if</span> {$state =3D=3D <span class=3D"hl=
js-string">"normal"</span>} then {
	<span class=3D"hljs-keyword">set</span> flipStates(rs232Comm) <span class=
=3D"hljs-string">"on"</span>
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info=
</span> exists ::deviceArray(bootloaderId)]} then {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
file</span> exists $projDir/tcl/protocol/rs232_${::deviceArray(bootloaderId=
)}.tcl]} then {
		<span class=3D"hljs-keyword">source</span> $projDir/tcl/protocol/rs232_${=
::deviceArray(bootloaderId)}.tcl
	    }
	}
	<span class=3D"hljs-keyword">catch</span> [.f_status.l_comm configure -rel=
ief sunken -anchor w -borderwidth <span class=3D"hljs-number">1</span> -bac=
kground grey -foreground black -text <span class=3D"hljs-string">"$port / $=
baud"</span> -font $flipFont]
	<span class=3D"hljs-keyword">catch</span> [.rs232CommDbox.f_buttons.b_conn=
ect configure -state disabled]
	<span class=3D"hljs-keyword">catch</span> [.rs232CommDbox.f_buttons.b_conn=
ectOnly configure -state disabled]
	<span class=3D"hljs-keyword">catch</span> [.rs232CommDbox.f_buttons.b_disc=
onnect configure -state normal]
	<span class=3D"hljs-keyword">catch</span> [.rs232CommDbox.f_buttons.b_sync=
hro configure -state normal]
<span class=3D"hljs-comment">	#Rs23canDBox update david eseo</span>
	<span class=3D"hljs-keyword">if</span> {[winfo exists .rs232canSetup]} the=
n {
	    <span class=3D"hljs-keyword">catch</span> [.rs232canSetup.f_b.b_comm c=
onfigure -text <span class=3D"hljs-string">"Cancel Comm"</span> -command {p=
tclCancelRs232Comm} -state normal]
	    <span class=3D"hljs-keyword">catch</span> [.rs232canSetup.f_b.b_start =
configure -state normal]
	}
<span class=3D"hljs-comment">	#fin david eseo</span>
	<span class=3D"hljs-keyword">set</span> ::deviceArray(currentMemory) [<spa=
n class=3D"hljs-keyword">lindex</span> $::deviceArray(memoryList) <span cla=
ss=3D"hljs-number">0</span>]
	cmdsImportCurrentMemoryNameSpace $::deviceArray(currentMemory)
	<span class=3D"hljs-keyword">if</span> {$bootloaderVerDependent(startAppli=
)} then {
	    <span class=3D"hljs-keyword">catch</span> [.main.f_device.f_startApp.b=
_start configure -state normal -bg red -fg yellow]
	    <span class=3D"hljs-keyword">catch</span> [.main.f_device.f_buttons.b_=
exec configure -state normal -bg red -fg yellow]
	    <span class=3D"hljs-keyword">catch</span> [.main.f_device.f_startApp.b=
_reset configure -state normal]
	}
	<span class=3D"hljs-keyword">if</span> {$bootloaderVerDependent(eeprom)} t=
hen {
	    <span class=3D"hljs-keyword">if</span> {[winfo exists .main.f_buffer.b=
_memSelect]} then {
		pack .main.f_buffer.b_memSelect -side bottom -expand <span class=3D"hljs-=
number">0</span> -pady <span class=3D"hljs-number">17</span>
		<span class=3D"hljs-keyword">catch</span> [.main.f_buffer.b_memSelect con=
figure -state normal -text [<span class=3D"hljs-keyword">lindex</span> $::d=
eviceArray(memoryButtonList) <span class=3D"hljs-number">0</span>] -bg [<sp=
an class=3D"hljs-keyword">lindex</span> $::deviceArray(memoryColor) <span c=
lass=3D"hljs-number">0</span>] -fg black]
	    }
	}
	updateGuiParameters
    } else {
	<span class=3D"hljs-keyword">set</span> flipStates(rs232Comm) <span class=
=3D"hljs-string">"off"</span>
	<span class=3D"hljs-keyword">catch</span> [.f_status.l_comm configure -rel=
ief sunken -anchor w -borderwidth <span class=3D"hljs-number">1</span> -bac=
kground grey -foreground black -text <span class=3D"hljs-string">"Comm. OFF=
"</span> -font $flipFont]
	<span class=3D"hljs-keyword">catch</span> [.rs232CommDbox.f_buttons.b_conn=
ect configure -state normal]
	<span class=3D"hljs-keyword">catch</span> [.rs232CommDbox.f_buttons.b_conn=
ectOnly configure -state normal]
	<span class=3D"hljs-keyword">catch</span> [.rs232CommDbox.f_buttons.b_disc=
onnect configure -state disabled]
	<span class=3D"hljs-keyword">catch</span> [.rs232CommDbox.f_buttons.b_sync=
hro configure -state disabled]
<span class=3D"hljs-comment">	#Rs232canDBox update david eseo</span>
	<span class=3D"hljs-keyword">if</span> {[winfo exists .rs232canSetup]} the=
n {
	    <span class=3D"hljs-keyword">catch</span> [.rs232canSetup.f_b.b_comm c=
onfigure -text <span class=3D"hljs-string">"Init Comm"</span> -command {ptc=
lInitComm} -state normal]
	    <span class=3D"hljs-keyword">catch</span> [.rs232canSetup.f_b.b_start =
configure -state disabled]
	}
<span class=3D"hljs-comment">	#fin david eseo</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> onDevic=
eSelectionGUI</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    updateGuiParameters
    <span class=3D"hljs-keyword">set</span> menuF <span class=3D"hljs-strin=
g">".menubar.file"</span>
    <span class=3D"hljs-keyword">foreach</span> m {<span class=3D"hljs-stri=
ng">"Load HEX..."</span> <span class=3D"hljs-string">"Save HEX As..."</span=
>} {
	<span class=3D"hljs-keyword">catch</span> [$menuF entryconfigure [$menuF i=
ndex $m] -state normal]
    }
    <span class=3D"hljs-keyword">catch</span> [$menuF entryconfigure [$menu=
F index <span class=3D"hljs-string">"Save Configuration As..."</span>] -sta=
te normal]
    <span class=3D"hljs-keyword">set</span> menuB <span class=3D"hljs-strin=
g">".menubar.buffer"</span>
    <span class=3D"hljs-keyword">foreach</span> m {<span class=3D"hljs-stri=
ng">"Edit"</span> <span class=3D"hljs-string">"Options"</span>} {
	<span class=3D"hljs-keyword">catch</span> [$menuB entryconfigure [$menuB i=
ndex $m] -state normal]
    }
    <span class=3D"hljs-keyword">set</span> commMenu <span class=3D"hljs-st=
ring">".menubar.settings.comm"</span>
    <span class=3D"hljs-keyword">foreach</span> m {<span class=3D"hljs-stri=
ng">"RS232"</span> <span class=3D"hljs-string">"CAN"</span> <span class=3D"=
hljs-string">"USB"</span>} {
	<span class=3D"hljs-keyword">catch</span> [$commMenu entryconfigure [$comm=
Menu index $m] -state disabled]
    }
    <span class=3D"hljs-keyword">foreach</span> item $::deviceArray(communi=
cationList) {
	<span class=3D"hljs-keyword">catch</span> [$commMenu entryconfigure [$comm=
Menu index $item] -state normal]
    }
    <span class=3D"hljs-keyword">if</span> {! [winfo exists .rs232CommDbox]=
} then {
	drawRs232CommDbox $::deviceArray(RS232ProtocolsList)
    }
    bind . &lt;F3&gt; {}
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">l=
length</span> $::deviceArray(communicationList)] =3D=3D <span class=3D"hljs=
-number">1</span>} then {
	<span class=3D"hljs-keyword">if</span> {$::deviceArray(communicationList) =
=3D=3D <span class=3D"hljs-string">"RS232"</span>} then {
	    bind . &lt;F3&gt; {initProtocol <span class=3D"hljs-string">"RS232Stan=
dard"</span>
		cbDboxWakeUp .rs232CommDbox}
	} elseif {$::deviceArray(communicationList) =3D=3D <span class=3D"hljs-str=
ing">"CAN"</span>} {
	    bind . &lt;F3&gt; {initProtocol <span class=3D"hljs-string">"CANStanda=
rd"</span>
		cbDboxWakeUp .canSetup}
	} elseif {$::deviceArray(communicationList) =3D=3D <span class=3D"hljs-str=
ing">"USB"</span>} {
	    bind . &lt;F3&gt; {
		initProtocol <span class=3D"hljs-string">"USB_DFU"</span>
	    }
	}
    } else {
	bind . &lt;F3&gt; {popupCommMenu}
    }
    <span class=3D"hljs-keyword">foreach</span> w {connect bufferedit loadh=
ex savehex} {
	.main.toolbar.$w configure -state normal
    }
    <span class=3D"hljs-keyword">if</span> {[winfo exists .main.f_device.f_=
crc.b_crc]} then {
	.main.f_device.f_crc.b_crc configure -state normal
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> onAnyCo=
mmunicationGUI</span> {state} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> gui flipStates protcl bootlo=
aderVerDependent
    <span class=3D"hljs-keyword">if</span> {$state =3D=3D <span class=3D"hl=
js-string">"normal"</span>} then {
	<span class=3D"hljs-keyword">set</span> flipStates(anyComm) <span class=3D=
"hljs-string">"on"</span>
	<span class=3D"hljs-keyword">catch</span> [.deviceErase.f_erase.f_blocks.b=
_blockErase configure -state $gui(erasePossibleBlocks)]
	<span class=3D"hljs-keyword">if</span> {$gui(eraseType) =3D=3D <span class=
=3D"hljs-string">"blocks"</span>} then {
	    <span class=3D"hljs-keyword">foreach</span> i {<span class=3D"hljs-num=
ber">0</span> <span class=3D"hljs-number">1</span> <span class=3D"hljs-numb=
er">2</span> <span class=3D"hljs-number">3</span> <span class=3D"hljs-numbe=
r">4</span>} {
		<span class=3D"hljs-keyword">catch</span> [.deviceErase.f_erase.f_blocks.=
b_block$i configure -state $gui(erasePossibleBlock$i)]
	    }
	} else {
	    <span class=3D"hljs-keyword">foreach</span> i {<span class=3D"hljs-num=
ber">0</span> <span class=3D"hljs-number">1</span> <span class=3D"hljs-numb=
er">2</span> <span class=3D"hljs-number">3</span> <span class=3D"hljs-numbe=
r">4</span>} {
		<span class=3D"hljs-keyword">catch</span> [.deviceErase.f_erase.f_blocks.=
b_block$i configure -state disabled]
	    }
	}
	<span class=3D"hljs-keyword">set</span> gui(erase) [readBuffer erase]
	<span class=3D"hljs-keyword">set</span> gui(blankCheck) [readBuffer blankC=
heck]
	modifyWidgetOption .main.f_device state normal
	<span class=3D"hljs-keyword">if</span> {$protcl =3D=3D <span class=3D"hljs=
-string">"RS232Standard"</span>} then {
	    <span class=3D"hljs-keyword">if</span> {$::deviceArray(name) !=3D <spa=
n class=3D"hljs-string">"T89C51AC2"</span>} then {
		<span class=3D"hljs-keyword">catch</span> [.main.f_device.f_buttons.b_can=
config configure -state disabled]
	    }
	}
	<span class=3D"hljs-keyword">if</span> {! $bootloaderVerDependent(startApp=
li)} then {
	    <span class=3D"hljs-keyword">catch</span> [.main.f_device.f_startApp.b=
_start configure -state disabled -bg grey]
	    <span class=3D"hljs-keyword">catch</span> [.main.f_device.f_startApp.b=
_reset configure -state disabled]
	    <span class=3D"hljs-keyword">catch</span> [.main.f_device.f_buttons.b_=
exec configure -state disabled -bg grey]
	}
	<span class=3D"hljs-keyword">if</span> {! $bootloaderVerDependent(eb)} the=
n {
	    <span class=3D"hljs-keyword">catch</span> [.main.f_device.f_bsb_sbv.f_=
bsb.e_eb configure -state disabled]
	}
	<span class=3D"hljs-keyword">foreach</span> w {erase blankcheck program ve=
rify <span class=3D"hljs-keyword">read</span>} {
	    .main.toolbar.$w configure -state normal
	}
	<span class=3D"hljs-keyword">foreach</span> w {program verify <span class=
=3D"hljs-keyword">read</span>} {
	    .bufferEditWindow.f_editBuffer.toolbar.$w configure -state normal
	}
	<span class=3D"hljs-keyword">if</span> {! $flipStates(connectOnlyRS232)} t=
hen {
	    devcUpdateDeviceFrame
	}
	updateGuiParameters
    } else {
	<span class=3D"hljs-keyword">set</span> flipStates(anyComm) <span class=3D=
"hljs-string">"off"</span>
	<span class=3D"hljs-keyword">set</span> gui(erase) disabled
	<span class=3D"hljs-keyword">set</span> gui(blankCheck) disabled
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info=
</span> exists ::deviceArray(manufId)]} then {
	    <span class=3D"hljs-keyword">set</span> ::deviceArray(manufId) <span c=
lass=3D"hljs-string">"XX"</span>
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info=
</span> exists ::deviceArray(deviceId1)]} then {
	    <span class=3D"hljs-keyword">set</span> ::deviceArray(deviceId1) <span=
 class=3D"hljs-string">"XX"</span>
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info=
</span> exists ::deviceArray(deviceId2)]} then {
	    <span class=3D"hljs-keyword">set</span> ::deviceArray(deviceId2) <span=
 class=3D"hljs-string">"XX"</span>
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info=
</span> exists ::deviceArray(deviceId3)]} then {
	    <span class=3D"hljs-keyword">set</span> ::deviceArray(deviceId3) <span=
 class=3D"hljs-string">"XX"</span>
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info=
</span> exists ::deviceArray(deviceBootId1)]} then {
	    <span class=3D"hljs-keyword">set</span> ::deviceArray(deviceBootId1) <=
span class=3D"hljs-string">"XX"</span>
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info=
</span> exists ::deviceArray(deviceBootId2)]} then {
	    <span class=3D"hljs-keyword">set</span> ::deviceArray(deviceBootId2) <=
span class=3D"hljs-string">"XX"</span>
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info=
</span> exists ::deviceArray(hsb)]} then {
	    <span class=3D"hljs-keyword">set</span> ::deviceArray(hsb) <span class=
=3D"hljs-string">"XX"</span>
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info=
</span> exists ::deviceArray(bootlVer)]} then {
	    <span class=3D"hljs-keyword">set</span> ::deviceArray(bootlVer) <span =
class=3D"hljs-string">"X.X.X"</span>
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info=
</span> exists ::deviceArray(sbv)]} then {
	    <span class=3D"hljs-keyword">set</span> ::deviceArray(sbv) <span class=
=3D"hljs-string">"XX"</span>
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info=
</span> exists ::deviceArray(bsb)]} then {
	    <span class=3D"hljs-keyword">set</span> ::deviceArray(bsb) <span class=
=3D"hljs-string">"XX"</span>
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info=
</span> exists ::deviceArray(eb)]} then {
	    <span class=3D"hljs-keyword">set</span> ::deviceArray(eb) <span class=
=3D"hljs-string">"XX"</span>
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info=
</span> exists ::deviceArray(ssb)]} then {
	    <span class=3D"hljs-keyword">set</span> ::deviceArray(ssb) <span class=
=3D"hljs-string">"XX"</span>
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info=
</span> exists ::deviceArray(crc)]} then {
	    <span class=3D"hljs-keyword">set</span> ::deviceArray(crc) <span class=
=3D"hljs-string">"XXXX"</span>
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info=
</span> exists ::deviceArray(p1_config)]} then {
	    <span class=3D"hljs-keyword">set</span> ::deviceArray(p1_config) <span=
 class=3D"hljs-string">"XX"</span>
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info=
</span> exists ::deviceArray(p3_config)]} then {
	    <span class=3D"hljs-keyword">set</span> ::deviceArray(p3_config) <span=
 class=3D"hljs-string">"XX"</span>
	}
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info=
</span> exists ::deviceArray(p4_config)]} then {
	    <span class=3D"hljs-keyword">set</span> ::deviceArray(p4_config) <span=
 class=3D"hljs-string">"XX"</span>
	}
	modifyWidgetOption .main.f_device state disabled
	<span class=3D"hljs-keyword">catch</span> [.main.f_device.f_startApp.b_sta=
rt configure -bg grey]
	<span class=3D"hljs-keyword">catch</span> [.main.f_device.f_buttons.b_exec=
 configure -bg grey]
	cmdsClearOperations <span class=3D"hljs-string">"colorOnly"</span>
	<span class=3D"hljs-keyword">if</span> {[winfo exists .main.f_buffer.b_mem=
Select]} then {
	    pack forget .main.f_buffer.b_memSelect
	}
	<span class=3D"hljs-keyword">foreach</span> w {erase blankcheck program ve=
rify <span class=3D"hljs-keyword">read</span>} {
	    .main.toolbar.$w configure -state disabled
	}
	<span class=3D"hljs-keyword">foreach</span> w {program verify <span class=
=3D"hljs-keyword">read</span>} {
	    .bufferEditWindow.f_editBuffer.toolbar.$w configure -state disabled
	}
    }
    <span class=3D"hljs-keyword">set</span> menuD <span class=3D"hljs-strin=
g">".menubar.device"</span>
    <span class=3D"hljs-keyword">catch</span> [$menuD entryconfigure [$menu=
D index <span class=3D"hljs-string">"Erase..."</span>] -state $gui(erase)]
    <span class=3D"hljs-keyword">catch</span> [$menuD entryconfigure [$menu=
D index <span class=3D"hljs-string">"Blank Check..."</span>] -state $gui(bl=
ankCheck)]
    <span class=3D"hljs-keyword">foreach</span> m {<span class=3D"hljs-stri=
ng">"Read..."</span> <span class=3D"hljs-string">"Program"</span> <span cla=
ss=3D"hljs-string">"Verify"</span>} {
	<span class=3D"hljs-keyword">catch</span> [$menuD entryconfigure [$menuD i=
ndex $m] -state $state]
    }
    <span class=3D"hljs-keyword">set</span> menuBuffD <span class=3D"hljs-s=
tring">".bufferEditWindow.menubar.device"</span>
    <span class=3D"hljs-keyword">foreach</span> m {<span class=3D"hljs-stri=
ng">"Read"</span> <span class=3D"hljs-string">"Program"</span> <span class=
=3D"hljs-string">"Verify"</span>} {
	<span class=3D"hljs-keyword">catch</span> [$menuBuffD entryconfigure [$men=
uBuffD index $m] -state $state]
    }
    modifyWidgetOption <span class=3D"hljs-string">".main.f_flow"</span> st=
ate $state
    <span class=3D"hljs-keyword">set</span> opFrame <span class=3D"hljs-str=
ing">".main.f_flow.f_operations"</span>
    <span class=3D"hljs-keyword">catch</span> [$opFrame.b_erase configure -=
state $gui(erase)]
    <span class=3D"hljs-keyword">catch</span> [$opFrame.b_blankCheck config=
ure -state $gui(blankCheck)]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> modifyW=
idgetOption</span> {wdgt opt value} {
    <span class=3D"hljs-keyword">foreach</span> W [winfo children $wdgt] {
	<span class=3D"hljs-keyword">catch</span> [$W configure -$opt $value]
	modifyWidgetOption $W $opt $value
    }
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> updateG=
uiParameters</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> gui flipStates
    <span class=3D"hljs-keyword">set</span> index [<span class=3D"hljs-keyw=
ord">lsearch</span> $::deviceArray(memoryList) $::deviceArray(currentMemory=
)]
    <span class=3D"hljs-keyword">set</span> bgColor [<span class=3D"hljs-ke=
yword">lrange</span> $::deviceArray(memoryColor) $index $index]
    <span class=3D"hljs-keyword">set</span> bMemorySelect .main.f_buffer.b_=
memSelect
    <span class=3D"hljs-keyword">if</span> {[winfo exists $bMemorySelect]} =
then {
	<span class=3D"hljs-keyword">if</span> {[winfo viewable $bMemorySelect]} t=
hen {
	    <span class=3D"hljs-keyword">catch</span> [$bMemorySelect configure -t=
ext $::deviceArray(currentMemoryButton) -bg $bgColor]
	    <span class=3D"hljs-keyword">catch</span> [.bufferEditWindow.f_editBuf=
fer.f_txt.text configure -bg $bgColor]
	    <span class=3D"hljs-keyword">catch</span> [.main.f_buffer.l_bufferInfo=
Title configure -bg $bgColor -text <span class=3D"hljs-string">"$::deviceAr=
ray(currentMemory) Buffer Information"</span>]
	    <span class=3D"hljs-keyword">catch</span> [.main.f_flow.l_flow configu=
re -bg $bgColor]
	    wm title .bufferOptionsWindow <span class=3D"hljs-string">"$::deviceAr=
ray(currentMemory) Buffer Options"</span>
	} else {
	    <span class=3D"hljs-keyword">catch</span> [.main.f_buffer.l_bufferInfo=
Title configure -bg [.main cget -background] -text <span class=3D"hljs-stri=
ng">"Buffer Information"</span>]
	    <span class=3D"hljs-keyword">catch</span> [.main.f_flow.l_flow configu=
re -bg [.main cget -background]]
	}
    } else {
	<span class=3D"hljs-keyword">catch</span> [.main.f_buffer.l_bufferInfoTitl=
e configure -bg [.main cget -background] -text <span class=3D"hljs-string">=
"Buffer Information"</span>]
	<span class=3D"hljs-keyword">catch</span> [.main.f_flow.l_flow configure -=
bg [.main cget -background]]
    }
    <span class=3D"hljs-keyword">set</span> gui(uDefSizeValue) [readBuffer =
uDefSizeValue]
    <span class=3D"hljs-keyword">set</span> gui(dDepSizeValue) [readBuffer =
dDepSizeValue]
    <span class=3D"hljs-keyword">set</span> gui(sizeValue) $gui(dDepSizeVal=
ue)
    <span class=3D"hljs-keyword">set</span> gui(rangeOnDeviceProg) [readBuf=
fer rangeOnDeviceProg]
    <span class=3D"hljs-keyword">set</span> frUdef .bufferOptionsWindow.f_b=
ufferRange.f_uDefined
    <span class=3D"hljs-keyword">if</span> {$gui(rangeOnDeviceProg) =3D=3D =
<span class=3D"hljs-string">"userDefined"</span>} then {
	<span class=3D"hljs-keyword">catch</span> [$frUdef.e_bufferRangeMin config=
ure -state normal]
	<span class=3D"hljs-keyword">catch</span> [$frUdef.e_bufferRangeMax config=
ure -state normal]
    } else {
	<span class=3D"hljs-keyword">catch</span> [$frUdef.e_bufferRangeMin config=
ure -state disabled]
	<span class=3D"hljs-keyword">catch</span> [$frUdef.e_bufferRangeMax config=
ure -state disabled]
    }
    <span class=3D"hljs-keyword">set</span> gui(fileLoaded) [readBuffer fil=
eLoaded]
    <span class=3D"hljs-keyword">set</span> gui(sizeType) [readBuffer sizeT=
ype]
    updateGUI onBufferSizeTypeChange
    <span class=3D"hljs-keyword">set</span> gui(maxAddr) [readBuffer maxAdd=
r]
    <span class=3D"hljs-keyword">set</span> gui(blankValueType) [readBuffer=
 blankValueType]
    <span class=3D"hljs-keyword">set</span> gui(uDefBlankValue) [readBuffer=
 uDefBlankValue]
    <span class=3D"hljs-keyword">set</span> gui(dDepBlankValue) [readBuffer=
 dDepBlankValue]
    <span class=3D"hljs-keyword">set</span> gui(blankValue) [readDeviceArra=
y blankValue]
    updateGUI onInitialBufferContentsChange
    <span class=3D"hljs-keyword">set</span> gui(resetBufferOnLoading) [read=
Buffer resetBufferOnLoading]
    <span class=3D"hljs-keyword">set</span> gui(uDefMinProgAddr) [<span cla=
ss=3D"hljs-keyword">format</span> $gui(infoFormat) <span class=3D"hljs-numb=
er">0</span>x[readBuffer uDefMinProgAddr]]
    <span class=3D"hljs-keyword">set</span> gui(uDefMaxProgAddr) [<span cla=
ss=3D"hljs-keyword">format</span> $gui(infoFormat) <span class=3D"hljs-numb=
er">0</span>x[readBuffer uDefMaxProgAddr]]
    <span class=3D"hljs-keyword">set</span> gui(lastLoadMinProgAddr) [readB=
uffer lastLoadMinProgAddr]
    <span class=3D"hljs-keyword">set</span> gui(lastLoadMaxProgAddr) [readB=
uffer lastLoadMaxProgAddr]
    <span class=3D"hljs-keyword">if</span> {([<span class=3D"hljs-keyword">=
info</span> exists ::deviceArray(bootloaderId)]) &amp;&amp;($::deviceArray(=
bootloaderId) =3D=3D <span class=3D"hljs-string">"0001"</span>)} then {
	<span class=3D"hljs-keyword">set</span> gui(minProgAddr) <span class=3D"hl=
js-number">0</span>
	<span class=3D"hljs-keyword">set</span> gui(maxProgAddr) [<span class=3D"h=
ljs-keyword">format</span> <span class=3D"hljs-string">"%X"</span> [<span c=
lass=3D"hljs-keyword">expr</span> [readDeviceArray memorySize] * <span clas=
s=3D"hljs-number">1024</span> - <span class=3D"hljs-number">1</span>]]
    } else {
	<span class=3D"hljs-keyword">set</span> gui(minProgAddr) [readBuffer minPr=
ogAddr]
	<span class=3D"hljs-keyword">set</span> gui(maxProgAddr) [readBuffer maxPr=
ogAddr]
    }
    <span class=3D"hljs-keyword">set</span> gui(loadingOffset) [readBuffer =
loadingOffset]
    <span class=3D"hljs-keyword">set</span> gui(hexFileAddrOffset) [readBuf=
fer hexFileAddrOffset]
    <span class=3D"hljs-keyword">set</span> gui(modifyAddress) [readBuffer =
modifyAddress]
    <span class=3D"hljs-keyword">set</span> gui(modifyData) [readBuffer mod=
ifyData]
    <span class=3D"hljs-keyword">set</span> gui(numberOfVisibleLines) [read=
Buffer numberOfVisibleLines]
    <span class=3D"hljs-keyword">set</span> gui(topDisplayedLine) [readBuff=
er topDisplayedLine]
    <span class=3D"hljs-keyword">set</span> gui(bottomDisplayedLine) [readB=
uffer bottomDisplayedLine]
    <span class=3D"hljs-keyword">set</span> gui(numberOfLines) [readBuffer =
numberOfLines]
    <span class=3D"hljs-keyword">set</span> gui(startFillAddr) [readBuffer =
startFillAddr]
    <span class=3D"hljs-keyword">set</span> gui(endFillAddr) [readBuffer en=
dFillAddr]
    <span class=3D"hljs-keyword">set</span> gui(fillValue) [readBuffer fill=
Value]
    <span class=3D"hljs-keyword">set</span> gui(maxSize) [readBuffer maxSiz=
e]
    <span class=3D"hljs-keyword">set</span> gui(blankCheckMin) [readBuffer =
blankCheckMin]
    <span class=3D"hljs-keyword">set</span> gui(blankCheckMax) [readBuffer =
blankCheckMax]
    <span class=3D"hljs-keyword">set</span> gui(hexFileName) [readBuffer he=
xFileName]
    <span class=3D"hljs-keyword">set</span> gui(hexFileSize) [readBuffer he=
xFileSize]
    <span class=3D"hljs-keyword">if</span> {$gui(init)} then {
	<span class=3D"hljs-keyword">set</span> gui(minProgAddr) <span class=3D"hl=
js-number">0</span>
	<span class=3D"hljs-keyword">set</span> gui(maxProgAddr) $gui(maxAddr)
    } elseif {$gui(rangeOnDeviceProg) =3D=3D <span class=3D"hljs-string">"l=
astLoad"</span>} {
	<span class=3D"hljs-keyword">set</span> gui(minProgAddr) $gui(lastLoadMinP=
rogAddr)
	<span class=3D"hljs-keyword">set</span> gui(maxProgAddr) $gui(lastLoadMaxP=
rogAddr)
    }
    <span class=3D"hljs-keyword">if</span> {$flipStates(anyComm) =3D=3D <sp=
an class=3D"hljs-string">"on"</span>} then {
	<span class=3D"hljs-keyword">set</span> gui(erase) [readBuffer erase]
	<span class=3D"hljs-keyword">set</span> gui(blankCheck) [readBuffer blankC=
heck]
    } else {
	<span class=3D"hljs-keyword">set</span> gui(erase) disabled
	<span class=3D"hljs-keyword">set</span> gui(blankCheck) disabled
    }
    <span class=3D"hljs-keyword">set</span> menuD <span class=3D"hljs-strin=
g">".menubar.device"</span>
    <span class=3D"hljs-keyword">catch</span> [$menuD entryconfigure [$menu=
D index <span class=3D"hljs-string">"Erase..."</span>] -state $gui(erase)]
    <span class=3D"hljs-keyword">catch</span> [$menuD entryconfigure [$menu=
D index <span class=3D"hljs-string">"Blank Check..."</span>] -state $gui(bl=
ankCheck)]
    <span class=3D"hljs-keyword">set</span> opFrame <span class=3D"hljs-str=
ing">".main.f_flow.f_operations"</span>
    <span class=3D"hljs-keyword">catch</span> [$opFrame.b_erase configure -=
state $gui(erase)]
    <span class=3D"hljs-keyword">catch</span> [$opFrame.b_blankCheck config=
ure -state $gui(blankCheck)]
    <span class=3D"hljs-keyword">set</span> gui(eraseType) [readBuffer eras=
eType]
    <span class=3D"hljs-keyword">set</span> gui(erasePossibleBlocks) [readB=
uffer erasePossibleBlocks]
    <span class=3D"hljs-keyword">set</span> gui(erasePossibleBlock0) [readB=
uffer erasePossibleBlock0]
    <span class=3D"hljs-keyword">set</span> gui(erasePossibleBlock1) [readB=
uffer erasePossibleBlock1]
    <span class=3D"hljs-keyword">set</span> gui(erasePossibleBlock2) [readB=
uffer erasePossibleBlock2]
    <span class=3D"hljs-keyword">set</span> gui(erasePossibleBlock3) [readB=
uffer erasePossibleBlock3]
    <span class=3D"hljs-keyword">set</span> gui(erasePossibleBlock4) [readB=
uffer erasePossibleBlock4]
    <span class=3D"hljs-keyword">set</span> gui(eraseBlock0) [readBuffer er=
aseBlock0]
    <span class=3D"hljs-keyword">set</span> gui(eraseBlock1) [readBuffer er=
aseBlock1]
    <span class=3D"hljs-keyword">set</span> gui(eraseBlock2) [readBuffer er=
aseBlock2]
    <span class=3D"hljs-keyword">set</span> gui(eraseBlock3) [readBuffer er=
aseBlock3]
    <span class=3D"hljs-keyword">set</span> gui(eraseBlock4) [readBuffer er=
aseBlock4]
    <span class=3D"hljs-keyword">set</span> gui(startReadAddr) [readBuffer =
startReadAddr]
    <span class=3D"hljs-keyword">set</span> gui(endReadAddr) [readBuffer en=
dReadAddr]
    <span class=3D"hljs-keyword">catch</span> [.main.f_buffer.l_bufferSize =
configure -text <span class=3D"hljs-string">"Size:\t$gui(sizeValue) Kbytes"=
</span>]
    <span class=3D"hljs-keyword">catch</span> [.main.f_buffer.l_bufferBlank=
 configure -text <span class=3D"hljs-string">"Blank:\t$gui(blankValue)"</sp=
an>]
    <span class=3D"hljs-keyword">catch</span> [.main.f_buffer.l_range confi=
gure -text <span class=3D"hljs-string">"Range:\t[format $gui(infoFormat) 0x=
$gui(minProgAddr)] - [format $gui(infoFormat) 0x$gui(maxProgAddr)]"</span>]
    <span class=3D"hljs-keyword">if</span> {$gui(resetBufferOnLoading) =3D=
=3D <span class=3D"hljs-string">"yes"</span>} then {
	<span class=3D"hljs-keyword">catch</span> [.main.f_buffer.l_bufferReset co=
nfigure -text <span class=3D"hljs-string">"Reset Before Loading"</span>]
    } else {
	<span class=3D"hljs-keyword">catch</span> [.main.f_buffer.l_bufferReset co=
nfigure -text <span class=3D"hljs-string">"No Reset Before Loading"</span>]
    }
    <span class=3D"hljs-keyword">catch</span> [.main.f_buffer.l_offset conf=
igure -text <span class=3D"hljs-string">"Offset:\t[format $gui(infoFormat) =
0x$gui(loadingOffset)]"</span>]
    <span class=3D"hljs-keyword">catch</span> [.main.f_buffer.f_hexFile.l_f=
ileN configure -text $gui(hexFileName)]
    <span class=3D"hljs-keyword">catch</span> [.main.f_buffer.f_hexFileSize=
.title.l_fileS configure -text $gui(hexFileSize) -fg blue]
    <span class=3D"hljs-keyword">set</span> ff .main.f_flow
    <span class=3D"hljs-keyword">set</span> bErase $ff.f_operations.b_erase
    <span class=3D"hljs-keyword">set</span> bBlankCheck $ff.f_operations.b_=
blankCheck
    <span class=3D"hljs-keyword">set</span> bProgram $ff.f_operations.b_pro=
gram
    <span class=3D"hljs-keyword">set</span> bVerify $ff.f_operations.b_veri=
fy
    <span class=3D"hljs-keyword">set</span> bSpecialBytes $ff.f_operations.=
b_specialBytes
    <span class=3D"hljs-keyword">set</span> gui(flowErase) [readBuffer flow=
Erase]
    <span class=3D"hljs-keyword">set</span> gui(flowBlankCheck) [readBuffer=
 flowBlankCheck]
    <span class=3D"hljs-keyword">set</span> gui(flowProgram) [readBuffer fl=
owProgram]
    <span class=3D"hljs-keyword">set</span> gui(flowVerify) [readBuffer flo=
wVerify]
    <span class=3D"hljs-keyword">set</span> gui(flowSpecialBytes) [readBuff=
er flowSpecialBytes]
    <span class=3D"hljs-keyword">set</span> gui(flowEraseColor) [readBuffer=
 flowEraseColor]
    <span class=3D"hljs-keyword">set</span> gui(flowBlankCheckColor) [readB=
uffer flowBlankCheckColor]
    <span class=3D"hljs-keyword">set</span> gui(flowProgramColor) [readBuff=
er flowProgramColor]
    <span class=3D"hljs-keyword">set</span> gui(flowVerifyColor) [readBuffe=
r flowVerifyColor]
    <span class=3D"hljs-keyword">set</span> gui(flowSpecialBytesColor) [rea=
dBuffer flowSpecialBytesColor]
    <span class=3D"hljs-keyword">catch</span> [$bErase configure -selectcol=
or $gui(flowEraseColor)]
    <span class=3D"hljs-keyword">catch</span> [$bBlankCheck configure -sele=
ctcolor $gui(flowBlankCheckColor)]
    <span class=3D"hljs-keyword">catch</span> [$bProgram configure -selectc=
olor $gui(flowProgramColor)]
    <span class=3D"hljs-keyword">catch</span> [$bVerify configure -selectco=
lor $gui(flowVerifyColor)]
    <span class=3D"hljs-keyword">catch</span> [$bSpecialBytes configure -se=
lectcolor $gui(flowSpecialBytesColor)]
    updateBufferChecksum
    updateBufferWidget <span class=3D"hljs-number">0.0</span>
    <span class=3D"hljs-keyword">set</span> gui(init) <span class=3D"hljs-n=
umber">0</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">package</span> provide about
<span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keyword">=
eval</span> ::about {
    <span class=3D"hljs-keyword">namespace</span> export showAbout
}
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">lsear=
ch</span> [<span class=3D"hljs-keyword">namespace</span> children] ::libtk]=
 =3D=3D <span class=3D"hljs-number">-1</span>} then {
    <span class=3D"hljs-keyword">package</span> require libtk
    <span class=3D"hljs-keyword">namespace</span> import libtk::*
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::about=
::showAbout</span> {args} {
    <span class=3D"hljs-keyword">set</span> w ::about::createAboutPriv
    <span class=3D"hljs-keyword">upvar</span> #<span class=3D"hljs-number">=
0</span> $w data
    <span class=3D"hljs-keyword">global</span> ::libtk::atmelBlue
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> info_bgcol $atmelBlue
    <span class=3D"hljs-keyword">set</span> info_fgcol white
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">l=
search</span> [font names] <span class=3D"hljs-string">"defaultFont"</span>=
] =3D=3D <span class=3D"hljs-number">-1</span>} then {
	setSystemFonts
    }
    <span class=3D"hljs-keyword">set</span> specs {
{-title <span class=3D"hljs-string">" "</span>}
{-version <span class=3D"hljs-string">" "</span>}
{-copyright <span class=3D"hljs-string">" "</span>}
{-authors <span class=3D"hljs-string">" "</span>}
{-comment <span class=3D"hljs-string">" "</span>}
{-url <span class=3D"hljs-string">" "</span>}
{-logo <span class=3D"hljs-string">" "</span> }
}
    parseOptions $w $specs $args
    <span class=3D"hljs-keyword">if</span> {[winfo exists .about]} then {
	wm deiconify .about
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">set</span> about [toplevel .about -borderw=
idth <span class=3D"hljs-number">10</span>]
    wm title $about <span class=3D"hljs-string">"About"</span>
    wm resizable $about <span class=3D"hljs-number">0</span> <span class=3D=
"hljs-number">0</span>
    wm protocol .about WM_DELETE_WINDOW {<span class=3D"hljs-keyword">set</=
span> about_ok <span class=3D"hljs-number">1</span>}
    grab $about
    focus .about
    <span class=3D"hljs-keyword">set</span> about_fr [frame $about.frame -r=
elief groove -borderwidth <span class=3D"hljs-number">2</span>]
    <span class=3D"hljs-keyword">if</span> {$data(-logo) !=3D <span class=
=3D"hljs-string">" "</span>} then {
	label $about_fr.logo -image [image create photo -<span class=3D"hljs-keywo=
rd">file</span> $data(-logo)] -relief flat -borderwidth <span class=3D"hljs=
-number">2</span> -background white
	pack $about_fr.logo -fill both -expand true -padx <span class=3D"hljs-numb=
er">2</span> -pady <span class=3D"hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">if</span> {($data(-title) !=3D <span class=
=3D"hljs-string">" "</span>) ||($data(-version) !=3D <span class=3D"hljs-st=
ring">" "</span>)} then {
	label $about_fr.title -text <span class=3D"hljs-string">"$data(-title) $da=
ta(-version)"</span> -font defaultFont18b -fg white -bg black
	pack $about_fr.title -fill both -expand true -ipadx <span class=3D"hljs-nu=
mber">4</span> -ipady <span class=3D"hljs-number">4</span> -padx <span clas=
s=3D"hljs-number">2</span> -pady <span class=3D"hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">set</span> there_is_info false
    frame $about_fr.<span class=3D"hljs-keyword">info</span> -bg $info_bgco=
l
    <span class=3D"hljs-keyword">if</span> {$data(-copyright) !=3D <span cl=
ass=3D"hljs-string">" "</span>} then {
	label $about_fr.<span class=3D"hljs-keyword">info</span>.copyright -text $=
data(-copyright) -font defaultFont12b -fg $info_fgcol -bg $info_bgcol
	pack $about_fr.<span class=3D"hljs-keyword">info</span>.copyright -anchor =
w -pady <span class=3D"hljs-number">4</span>
	<span class=3D"hljs-keyword">set</span> there_is_info true
    }
    <span class=3D"hljs-keyword">if</span> {$data(-authors) !=3D <span clas=
s=3D"hljs-string">" "</span>} then {
	frame $about_fr.<span class=3D"hljs-keyword">info</span>.authors -bg $info=
_bgcol
	label $about_fr.<span class=3D"hljs-keyword">info</span>.authors.title -te=
xt <span class=3D"hljs-string">"Authors:"</span> -font defaultFont12b -just=
ify left -fg $info_fgcol -bg $info_bgcol
	label $about_fr.<span class=3D"hljs-keyword">info</span>.authors.contents =
-text $data(-authors) -font defaultFont12 -justify left -foreground $info_f=
gcol -background $info_bgcol
	pack $about_fr.<span class=3D"hljs-keyword">info</span>.authors.title -sid=
e left
	pack $about_fr.<span class=3D"hljs-keyword">info</span>.authors.contents -=
side right
	pack $about_fr.<span class=3D"hljs-keyword">info</span>.authors -anchor w =
-pady <span class=3D"hljs-number">4</span>
	<span class=3D"hljs-keyword">set</span> there_is_info true
    }
    <span class=3D"hljs-keyword">if</span> {$data(-comment) !=3D <span clas=
s=3D"hljs-string">" "</span>} then {
	<span class=3D"hljs-keyword">set</span> CharNb [<span class=3D"hljs-keywor=
d">string</span> length $data(-comment)]
	<span class=3D"hljs-keyword">if</span> {$CharNb &lt; <span class=3D"hljs-n=
umber">60</span>} then {
	    <span class=3D"hljs-keyword">set</span> h <span class=3D"hljs-number">=
1</span>
	    <span class=3D"hljs-keyword">set</span> w $CharNb
	} else {
	    <span class=3D"hljs-keyword">set</span> h [<span class=3D"hljs-keyword=
">expr</span> $CharNb / <span class=3D"hljs-number">60</span> + <span class=
=3D"hljs-number">1</span>]
	    <span class=3D"hljs-keyword">set</span> w <span class=3D"hljs-number">=
60</span>
	}
	text $about_fr.<span class=3D"hljs-keyword">info</span>.comment -font defa=
ultFont10 -wrap word -foreground $info_fgcol -background $info_bgcol -relie=
f flat -borderwidth <span class=3D"hljs-number">0</span> -highlightthicknes=
s <span class=3D"hljs-number">0</span> -selectborderwidth <span class=3D"hl=
js-number">0</span> -selectbackground $info_bgcol -selectforeground $info_f=
gcol -height $h -width $w
	$about_fr.<span class=3D"hljs-keyword">info</span>.comment insert end $dat=
a(-comment)
	$about_fr.<span class=3D"hljs-keyword">info</span>.comment tag add InfoTex=
t <span class=3D"hljs-number">1.0</span> end
	$about_fr.<span class=3D"hljs-keyword">info</span>.comment tag configure I=
nfoText -justify left
	$about_fr.<span class=3D"hljs-keyword">info</span>.comment configure -stat=
e disabled
	pack $about_fr.<span class=3D"hljs-keyword">info</span>.comment -anchor w =
-pady <span class=3D"hljs-number">4</span>
	<span class=3D"hljs-keyword">set</span> there_is_info true
    }
    <span class=3D"hljs-keyword">if</span> {$there_is_info =3D=3D <span cla=
ss=3D"hljs-string">"true"</span>} then {
	pack $about_fr.<span class=3D"hljs-keyword">info</span> -fill both -expand=
 true -padx <span class=3D"hljs-number">2</span> -pady <span class=3D"hljs-=
number">1</span>
    }
    <span class=3D"hljs-keyword">if</span> {$data(-url) !=3D <span class=3D=
"hljs-string">" "</span>} then {
	text $about_fr.url -height <span class=3D"hljs-number">1</span> -width [<s=
pan class=3D"hljs-keyword">string</span> length $data(-url)] -relief flat -=
cursor hand2 -foreground blue -font defaultFont10
	$about_fr.url insert end $data(-url)
	$about_fr.url tag add UrlText <span class=3D"hljs-number">1.0</span> end
	$about_fr.url tag configure UrlText -justify center
	$about_fr.url configure -state disabled
	pack $about_fr.url -fill both -expand true -padx <span class=3D"hljs-numbe=
r">2</span> -pady <span class=3D"hljs-number">1</span>
	bind $about_fr.url &lt;ButtonPress<span class=3D"hljs-number">-1</span>&gt=
; [<span class=3D"hljs-keyword">list</span> wwwBrowser $data(-url)]
    }
    pack $about_fr -expand true -fill both
    frame $about.line -borderwidth <span class=3D"hljs-number">1</span> -he=
ight <span class=3D"hljs-number">2</span> -relief sunken -width <span class=
=3D"hljs-number">125</span>
    pack $about.line -expand true -fill x -pady <span class=3D"hljs-number"=
>10</span>
    button $about.ok -text OK -command {<span class=3D"hljs-keyword">set</s=
pan> about_ok <span class=3D"hljs-number">1</span>}
    pack $about.ok -side right
    bind $about &lt;Return&gt; {<span class=3D"hljs-keyword">set</span> abo=
ut_ok <span class=3D"hljs-number">1</span>}
    tkwait <span class=3D"hljs-keyword">variable</span> about_ok
    destroy $about
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">package</span> provide balloon
<span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keyword">=
eval</span> ::balloon {
    <span class=3D"hljs-keyword">namespace</span> export setBalloon
}
bind Bulle &lt;Enter&gt; {
    <span class=3D"hljs-keyword">set</span> Bulle(<span class=3D"hljs-keywo=
rd">set</span>) <span class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> Bulle(first) <span class=3D"hlj=
s-number">1</span>
    <span class=3D"hljs-keyword">set</span> Bulle(id) [<span class=3D"hljs-=
keyword">after</span> <span class=3D"hljs-number">1000</span> {::balloon::B=
alloon %W $Bulle(%W) %X %Y}]
}
bind Bulle &lt;Button&gt; {
    <span class=3D"hljs-keyword">set</span> Bulle(first) <span class=3D"hlj=
s-number">0</span>
    ::balloon::KillBalloon
}
bind Bulle &lt;Leave&gt; {
    <span class=3D"hljs-keyword">set</span> Bulle(first) <span class=3D"hlj=
s-number">0</span>
    ::balloon::KillBalloon
}
bind Bulle &lt;Motion&gt; {
    <span class=3D"hljs-keyword">if</span> {$Bulle(set) =3D=3D <span class=
=3D"hljs-number">0</span>} then {
	<span class=3D"hljs-keyword">after</span> cancel $Bulle(id)
	<span class=3D"hljs-keyword">set</span> Bulle(id) [<span class=3D"hljs-key=
word">after</span> <span class=3D"hljs-number">1000</span> {::balloon::Ball=
oon %W $Bulle(%W) %X %Y}]
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::ballo=
on::setBalloon</span> {target message} {
    <span class=3D"hljs-keyword">global</span> Bulle
    <span class=3D"hljs-keyword">set</span> Bulle($target) $message
    bindtags $target <span class=3D"hljs-string">"[bindtags $target] Bulle"=
</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::ballo=
on::KillBalloon</span> {} {
    <span class=3D"hljs-keyword">global</span> Bulle
    <span class=3D"hljs-keyword">after</span> cancel $Bulle(id)
    <span class=3D"hljs-keyword">if</span> {[winfo exists .balloon] =3D=3D =
<span class=3D"hljs-number">1</span>} then {
	destroy .balloon
    }
    <span class=3D"hljs-keyword">set</span> Bulle(<span class=3D"hljs-keywo=
rd">set</span>) <span class=3D"hljs-number">0</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::ballo=
on::Balloon</span> {target message {cx <span class=3D"hljs-number">0</span>=
} {cy <span class=3D"hljs-number">0</span>}} {
    <span class=3D"hljs-keyword">global</span> Bulle
    <span class=3D"hljs-keyword">if</span> {$Bulle(first) =3D=3D <span clas=
s=3D"hljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> Bulle(first) <span class=3D"hljs-n=
umber">2</span>
	<span class=3D"hljs-keyword">if</span> {$cx =3D=3D <span class=3D"hljs-num=
ber">0</span> &amp;&amp; $cy =3D=3D <span class=3D"hljs-number">0</span>} t=
hen {
	    <span class=3D"hljs-keyword">set</span> x [<span class=3D"hljs-keyword=
">expr</span> [winfo rootx $target] + ([winfo width $target]/<span class=3D=
"hljs-number">2</span>)]
	    <span class=3D"hljs-keyword">set</span> y [<span class=3D"hljs-keyword=
">expr</span> [winfo rooty $target] + [winfo height $target] + <span class=
=3D"hljs-number">4</span>]
	} else {
	    <span class=3D"hljs-keyword">set</span> x [<span class=3D"hljs-keyword=
">expr</span> $cx + <span class=3D"hljs-number">4</span>]
	    <span class=3D"hljs-keyword">set</span> y [<span class=3D"hljs-keyword=
">expr</span> $cy + <span class=3D"hljs-number">4</span>]
	}
	<span class=3D"hljs-keyword">catch</span> [toplevel .balloon -bg black -sc=
reen [winfo screen $target]]
	<span class=3D"hljs-keyword">catch</span> [wm overrideredirect .balloon <s=
pan class=3D"hljs-number">1</span>]
	label .balloon.l -text $message -relief flat -bg #ffffdd -fg black -padx <=
span class=3D"hljs-number">2</span> -pady <span class=3D"hljs-number">0</sp=
an> -anchor w
	<span class=3D"hljs-keyword">catch</span> [pack .balloon.l -side left -pad=
x <span class=3D"hljs-number">1</span> -pady <span class=3D"hljs-number">1<=
/span>]
	<span class=3D"hljs-keyword">catch</span> [wm geometry .balloon +${x}+${y}=
]
	<span class=3D"hljs-keyword">set</span> Bulle(<span class=3D"hljs-keyword"=
>set</span>) <span class=3D"hljs-number">1</span>
    }
}
<span class=3D"hljs-keyword">package</span> require Tk <span class=3D"hljs-=
number">8.0</span>
<span class=3D"hljs-keyword">package</span> provide combobox <span class=3D=
"hljs-number">2.0</span>
<span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keyword">=
eval</span> ::combobox {
    <span class=3D"hljs-keyword">namespace</span> export combobox
    <span class=3D"hljs-keyword">variable</span> widgetOptions
    <span class=3D"hljs-keyword">variable</span> widgetCommands
    <span class=3D"hljs-keyword">variable</span> scanCommands
    <span class=3D"hljs-keyword">variable</span> listCommands
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::combo=
box::combobox</span> {w args} {
    <span class=3D"hljs-keyword">variable</span> widgetOptions
    <span class=3D"hljs-keyword">variable</span> widgetCommands
    <span class=3D"hljs-keyword">variable</span> scanCommands
    <span class=3D"hljs-keyword">variable</span> listCommands
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists widgetOptions]} then {
	Init
    }
    <span class=3D"hljs-keyword">eval</span> Build $w $args
    SetBindings $w
    <span class=3D"hljs-keyword">return</span> $w
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::combo=
box::Init</span> {} {
    <span class=3D"hljs-keyword">variable</span> widgetOptions
    <span class=3D"hljs-keyword">variable</span> widgetCommands
    <span class=3D"hljs-keyword">variable</span> scanCommands
    <span class=3D"hljs-keyword">variable</span> listCommands
    <span class=3D"hljs-keyword">variable</span> defaultEntryCursor
    <span class=3D"hljs-keyword">array</span> <span class=3D"hljs-keyword">=
set</span> widgetOptions [<span class=3D"hljs-keyword">list</span> -backgro=
und {background          Background} -bd -borderwidth -bg -background -bord=
erwidth {borderWidth         BorderWidth} -command {command Command} -comma=
ndstate {commandState        State} -cursor {cursor              Cursor} -e=
ditable {editable            Editable} -fg -foreground -font {font         =
       Font} -foreground {foreground          Foreground} -height {height  =
            Height} -highlightbackground\
      {highlightBackground HighlightBackground} -highlightcolor {highlightC=
olor      HighlightColor} -highlightthickness {highlightThickness  Highligh=
tThickness} -image {image               Image} -maxheight {maxHeight       =
    Height} -relief {relief              Relief} -selectbackground {selectB=
ackground    Foreground} -selectborderwidth {selectBorderWidth   BorderWidt=
h} -selectforeground {selectForeground    Background} -state {state        =
       State} -takefocus\
      {takeFocus           TakeFocus} -textvariable {textVariable        Va=
riable} -value {value               Value} -width {width               Widt=
h} -xscrollcommand {xScrollCommand      ScrollCommand}]
    <span class=3D"hljs-keyword">set</span> widgetCommands [<span class=3D"=
hljs-keyword">list</span> bbox cget configure curselection delete get icurs=
or index insert <span class=3D"hljs-keyword">list</span> <span class=3D"hlj=
s-keyword">scan</span> selection xview select toggle <span class=3D"hljs-ke=
yword">open</span> <span class=3D"hljs-keyword">close</span>]
    <span class=3D"hljs-keyword">set</span> listCommands [<span class=3D"hl=
js-keyword">list</span> delete get index insert size]
    <span class=3D"hljs-keyword">set</span> scanCommands [<span class=3D"hl=
js-keyword">list</span> mark dragto]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">l=
search</span> -exact [<span class=3D"hljs-keyword">package</span> names] <s=
pan class=3D"hljs-string">"Tk"</span>] !=3D <span class=3D"hljs-number">-1<=
/span>} then {
	<span class=3D"hljs-keyword">if</span> {$::tcl_platform(platform) =3D=3D <=
span class=3D"hljs-string">"windows"</span>} then {
	    image create bitmap ::combobox::bimage -data {
<span class=3D"hljs-comment">#define down_arrow_width 12</span>
<span class=3D"hljs-comment">#define down_arrow_height 12</span>
static char down_arrow_bits[] =3D {
<span class=3D"hljs-number">0x00</span>,<span class=3D"hljs-number">0x00</s=
pan>,<span class=3D"hljs-number">0x00</span>,<span class=3D"hljs-number">0x=
00</span>,<span class=3D"hljs-number">0x00</span>,<span class=3D"hljs-numbe=
r">0x00</span>,<span class=3D"hljs-number">0x00</span>,<span class=3D"hljs-=
number">0x00</span>,
<span class=3D"hljs-number">0xfc</span>,<span class=3D"hljs-number">0xf1</s=
pan>,<span class=3D"hljs-number">0xf8</span>,<span class=3D"hljs-number">0x=
f0</span>,<span class=3D"hljs-number">0x70</span>,<span class=3D"hljs-numbe=
r">0xf0</span>,<span class=3D"hljs-number">0x20</span>,<span class=3D"hljs-=
number">0xf0</span>,
<span class=3D"hljs-number">0x00</span>,<span class=3D"hljs-number">0x00</s=
pan>,<span class=3D"hljs-number">0x00</span>,<span class=3D"hljs-number">0x=
00</span>,<span class=3D"hljs-number">0x00</span>,<span class=3D"hljs-numbe=
r">0x00</span>,<span class=3D"hljs-number">0x00</span>,<span class=3D"hljs-=
number">0x00</span>;
}
}
	} else {
	    image create bitmap ::combobox::bimage -data {
<span class=3D"hljs-comment">#define down_arrow_width 15</span>
<span class=3D"hljs-comment">#define down_arrow_height 15</span>
static char down_arrow_bits[] =3D {
<span class=3D"hljs-number">0x00</span>,<span class=3D"hljs-number">0x80</s=
pan>,<span class=3D"hljs-number">0x00</span>,<span class=3D"hljs-number">0x=
80</span>,<span class=3D"hljs-number">0x00</span>,<span class=3D"hljs-numbe=
r">0x80</span>,<span class=3D"hljs-number">0x00</span>,<span class=3D"hljs-=
number">0x80</span>,
<span class=3D"hljs-number">0x00</span>,<span class=3D"hljs-number">0x80</s=
pan>,<span class=3D"hljs-number">0xf8</span>,<span class=3D"hljs-number">0x=
8f</span>,<span class=3D"hljs-number">0xf0</span>,<span class=3D"hljs-numbe=
r">0x87</span>,<span class=3D"hljs-number">0xe0</span>,<span class=3D"hljs-=
number">0x83</span>,
<span class=3D"hljs-number">0xc0</span>,<span class=3D"hljs-number">0x81</s=
pan>,<span class=3D"hljs-number">0x80</span>,<span class=3D"hljs-number">0x=
80</span>,<span class=3D"hljs-number">0x00</span>,<span class=3D"hljs-numbe=
r">0x80</span>,<span class=3D"hljs-number">0x00</span>,<span class=3D"hljs-=
number">0x80</span>,
<span class=3D"hljs-number">0x00</span>,<span class=3D"hljs-number">0x80</s=
pan>,<span class=3D"hljs-number">0x00</span>,<span class=3D"hljs-number">0x=
80</span>,<span class=3D"hljs-number">0x00</span>,<span class=3D"hljs-numbe=
r">0x80</span>
}
}
	}
	<span class=3D"hljs-keyword">set</span> tmpWidget <span class=3D"hljs-stri=
ng">".__tmp__"</span>
	<span class=3D"hljs-keyword">set</span> count <span class=3D"hljs-number">=
0</span>
	<span class=3D"hljs-keyword">while</span> {[winfo exists $tmpWidget] =3D=
=3D <span class=3D"hljs-number">1</span>} {
	    <span class=3D"hljs-keyword">set</span> tmpWidget <span class=3D"hljs-=
string">".__tmp__$count"</span>
	    <span class=3D"hljs-keyword">incr</span> count
	}
	scrollbar $tmpWidget
	<span class=3D"hljs-keyword">set</span> sb_width [winfo reqwidth $tmpWidge=
t]
	destroy $tmpWidget
	entry $tmpWidget
	<span class=3D"hljs-keyword">foreach</span> foo [$tmpWidget configure] {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
lindex</span> $foo <span class=3D"hljs-number">0</span>] =3D=3D <span class=
=3D"hljs-string">"-cursor"</span>} then {
		<span class=3D"hljs-keyword">set</span> defaultEntryCursor [<span class=
=3D"hljs-keyword">lindex</span> $foo <span class=3D"hljs-number">4</span>]
	    }
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
llength</span> $foo] =3D=3D <span class=3D"hljs-number">5</span>} then {
		<span class=3D"hljs-keyword">set</span> option [<span class=3D"hljs-keywo=
rd">lindex</span> $foo <span class=3D"hljs-number">1</span>]
		<span class=3D"hljs-keyword">set</span> value [<span class=3D"hljs-keywor=
d">lindex</span> $foo <span class=3D"hljs-number">4</span>]
		option add *Combobox.$option $value widgetDefault
		<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">str=
ing</span> compare $option <span class=3D"hljs-string">"foreground"</span>]=
 =3D=3D <span class=3D"hljs-number">0</span> || [<span class=3D"hljs-keywor=
d">string</span> compare $option <span class=3D"hljs-string">"background"</=
span>] =3D=3D <span class=3D"hljs-number">0</span> || [<span class=3D"hljs-=
keyword">string</span> compare $option <span class=3D"hljs-string">"font"</=
span>] =3D=3D <span class=3D"hljs-number">0</span>} then {
		    option add *Combobox*ComboboxListbox.$option $value widgetDefault
		}
	    }
	}
	destroy $tmpWidget
	option add *Combobox.cursor {}
	option add *Combobox.commandState normal widgetDefault
	option add *Combobox.editable <span class=3D"hljs-number">1</span> widgetD=
efault
	option add *Combobox.maxHeight <span class=3D"hljs-number">10</span> widge=
tDefault
	option add *Combobox.height <span class=3D"hljs-number">0</span>
    }
    SetClassBindings
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::combo=
box::SetClassBindings</span> {} {
    bind Combobox &lt;Destroy&gt; [<span class=3D"hljs-keyword">list</span>=
 ::combobox::DestroyHandler %W]
    <span class=3D"hljs-keyword">set</span> this {[::combobox::convert %W -=
W]}
    bind Combobox &lt;Any-ButtonPress&gt; <span class=3D"hljs-string">"$thi=
s close"</span>
    bind Combobox &lt;Any-ButtonRelease&gt; <span class=3D"hljs-string">"$t=
his close"</span>
    bind Combobox &lt;FocusIn&gt; {tkTabToWindow [::combobox::convert %W -W=
].entry}
    bind Combobox &lt;Unmap&gt; {[::combobox::convert %W -W] <span class=3D=
"hljs-keyword">close</span>}
    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-string">=
""</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::combo=
box::SetBindings</span> {w} {
    <span class=3D"hljs-keyword">upvar</span> ::combobox::${w}::widgets wid=
gets
    <span class=3D"hljs-keyword">upvar</span> ::combobox::${w}::options opt=
ions
    bindtags $widgets(entry) [<span class=3D"hljs-keyword">concat</span> $w=
idgets(this) [bindtags $widgets(entry)]]
    bindtags $widgets(button) [<span class=3D"hljs-keyword">concat</span> $=
widgets(this) [bindtags $widgets(button)]]
    bind $widgets(entry) &lt;Tab&gt; <span class=3D"hljs-string">"tkTabToWi=
ndow \[tk_focusNext $widgets(entry)\]; break"</span>
    bind $widgets(entry) &lt;Shift-Tab&gt; <span class=3D"hljs-string">"tkT=
abToWindow \[tk_focusPrev $widgets(this)\]; break"</span>
    bind $widgets(button) &lt;ButtonPress<span class=3D"hljs-number">-1</sp=
an>&gt; [<span class=3D"hljs-keyword">list</span> $widgets(this) toggle]
    bind $widgets(entry) &lt;B1-Enter&gt; <span class=3D"hljs-string">"brea=
k"</span>
    bind $widgets(listbox) &lt;ButtonRelease<span class=3D"hljs-number">-1<=
/span>&gt; <span class=3D"hljs-string">"::combobox::Select $widgets(this) \=
[$widgets(listbox) nearest %y\]; break"</span>
    bind $widgets(vsb) &lt;ButtonPress<span class=3D"hljs-number">-1</span>=
&gt; {<span class=3D"hljs-keyword">continue</span>}
    bind $widgets(vsb) &lt;ButtonRelease<span class=3D"hljs-number">-1</spa=
n>&gt; {<span class=3D"hljs-keyword">continue</span>}
    bind $widgets(listbox) &lt;Any-Motion&gt; {
	%W selection clear <span class=3D"hljs-number">0</span> end
	%W activate @%x,%y
	%W selection anchor @%x,%y
	%W selection <span class=3D"hljs-keyword">set</span> @%x,%y @%x,%y
    }
    <span class=3D"hljs-keyword">foreach</span> event [<span class=3D"hljs-=
keyword">list</span> &lt;Up&gt; &lt;Down&gt; &lt;Tab&gt; &lt;Return&gt; &lt=
;Escape&gt; &lt;Next&gt; &lt;Prior&gt; &lt;Double<span class=3D"hljs-number=
">-1</span>&gt; &lt;<span class=3D"hljs-number">1</span>&gt; &lt;Any-KeyPre=
ss&gt; &lt;FocusIn&gt; &lt;FocusOut&gt;] {
	bind $widgets(entry) $event <span class=3D"hljs-string">"::combobox::Handl=
eEvent $widgets(this) $event"</span>
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::combo=
box::Build</span> {w args} {
    <span class=3D"hljs-keyword">variable</span> widgetOptions
    <span class=3D"hljs-keyword">if</span> {[winfo exists $w]} then {
	<span class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">"win=
dow name \"$w\" already exists"</span>
    }
    <span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keywo=
rd">eval</span> ::combobox::$w {
	<span class=3D"hljs-keyword">variable</span> ignoreTrace <span class=3D"hl=
js-number">0</span>
	<span class=3D"hljs-keyword">variable</span> oldFocus {}
	<span class=3D"hljs-keyword">variable</span> oldGrab {}
	<span class=3D"hljs-keyword">variable</span> oldValue {}
	<span class=3D"hljs-keyword">variable</span> options
	<span class=3D"hljs-keyword">variable</span> this
	<span class=3D"hljs-keyword">variable</span> widgets
	<span class=3D"hljs-keyword">set</span> widgets(foo) foo <span class=3D"hl=
js-comment">;# coerce into an array</span>
	<span class=3D"hljs-keyword">set</span> options(foo) foo <span class=3D"hl=
js-comment">;# coerce into an array</span>
	<span class=3D"hljs-keyword">unset</span> widgets(foo)
	<span class=3D"hljs-keyword">unset</span> options(foo)
    }
    <span class=3D"hljs-keyword">upvar</span> ::combobox::${w}::widgets wid=
gets
    <span class=3D"hljs-keyword">upvar</span> ::combobox::${w}::options opt=
ions
    <span class=3D"hljs-keyword">set</span> widgets(this) [frame $w -class =
Combobox -takefocus <span class=3D"hljs-number">0</span>]
    <span class=3D"hljs-keyword">set</span> widgets(entry) [entry $w.entry =
-takefocus <span class=3D"hljs-number">1</span>]
    <span class=3D"hljs-keyword">set</span> widgets(button) [label $w.butto=
n -takefocus <span class=3D"hljs-number">0</span>]
    <span class=3D"hljs-keyword">foreach</span> name [<span class=3D"hljs-k=
eyword">array</span> names widgetOptions] {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">llen=
gth</span> $widgetOptions($name)] =3D=3D <span class=3D"hljs-number">1</spa=
n>} then <span class=3D"hljs-keyword">continue</span>
	<span class=3D"hljs-keyword">set</span> optName [<span class=3D"hljs-keywo=
rd">lindex</span> $widgetOptions($name) <span class=3D"hljs-number">0</span=
>]
	<span class=3D"hljs-keyword">set</span> optClass [<span class=3D"hljs-keyw=
ord">lindex</span> $widgetOptions($name) <span class=3D"hljs-number">1</spa=
n>]
	<span class=3D"hljs-keyword">set</span> value [option get $w $optName $opt=
Class]
	<span class=3D"hljs-keyword">set</span> options($name) $value
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists options(-value)] &amp;&amp; [<span class=3D"hljs-keyword"=
>string</span> length $options(-value)] =3D=3D <span class=3D"hljs-number">=
0</span>} then {
	<span class=3D"hljs-keyword">unset</span> options(-value)
    }
    <span class=3D"hljs-keyword">set</span> widgets(frame) ::combobox::${w}=
::$w
    pack $widgets(entry) -side left -fill both -expand yes
    pack $widgets(button) -side right -fill y -expand no
    <span class=3D"hljs-keyword">array</span> <span class=3D"hljs-keyword">=
set</span> options $args
    <span class=3D"hljs-keyword">set</span> widgets(popup) [toplevel $w.top=
]
    <span class=3D"hljs-keyword">set</span> widgets(listbox) [listbox $w.to=
p.<span class=3D"hljs-keyword">list</span>]
    <span class=3D"hljs-keyword">set</span> widgets(vsb) [scrollbar $w.top.=
vsb]
    pack $widgets(listbox) -side left -fill both -expand y
    $widgets(vsb) configure -command <span class=3D"hljs-string">"$widgets(=
listbox) yview"</span> -highlightthickness <span class=3D"hljs-number">0</s=
pan>
    $widgets(button) configure -highlightthickness <span class=3D"hljs-numb=
er">0</span> -borderwidth <span class=3D"hljs-number">1</span> -relief rais=
ed -width [<span class=3D"hljs-keyword">expr</span> {[winfo reqwidth $widge=
ts(vsb)] - <span class=3D"hljs-number">2</span>}]
    $widgets(entry) configure -borderwidth <span class=3D"hljs-number">0</s=
pan> -relief flat -highlightthickness <span class=3D"hljs-number">0</span>
    $widgets(popup) configure -borderwidth <span class=3D"hljs-number">1</s=
pan> -relief sunken
    $widgets(listbox) configure -selectmode browse -background [$widgets(en=
try) cget -bg] -yscrollcommand <span class=3D"hljs-string">"$widgets(vsb) s=
et"</span> -exportselection false -borderwidth <span class=3D"hljs-number">=
0</span>
    wm overrideredirect $widgets(popup) <span class=3D"hljs-number">1</span=
>
    wm transient $widgets(popup) [winfo toplevel $w]
    wm group $widgets(popup) [winfo parent $w]
    wm resizable $widgets(popup) <span class=3D"hljs-number">0</span> <span=
 class=3D"hljs-number">0</span>
    wm withdraw $widgets(popup)
    <span class=3D"hljs-keyword">rename</span> ::$w $widgets(frame)
    <span class=3D"hljs-keyword">proc</span> ::$w {command args} <span clas=
s=3D"hljs-string">"eval ::combobox::WidgetProc $w \$command \$args"</span>
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">c=
atch</span> <span class=3D"hljs-string">"::combobox::Configure $widgets(thi=
s) [array get options]"</span> <span class=3D"hljs-keyword">error</span>]} =
then {
	<span class=3D"hljs-keyword">catch</span> {destroy $w}
	<span class=3D"hljs-keyword">error</span> $error
    }
    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-string">=
""</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::combo=
box::HandleEvent</span> {w event} {
    <span class=3D"hljs-keyword">upvar</span> ::combobox::${w}::widgets wid=
gets
    <span class=3D"hljs-keyword">upvar</span> ::combobox::${w}::options opt=
ions
    <span class=3D"hljs-keyword">upvar</span> ::combobox::${w}::oldValue ol=
dValue
    <span class=3D"hljs-keyword">switch</span> $event {
    <span class=3D"hljs-string">"&lt;Any-KeyPress&gt;"</span> {
	    <span class=3D"hljs-keyword">if</span> {$options(-editable)} then {
		$widgets(listbox) see <span class=3D"hljs-number">0</span>
		$widgets(listbox) selection clear <span class=3D"hljs-number">0</span> en=
d
		$widgets(listbox) selection anchor <span class=3D"hljs-number">0</span>
		$widgets(listbox) activate <span class=3D"hljs-number">0</span>
	    }
	}
    <span class=3D"hljs-string">"&lt;FocusIn&gt;"</span> {
	    <span class=3D"hljs-keyword">set</span> oldValue [$widgets(entry) get]
	}
    <span class=3D"hljs-string">"&lt;FocusOut&gt;"</span> {
	    <span class=3D"hljs-keyword">if</span> {![winfo ismapped $widgets(popu=
p)]} then {
		<span class=3D"hljs-keyword">set</span> newValue [$widgets(entry) get]
		<span class=3D"hljs-keyword">if</span> {$oldValue !=3D $newValue} then {
		    CallCommand $widgets(this) $newValue
		}
	    }
	}
    <span class=3D"hljs-string">"&lt;1&gt;"</span> {
	    <span class=3D"hljs-keyword">set</span> editable [::combobox::GetBoole=
an $options(-editable)]
	    <span class=3D"hljs-keyword">if</span> {!$editable} then {
		<span class=3D"hljs-keyword">if</span> {[winfo ismapped $widgets(popup)]}=
 then {
		    $widgets(this) <span class=3D"hljs-keyword">close</span>
		    <span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-=
keyword">break</span>

		} else {
		    <span class=3D"hljs-keyword">if</span> {$options(-state) !=3D <span c=
lass=3D"hljs-string">"disabled"</span>} then {
			$widgets(this) <span class=3D"hljs-keyword">open</span>
			<span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-key=
word">break</span>

		    }
		}
	    }
	}
    <span class=3D"hljs-string">"&lt;Double-1&gt;"</span> {
	    <span class=3D"hljs-keyword">if</span> {$options(-state) !=3D <span cl=
ass=3D"hljs-string">"disabled"</span>} then {
		$widgets(this) toggle
		<span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-keyw=
ord">break</span>

	    }
	}
    <span class=3D"hljs-string">"&lt;Tab&gt;"</span> {
	    <span class=3D"hljs-keyword">if</span> {[winfo ismapped $widgets(popup=
)]} then {
		::combobox::Find $widgets(this) <span class=3D"hljs-number">0</span>
		<span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-keyw=
ord">break</span>

	    } else {
		::combobox::SetValue $widgets(this) [$widgets(this) get]
	    }
	}
    <span class=3D"hljs-string">"&lt;Escape&gt;"</span> {
	    <span class=3D"hljs-keyword">if</span> {[winfo ismapped $widgets(popup=
)]} then {
		$widgets(this) <span class=3D"hljs-keyword">close</span>
		<span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-keyw=
ord">break</span>

	    }
	}
    <span class=3D"hljs-string">"&lt;Return&gt;"</span> {
	    <span class=3D"hljs-keyword">set</span> newValue [$widgets(entry) get]
	    <span class=3D"hljs-keyword">if</span> {$oldValue !=3D $newValue} then=
 {
		CallCommand $widgets(this) $newValue
	    }
	    <span class=3D"hljs-keyword">if</span> {[winfo ismapped $widgets(popup=
)]} then {
		::combobox::Select $widgets(this) [$widgets(listbox) curselection]
		<span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-keyw=
ord">break</span>

	    }
	}
    <span class=3D"hljs-string">"&lt;Next&gt;"</span> {
	    $widgets(listbox) yview scroll <span class=3D"hljs-number">1</span> pa=
ges
	    <span class=3D"hljs-keyword">set</span> index [$widgets(listbox) index=
 @<span class=3D"hljs-number">0</span>,<span class=3D"hljs-number">0</span>=
]
	    $widgets(listbox) see $index
	    $widgets(listbox) activate $index
	    $widgets(listbox) selection clear <span class=3D"hljs-number">0</span>=
 end
	    $widgets(listbox) selection anchor $index
	    $widgets(listbox) selection <span class=3D"hljs-keyword">set</span> $i=
ndex
	}
    <span class=3D"hljs-string">"&lt;Prior&gt;"</span> {
	    $widgets(listbox) yview scroll <span class=3D"hljs-number">-1</span> p=
ages
	    <span class=3D"hljs-keyword">set</span> index [$widgets(listbox) index=
 @<span class=3D"hljs-number">0</span>,<span class=3D"hljs-number">0</span>=
]
	    $widgets(listbox) activate $index
	    $widgets(listbox) see $index
	    $widgets(listbox) selection clear <span class=3D"hljs-number">0</span>=
 end
	    $widgets(listbox) selection anchor $index
	    $widgets(listbox) selection <span class=3D"hljs-keyword">set</span> $i=
ndex
	}
    <span class=3D"hljs-string">"&lt;Down&gt;"</span> {
	    <span class=3D"hljs-keyword">if</span> {[winfo ismapped $widgets(popup=
)]} then {
		tkListboxUpDown $widgets(listbox) <span class=3D"hljs-number">1</span>
		<span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-keyw=
ord">break</span>

	    } else {
		<span class=3D"hljs-keyword">if</span> {$options(-state) !=3D <span class=
=3D"hljs-string">"disabled"</span>} then {
		    $widgets(this) <span class=3D"hljs-keyword">open</span>
		    <span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-=
keyword">break</span>

		}
	    }
	}
    <span class=3D"hljs-string">"&lt;Up&gt;"</span> {
	    <span class=3D"hljs-keyword">if</span> {[winfo ismapped $widgets(popup=
)]} then {
		tkListboxUpDown $widgets(listbox) <span class=3D"hljs-number">-1</span>
		<span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-keyw=
ord">break</span>

	    } else {
		<span class=3D"hljs-keyword">if</span> {$options(-state) !=3D <span class=
=3D"hljs-string">"disabled"</span>} then {
		    $widgets(this) <span class=3D"hljs-keyword">open</span>
		    <span class=3D"hljs-keyword">return</span> -code <span class=3D"hljs-=
keyword">break</span>

		}
	    }
	}
    }
    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-string">=
""</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::combo=
box::DestroyHandler</span> {w} {
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare [winfo class $w] <span class=3D"hljs-string">"Combobox=
"</span>] =3D=3D <span class=3D"hljs-number">0</span>} then {
	<span class=3D"hljs-keyword">upvar</span> ::combobox::${w}::widgets widget=
s
	<span class=3D"hljs-keyword">upvar</span> ::combobox::${w}::options option=
s
	<span class=3D"hljs-keyword">namespace</span> delete ::combobox::$w
	<span class=3D"hljs-keyword">rename</span> $w {}
    }
    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-string">=
""</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::combo=
box::Find</span> {w {exact <span class=3D"hljs-number">0</span>}} {
    <span class=3D"hljs-keyword">upvar</span> ::combobox::${w}::widgets wid=
gets
    <span class=3D"hljs-keyword">upvar</span> ::combobox::${w}::options opt=
ions
    <span class=3D"hljs-keyword">set</span> pattern [$widgets(entry) get]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> length $pattern] =3D=3D <span class=3D"hljs-number">0</span>} =
then {
	$widgets(listbox) see <span class=3D"hljs-number">0</span>
	$widgets(listbox) selection clear <span class=3D"hljs-number">0</span> end
	$widgets(listbox) selection anchor <span class=3D"hljs-number">0</span>
	$widgets(listbox) activate <span class=3D"hljs-number">0</span>
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">li=
st</span> [$widgets(listbox) get <span class=3D"hljs-number">0</span> end]
    <span class=3D"hljs-keyword">set</span> exactMatch <span class=3D"hljs-=
number">-1</span>
    <span class=3D"hljs-keyword">if</span> {$exact} then {
	<span class=3D"hljs-keyword">set</span> exactMatch [<span class=3D"hljs-ke=
yword">lsearch</span> -exact $list $pattern]
    }
    <span class=3D"hljs-keyword">set</span> index <span class=3D"hljs-numbe=
r">-1</span>
    <span class=3D"hljs-keyword">while</span> {$index =3D=3D <span class=3D=
"hljs-number">-1</span> &amp;&amp; [<span class=3D"hljs-keyword">string</sp=
an> length $pattern]} {
	<span class=3D"hljs-keyword">set</span> index [<span class=3D"hljs-keyword=
">lsearch</span> -<span class=3D"hljs-keyword">glob</span> $list <span clas=
s=3D"hljs-string">"$pattern*"</span>]
	<span class=3D"hljs-keyword">if</span> {$index =3D=3D <span class=3D"hljs-=
number">-1</span>} then {
	    <span class=3D"hljs-keyword">regsub</span> {.$} $pattern {} pattern
	}
    }
    <span class=3D"hljs-keyword">set</span> thisItem [<span class=3D"hljs-k=
eyword">lindex</span> $list $index]
    <span class=3D"hljs-keyword">if</span> {$index !=3D <span class=3D"hljs=
-number">-1</span>} then {
	<span class=3D"hljs-keyword">set</span> nextIndex [<span class=3D"hljs-key=
word">expr</span> {$index + <span class=3D"hljs-number">1</span>}]
	<span class=3D"hljs-keyword">set</span> nextItem [<span class=3D"hljs-keyw=
ord">lindex</span> $list $nextIndex]
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> match $pattern* $nextItem]} then {
	    <span class=3D"hljs-keyword">set</span> marker [<span class=3D"hljs-ke=
yword">string</span> length $pattern]
	    <span class=3D"hljs-keyword">while</span> {$marker &lt;=3D [<span clas=
s=3D"hljs-keyword">string</span> length $pattern]} {
		<span class=3D"hljs-keyword">set</span> a [<span class=3D"hljs-keyword">s=
tring</span> index $thisItem $marker]
		<span class=3D"hljs-keyword">set</span> b [<span class=3D"hljs-keyword">s=
tring</span> index $nextItem $marker]
		<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">str=
ing</span> compare $a $b] =3D=3D <span class=3D"hljs-number">0</span>} then=
 {
		    <span class=3D"hljs-keyword">append</span> pattern $a
		    <span class=3D"hljs-keyword">incr</span> marker
		} else {
		    <span class=3D"hljs-keyword">break</span>
		}
	    }
	} else {
	    <span class=3D"hljs-keyword">set</span> marker [<span class=3D"hljs-ke=
yword">string</span> length $pattern]
	}
    } else {
	<span class=3D"hljs-keyword">set</span> marker end
	<span class=3D"hljs-keyword">set</span> index <span class=3D"hljs-number">=
0</span>
    }
    <span class=3D"hljs-keyword">if</span> {$exact &amp;&amp; $exactMatch =
=3D=3D <span class=3D"hljs-number">-1</span>} then {
	$widgets(listbox) selection clear <span class=3D"hljs-number">0</span> end
	$widgets(listbox) see $index
    } elseif {!$exact} {
	<span class=3D"hljs-keyword">set</span> oldstate [$widgets(entry) cget -st=
ate]
	$widgets(entry) configure -state normal
	$widgets(entry) delete <span class=3D"hljs-number">0</span> end
	$widgets(entry) insert end $thisItem
	$widgets(entry) selection clear
	$widgets(entry) selection range $marker end
	$widgets(listbox) activate $index
	$widgets(listbox) selection clear <span class=3D"hljs-number">0</span> end
	$widgets(listbox) selection anchor $index
	$widgets(listbox) selection <span class=3D"hljs-keyword">set</span> $index
	$widgets(listbox) see $index
	$widgets(entry) configure -state $oldstate
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::combo=
box::Select</span> {w index} {
    <span class=3D"hljs-keyword">upvar</span> ::combobox::${w}::widgets wid=
gets
    <span class=3D"hljs-keyword">upvar</span> ::combobox::${w}::options opt=
ions
    <span class=3D"hljs-keyword">catch</span> {
	<span class=3D"hljs-keyword">set</span> data [$widgets(listbox) get [<span=
 class=3D"hljs-keyword">lindex</span> $index <span class=3D"hljs-number">0<=
/span>]]
	::combobox::SetValue $widgets(this) $data
	$widgets(listbox) selection clear <span class=3D"hljs-number">0</span> end
	$widgets(listbox) selection anchor $index
	$widgets(listbox) selection <span class=3D"hljs-keyword">set</span> $index
	$widgets(entry) selection range <span class=3D"hljs-number">0</span> end
    }
    $widgets(this) <span class=3D"hljs-keyword">close</span>
    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-string">=
""</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::combo=
box::HandleScrollbar</span> {w {action <span class=3D"hljs-string">"unknown=
"</span>}} {
    <span class=3D"hljs-keyword">upvar</span> ::combobox::${w}::widgets wid=
gets
    <span class=3D"hljs-keyword">upvar</span> ::combobox::${w}::options opt=
ions
    <span class=3D"hljs-keyword">if</span> {$options(-height) =3D=3D <span =
class=3D"hljs-number">0</span>} then {
	<span class=3D"hljs-keyword">set</span> hlimit $options(-maxheight)
    } else {
	<span class=3D"hljs-keyword">set</span> hlimit $options(-height)
    }
    <span class=3D"hljs-keyword">switch</span> $action {
    <span class=3D"hljs-string">"grow"</span> {
	    <span class=3D"hljs-keyword">if</span> {$hlimit &gt; <span class=3D"hl=
js-number">0</span> &amp;&amp; [$widgets(listbox) size] &gt; $hlimit} then =
{
		pack $widgets(vsb) -side right -fill y -expand n
	    }
	}
    <span class=3D"hljs-string">"shrink"</span> {
	    <span class=3D"hljs-keyword">if</span> {$hlimit &gt; <span class=3D"hl=
js-number">0</span> &amp;&amp; [$widgets(listbox) size] &lt;=3D $hlimit} th=
en {
		pack forget $widgets(vsb)
	    }
	}
    <span class=3D"hljs-string">"crop"</span> {
	    pack $widgets(vsb) -side right -fill y -expand n
	}
    default {
	    <span class=3D"hljs-keyword">if</span> {$hlimit &gt; <span class=3D"hl=
js-number">0</span> &amp;&amp; [$widgets(listbox) size] &gt; $hlimit} then =
{
		pack $widgets(vsb) -side right -fill y -expand n
	    } else {
		pack forget $widgets(vsb)
	    }
	}
    }
    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-string">=
""</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::combo=
box::ComputeGeometry</span> {w} {
    <span class=3D"hljs-keyword">upvar</span> ::combobox::${w}::widgets wid=
gets
    <span class=3D"hljs-keyword">upvar</span> ::combobox::${w}::options opt=
ions
    <span class=3D"hljs-keyword">if</span> {$options(-height) =3D=3D <span =
class=3D"hljs-number">0</span> &amp;&amp; $options(-maxheight) !=3D <span c=
lass=3D"hljs-string">"0"</span>} then {
	<span class=3D"hljs-keyword">set</span> nitems [$widgets(listbox) size]
	<span class=3D"hljs-keyword">if</span> {$nitems &gt; $options(-maxheight)}=
 then {
	    $widgets(listbox) configure -height $options(-maxheight)
	} else {
	    $widgets(listbox) configure -height <span class=3D"hljs-number">0</spa=
n>
	}
	<span class=3D"hljs-keyword">update</span> idletasks
    }
    <span class=3D"hljs-keyword">set</span> bd [$widgets(popup) cget -borde=
rwidth]
    <span class=3D"hljs-keyword">set</span> height [<span class=3D"hljs-key=
word">expr</span> {[winfo reqheight $widgets(popup)] + $bd + $bd}]
    <span class=3D"hljs-keyword">set</span> width [winfo width $widgets(thi=
s)]
    <span class=3D"hljs-keyword">set</span> screenWidth [winfo screenwidth =
$widgets(this)]
    <span class=3D"hljs-keyword">set</span> screenHeight [winfo screenheigh=
t $widgets(this)]
    <span class=3D"hljs-keyword">set</span> rootx [winfo rootx $widgets(thi=
s)]
    <span class=3D"hljs-keyword">set</span> rooty [winfo rooty $widgets(thi=
s)]
    <span class=3D"hljs-keyword">set</span> vrootx [winfo vrootx $widgets(t=
his)]
    <span class=3D"hljs-keyword">set</span> vrooty [winfo vrooty $widgets(t=
his)]
    <span class=3D"hljs-keyword">set</span> x [<span class=3D"hljs-keyword"=
>expr</span> {$rootx + $vrootx}]
    <span class=3D"hljs-keyword">if</span> {<span class=3D"hljs-number">0</=
span>} then {
	<span class=3D"hljs-keyword">set</span> rightEdge [<span class=3D"hljs-key=
word">expr</span> {$x + $width}]
	<span class=3D"hljs-keyword">if</span> {$rightEdge &gt; $screenWidth} then=
 {
	    <span class=3D"hljs-keyword">set</span> x [<span class=3D"hljs-keyword=
">expr</span> {$screenWidth - $width}]
	}
	<span class=3D"hljs-keyword">if</span> {$x &lt; <span class=3D"hljs-number=
">0</span>} then {
	    <span class=3D"hljs-keyword">set</span> x <span class=3D"hljs-number">=
0</span>
	}
    }
    <span class=3D"hljs-keyword">set</span> y [<span class=3D"hljs-keyword"=
>expr</span> {$rooty + $vrooty + [winfo reqheight $widgets(this)] + <span c=
lass=3D"hljs-number">1</span>}]
    <span class=3D"hljs-keyword">set</span> bottomEdge [<span class=3D"hljs=
-keyword">expr</span> {$y + $height}]
    <span class=3D"hljs-keyword">if</span> {$bottomEdge &gt;=3D $screenHeig=
ht} then {
	<span class=3D"hljs-keyword">set</span> y [<span class=3D"hljs-keyword">ex=
pr</span> {($rooty - $height - <span class=3D"hljs-number">1</span>) + $vro=
oty}]
	<span class=3D"hljs-keyword">if</span> {$y &lt; <span class=3D"hljs-number=
">0</span>} then {
	    <span class=3D"hljs-keyword">if</span> {$rooty &gt; [<span class=3D"hl=
js-keyword">expr</span> {$screenHeight / <span class=3D"hljs-number">2</spa=
n>}]} then {
		<span class=3D"hljs-keyword">set</span> y <span class=3D"hljs-number">1</=
span>
		<span class=3D"hljs-keyword">set</span> height [<span class=3D"hljs-keywo=
rd">expr</span> {$rooty - <span class=3D"hljs-number">1</span> - $y}]
	    } else {
		<span class=3D"hljs-keyword">set</span> y [<span class=3D"hljs-keyword">e=
xpr</span> {$rooty + $vrooty + [winfo reqheight $widgets(this)] + <span cla=
ss=3D"hljs-number">1</span>}]
		<span class=3D"hljs-keyword">set</span> height [<span class=3D"hljs-keywo=
rd">expr</span> {$screenHeight - $y}]
	    }
	    HandleScrollbar $widgets(this) crop
	}
    }
    <span class=3D"hljs-keyword">if</span> {$y &lt; <span class=3D"hljs-num=
ber">0</span>} then {
	<span class=3D"hljs-keyword">set</span> y <span class=3D"hljs-number">0</s=
pan>
	<span class=3D"hljs-keyword">set</span> height $screenheight
    }
    <span class=3D"hljs-keyword">set</span> geometry [<span class=3D"hljs-k=
eyword">format</span> <span class=3D"hljs-string">"=3D%dx%d+%d+%d"</span> $=
width $height $x $y]
    <span class=3D"hljs-keyword">return</span> $geometry
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::combo=
box::DoInternalWidgetCommand</span> {w subwidget command args} {
    <span class=3D"hljs-keyword">upvar</span> ::combobox::${w}::widgets wid=
gets
    <span class=3D"hljs-keyword">upvar</span> ::combobox::${w}::options opt=
ions
    <span class=3D"hljs-keyword">set</span> subcommand $command
    <span class=3D"hljs-keyword">set</span> command [<span class=3D"hljs-ke=
yword">concat</span> $widgets($subwidget) $command $args]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">c=
atch</span> $command result]} then {
	<span class=3D"hljs-keyword">regsub</span> $widgets($subwidget) $result $w=
idgets(this) result
	<span class=3D"hljs-keyword">switch</span> $subwidget,$subcommand {
	listbox,index {
		<span class=3D"hljs-keyword">regsub</span> <span class=3D"hljs-string">"i=
ndex"</span> $result <span class=3D"hljs-string">"list index"</span> result
	    }
	listbox,insert {
		<span class=3D"hljs-keyword">regsub</span> <span class=3D"hljs-string">"i=
nsert"</span> $result <span class=3D"hljs-string">"list insert"</span> resu=
lt
	    }
	listbox,delete {
		<span class=3D"hljs-keyword">regsub</span> <span class=3D"hljs-string">"d=
elete"</span> $result <span class=3D"hljs-string">"list delete"</span> resu=
lt
	    }
	listbox,get {
		<span class=3D"hljs-keyword">regsub</span> <span class=3D"hljs-string">"g=
et"</span> $result <span class=3D"hljs-string">"list get"</span> result
	    }
	listbox,size {
		<span class=3D"hljs-keyword">regsub</span> <span class=3D"hljs-string">"s=
ize"</span> $result <span class=3D"hljs-string">"list size"</span> result
	    }
	}
	<span class=3D"hljs-keyword">error</span> $result
    } else {
	<span class=3D"hljs-keyword">return</span> $result
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::combo=
box::WidgetProc</span> {w command args} {
    <span class=3D"hljs-keyword">upvar</span> ::combobox::${w}::widgets wid=
gets
    <span class=3D"hljs-keyword">upvar</span> ::combobox::${w}::options opt=
ions
    <span class=3D"hljs-keyword">upvar</span> ::combobox::${w}::oldFocus ol=
dFocus
    <span class=3D"hljs-keyword">upvar</span> ::combobox::${w}::oldFocus ol=
dGrab
    <span class=3D"hljs-keyword">set</span> command [::combobox::Canonize $=
w command $command]
    <span class=3D"hljs-keyword">set</span> doWidgetCommand [<span class=3D=
"hljs-keyword">list</span> ::combobox::DoInternalWidgetCommand $widgets(thi=
s)]
    <span class=3D"hljs-keyword">if</span> {$command =3D=3D <span class=3D"=
hljs-string">"list"</span>} then {
	<span class=3D"hljs-keyword">set</span> command <span class=3D"hljs-string=
">"list-[lindex $args 0]"</span>
	<span class=3D"hljs-keyword">set</span> args [<span class=3D"hljs-keyword"=
>lrange</span> $args <span class=3D"hljs-number">1</span> end]
    }
    <span class=3D"hljs-keyword">set</span> result <span class=3D"hljs-stri=
ng">""</span>
    <span class=3D"hljs-keyword">switch</span> $command {
    bbox -
    delete -
    get -
    icursor -
    index -
    insert -
    <span class=3D"hljs-keyword">scan</span> -
    selection -
    xview {
	    <span class=3D"hljs-keyword">set</span> result [<span class=3D"hljs-ke=
yword">eval</span> $doWidgetCommand entry $command $args]
	}
    <span class=3D"hljs-keyword">list</span>-get {
	    <span class=3D"hljs-keyword">set</span> result [<span class=3D"hljs-ke=
yword">eval</span> $doWidgetCommand listbox get $args]
	}
    <span class=3D"hljs-keyword">list</span>-index {
	    <span class=3D"hljs-keyword">set</span> result [<span class=3D"hljs-ke=
yword">eval</span> $doWidgetCommand listbox index $args]
	}
    <span class=3D"hljs-keyword">list</span>-size {
	    <span class=3D"hljs-keyword">set</span> result [<span class=3D"hljs-ke=
yword">eval</span> $doWidgetCommand listbox size $args]
	}
    select {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
llength</span> $args] =3D=3D <span class=3D"hljs-number">1</span>} then {
		<span class=3D"hljs-keyword">set</span> index [<span class=3D"hljs-keywor=
d">lindex</span> $args <span class=3D"hljs-number">0</span>]
		<span class=3D"hljs-keyword">set</span> result [Select $widgets(this) $in=
dex]
	    } else {
		<span class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">"us=
age: $w select index"</span>
	    }
	}
    subwidget {
	    <span class=3D"hljs-keyword">set</span> knownWidgets [<span class=3D"h=
ljs-keyword">list</span> button entry listbox popup vsb]
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
llength</span> $args] =3D=3D <span class=3D"hljs-number">0</span>} then {
		<span class=3D"hljs-keyword">return</span> $knownWidgets
	    }
	    <span class=3D"hljs-keyword">set</span> name [<span class=3D"hljs-keyw=
ord">lindex</span> $args <span class=3D"hljs-number">0</span>]
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
lsearch</span> $knownWidgets $name] !=3D <span class=3D"hljs-number">-1</sp=
an>} then {
		<span class=3D"hljs-keyword">set</span> result $widgets($name)
	    } else {
		<span class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">"un=
known subwidget $name"</span>
	    }
	}
    curselection {
	    <span class=3D"hljs-keyword">set</span> result [<span class=3D"hljs-ke=
yword">eval</span> $doWidgetCommand listbox curselection]
	}
    <span class=3D"hljs-keyword">list</span>-insert {
	    <span class=3D"hljs-keyword">eval</span> $doWidgetCommand listbox inse=
rt $args
	    <span class=3D"hljs-keyword">set</span> result [HandleScrollbar $w <sp=
an class=3D"hljs-string">"grow"</span>]
	}
    <span class=3D"hljs-keyword">list</span>-delete {
	    <span class=3D"hljs-keyword">eval</span> $doWidgetCommand listbox dele=
te $args
	    <span class=3D"hljs-keyword">set</span> result [HandleScrollbar $w <sp=
an class=3D"hljs-string">"shrink"</span>]
	}
    toggle {
	    <span class=3D"hljs-keyword">if</span> {$options(-state) =3D=3D <span =
class=3D"hljs-string">"disabled"</span>} then <span class=3D"hljs-keyword">=
return</span>
	    <span class=3D"hljs-keyword">if</span> {[winfo ismapped $widgets(popup=
)]} then {
		<span class=3D"hljs-keyword">set</span> result [$widgets(this) <span clas=
s=3D"hljs-keyword">close</span>]
	    } else {
		<span class=3D"hljs-keyword">set</span> result [$widgets(this) <span clas=
s=3D"hljs-keyword">open</span>]
	    }
	}
    <span class=3D"hljs-keyword">open</span> {
	    <span class=3D"hljs-keyword">if</span> {$options(-editable)} then {
		focus $widgets(entry)
		$widgets(entry) select range <span class=3D"hljs-number">0</span> end
		$widgets(entry) icur end
	    }
	    <span class=3D"hljs-keyword">if</span> {$options(-state) =3D=3D <span =
class=3D"hljs-string">"disabled"</span>} then {
		<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0<=
/span>
	    }
	    <span class=3D"hljs-keyword">set</span> geometry [::combobox::ComputeG=
eometry $widgets(this)]
	    wm geometry $widgets(popup) $geometry
	    <span class=3D"hljs-keyword">update</span> idletasks
	    <span class=3D"hljs-keyword">if</span> {[winfo ismapped $widgets(popup=
)]} then {
		<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0<=
/span>
	    }
	    <span class=3D"hljs-keyword">set</span> oldFocus [focus]
	    $widgets(button) configure -relief sunken
	    raise $widgets(popup) [winfo parent $widgets(this)]
	    wm deiconify $widgets(popup)
	    focus -force $widgets(entry)
	    ::combobox::Find $widgets(this) <span class=3D"hljs-number">1</span>
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-str=
ing">"none"</span>
	    <span class=3D"hljs-keyword">set</span> grab [grab current $widgets(th=
is)]
	    <span class=3D"hljs-keyword">if</span> {$grab !=3D <span class=3D"hljs=
-string">""</span>} then {
		<span class=3D"hljs-keyword">set</span> status [grab status $grab]
	    }
	    <span class=3D"hljs-keyword">set</span> oldGrab [<span class=3D"hljs-k=
eyword">list</span> $grab $status]
	    <span class=3D"hljs-keyword">unset</span> grab status
	    grab -<span class=3D"hljs-keyword">global</span> $widgets(this)
	    event generate $widgets(listbox) &lt;B1-Enter&gt;
	    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number"=
>1</span>
	}
    <span class=3D"hljs-keyword">close</span> {
	    <span class=3D"hljs-keyword">if</span> {![winfo ismapped $widgets(popu=
p)]} then {
		<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0<=
/span>
	    }
	    <span class=3D"hljs-keyword">catch</span> {focus $oldFocus} result
	    <span class=3D"hljs-keyword">catch</span> {grab release $widgets(this)=
}
	    <span class=3D"hljs-keyword">catch</span> {
		<span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-keywo=
rd">lindex</span> $oldGrab <span class=3D"hljs-number">1</span>]
		<span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"hlj=
s-string">"global"</span>} then {
		    grab -<span class=3D"hljs-keyword">global</span> [<span class=3D"hljs=
-keyword">lindex</span> $oldGrab <span class=3D"hljs-number">0</span>]
		} elseif {$status =3D=3D <span class=3D"hljs-string">"local"</span>} {
		    grab [<span class=3D"hljs-keyword">lindex</span> $oldGrab <span class=
=3D"hljs-number">0</span>]
		}
		<span class=3D"hljs-keyword">unset</span> status
	    }
	    $widgets(button) configure -relief raised
	    wm withdraw $widgets(popup)
	    <span class=3D"hljs-keyword">set</span> editable [::combobox::GetBoole=
an $options(-editable)]
	    <span class=3D"hljs-keyword">if</span> {$editable} then {
		$widgets(entry) selection range <span class=3D"hljs-number">0</span> end
		$widgets(button) configure -relief raised
	    }
	    tkCancelRepeat
	    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number"=
>1</span>
	}
    cget {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
llength</span> $args] !=3D <span class=3D"hljs-number">1</span>} then {
		<span class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">"wr=
ong # args: should be $w cget option"</span>
	    }
	    <span class=3D"hljs-keyword">set</span> opt [::combobox::Canonize $w o=
ption [<span class=3D"hljs-keyword">lindex</span> $args <span class=3D"hljs=
-number">0</span>]]
	    <span class=3D"hljs-keyword">if</span> {$opt =3D=3D <span class=3D"hlj=
s-string">"-value"</span>} then {
		<span class=3D"hljs-keyword">set</span> result [$widget(entry) get]
	    } else {
		<span class=3D"hljs-keyword">set</span> result $options($opt)
	    }
	}
    configure {
	    <span class=3D"hljs-keyword">set</span> result [<span class=3D"hljs-ke=
yword">eval</span> ::combobox::Configure {$w} $args]
	}
    default {
	    <span class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">=
"bad option \"$command\""</span>
	}
    }
    <span class=3D"hljs-keyword">return</span> $result
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::combo=
box::Configure</span> {w args} {
    <span class=3D"hljs-keyword">variable</span> widgetOptions
    <span class=3D"hljs-keyword">variable</span> defaultEntryCursor
    <span class=3D"hljs-keyword">upvar</span> ::combobox::${w}::widgets wid=
gets
    <span class=3D"hljs-keyword">upvar</span> ::combobox::${w}::options opt=
ions
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">l=
length</span> $args] =3D=3D <span class=3D"hljs-number">0</span>} then {
	<span class=3D"hljs-keyword">set</span> results {}
	<span class=3D"hljs-keyword">foreach</span> opt [<span class=3D"hljs-keywo=
rd">lsort</span> [<span class=3D"hljs-keyword">array</span> names widgetOpt=
ions]] {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
llength</span> $widgetOptions($opt)] =3D=3D <span class=3D"hljs-number">1</=
span>} then {
		<span class=3D"hljs-keyword">set</span> alias $widgetOptions($opt)
		<span class=3D"hljs-keyword">set</span> optName $widgetOptions($alias)
		<span class=3D"hljs-keyword">lappend</span> results [<span class=3D"hljs-=
keyword">list</span> $opt $optName]
	    } else {
		<span class=3D"hljs-keyword">set</span> optName [<span class=3D"hljs-keyw=
ord">lindex</span> $widgetOptions($opt) <span class=3D"hljs-number">0</span=
>]
		<span class=3D"hljs-keyword">set</span> optClass [<span class=3D"hljs-key=
word">lindex</span> $widgetOptions($opt) <span class=3D"hljs-number">1</spa=
n>]
		<span class=3D"hljs-keyword">set</span> default [option get $w $optName $=
optClass]
		<span class=3D"hljs-keyword">lappend</span> results [<span class=3D"hljs-=
keyword">list</span> $opt $optName $optClass $default $options($opt)]
	    }
	}
	<span class=3D"hljs-keyword">return</span> $results
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">l=
length</span> $args] =3D=3D <span class=3D"hljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> opt [::combobox::Canonize $w optio=
n [<span class=3D"hljs-keyword">lindex</span> $args <span class=3D"hljs-num=
ber">0</span>]]
	<span class=3D"hljs-keyword">set</span> optName [<span class=3D"hljs-keywo=
rd">lindex</span> $widgetOptions($opt) <span class=3D"hljs-number">0</span>=
]
	<span class=3D"hljs-keyword">set</span> optClass [<span class=3D"hljs-keyw=
ord">lindex</span> $widgetOptions($opt) <span class=3D"hljs-number">1</span=
>]
	<span class=3D"hljs-keyword">set</span> default [option get $w $optName $o=
ptClass]
	<span class=3D"hljs-keyword">set</span> results [<span class=3D"hljs-keywo=
rd">list</span> $opt $optName $optClass $default $options($opt)]
	<span class=3D"hljs-keyword">return</span> $results
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">e=
xpr</span> {[<span class=3D"hljs-keyword">llength</span> $args]%<span class=
=3D"hljs-number">2</span>}] =3D=3D <span class=3D"hljs-number">1</span>} th=
en {
	<span class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">"val=
ue for \"[lindex $args end]\" missing"</span>
    }
    <span class=3D"hljs-keyword">foreach</span> {name value} $args {
	<span class=3D"hljs-keyword">set</span> name [::combobox::Canonize $w opti=
on $name]
	<span class=3D"hljs-keyword">set</span> opts($name) $value
    }
    <span class=3D"hljs-keyword">foreach</span> option [<span class=3D"hljs=
-keyword">array</span> names opts] {
	<span class=3D"hljs-keyword">set</span> newValue $opts($option)
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info=
</span> exists options($option)]} then {
	    <span class=3D"hljs-keyword">set</span> oldValue $options($option)
	}
	<span class=3D"hljs-keyword">switch</span> -- $option {
	-background {
		$widgets(frame) configure -background $newValue
		$widgets(entry) configure -background $newValue
		$widgets(listbox) configure -background $newValue
		$widgets(vsb) configure -background $newValue
		$widgets(vsb) configure -troughcolor $newValue
		<span class=3D"hljs-keyword">set</span> options($option) $newValue
	    }
	-borderwidth {
		$widgets(frame) configure -borderwidth $newValue
		<span class=3D"hljs-keyword">set</span> options($option) $newValue
	    }
	-command {
		<span class=3D"hljs-keyword">set</span> options($option) $newValue
	    }
	-commandstate {
		<span class=3D"hljs-keyword">if</span> {$newValue !=3D <span class=3D"hlj=
s-string">"normal"</span> &amp;&amp; $newValue !=3D <span class=3D"hljs-str=
ing">"disabled"</span>} then {
		    <span class=3D"hljs-keyword">set</span> options($option) $oldValue
		    <span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-s=
tring">"bad state value \"$newValue\";"</span>
		    <span class=3D"hljs-keyword">append</span> message <span class=3D"hlj=
s-string">" must be normal or disabled"</span>
		    <span class=3D"hljs-keyword">error</span> $message
		}
		<span class=3D"hljs-keyword">set</span> options($option) $newValue
	    }
	-cursor {
		$widgets(frame) configure -cursor $newValue
		$widgets(entry) configure -cursor $newValue
		$widgets(listbox) configure -cursor $newValue
		<span class=3D"hljs-keyword">set</span> options($option) $newValue
	    }
	-editable {
		<span class=3D"hljs-keyword">if</span> {$newValue} then {
		    $widgets(entry) configure -state normal -cursor $defaultEntryCursor
		} else {
		    $widgets(entry) configure -state disabled -cursor $options(-cursor)
		}
		<span class=3D"hljs-keyword">set</span> options($option) $newValue
	    }
	-font {
		$widgets(entry) configure -font $newValue
		$widgets(listbox) configure -font $newValue
		<span class=3D"hljs-keyword">set</span> options($option) $newValue
	    }
	-foreground {
		$widgets(entry) configure -foreground $newValue
		$widgets(button) configure -foreground $newValue
		$widgets(listbox) configure -foreground $newValue
		<span class=3D"hljs-keyword">set</span> options($option) $newValue
	    }
	-height {
		$widgets(listbox) configure -height $newValue
		HandleScrollbar $w
		<span class=3D"hljs-keyword">set</span> options($option) $newValue
	    }
	-highlightbackground {
		$widgets(frame) configure -highlightbackground $newValue
		<span class=3D"hljs-keyword">set</span> options($option) $newValue
	    }
	-highlightcolor {
		$widgets(frame) configure -highlightcolor $newValue
		<span class=3D"hljs-keyword">set</span> options($option) $newValue
	    }
	-highlightthickness {
		$widgets(frame) configure -highlightthickness $newValue
		<span class=3D"hljs-keyword">set</span> options($option) $newValue
	    }
	-image {
		<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">str=
ing</span> length $newValue] &gt; <span class=3D"hljs-number">0</span>} the=
n {
		    $widgets(button) configure -image $newValue
		} else {
		    $widgets(button) configure -image ::combobox::bimage
		}
		<span class=3D"hljs-keyword">set</span> options($option) $newValue
	    }
	-maxheight {
		$widgets(listbox) configure -height $options(-height)
		HandleScrollbar $w
		<span class=3D"hljs-keyword">set</span> options($option) $newValue
	    }
	-relief {
		$widgets(frame) configure -relief $newValue
		<span class=3D"hljs-keyword">set</span> options($option) $newValue
	    }
	-selectbackground {
		$widgets(entry) configure -selectbackground $newValue
		$widgets(listbox) configure -selectbackground $newValue
		<span class=3D"hljs-keyword">set</span> options($option) $newValue
	    }
	-selectborderwidth {
		$widgets(entry) configure -selectborderwidth $newValue
		$widgets(listbox) configure -selectborderwidth $newValue
		<span class=3D"hljs-keyword">set</span> options($option) $newValue
	    }
	-selectforeground {
		$widgets(entry) configure -selectforeground $newValue
		$widgets(listbox) configure -selectforeground $newValue
		<span class=3D"hljs-keyword">set</span> options($option) $newValue
	    }
	-state {
		<span class=3D"hljs-keyword">if</span> {$newValue =3D=3D <span class=3D"h=
ljs-string">"normal"</span>} then {
		    <span class=3D"hljs-keyword">set</span> editable [::combobox::GetBool=
ean $options(-editable)]
		    <span class=3D"hljs-keyword">if</span> {$editable} then {
			$widgets(entry) configure -state normal
			$widgets(entry) configure -takefocus <span class=3D"hljs-number">1</span=
>
		    }
		} elseif {$newValue =3D=3D <span class=3D"hljs-string">"disabled"</span>}=
 {
		    $widgets(entry) configure -state disabled
		    $widgets(entry) configure -takefocus <span class=3D"hljs-number">0</s=
pan>
		} else {
		    <span class=3D"hljs-keyword">set</span> options($option) $oldValue
		    <span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-s=
tring">"bad state value \"$newValue\";"</span>
		    <span class=3D"hljs-keyword">append</span> message <span class=3D"hlj=
s-string">" must be normal or disabled"</span>
		    <span class=3D"hljs-keyword">error</span> $message
		}
		<span class=3D"hljs-keyword">set</span> options($option) $newValue
	    }
	-takefocus {
		$widgets(entry) configure -takefocus $newValue
		<span class=3D"hljs-keyword">set</span> options($option) $newValue
	    }
	-textvariable {
		$widgets(entry) configure -textvariable $newValue
		<span class=3D"hljs-keyword">set</span> options($option) $newValue
	    }
	-value {
		::combobox::SetValue $widgets(this) $newValue
		<span class=3D"hljs-keyword">set</span> options($option) $newValue
	    }
	-width {
		$widgets(entry) configure -width $newValue
		$widgets(listbox) configure -width $newValue
		<span class=3D"hljs-keyword">set</span> options($option) $newValue
	    }
	-xscrollcommand {
		$widgets(entry) configure -xscrollcommand $newValue
		<span class=3D"hljs-keyword">set</span> options($option) $newValue
	    }
	}
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::combo=
box::VTrace</span> {w args} {
    <span class=3D"hljs-keyword">upvar</span> ::combobox::${w}::widgets wid=
gets
    <span class=3D"hljs-keyword">upvar</span> ::combobox::${w}::options opt=
ions
    <span class=3D"hljs-keyword">upvar</span> ::combobox::${w}::ignoreTrace=
 ignoreTrace
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ignoreTrace]} then <span class=3D"hljs-keyword">return</s=
pan>
    ::combobox::SetValue $widgets(this) [<span class=3D"hljs-keyword">set</=
span> ::$options(-textvariable)]
    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-string">=
""</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::combo=
box::SetValue</span> {w newValue} {
    <span class=3D"hljs-keyword">upvar</span> ::combobox::${w}::widgets wid=
gets
    <span class=3D"hljs-keyword">upvar</span> ::combobox::${w}::options opt=
ions
    <span class=3D"hljs-keyword">upvar</span> ::combobox::${w}::ignoreTrace=
 ignoreTrace
    <span class=3D"hljs-keyword">upvar</span> ::combobox::${w}::oldValue ol=
dValue
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists options(-textvariable)] &amp;&amp; [<span class=3D"hljs-k=
eyword">string</span> length $options(-textvariable)] &gt; <span class=3D"h=
ljs-number">0</span>} then {
	<span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">varia=
ble</span> ::$options(-textvariable)
	<span class=3D"hljs-keyword">set</span> $variable $newValue
    } else {
	<span class=3D"hljs-keyword">set</span> oldstate [$widgets(entry) cget -st=
ate]
	$widgets(entry) configure -state normal
	$widgets(entry) delete <span class=3D"hljs-number">0</span> end
	$widgets(entry) insert <span class=3D"hljs-number">0</span> $newValue
	$widgets(entry) configure -state $oldstate
    }
    <span class=3D"hljs-keyword">set</span> oldValue $newValue
    CallCommand $w $newValue
    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-string">=
""</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::combo=
box::CallCommand</span> {w newValue} {
    <span class=3D"hljs-keyword">upvar</span> ::combobox::${w}::widgets wid=
gets
    <span class=3D"hljs-keyword">upvar</span> ::combobox::${w}::options opt=
ions
    <span class=3D"hljs-keyword">if</span> {$options(-commandstate) =3D=3D =
<span class=3D"hljs-string">"normal"</span> &amp;&amp; [<span class=3D"hljs=
-keyword">string</span> length $options(-command)] &gt; <span class=3D"hljs=
-number">0</span>} then {
	<span class=3D"hljs-keyword">set</span> args [<span class=3D"hljs-keyword"=
>list</span> $widgets(this) $newValue]
	<span class=3D"hljs-keyword">uplevel</span> \#<span class=3D"hljs-number">=
0</span> $options(-command) $args
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::combo=
box::GetBoolean</span> {value {errorValue <span class=3D"hljs-number">1</sp=
an>}} {
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">c=
atch</span> {<span class=3D"hljs-keyword">expr</span> {([<span class=3D"hlj=
s-keyword">string</span> trim $value]) ?<span class=3D"hljs-number">1</span=
>:<span class=3D"hljs-number">0</span>}} res]} then {
	<span class=3D"hljs-keyword">return</span> $errorValue
    } else {
	<span class=3D"hljs-keyword">return</span> $res
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::combo=
box::convert</span> {w args} {
    <span class=3D"hljs-keyword">set</span> result {}
    <span class=3D"hljs-keyword">if</span> {![winfo exists $w]} then {
	<span class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">"win=
dow \"$w\" doesn't exist"</span>
    }
    <span class=3D"hljs-keyword">while</span> {[<span class=3D"hljs-keyword=
">llength</span> $args] &gt; <span class=3D"hljs-number">0</span>} {
	<span class=3D"hljs-keyword">set</span> option [<span class=3D"hljs-keywor=
d">lindex</span> $args <span class=3D"hljs-number">0</span>]
	<span class=3D"hljs-keyword">set</span> args [<span class=3D"hljs-keyword"=
>lrange</span> $args <span class=3D"hljs-number">1</span> end]
	<span class=3D"hljs-keyword">switch</span> -exact -- $option {
	-x {
		<span class=3D"hljs-keyword">set</span> value [<span class=3D"hljs-keywor=
d">lindex</span> $args <span class=3D"hljs-number">0</span>]
		<span class=3D"hljs-keyword">set</span> args [<span class=3D"hljs-keyword=
">lrange</span> $args <span class=3D"hljs-number">1</span> end]
		<span class=3D"hljs-keyword">set</span> win $w
		<span class=3D"hljs-keyword">while</span> {[winfo class $win] !=3D <span =
class=3D"hljs-string">"Combobox"</span>} {
		    <span class=3D"hljs-keyword">incr</span> value [winfo x $win]
		    <span class=3D"hljs-keyword">set</span> win [winfo parent $win]
		    <span class=3D"hljs-keyword">if</span> {$win =3D=3D <span class=3D"hl=
js-string">"."</span>} then <span class=3D"hljs-keyword">break</span>
		}
		<span class=3D"hljs-keyword">lappend</span> result $value
	    }
	-y {
		<span class=3D"hljs-keyword">set</span> value [<span class=3D"hljs-keywor=
d">lindex</span> $args <span class=3D"hljs-number">0</span>]
		<span class=3D"hljs-keyword">set</span> args [<span class=3D"hljs-keyword=
">lrange</span> $args <span class=3D"hljs-number">1</span> end]
		<span class=3D"hljs-keyword">set</span> win $w
		<span class=3D"hljs-keyword">while</span> {[winfo class $win] !=3D <span =
class=3D"hljs-string">"Combobox"</span>} {
		    <span class=3D"hljs-keyword">incr</span> value [winfo y $win]
		    <span class=3D"hljs-keyword">set</span> win [winfo parent $win]
		    <span class=3D"hljs-keyword">if</span> {$win =3D=3D <span class=3D"hl=
js-string">"."</span>} then <span class=3D"hljs-keyword">break</span>
		}
		<span class=3D"hljs-keyword">lappend</span> result $value
	    }
	-w -
	-W {
		<span class=3D"hljs-keyword">set</span> win $w
		<span class=3D"hljs-keyword">while</span> {[winfo class $win] !=3D <span =
class=3D"hljs-string">"Combobox"</span>} {
		    <span class=3D"hljs-keyword">set</span> win [winfo parent $win]
		    <span class=3D"hljs-keyword">if</span> {$win =3D=3D <span class=3D"hl=
js-string">"."</span>} then <span class=3D"hljs-keyword">break</span>

		}
		<span class=3D"hljs-keyword">lappend</span> result $win
	    }
	}
    }
    <span class=3D"hljs-keyword">return</span> $result
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::combo=
box::Canonize</span> {w object opt} {
    <span class=3D"hljs-keyword">variable</span> widgetOptions
    <span class=3D"hljs-keyword">variable</span> columnOptions
    <span class=3D"hljs-keyword">variable</span> widgetCommands
    <span class=3D"hljs-keyword">variable</span> listCommands
    <span class=3D"hljs-keyword">variable</span> scanCommands
    <span class=3D"hljs-keyword">switch</span> $object {
    command {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
lsearch</span> -exact $widgetCommands $opt] &gt;=3D <span class=3D"hljs-num=
ber">0</span>} then {
		<span class=3D"hljs-keyword">return</span> $opt
	    }
	    <span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">l=
ist</span> $widgetCommands
	    <span class=3D"hljs-keyword">foreach</span> element $list {
		<span class=3D"hljs-keyword">set</span> tmp($element) <span class=3D"hljs=
-string">""</span>
	    }
	    <span class=3D"hljs-keyword">set</span> matches [<span class=3D"hljs-k=
eyword">array</span> names tmp ${opt}*]
	}
    {<span class=3D"hljs-keyword">list</span> command} {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
lsearch</span> -exact $listCommands $opt] &gt;=3D <span class=3D"hljs-numbe=
r">0</span>} then {
		<span class=3D"hljs-keyword">return</span> $opt
	    }
	    <span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">l=
ist</span> $listCommands
	    <span class=3D"hljs-keyword">foreach</span> element $list {
		<span class=3D"hljs-keyword">set</span> tmp($element) <span class=3D"hljs=
-string">""</span>
	    }
	    <span class=3D"hljs-keyword">set</span> matches [<span class=3D"hljs-k=
eyword">array</span> names tmp ${opt}*]
	}
    {<span class=3D"hljs-keyword">scan</span> command} {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
lsearch</span> -exact $scanCommands $opt] &gt;=3D <span class=3D"hljs-numbe=
r">0</span>} then {
		<span class=3D"hljs-keyword">return</span> $opt
	    }
	    <span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">l=
ist</span> $scanCommands
	    <span class=3D"hljs-keyword">foreach</span> element $list {
		<span class=3D"hljs-keyword">set</span> tmp($element) <span class=3D"hljs=
-string">""</span>
	    }
	    <span class=3D"hljs-keyword">set</span> matches [<span class=3D"hljs-k=
eyword">array</span> names tmp ${opt}*]
	}
    option {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
info</span> exists widgetOptions($opt)] &amp;&amp; [<span class=3D"hljs-key=
word">llength</span> $widgetOptions($opt)] =3D=3D <span class=3D"hljs-numbe=
r">2</span>} then {
		<span class=3D"hljs-keyword">return</span> $opt
	    }
	    <span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">l=
ist</span> [<span class=3D"hljs-keyword">array</span> names widgetOptions]
	    <span class=3D"hljs-keyword">set</span> matches [<span class=3D"hljs-k=
eyword">array</span> names widgetOptions ${opt}*]
	}
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">l=
length</span> $matches] =3D=3D <span class=3D"hljs-number">0</span>} then {
	<span class=3D"hljs-keyword">set</span> choices [HumanizeList $list]
	<span class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">"unk=
nown $object \"$opt\"; must be one of $choices"</span>
    } elseif {[<span class=3D"hljs-keyword">llength</span> $matches] =3D=3D=
 <span class=3D"hljs-number">1</span>} {
	<span class=3D"hljs-keyword">set</span> opt [<span class=3D"hljs-keyword">=
lindex</span> $matches <span class=3D"hljs-number">0</span>]
	<span class=3D"hljs-keyword">switch</span> $object {
	option {
		<span class=3D"hljs-keyword">set</span> opt [<span class=3D"hljs-keyword"=
>lindex</span> $matches <span class=3D"hljs-number">0</span>]
		<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">lle=
ngth</span> $widgetOptions($opt)] =3D=3D <span class=3D"hljs-number">1</spa=
n>} then {
		    <span class=3D"hljs-keyword">set</span> opt $widgetOptions($opt)
		}
	    }
	}
	<span class=3D"hljs-keyword">return</span> $opt
    } else {
	<span class=3D"hljs-keyword">set</span> choices [HumanizeList $list]
	<span class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">"amb=
iguous $object \"$opt\"; must be one of $choices"</span>
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::combo=
box::HumanizeList</span> {<span class=3D"hljs-keyword">list</span>} {
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">l=
length</span> $list] =3D=3D <span class=3D"hljs-number">1</span>} then {
	<span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keyword">l=
index</span> $list <span class=3D"hljs-number">0</span>]
    } else {
	<span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">list<=
/span> [<span class=3D"hljs-keyword">lsort</span> $list]
	<span class=3D"hljs-keyword">set</span> secondToLast [<span class=3D"hljs-=
keyword">expr</span> {[<span class=3D"hljs-keyword">llength</span> $list] <=
span class=3D"hljs-number">-2</span>}]
	<span class=3D"hljs-keyword">set</span> most [<span class=3D"hljs-keyword"=
>lrange</span> $list <span class=3D"hljs-number">0</span> $secondToLast]
	<span class=3D"hljs-keyword">set</span> last [<span class=3D"hljs-keyword"=
>lindex</span> $list end]
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-string">"[j=
oin $most {, }] or $last"</span>
    }
}
<span class=3D"hljs-keyword">package</span> provide #dbglog
<span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keyword">=
eval</span> ::#dbglog {
    <span class=3D"hljs-keyword">namespace</span> export #dbgCtrl
    <span class=3D"hljs-keyword">namespace</span> export #dbgBeginSrc
    <span class=3D"hljs-keyword">namespace</span> export #dbgEndSrc
    <span class=3D"hljs-keyword">namespace</span> export #dbgBeginProc
    <span class=3D"hljs-keyword">namespace</span> export #dbgEndProc
    <span class=3D"hljs-keyword">namespace</span> export #dbgShowVar
    <span class=3D"hljs-keyword">namespace</span> export #dbgShowInfo
    <span class=3D"hljs-keyword">namespace</span> export #dbgShowWarning
    <span class=3D"hljs-keyword">namespace</span> export #dbgShowError
    <span class=3D"hljs-keyword">namespace</span> export debug_log
}
<span class=3D"hljs-keyword">global</span> ::#dbglog::widget
<span class=3D"hljs-keyword">set</span> ::#dbglog::widget(top) <span class=
=3D"hljs-string">""</span>
<span class=3D"hljs-keyword">global</span> ::#dbglog::state
<span class=3D"hljs-keyword">set</span> ::#dbglog::state(debugging) off
<span class=3D"hljs-keyword">set</span> ::#dbglog::state(tagCnt) <span clas=
s=3D"hljs-number">0</span>
<span class=3D"hljs-keyword">set</span> ::#dbglog::state(indentSpc) <span c=
lass=3D"hljs-string">""</span>
<span class=3D"hljs-keyword">set</span> ::#dbglog::state(lineCnt) <span cla=
ss=3D"hljs-number">1</span>
<span class=3D"hljs-keyword">proc</span> ::#dbglog::#dbgBeginSrc {name} {
    DbgLogColor <span class=3D"hljs-string">"\[Source in\] $name"</span> bl=
ack i+
}
<span class=3D"hljs-keyword">proc</span> ::#dbglog::#dbgEndSrc {name} {
    DbgLogColor <span class=3D"hljs-string">"\[Source out\] $name"</span> b=
lack i-
}
<span class=3D"hljs-keyword">proc</span> ::#dbglog::#dbgBeginProc {name} {
    DbgLogColor <span class=3D"hljs-string">"\[Proc in\] $name"</span> brow=
n i+
}
<span class=3D"hljs-keyword">proc</span> ::#dbglog::#dbgEndProc {name} {
    DbgLogColor <span class=3D"hljs-string">"\[Proc out\] $name"</span> bro=
wn i-
}
<span class=3D"hljs-keyword">proc</span> ::#dbglog::#dbgShowVar {name} {
    DbgLogColor <span class=3D"hljs-string">"\[Variable\] $name"</span> blu=
e i
}
<span class=3D"hljs-keyword">proc</span> ::#dbglog::#dbgShowInfo {name} {
    DbgLogColor <span class=3D"hljs-string">"\[Info\] $name"</span> <span c=
lass=3D"hljs-string">"dark green"</span> i
}
<span class=3D"hljs-keyword">proc</span> ::#dbglog::#dbgShowWarning {name} =
{
    DbgLogColor <span class=3D"hljs-string">"\[Warning!\] $name"</span> ora=
nge i
}
<span class=3D"hljs-keyword">proc</span> ::#dbglog::#dbgShowError {name} {
    DbgLogColor <span class=3D"hljs-string">"\[Error!\] $name"</span> red i
}
<span class=3D"hljs-keyword">proc</span> ::#dbglog::debug_log {message} {
    <span class=3D"hljs-keyword">global</span> ::#dbglog::widget
    <span class=3D"hljs-keyword">global</span> ::#dbglog::state
    <span class=3D"hljs-keyword">if</span> {$state(debugging) =3D=3D <span =
class=3D"hljs-string">"on"</span>} then {
	$widget(teDbgLog) configure -state normal
	$widget(teDbgLog) insert end <span class=3D"hljs-string">"$message\n"</spa=
n>
	$widget(teDbgLog) see end
	$widget(teDbgLog) configure -state disable
    }
}
<span class=3D"hljs-keyword">proc</span> ::#dbglog::DbgLogColor {message co=
lor indent} {
    <span class=3D"hljs-keyword">global</span> ::#dbglog::widget
    <span class=3D"hljs-keyword">global</span> ::#dbglog::state
    <span class=3D"hljs-keyword">if</span> {$state(debugging) =3D=3D <span =
class=3D"hljs-string">"on"</span>} then {
	$widget(teDbgLog) configure -state normal
	<span class=3D"hljs-keyword">if</span> {$indent =3D=3D <span class=3D"hljs=
-string">"i+"</span>} then {
	    <span class=3D"hljs-keyword">set</span> state(indentSpc) [<span class=
=3D"hljs-keyword">append</span> state(indentSpc) <span class=3D"hljs-string=
">"  "</span>]
	}
	<span class=3D"hljs-keyword">set</span> msg $state(indentSpc)
	<span class=3D"hljs-keyword">set</span> msg [<span class=3D"hljs-keyword">=
append</span> msg $message]
	$widget(teDbgLog) insert end $msg\n t$state(tagCnt)
	$widget(teDbgLog) tag configure t$state(tagCnt) -foreground $color -backgr=
ound wheat
	$widget(teDbgLog) see end
	<span class=3D"hljs-keyword">incr</span> state(tagCnt) <span class=3D"hljs=
-number">1</span>
	<span class=3D"hljs-keyword">incr</span> state(lineCnt) <span class=3D"hlj=
s-number">1</span>
	<span class=3D"hljs-keyword">if</span> {$indent =3D=3D <span class=3D"hljs=
-string">"i-"</span>} then {
	    <span class=3D"hljs-keyword">set</span> state(indentSpc) [<span class=
=3D"hljs-keyword">string</span> range $state(indentSpc) <span class=3D"hljs=
-number">2</span> [<span class=3D"hljs-keyword">string</span> length $state=
(indentSpc)]]
	}
	$widget(teDbgLog) configure -state disable
    }
}
<span class=3D"hljs-keyword">proc</span> ::#dbglog::#dbgCtrl {on_or_off {me=
ssage <span class=3D"hljs-string">""</span>}} {
    <span class=3D"hljs-keyword">global</span> ::#dbglog::widget
    <span class=3D"hljs-keyword">global</span> ::#dbglog::state
    <span class=3D"hljs-keyword">if</span> {$state(debugging) !=3D $on_or_o=
ff} then {
	<span class=3D"hljs-keyword">if</span> {$on_or_off =3D=3D <span class=3D"h=
ljs-string">"on"</span>} then {
	    <span class=3D"hljs-keyword">if</span> {[winfo exists $widget(top)] =
=3D=3D <span class=3D"hljs-number">0</span>} then {
		WindowCreate
	    } else {
		wm deiconify $widget(top)
	    }
	} else {
	    wm withdraw $widget(top)
	}
	<span class=3D"hljs-keyword">set</span> state(debugging) $on_or_off
    }
    <span class=3D"hljs-keyword">if</span> {$message !=3D <span class=3D"hl=
js-string">""</span>} then {
	<span class=3D"hljs-keyword">set</span> date [<span class=3D"hljs-keyword"=
>clock</span> <span class=3D"hljs-keyword">format</span> [<span class=3D"hl=
js-keyword">clock</span> seconds] -<span class=3D"hljs-keyword">format</spa=
n> %c -gmt true]
	debug_log <span class=3D"hljs-string">"$message $date"</span>
	debug_log <span class=3D"hljs-string">" "</span>
	<span class=3D"hljs-keyword">set</span> state(lineCnt) [<span class=3D"hlj=
s-keyword">expr</span> $state(lineCnt) + <span class=3D"hljs-number">2</spa=
n>]
    }
}
<span class=3D"hljs-keyword">proc</span> ::#dbglog::WindowCreate {} {
    <span class=3D"hljs-keyword">global</span> ::#dbglog::widget
    <span class=3D"hljs-keyword">set</span> widget(top) [toplevel .debug]
    wm title $widget(top) <span class=3D"hljs-string">"Debug log"</span>
    wm protocol $widget(top) WM_DELETE_WINDOW <span class=3D"hljs-string">"=
wm withdraw $widget(top)"</span>
    <span class=3D"hljs-keyword">set</span> mnTop [menu .debug_top_menu -te=
aroff <span class=3D"hljs-number">0</span>]
    <span class=3D"hljs-keyword">set</span> mnFile [menu $mnTop.<span class=
=3D"hljs-keyword">file</span> -tearoff <span class=3D"hljs-number">0</span>=
]
    $mnTop add cascade -label <span class=3D"hljs-string">"File"</span> -me=
nu $mnFile -underline <span class=3D"hljs-number">0</span>
    $mnFile add command -label <span class=3D"hljs-string">"Save"</span> -u=
nderline <span class=3D"hljs-number">0</span> -command ::#dbglog::SaveLog
    <span class=3D"hljs-keyword">set</span> mnEdit [menu $mnTop.edit -tearo=
ff <span class=3D"hljs-number">0</span>]
    $mnTop add cascade -label Edit -menu $mnEdit -underline <span class=3D"=
hljs-number">0</span>
    $mnEdit add command -label Clear -underline <span class=3D"hljs-number"=
>0</span> -command ::#dbglog::ClearLog
    $mnEdit add command -label Search -underline <span class=3D"hljs-number=
">0</span> -command ::#dbglog::SearchLog
    $widget(top) configure -menu $mnTop
    <span class=3D"hljs-keyword">set</span> widget(frDbgLog) [frame $widget=
(top).fr_#dbglog]
    <span class=3D"hljs-keyword">set</span> widget(teDbgLog) [text $widget(=
frDbgLog).te_log -setgrid true -wrap word -state disable -xscrollcommand [<=
span class=3D"hljs-keyword">list</span> $widget(frDbgLog).xscroll <span cla=
ss=3D"hljs-keyword">set</span>] -yscrollcommand [<span class=3D"hljs-keywor=
d">list</span> $widget(frDbgLog).yscroll <span class=3D"hljs-keyword">set</=
span>]]
    scrollbar $widget(frDbgLog).xscroll -orient horizontal -command [<span =
class=3D"hljs-keyword">list</span> $widget(teDbgLog) xview]
    scrollbar $widget(frDbgLog).yscroll -orient vertical -command [<span cl=
ass=3D"hljs-keyword">list</span> $widget(teDbgLog) yview]
    pack $widget(frDbgLog).yscroll -side right -fill y
    pack $widget(frDbgLog).xscroll -side bottom -fill x
    pack $widget(teDbgLog) -expand true -fill both
    pack $widget(frDbgLog) -side top -fill both -expand true
    <span class=3D"hljs-keyword">set</span> chDbgOnOff [checkbutton $widget=
(top).ch_#dbg_onoff -text <span class=3D"hljs-string">"Debug On"</span> -<s=
pan class=3D"hljs-keyword">variable</span> ::#dbglog::state(debugging) -onv=
alue <span class=3D"hljs-string">"on"</span> -offvalue <span class=3D"hljs-=
string">"off"</span>]
    pack $chDbgOnOff -anchor w
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span> ::#dbglog::SaveLog {} {
    <span class=3D"hljs-keyword">global</span> ::#dbglog::widget
    <span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">fi=
lename</span> [tk_getSaveFile -title <span class=3D"hljs-string">"Save debu=
g events"</span> -defaultextension <span class=3D"hljs-string">".txt"</span=
> -filetypes {{{Log files} {.txt}}}]
    <span class=3D"hljs-keyword">if</span> {$filename !=3D <span class=3D"h=
ljs-string">""</span>} then {
	<span class=3D"hljs-keyword">if</span> [<span class=3D"hljs-keyword">catch=
</span> {<span class=3D"hljs-keyword">open</span> $filename w} fileId] then=
 {
	    tk_messageBox -message <span class=3D"hljs-string">"Cannot open $filen=
ame"</span> -icon <span class=3D"hljs-keyword">error</span> -type ok
	} else {
	    <span class=3D"hljs-keyword">puts</span> $fileId [$widget(teDbgLog) ge=
t <span class=3D"hljs-number">1.0</span> end]
	    <span class=3D"hljs-keyword">close</span> $fileId
	}
    }
}
<span class=3D"hljs-keyword">proc</span> ::#dbglog::ClearLog {} {
    <span class=3D"hljs-keyword">global</span> ::#dbglog::widget
    $widget(teDbgLog) configure -state normal
    $widget(teDbgLog) delete <span class=3D"hljs-number">3.0</span> end
    $widget(teDbgLog) insert end <span class=3D"hljs-string">"\n"</span>
    $widget(teDbgLog) configure -state disable
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span> ::#dbglog::SearchLog {} {
    <span class=3D"hljs-keyword">global</span> ::#dbglog::widget
    <span class=3D"hljs-keyword">global</span> ::#dbglog::pattern
    <span class=3D"hljs-keyword">global</span> ::#dbglog::searchDir
    <span class=3D"hljs-keyword">global</span> ::#dbglog::hilitOn
    <span class=3D"hljs-keyword">set</span> tpSearch [toplevel .#dbglog_sea=
rch]
    wm title $tpSearch <span class=3D"hljs-string">"Search"</span>
    wm protocol $tpSearch WM_DELETE_WINDOW <span class=3D"hljs-string">"des=
troy $tpSearch"</span>
    wm resizable $tpSearch <span class=3D"hljs-number">0</span> <span class=
=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> frSearch [frame $tpSearch.fr_se=
ach]
    <span class=3D"hljs-keyword">set</span> laString [label $frSearch.la_st=
ring -text <span class=3D"hljs-string">"Search:"</span>]
    <span class=3D"hljs-keyword">set</span> enString [entry $frSearch.en_st=
ring -width <span class=3D"hljs-number">32</span> -textvariable ::#dbglog::=
pattern]
    pack $laString $enString -padx <span class=3D"hljs-number">5</span> -pa=
dy <span class=3D"hljs-number">10</span> -side left
    pack $frSearch
    <span class=3D"hljs-keyword">set</span> widget(EnString) $enString
    bind $widget(EnString) &lt;Return&gt; {FindLog}
    <span class=3D"hljs-keyword">set</span> frDir [frame $tpSearch.fr_dir -=
relief groove -borderwidth <span class=3D"hljs-number">2</span>]
    <span class=3D"hljs-keyword">set</span> laDir [label $frDir.la -text <s=
pan class=3D"hljs-string">"Direction"</span>]
    <span class=3D"hljs-keyword">set</span> frRaDir [frame $frDir.fr_radir]
    radiobutton $frRaDir.f -text <span class=3D"hljs-string">"Up"</span> -<=
span class=3D"hljs-keyword">variable</span> ::#dbglog::searchDir -value bac=
kwards
    radiobutton $frRaDir.b -text <span class=3D"hljs-string">"Down"</span> =
-<span class=3D"hljs-keyword">variable</span> ::#dbglog::searchDir -value f=
orward
    <span class=3D"hljs-keyword">set</span> searchDir forward
    pack $frRaDir.f $frRaDir.b -side left
    pack $laDir $frRaDir -anchor w
    <span class=3D"hljs-keyword">set</span> frBu [frame $tpSearch.bu]
    <span class=3D"hljs-keyword">set</span> buFind [button $frBu.bu_find -t=
ext <span class=3D"hljs-string">"Next"</span> -command {FindLog}]
    <span class=3D"hljs-keyword">set</span> buCancel [button $frBu.bu_cance=
l -text <span class=3D"hljs-string">"Cancel"</span> -command {<span class=
=3D"hljs-keyword">set</span> Cancel <span class=3D"hljs-number">1</span>}]
    pack $buFind $buCancel -padx <span class=3D"hljs-number">5</span> -pady=
 <span class=3D"hljs-number">10</span> -fill x
    pack $frDir -anchor w -padx <span class=3D"hljs-number">5</span> -side =
left -fill x -expand true
    pack $frBu -anchor e -padx <span class=3D"hljs-number">5</span> -side l=
eft -fill x -expand true
    focus $enString
    <span class=3D"hljs-keyword">set</span> hilitOn <span class=3D"hljs-num=
ber">0</span>
    tkwait <span class=3D"hljs-keyword">variable</span> Cancel
    destroy $tpSearch
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> FindLog=
</span> {} {
    <span class=3D"hljs-keyword">global</span> ::#dbglog::widget
    <span class=3D"hljs-keyword">global</span> ::#dbglog::pattern
    <span class=3D"hljs-keyword">global</span> ::#dbglog::searchDir
    <span class=3D"hljs-keyword">global</span> ::#dbglog::hilitOn
    <span class=3D"hljs-keyword">global</span> ::#dbglog::searchLine
    <span class=3D"hljs-keyword">if</span> {$hilitOn =3D=3D <span class=3D"=
hljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> FgColor [$widget(teDbgLog) tag cge=
t $widget(tagHilit) -foreground]
	<span class=3D"hljs-keyword">set</span> BgColor [$widget(teDbgLog) tag cge=
t $widget(tagHilit) -background]
	$widget(teDbgLog) tag configure $widget(tagHilit) -foreground $BgColor -ba=
ckground $FgColor
	<span class=3D"hljs-keyword">set</span> hilitOn <span class=3D"hljs-number=
">0</span>
	<span class=3D"hljs-keyword">if</span> {$searchDir =3D=3D <span class=3D"h=
ljs-string">"forward"</span>} then {
	    <span class=3D"hljs-keyword">incr</span> searchLine
	}
    } else {
	<span class=3D"hljs-keyword">set</span> searchLine <span class=3D"hljs-num=
ber">1</span>
    }
    <span class=3D"hljs-keyword">set</span> OccurenceIdx [$widget(teDbgLog)=
 search -$searchDir $pattern ${searchLine}.<span class=3D"hljs-number">0</s=
pan>]
    <span class=3D"hljs-keyword">if</span> {$OccurenceIdx =3D=3D <span clas=
s=3D"hljs-string">""</span>} then {
	tk_messageBox -title <span class=3D"hljs-string">"Debug Log"</span> -icon =
<span class=3D"hljs-keyword">info</span> -type ok -message <span class=3D"h=
ljs-string">"Cannot find $pattern"</span>
	focus $widget(EnString)
    } else {
	<span class=3D"hljs-keyword">set</span> searchLine [<span class=3D"hljs-ke=
yword">string</span> range $OccurenceIdx <span class=3D"hljs-number">0</spa=
n> [<span class=3D"hljs-keyword">expr</span> [<span class=3D"hljs-keyword">=
string</span> last <span class=3D"hljs-string">"."</span> $OccurenceIdx] <s=
pan class=3D"hljs-number">-1</span>]]
	<span class=3D"hljs-keyword">set</span> widget(tagHilit) [$widget(teDbgLog=
) tag names ${searchLine}.<span class=3D"hljs-number">0</span>]
	<span class=3D"hljs-keyword">set</span> FgColor [$widget(teDbgLog) tag cge=
t $widget(tagHilit) -foreground]
	<span class=3D"hljs-keyword">set</span> BgColor [$widget(teDbgLog) tag cge=
t $widget(tagHilit) -background]
	$widget(teDbgLog) tag configure $widget(tagHilit) -foreground $BgColor -ba=
ckground $FgColor
	$widget(teDbgLog) see $OccurenceIdx
	<span class=3D"hljs-keyword">set</span> hilitOn <span class=3D"hljs-number=
">1</span>
	focus $widget(teDbgLog)
    }
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">catch</span> {<span class=3D"hljs-keyword">nam=
espace</span> import combobox::*}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> fontcho=
ose</span> {} {
    <span class=3D"hljs-keyword">global</span> ::but_stat
    destroy .top_fc
    <span class=3D"hljs-keyword">set</span> ::size <span class=3D"hljs-numb=
er">12</span>
    <span class=3D"hljs-keyword">set</span> ::family [<span class=3D"hljs-k=
eyword">lindex</span> [<span class=3D"hljs-keyword">lsort</span> [font fami=
lies]] <span class=3D"hljs-number">0</span>]
    <span class=3D"hljs-keyword">set</span> ::slant roman
    <span class=3D"hljs-keyword">set</span> ::weight normal
    <span class=3D"hljs-keyword">set</span> ::overstrike <span class=3D"hlj=
s-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::underline <span class=3D"hljs=
-number">0</span>
    toplevel .top_fc
    wm title .top_fc <span class=3D"hljs-string">"Font Chooser"</span>
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">l=
search</span> [font names] <span class=3D"hljs-string">"defaultFont"</span>=
] =3D=3D <span class=3D"hljs-number">-1</span>} then {
	setSystemFonts
    }
    <span class=3D"hljs-keyword">set</span> fp [frame .top_fc.fontpicker]
    <span class=3D"hljs-keyword">set</span> msg [label .top_fc.msg -borderw=
idth <span class=3D"hljs-number">2</span> -relief groove -width <span class=
=3D"hljs-number">30</span> -height <span class=3D"hljs-number">4</span>]
    pack $fp -side top -fill x
    pack $msg -side top -fill both -expand y -ipady <span class=3D"hljs-num=
ber">20</span>
    $msg configure -text [<span class=3D"hljs-keyword">join</span> [<span c=
lass=3D"hljs-keyword">list</span> <span class=3D"hljs-string">"ABCDEFGHIJKL=
MNOPQRSTUVWXYZ"</span> <span class=3D"hljs-string">"abcdefghijklmnopqrstuvw=
xyz"</span> <span class=3D"hljs-string">"0123456789~`!@#$%^&amp;*()_-+=3D"<=
/span> <span class=3D"hljs-string">"{}[]:;\"'&lt;&gt;,.?/"</span>] <span cl=
ass=3D"hljs-string">"\n"</span>]
    changeFont $msg
    label $fp.famLabel -text <span class=3D"hljs-string">"Font Family:"</sp=
an> -font defaultFont
    combobox $fp.famCombo -textvariable family -editable false -highlightth=
ickness <span class=3D"hljs-number">1</span> -command [<span class=3D"hljs-=
keyword">list</span> changeFont $msg] -font defaultFont
    pack $fp.famLabel -side left
    pack $fp.famCombo -side left -fill x -expand y
    <span class=3D"hljs-keyword">set</span> widest <span class=3D"hljs-numb=
er">0</span>
    <span class=3D"hljs-keyword">foreach</span> family [<span class=3D"hljs=
-keyword">lsort</span> [font families]] {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">set<=
/span> length [<span class=3D"hljs-keyword">string</span> length $family]] =
&gt; $widest} then {
	    <span class=3D"hljs-keyword">set</span> widest $length
	}
	$fp.famCombo <span class=3D"hljs-keyword">list</span> insert end $family
    }
    $fp.famCombo configure -width $widest
    label $fp.sizeLabel -text <span class=3D"hljs-string">"Font Size:"</spa=
n> -font defaultFont
    combobox $fp.sizeCombo -highlightthickness <span class=3D"hljs-number">=
1</span> -maxheight <span class=3D"hljs-number">0</span> -width <span class=
=3D"hljs-number">3</span> -textvariable size -editable true -command [<span=
 class=3D"hljs-keyword">list</span> changeFont $msg] -font defaultFont
    pack $fp.sizeLabel -side left
    pack $fp.sizeCombo -side left
    <span class=3D"hljs-keyword">eval</span> $fp.sizeCombo <span class=3D"h=
ljs-keyword">list</span> insert end [<span class=3D"hljs-keyword">list</spa=
n> <span class=3D"hljs-number">8</span> <span class=3D"hljs-number">9</span=
> <span class=3D"hljs-number">10</span> <span class=3D"hljs-number">12</spa=
n> <span class=3D"hljs-number">14</span> <span class=3D"hljs-number">16</sp=
an> <span class=3D"hljs-number">18</span> <span class=3D"hljs-number">20</s=
pan> <span class=3D"hljs-number">24</span> <span class=3D"hljs-number">28</=
span> <span class=3D"hljs-number">32</span> <span class=3D"hljs-number">36<=
/span>]
    frame $fp.dummy -width <span class=3D"hljs-number">5</span>
    pack $fp.dummy -side left
    <span class=3D"hljs-keyword">set</span> bold <span class=3D"hljs-string=
">"bold"</span>
    checkbutton $fp.bold -<span class=3D"hljs-keyword">variable</span> weig=
ht -indicatoron false -onvalue bold -offvalue normal -text <span class=3D"h=
ljs-string">"B"</span> -width <span class=3D"hljs-number">2</span> -height =
<span class=3D"hljs-number">1</span> -font defaultFontb -command [<span cla=
ss=3D"hljs-keyword">list</span> changeFont $msg]
    pack $fp.bold -side left
    checkbutton $fp.underline -<span class=3D"hljs-keyword">variable</span>=
 underline -indicatoron false -onvalue <span class=3D"hljs-number">1</span>=
 -offvalue <span class=3D"hljs-number">0</span> -text <span class=3D"hljs-s=
tring">"U"</span> -width <span class=3D"hljs-number">2</span> -height <span=
 class=3D"hljs-number">1</span> -font defaultFontu -highlightthickness <spa=
n class=3D"hljs-number">1</span> -padx <span class=3D"hljs-number">0</span>=
 -pady <span class=3D"hljs-number">0</span> -borderwidth <span class=3D"hlj=
s-number">1</span> -command [<span class=3D"hljs-keyword">list</span> chang=
eFont $msg]
    pack $fp.underline -side left
    checkbutton $fp.italic -<span class=3D"hljs-keyword">variable</span> sl=
ant -indicatoron false -onvalue italic -offvalue roman -text <span class=3D=
"hljs-string">"I"</span> -width <span class=3D"hljs-number">2</span> -heigh=
t <span class=3D"hljs-number">1</span> -font defaultFonti -highlightthickne=
ss <span class=3D"hljs-number">1</span> -padx <span class=3D"hljs-number">0=
</span> -pady <span class=3D"hljs-number">0</span> -borderwidth <span class=
=3D"hljs-number">1</span> -command [<span class=3D"hljs-keyword">list</span=
> changeFont $msg]
    pack $fp.italic -side left
    checkbutton $fp.overstrike -<span class=3D"hljs-keyword">variable</span=
> overstrike -indicatoron false -onvalue <span class=3D"hljs-number">1</spa=
n> -offvalue <span class=3D"hljs-number">0</span> -text <span class=3D"hljs=
-string">"O"</span> -width <span class=3D"hljs-number">2</span> -height <sp=
an class=3D"hljs-number">1</span> -font defaultFonto -highlightthickness <s=
pan class=3D"hljs-number">1</span> -padx <span class=3D"hljs-number">0</spa=
n> -pady <span class=3D"hljs-number">0</span> -borderwidth <span class=3D"h=
ljs-number">1</span> -command [<span class=3D"hljs-keyword">list</span> cha=
ngeFont $msg]
    pack $fp.overstrike -side left
    <span class=3D"hljs-keyword">set</span> but_cancel [button .top_fc.but_=
cancel -text <span class=3D"hljs-string">"Cancel"</span> -command {<span cl=
ass=3D"hljs-keyword">set</span> ::but_stat <span class=3D"hljs-string">"can=
cel"</span>}]
    <span class=3D"hljs-keyword">set</span> but_ok [button .top_fc.but_ok -=
text <span class=3D"hljs-string">"OK"</span> -command {<span class=3D"hljs-=
keyword">set</span> ::but_stat <span class=3D"hljs-string">"ok"</span>}]
    pack $but_cancel $but_ok -side right -padx <span class=3D"hljs-number">=
10</span>
    <span class=3D"hljs-keyword">catch</span> {focus $fp.famCombo}
    tkwait <span class=3D"hljs-keyword">variable</span> ::but_stat
    <span class=3D"hljs-keyword">if</span> {$::but_stat =3D=3D <span class=
=3D"hljs-string">"ok"</span>} then {
	<span class=3D"hljs-keyword">set</span> ::fontspec [<span class=3D"hljs-ke=
yword">list</span> -family $::family -size $::size -weight $::weight -under=
line $::underline -slant $::slant -overstrike $::overstrike]
    } else {
	<span class=3D"hljs-keyword">set</span> ::fontspec {}
    }
    destroy .top_fc
    <span class=3D"hljs-keyword">return</span> $::fontspec
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::chang=
eFont</span> {w args} {
    <span class=3D"hljs-keyword">foreach</span> foo [<span class=3D"hljs-ke=
yword">list</span> family size weight underline slant overstrike] {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">set<=
/span> ::$foo] =3D=3D <span class=3D"hljs-string">""</span>} then {
	    <span class=3D"hljs-keyword">return</span>
	}
    }
    <span class=3D"hljs-keyword">set</span> ::fontspec [<span class=3D"hljs=
-keyword">list</span> -family $::family -size $::size -weight $::weight -un=
derline $::underline -slant $::slant -overstrike $::overstrike]
    $w configure -font $::fontspec
}
<span class=3D"hljs-keyword">package</span> provide htmlview
<span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keyword">=
eval</span> ::htmlview {
    <span class=3D"hljs-keyword">namespace</span> export htmlView
}
<span class=3D"hljs-keyword">global</span> exeDir
<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info<=
/span> command html]=3D=3D<span class=3D"hljs-string">""</span>} then {
    <span class=3D"hljs-keyword">foreach</span> f {./tkhtml.so /usr/lib/tkh=
tml.so /usr/local/lib/tkhtml.so ./tkhtml.dll} {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">file=
</span> exists $f]} then {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
catch</span> {<span class=3D"hljs-keyword">load</span> $f Tkhtml}]=3D=3D<sp=
an class=3D"hljs-number">0</span>} then <span class=3D"hljs-keyword">break<=
/span>
	}
    }
}
image create photo ::htmlview::biggray -data {
R0lGODdhPAA+APAAALi4uAAAACwAAAAAPAA+AAACQISPqcvtD6OctNqLs968+w+G4kiW5omm
<span class=3D"hljs-number">6</span>sq27gvH8kzX9o3n+s73/g8MCofEovGITCqXzKbz=
CY1Kp9Sq9YrNFgsAO///
}
image create photo ::htmlview::smgray -data {
R0lGODdhOAAYAPAAALi4uAAAACwAAAAAOAAYAAACI4SPqcvtD6OctNqLs968+w+G4kiW5omm
<span class=3D"hljs-number">6</span>sq27gvH8kzX9m0VADv/
}
image create photo ::htmlview::nogifbig -data {
R0lGODdhJAAkAPEAAACQkADQ0PgAAAAAACwAAAAAJAAkAAACmISPqcsQD6OcdJqKM71PeK15
AsSJH0iZY1CqqKSurfsGsex08XuTuU7L9HywHWZILAaVJssvgoREk5PolFo1XrHZ29IZ8oo0
HKEYVDYbyc/jFhz2otvdcyZdF68qeKh2DZd3AtS0QWcDSDgWKJXY+MXS9qY4+JA2+Vho+YPp
FzSjiTIEWslDQ1rDhPOY2sXVOgeb2kBbu1AAADv/
}
image create photo ::htmlview::nogifsm -data {
R0lGODdhEAAQAPEAAACQkADQ0PgAAAAAACwAAAAAEAAQAAACNISPacHtD4IQz80QJ60as25d
<span class=3D"hljs-number">3</span>idKZdR0IIOm2ta0Lhw/Lz2S1JqvK8ozbTKlEIVY=
ceWSjwIAO///
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::htmlv=
iew::htmlView</span> {Title htmlFile} {
    <span class=3D"hljs-keyword">global</span> topHtml wHtml frHtml frHtmlH=
sb
    <span class=3D"hljs-keyword">if</span> {[winfo exists .top_html]} then =
{
	wm deiconify .top_html
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">set</span> topHtml [toplevel .top_html]
    wm title $topHtml $Title
    wm protocol $topHtml WM_DELETE_WINDOW {destroy .top_html}
    focus $topHtml
    <span class=3D"hljs-keyword">set</span> frHtml [frame $topHtml.fr_html]
    <span class=3D"hljs-keyword">set</span> wHtml $frHtml.h
    html $frHtml.h -yscrollcommand {$frHtml.vsb <span class=3D"hljs-keyword=
">set</span>} -xscrollcommand {$frHtmlHsb.hsb <span class=3D"hljs-keyword">=
set</span>} -padx <span class=3D"hljs-number">5</span> -pady <span class=3D=
"hljs-number">9</span> -formcommand FormCmd -imagecommand ImageCmd -scriptc=
ommand ScriptCmd -appletcommand AppletCmd -underlinehyperlinks <span class=
=3D"hljs-number">1</span> -bg white -tablerelief raised
    pack $frHtml.h -side left -fill both -expand <span class=3D"hljs-number=
">1</span>
    scrollbar $frHtml.vsb -orient vertical -command {$wHtml yview}
    pack $frHtml.vsb -side left -fill y
    <span class=3D"hljs-keyword">set</span> frHtmlHsb [frame $topHtml.fr_ht=
ml_hsb]
    frame $frHtmlHsb.sp -width [winfo reqwidth $frHtml.vsb] -bd <span class=
=3D"hljs-number">2</span> -relief raised
    scrollbar $frHtmlHsb.hsb -orient horizontal -command {$wHtml xview}
    pack $frHtml -side top -fill both -expand <span class=3D"hljs-number">1=
</span>
    pack $frHtmlHsb -side top -fill x
    pack $frHtmlHsb.sp -side right -fill y
    pack $frHtmlHsb.hsb -side top -fill x
    bind $wHtml.x &lt;<span class=3D"hljs-number">1</span>&gt; {HrefBinding=
 %x %y}
    bind HtmlClip &lt;Motion&gt; {
	<span class=3D"hljs-keyword">set</span> parent [winfo parent %W]
	<span class=3D"hljs-keyword">set</span> url [$parent href %x %y]
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> length $url] &gt; <span class=3D"hljs-number">0</span>} then {
	    $parent configure -cursor hand2
	} else {
	    $parent configure -cursor {}
	}
    }
    LoadFile $htmlFile
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> pickFon=
t</span> {size attrs} {
    <span class=3D"hljs-keyword">puts</span> <span class=3D"hljs-string">"F=
ontCmd: $size $attrs"</span>
    <span class=3D"hljs-keyword">set</span> a [<span class=3D"hljs-keyword"=
>expr</span> {<span class=3D"hljs-number">-1</span>&lt;[<span class=3D"hljs=
-keyword">lsearch</span> $attrs fixed]?{courier}:{charter}}]
    <span class=3D"hljs-keyword">set</span> b [<span class=3D"hljs-keyword"=
>expr</span> {<span class=3D"hljs-number">-1</span>&lt;[<span class=3D"hljs=
-keyword">lsearch</span> $attrs italic]?{italic}:{roman}}]
    <span class=3D"hljs-keyword">set</span> c [<span class=3D"hljs-keyword"=
>expr</span> {<span class=3D"hljs-number">-1</span>&lt;[<span class=3D"hljs=
-keyword">lsearch</span> $attrs bold]?{bold}:{normal}}]
    <span class=3D"hljs-keyword">set</span> d [<span class=3D"hljs-keyword"=
>expr</span> {int(<span class=3D"hljs-number">12</span>*pow(<span class=3D"=
hljs-number">1.2</span>,$size-<span class=3D"hljs-number">4</span>))}]
    <span class=3D"hljs-keyword">list</span> $a $d $b $c
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> FormCmd=
</span> {n cmd args} {
<span class=3D"hljs-comment">    #dbgShowInfo "FormCmd: $n $cmd $args"</spa=
n>
    <span class=3D"hljs-keyword">switch</span> $cmd {
    select -
    textarea -
    input {
	    <span class=3D"hljs-keyword">set</span> w [<span class=3D"hljs-keyword=
">lindex</span> $args <span class=3D"hljs-number">0</span>]
	    label $w -image nogifsm
	}
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ImageCm=
d</span> {args} {
    <span class=3D"hljs-keyword">global</span> OldImages Images
    <span class=3D"hljs-keyword">set</span> fn [<span class=3D"hljs-keyword=
">lindex</span> $args <span class=3D"hljs-number">0</span>]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists OldImages($fn)]} then {
	<span class=3D"hljs-keyword">set</span> Images($fn) $OldImages($fn)
	<span class=3D"hljs-keyword">unset</span> OldImages($fn)
	<span class=3D"hljs-keyword">return</span> $Images($fn)
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">c=
atch</span> {image create photo -<span class=3D"hljs-keyword">file</span> $=
fn} img]} then {
	<span class=3D"hljs-keyword">return</span> smgray
    }
    <span class=3D"hljs-keyword">if</span> {[image width $img]*[image heigh=
t $img]&gt;<span class=3D"hljs-number">20000</span>} then {
	<span class=3D"hljs-keyword">global</span> BigImages
	<span class=3D"hljs-keyword">set</span> b [image create photo -width [imag=
e width $img] -height [image height $img]]
	<span class=3D"hljs-keyword">set</span> BigImages($b) $img
	<span class=3D"hljs-keyword">set</span> img $b
	<span class=3D"hljs-keyword">after</span> idle <span class=3D"hljs-string"=
>"MoveBigImage $b"</span>
    }
    <span class=3D"hljs-keyword">set</span> Images($fn) $img
    <span class=3D"hljs-keyword">return</span> $img
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> MoveBig=
Image</span> {b} {
    <span class=3D"hljs-keyword">global</span> BigImages
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists BigImages($b)]} then {
	<span class=3D"hljs-keyword">return</span>
    }
    $b copy $BigImages($b)
    image delete $BigImages($b)
    <span class=3D"hljs-keyword">unset</span> BigImages($b)
    <span class=3D"hljs-keyword">update</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ScriptC=
md</span> {args} {
<span class=3D"hljs-comment">    #dbgShowInfo "ScriptCmd: $args"</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> AppletC=
md</span> {w arglist} {
<span class=3D"hljs-comment">    #dbgShowInfo "AppletCmd: w=3D$w arglist=3D=
$arglist"</span>
    label $w -text <span class=3D"hljs-string">"The Applet $w"</span> -bd <=
span class=3D"hljs-number">2</span> -relief raised
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> HrefBin=
ding</span> {x y} {
    <span class=3D"hljs-keyword">global</span> wHtml
    <span class=3D"hljs-keyword">global</span> LastFile
    <span class=3D"hljs-keyword">set</span> NewHref [$wHtml href $x $y]
<span class=3D"hljs-comment">    #dbgShowInfo "New HRef: $NewHref"</span>
    <span class=3D"hljs-keyword">if</span> {$NewHref !=3D <span class=3D"hl=
js-string">""</span>} then {
	<span class=3D"hljs-keyword">set</span> pattern ${LastFile}#
<span class=3D"hljs-comment">	#dbgShowVar "File pattern: $pattern"</span>
	<span class=3D"hljs-keyword">set</span> len [<span class=3D"hljs-keyword">=
string</span> length $pattern]
	<span class=3D"hljs-keyword">incr</span> len <span class=3D"hljs-number">-=
1</span>
<span class=3D"hljs-comment">	#dbgShowVar [string range $NewHref 0 $len]</s=
pan>
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> range $NewHref <span class=3D"hljs-number">0</span> $len]=3D=3D$p=
attern} then {
	    <span class=3D"hljs-keyword">incr</span> len
	    $wHtml yview [<span class=3D"hljs-keyword">string</span> range $NewHre=
f $len end]
	} else {
	    LoadFile $NewHref
	}
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ReadFil=
e</span> {<span class=3D"hljs-keyword">filename</span>} {
    <span class=3D"hljs-keyword">global</span> topHtml
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">c=
atch</span> {<span class=3D"hljs-keyword">open</span> $filename r} fp]} the=
n {
	tk_messageBox -icon <span class=3D"hljs-keyword">error</span> -message $fp=
 -type ok
	focus $topHtml
	<span class=3D"hljs-keyword">return</span> {}
    } else {
	<span class=3D"hljs-keyword">fconfigure</span> $fp -translation <span clas=
s=3D"hljs-keyword">binary</span>
	<span class=3D"hljs-keyword">set</span> r [<span class=3D"hljs-keyword">re=
ad</span> $fp [<span class=3D"hljs-keyword">file</span> size $filename]]
	<span class=3D"hljs-keyword">close</span> $fp
	<span class=3D"hljs-keyword">return</span> $r
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> LoadFil=
e</span> {<span class=3D"hljs-keyword">filename</span>} {
    <span class=3D"hljs-keyword">global</span> wHtml
    <span class=3D"hljs-keyword">global</span> LastFile
    <span class=3D"hljs-keyword">set</span> html [ReadFile $filename]
    <span class=3D"hljs-keyword">if</span> {$html=3D=3D<span class=3D"hljs-=
string">""</span>} then <span class=3D"hljs-keyword">return</span>
    <span class=3D"hljs-keyword">set</span> LastFile $filename
    Clear
    $wHtml config -base $filename
    $wHtml parse $html
    ClearOldImages
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> Refresh=
</span> {args} {
    <span class=3D"hljs-keyword">global</span> LastFile
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists LastFile]} then <span class=3D"hljs-keyword">return</spa=
n>
    LoadFile $LastFile
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> Clear</=
span> {} {
    <span class=3D"hljs-keyword">global</span> wHtml
    <span class=3D"hljs-keyword">global</span> Images OldImages hotkey
    <span class=3D"hljs-keyword">if</span> {[winfo exists .fs.h]} then {
	<span class=3D"hljs-keyword">set</span> w .fs.h
    } else {
	<span class=3D"hljs-keyword">set</span> w $wHtml
    }
    $w clear
    <span class=3D"hljs-keyword">catch</span> {<span class=3D"hljs-keyword"=
>unset</span> hotkey}
    ClearBigImages
    ClearOldImages
    <span class=3D"hljs-keyword">foreach</span> fn [<span class=3D"hljs-key=
word">array</span> names Images] {
	<span class=3D"hljs-keyword">set</span> OldImages($fn) $Images($fn)
    }
    <span class=3D"hljs-keyword">catch</span> {<span class=3D"hljs-keyword"=
>unset</span> Images}
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ClearOl=
dImages</span> {} {
    <span class=3D"hljs-keyword">global</span> OldImages
    <span class=3D"hljs-keyword">foreach</span> fn [<span class=3D"hljs-key=
word">array</span> names OldImages] {
	image delete $OldImages($fn)
    }
    <span class=3D"hljs-keyword">catch</span> {<span class=3D"hljs-keyword"=
>unset</span> OldImages}
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ClearBi=
gImages</span> {} {
    <span class=3D"hljs-keyword">global</span> BigImages
    <span class=3D"hljs-keyword">foreach</span> b [<span class=3D"hljs-keyw=
ord">array</span> names BigImages] {
	image delete $BigImages($b)
    }
    <span class=3D"hljs-keyword">catch</span> {<span class=3D"hljs-keyword"=
>unset</span> BigImages}
}
<span class=3D"hljs-keyword">package</span> provide libtcl
<span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keyword">=
eval</span> ::libtcl {
    <span class=3D"hljs-keyword">namespace</span> export parseOptions
    <span class=3D"hljs-keyword">namespace</span> export randomInit randomR=
ange
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::libtc=
l::parseOptions</span> {w specs argList} {
    <span class=3D"hljs-keyword">upvar</span> #<span class=3D"hljs-number">=
0</span> $w data
    <span class=3D"hljs-keyword">foreach</span> spec $specs {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">llen=
gth</span> $spec] !=3D <span class=3D"hljs-number">2</span>} then {
	    <span class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">=
"\"spec\" should contain 2 elements"</span>
	}
	<span class=3D"hljs-keyword">set</span> cmdsw [<span class=3D"hljs-keyword=
">lindex</span> $spec <span class=3D"hljs-number">0</span>]
	<span class=3D"hljs-keyword">set</span> cmd($cmdsw) <span class=3D"hljs-st=
ring">""</span>
	<span class=3D"hljs-keyword">set</span> def($cmdsw) [<span class=3D"hljs-k=
eyword">lindex</span> $spec <span class=3D"hljs-number">1</span>]
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">l=
length</span> $argList] &amp; <span class=3D"hljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> cmdsw [<span class=3D"hljs-keyword=
">lindex</span> $argList end]
	<span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">inf=
o</span> exists cmd($cmdsw)]} then {
	    <span class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">=
"bad option \"$cmdsw\": must be [listValidOptions cmd]"</span>
	}
	<span class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">"val=
ue for \"$cmdsw\" missing"</span>
    }
    <span class=3D"hljs-keyword">foreach</span> cmdsw [<span class=3D"hljs-=
keyword">array</span> names cmd] {
	<span class=3D"hljs-keyword">set</span> data($cmdsw) $def($cmdsw)
    }
    <span class=3D"hljs-keyword">foreach</span> {cmdsw value} $argList {
	<span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">inf=
o</span> exists cmd($cmdsw)]} then {
	    <span class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">=
"bad option \"$cmdsw\": must be [listValidOptions cmd]"</span>
	}
	<span class=3D"hljs-keyword">set</span> data($cmdsw) $value
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::libtc=
l::listValidOptions</span> {v} {
    <span class=3D"hljs-keyword">upvar</span> $v cmd
    <span class=3D"hljs-keyword">set</span> len [<span class=3D"hljs-keywor=
d">llength</span> [<span class=3D"hljs-keyword">array</span> names cmd]]
    <span class=3D"hljs-keyword">set</span> i <span class=3D"hljs-number">1=
</span>
    <span class=3D"hljs-keyword">set</span> separator <span class=3D"hljs-s=
tring">""</span>
    <span class=3D"hljs-keyword">set</span> errormsg <span class=3D"hljs-st=
ring">""</span>
    <span class=3D"hljs-keyword">foreach</span> cmdsw [<span class=3D"hljs-=
keyword">lsort</span> [<span class=3D"hljs-keyword">array</span> names cmd]=
] {
	<span class=3D"hljs-keyword">append</span> errormsg <span class=3D"hljs-st=
ring">"$separator$cmdsw"</span>
	<span class=3D"hljs-keyword">incr</span> i
	<span class=3D"hljs-keyword">if</span> {$i =3D=3D $len} then {
	    <span class=3D"hljs-keyword">set</span> separator <span class=3D"hljs-=
string">", or "</span>
	} else {
	    <span class=3D"hljs-keyword">set</span> separator <span class=3D"hljs-=
string">", "</span>
	}
    }
    <span class=3D"hljs-keyword">return</span> $errormsg
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::libtc=
l::randomInit</span> {seed} {
    <span class=3D"hljs-keyword">global</span> rand
    <span class=3D"hljs-keyword">set</span> rand(ia) <span class=3D"hljs-nu=
mber">9301</span>
    <span class=3D"hljs-keyword">set</span> rand(ic) <span class=3D"hljs-nu=
mber">49297</span>
    <span class=3D"hljs-keyword">set</span> rand(im) <span class=3D"hljs-nu=
mber">233280</span>
    <span class=3D"hljs-keyword">set</span> rand(seed) $seed
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::libtc=
l::randomCompute</span> {} {
    <span class=3D"hljs-keyword">global</span> rand
    <span class=3D"hljs-keyword">set</span> rand(seed) [<span class=3D"hljs=
-keyword">expr</span> ($rand(seed)*$rand(ia) + $rand(ic)) % $rand(im)]
    <span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keyword=
">expr</span> $rand(seed)/double($rand(im))]
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::libtc=
l::randomRange</span> {range} {
    <span class=3D"hljs-keyword">expr</span> int([random]*$range)
}
<span class=3D"hljs-keyword">package</span> provide libtk
<span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keyword">=
eval</span> ::libtk {
    <span class=3D"hljs-keyword">namespace</span> export setDefaultFonts
    <span class=3D"hljs-keyword">namespace</span> export setSystemFonts
    <span class=3D"hljs-keyword">namespace</span> export labelEntry
    <span class=3D"hljs-keyword">namespace</span> export labelRadio
    <span class=3D"hljs-keyword">namespace</span> export labelVal
    <span class=3D"hljs-keyword">namespace</span> export labelReg
    <span class=3D"hljs-keyword">namespace</span> export labelBitReg
    <span class=3D"hljs-keyword">namespace</span> export textScroll
    <span class=3D"hljs-keyword">namespace</span> export wwwBrowser
    <span class=3D"hljs-keyword">namespace</span> export atmelBlue
    <span class=3D"hljs-keyword">namespace</span> export iPadx
    <span class=3D"hljs-keyword">namespace</span> export iPady
}
<span class=3D"hljs-keyword">set</span> ::libtk::atmelBlue #<span class=3D"=
hljs-number">0075</span>BA
<span class=3D"hljs-keyword">set</span> ::libtk::Padx <span class=3D"hljs-n=
umber">10</span>
<span class=3D"hljs-keyword">set</span> ::libtk::Pady <span class=3D"hljs-n=
umber">2</span>
<span class=3D"hljs-keyword">global</span> ::libtk::atmelBlue
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::libtk=
::setSystemFonts</span> {} {
    <span class=3D"hljs-keyword">set</span> FontSize {<span class=3D"hljs-n=
umber">6</span> <span class=3D"hljs-number">7</span> <span class=3D"hljs-nu=
mber">8</span> <span class=3D"hljs-number">9</span> <span class=3D"hljs-num=
ber">10</span> <span class=3D"hljs-number">12</span> <span class=3D"hljs-nu=
mber">14</span> <span class=3D"hljs-number">16</span> <span class=3D"hljs-n=
umber">18</span> <span class=3D"hljs-number">20</span> <span class=3D"hljs-=
number">24</span> <span class=3D"hljs-number">28</span> <span class=3D"hljs=
-number">32</span> <span class=3D"hljs-number">36</span>}
    <span class=3D"hljs-keyword">set</span> DefaultSize <span class=3D"hljs=
-number">10</span>
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">l=
search</span> [font names] <span class=3D"hljs-string">"defaultFont"</span>=
] =3D=3D <span class=3D"hljs-number">-1</span>} then {
	font create defaultFont -family courier -size $DefaultSize
	font create defaultFontb -family courier -size $DefaultSize -weight bold
	font create defaultFonti -family courier -size $DefaultSize -slant italic
	font create defaultFontu -family courier -size $DefaultSize -underline tru=
e
	font create defaultFonto -family courier -size $DefaultSize -overstrike tr=
ue
	<span class=3D"hljs-keyword">foreach</span> Size $FontSize {
	    font create defaultFont$Size -family courier -size $Size
	    font create defaultFont${Size}b -family courier -size $Size -weight bo=
ld
	    font create defaultFont${Size}i -family courier -size $Size -slant ita=
lic
	    font create defaultFont${Size}u -family courier -size $Size -underline=
 true
	    font create defaultFont${Size}o -family courier -size $Size -overstrik=
e true
	}
    }
    <span class=3D"hljs-keyword">if</span> {$::tcl_platform(platform) =3D=
=3D <span class=3D"hljs-string">"unix"</span>} then {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">lsea=
rch</span> -exact [font families] helvetica] !=3D <span class=3D"hljs-numbe=
r">-1</span>} then {
	    setDefaultFonts helvetica
	} else {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
lsearch</span> -exact [font families] lucidatypewriter] !=3D <span class=3D=
"hljs-number">-1</span>} then {
		setDefaultFonts lucidatypewriter
	    }
	}
    }
    <span class=3D"hljs-keyword">if</span> {$::tcl_platform(platform) =3D=
=3D <span class=3D"hljs-string">"windows"</span>} then {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">lsea=
rch</span> -exact [font families] Arial] !=3D <span class=3D"hljs-number">-=
1</span>} then {
	    setDefaultFonts Arial
	}
    }
    option add *Font defaultFont
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::libtk=
::setDefaultFonts</span> {Font} {
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">l=
search</span> [font names] <span class=3D"hljs-string">"defaultFont"</span>=
] =3D=3D <span class=3D"hljs-number">-1</span>} then {
	setSystemFonts
    }
    <span class=3D"hljs-keyword">set</span> FontList [font names]
    <span class=3D"hljs-keyword">foreach</span> Fontname $FontList {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> match <span class=3D"hljs-string">"defaultFont*"</span> $Fontname=
] =3D=3D <span class=3D"hljs-number">1</span>} then {
	    font configure $Fontname -family $Font
	}
    }
    option add *Font defaultFont
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::libtk=
::labelEntry</span> {Fr Label Width Command args} {
    frame $Fr
    label $Fr.label -text $Label -width $Width -anchor w
    <span class=3D"hljs-keyword">eval</span> {entry $Fr.entry -relief sunke=
n} $args
    pack $Fr.label -side left
    pack $Fr.entry -side right -fill x -expand true
    bind $Fr.entry &lt;Return&gt; $Command
    <span class=3D"hljs-keyword">return</span> $Fr.entry
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::libtk=
::labelRadio</span> {Fr List Var args} {
    frame $Fr
    <span class=3D"hljs-keyword">set</span> i <span class=3D"hljs-number">0=
</span>
    <span class=3D"hljs-keyword">foreach</span> SubList $List {
	<span class=3D"hljs-keyword">set</span> Label [<span class=3D"hljs-keyword=
">lindex</span> $SubList <span class=3D"hljs-number">0</span>]
	<span class=3D"hljs-keyword">set</span> Value [<span class=3D"hljs-keyword=
">lindex</span> $SubList <span class=3D"hljs-number">1</span>]
	<span class=3D"hljs-keyword">eval</span> {radiobutton $Fr.b$i -text $Label=
 \
            -<span class=3D"hljs-keyword">variable</span> $Var -value $Valu=
e} $args
	pack $Fr.b$i -side top -anchor w -fill y -expand true
	<span class=3D"hljs-keyword">incr</span> i
    }
    <span class=3D"hljs-keyword">return</span> $Fr
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::libtk=
::labelVal</span> {Fr Name Width Value Fmt} {
    <span class=3D"hljs-keyword">if</span> {[winfo exists $Fr] =3D=3D <span=
 class=3D"hljs-number">0</span>} then {
	frame $Fr
	<span class=3D"hljs-keyword">set</span> LaName [label $Fr.name -text $Name=
 -width $Width -anchor w]
	<span class=3D"hljs-keyword">set</span> LaValue [label $Fr.value -text [<s=
pan class=3D"hljs-keyword">format</span> $Fmt $Value] -anchor w -relief sun=
ken]
	pack $LaName -side left
	pack $LaValue -side left -fill x -expand true
    } else {
	$Fr.name configure -text $Name -width $Width
	$Fr.value configure -text [<span class=3D"hljs-keyword">format</span> $Fmt=
 $Value]
    }
    <span class=3D"hljs-keyword">return</span> $Fr
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::libtk=
::labelReg</span> {Fr Name Width Val NbDigit} {
    <span class=3D"hljs-keyword">if</span> {[winfo exists $Fr] =3D=3D <span=
 class=3D"hljs-number">0</span>} then {
	frame $Fr
	<span class=3D"hljs-keyword">set</span> LaName [label $Fr.name -text $Name=
 -width $Width -anchor w]
	<span class=3D"hljs-keyword">set</span> LaValue [label $Fr.value -text [<s=
pan class=3D"hljs-keyword">format</span> %#<span class=3D"hljs-number">0</s=
pan>${NbDigit}x $Val] -anchor w -relief sunken]
	pack $LaName -side left
	pack $LaValue -side left -fill x -expand true
    } else {
	$Fr.name configure -text $Name -width $Width
	$Fr.value configure -text [<span class=3D"hljs-keyword">format</span> %#<s=
pan class=3D"hljs-number">0</span>${NbDigit}X $Val]
    }
    <span class=3D"hljs-keyword">return</span> $Fr
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::libtk=
::labelBitReg</span> {Fr Name Width BitList} {
    <span class=3D"hljs-keyword">set</span> BitNameFontSize [<span class=3D=
"hljs-keyword">expr</span> [font actual defaultFont -size] - <span class=3D=
"hljs-number">2</span>]
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">l=
length</span> $BitList] &gt; <span class=3D"hljs-number">8</span>} then {
	<span class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">"Mor=
e than 8 bits in the bit list argument of labelBitReg"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[winfo exists $Fr] =3D=3D <span=
 class=3D"hljs-number">0</span>} then {
	<span class=3D"hljs-keyword">set</span> FrTop [frame $Fr]
	<span class=3D"hljs-keyword">set</span> LaReg [label $FrTop.la_name -text =
$Name -anchor w]
	<span class=3D"hljs-keyword">set</span> FrBits [frame $FrTop.bits]
	<span class=3D"hljs-keyword">set</span> i <span class=3D"hljs-number">0</s=
pan>
	<span class=3D"hljs-keyword">foreach</span> Bit $BitList {
	    frame $FrBits.bit$i
	    label $FrBits.bit$i.name -text [<span class=3D"hljs-keyword">lindex</s=
pan> $Bit <span class=3D"hljs-number">0</span>] -width $Width -font default=
Font$BitNameFontSize
	    label $FrBits.bit$i.val -text [<span class=3D"hljs-keyword">lindex</sp=
an> $Bit <span class=3D"hljs-number">1</span>] -relief sunken -font default=
Font$BitNameFontSize
	    pack $FrBits.bit$i.name $FrBits.bit$i.val -fill x
	    pack $FrBits.bit$i -side left -fill x
	    <span class=3D"hljs-keyword">incr</span> i
	}
	pack $LaReg $FrBits -ipadx <span class=3D"hljs-number">5</span> -side left
	pack $FrTop
    } else {
	<span class=3D"hljs-keyword">set</span> i <span class=3D"hljs-number">0</s=
pan>
	<span class=3D"hljs-keyword">foreach</span> Bit $BitList {
	    $Fr.bits.bit$i.name configure -text [<span class=3D"hljs-keyword">lind=
ex</span> $Bit <span class=3D"hljs-number">0</span>] -width $Width -font de=
faultFont$BitNameFontSize
	    $Fr.bits.bit$i.val configure -text [<span class=3D"hljs-keyword">linde=
x</span> $Bit <span class=3D"hljs-number">1</span>] -font defaultFont$BitNa=
meFontSize
	    <span class=3D"hljs-keyword">incr</span> i
	}
    }
    <span class=3D"hljs-keyword">return</span> $Fr
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::libtk=
::textScroll</span> {Fr args} {
    frame $Fr
    <span class=3D"hljs-keyword">eval</span> {text $Fr.text \
        -setgrid true -wrap word \
        -xscrollcommand [<span class=3D"hljs-keyword">list</span> $Fr.xscro=
ll <span class=3D"hljs-keyword">set</span>] \
        -yscrollcommand [<span class=3D"hljs-keyword">list</span> $Fr.yscro=
ll <span class=3D"hljs-keyword">set</span>]} $args
    scrollbar $Fr.xscroll -orient horizontal -command [<span class=3D"hljs-=
keyword">list</span> $Fr.text xview]
    scrollbar $Fr.yscroll -orient vertical -command [<span class=3D"hljs-ke=
yword">list</span> $Fr.text yview]
    pack $Fr.xscroll -side bottom -fill x
    pack $Fr.yscroll -side right -fill y
    pack $Fr.text -side left -fill both -expand true
    pack $Fr -side top -fill both -expand true
    <span class=3D"hljs-keyword">return</span> $Fr.text
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::libtk=
::wwwBrowser</span> {url} {
    <span class=3D"hljs-keyword">global</span> env
    <span class=3D"hljs-keyword">set</span> BrowserFound <span class=3D"hlj=
s-number">0</span>
    <span class=3D"hljs-keyword">if</span> {$::tcl_platform(platform) =3D=
=3D <span class=3D"hljs-string">"windows"</span>} then {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">file=
</span> exists $env(COMSPEC)]} then {
	    <span class=3D"hljs-keyword">if</span> {! [<span class=3D"hljs-keyword=
">catch</span> {<span class=3D"hljs-keyword">exec</span> $env(COMSPEC) /c s=
tart netscape <span class=3D"hljs-keyword">http</span>://$url &amp;} result=
]} then {
		<span class=3D"hljs-keyword">set</span> BrowserFound <span class=3D"hljs-=
number">1</span>
	    } elseif {! [<span class=3D"hljs-keyword">catch</span> {<span class=3D=
"hljs-keyword">exec</span> $env(COMSPEC) /c start iexplore <span class=3D"h=
ljs-keyword">http</span>://$url &amp;} result]} {
		<span class=3D"hljs-keyword">set</span> BrowserFound <span class=3D"hljs-=
number">1</span>
	    }
	}
    } elseif {$::tcl_platform(platform) =3D=3D <span class=3D"hljs-string">=
"unix"</span>} {
	<span class=3D"hljs-keyword">if</span> {! [<span class=3D"hljs-keyword">ca=
tch</span> {<span class=3D"hljs-keyword">exec</span> netscape <span class=
=3D"hljs-keyword">http</span>://$url &amp;} result]} then {
	    <span class=3D"hljs-keyword">set</span> BrowserFound <span class=3D"hl=
js-number">1</span>
	}
    }
    <span class=3D"hljs-keyword">if</span> {! $BrowserFound} then {
	<span class=3D"hljs-keyword">if</span> {$::tcl_platform(platform) =3D=3D <=
span class=3D"hljs-string">"unix"</span>} then {
	    tk_messageBox -title <span class=3D"hljs-string">"Error"</span> -messa=
ge <span class=3D"hljs-string">"Cannot find Netscape."</span> -icon <span c=
lass=3D"hljs-keyword">error</span>
	} else {
	    tk_messageBox -title <span class=3D"hljs-string">"Error"</span> -messa=
ge <span class=3D"hljs-string">"Cannot find Netscape nor iExplorer."</span>=
 -icon <span class=3D"hljs-keyword">error</span>
	}
    }
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">package</span> ifneeded sio <span class=3D"hlj=
s-number">1.0</span> [<span class=3D"hljs-keyword">list</span> <span class=
=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword">file</span> <=
span class=3D"hljs-keyword">join</span> $dir SIO.TCL]]
<span class=3D"hljs-keyword">package</span> ifneeded splash <span class=3D"=
hljs-number">1.0</span> [<span class=3D"hljs-keyword">list</span> <span cla=
ss=3D"hljs-keyword">source</span> [<span class=3D"hljs-keyword">file</span>=
 <span class=3D"hljs-keyword">join</span> $dir SPLASH.TCL]]
<span class=3D"hljs-keyword">package</span> require Tk <span class=3D"hljs-=
number">8.0</span>
<span class=3D"hljs-keyword">package</span> provide progressbar <span class=
=3D"hljs-number">1.2</span>
<span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keyword">=
eval</span> ::progressbar {
    <span class=3D"hljs-keyword">namespace</span> export progressbar
    <span class=3D"hljs-keyword">variable</span> widgetOptions
    <span class=3D"hljs-keyword">variable</span> widgetCommands
    <span class=3D"hljs-keyword">variable</span> widgetShapes
    <span class=3D"hljs-keyword">variable</span> widgetGlobals
    <span class=3D"hljs-keyword">set</span> widgetGlobals(debug) <span clas=
s=3D"hljs-number">0</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::progr=
essbar::Init</span> {} {
    <span class=3D"hljs-keyword">variable</span> widgetOptions
    <span class=3D"hljs-keyword">variable</span> widgetCommands
    <span class=3D"hljs-keyword">variable</span> widgetGlobals
    <span class=3D"hljs-keyword">variable</span> widgetShapes
    <span class=3D"hljs-keyword">if</span> {$widgetGlobals(debug)} then {
	<span class=3D"hljs-keyword">puts</span> stderr <span class=3D"hljs-string=
">"pb_Init"</span>
    }
    <span class=3D"hljs-keyword">array</span> <span class=3D"hljs-keyword">=
set</span> widgetOptions [<span class=3D"hljs-keyword">list</span> -backgro=
und {background          Background} -bd -borderwidth -bg -background -bord=
erwidth {borderWidth         BorderWidth} -color {color               Color=
} -pc -percent -percent {percent             Percent} -relief {relief      =
        Relief} -shape {shape               Shape} -<span class=3D"hljs-key=
word">variable</span> {<span class=3D"hljs-keyword">variable</span>        =
    Variable} -width {width               Width}]
    <span class=3D"hljs-keyword">set</span> widgetCommands [<span class=3D"=
hljs-keyword">list</span> cget configure]
    <span class=3D"hljs-keyword">set</span> widgetShapes [<span class=3D"hl=
js-keyword">list</span> <span class=3D"hljs-number">3</span>D <span class=
=3D"hljs-number">3</span>d flat]
    <span class=3D"hljs-keyword">set</span> widgetGlobals(toDraw) {
rect #bdbdbd es0 {[<span class=3D"hljs-keyword">expr</span> $mark +<span cl=
ass=3D"hljs-number">3</span>] <span class=3D"hljs-number">2</span> [<span c=
lass=3D"hljs-keyword">expr</span> $width <span class=3D"hljs-number">-2</sp=
an>] <span class=3D"hljs-number">11</span>} {-outline <span class=3D"hljs-s=
tring">""</span>}
line #<span class=3D"hljs-number">525252</span> es1 {[<span class=3D"hljs-k=
eyword">expr</span> $mark +<span class=3D"hljs-number">1</span>] <span clas=
s=3D"hljs-number">2</span> [<span class=3D"hljs-keyword">expr</span> $mark =
+<span class=3D"hljs-number">1</span>] <span class=3D"hljs-number">11</span=
>} {}
line #<span class=3D"hljs-number">8</span>c8c8c es2 {[<span class=3D"hljs-k=
eyword">expr</span> $mark +<span class=3D"hljs-number">2</span>] <span clas=
s=3D"hljs-number">11</span> [<span class=3D"hljs-keyword">expr</span> $mark=
 +<span class=3D"hljs-number">2</span>] <span class=3D"hljs-number">2</span=
> \
      [<span class=3D"hljs-keyword">expr</span> $width <span class=3D"hljs-=
number">-4</span>] <span class=3D"hljs-number">2</span>} {}
line #<span class=3D"hljs-number">8</span>c8c8c es3 {[<span class=3D"hljs-k=
eyword">expr</span> $mark +<span class=3D"hljs-number">3</span>] <span clas=
s=3D"hljs-number">11</span> [<span class=3D"hljs-keyword">expr</span> $widt=
h <span class=3D"hljs-number">-3</span>] <span class=3D"hljs-number">11</sp=
an> \
      [<span class=3D"hljs-keyword">expr</span> $width <span class=3D"hljs-=
number">-3</span>] <span class=3D"hljs-number">3</span>} {}
line $rgb(0) pb0 {<span class=3D"hljs-number">4</span> <span class=3D"hljs-=
number">11</span> [<span class=3D"hljs-keyword">expr</span> $mark <span cla=
ss=3D"hljs-number">-1</span>] <span class=3D"hljs-number">11</span> [<span =
class=3D"hljs-keyword">expr</span> $mark <span class=3D"hljs-number">-1</sp=
an>] <span class=3D"hljs-number">3</span>} {}
line $rgb(1) pb1 {<span class=3D"hljs-number">3</span> <span class=3D"hljs-=
number">11</span> <span class=3D"hljs-number">3</span> <span class=3D"hljs-=
number">10</span> [<span class=3D"hljs-keyword">expr</span> $mark <span cla=
ss=3D"hljs-number">-2</span>] <span class=3D"hljs-number">10</span> [<span =
class=3D"hljs-keyword">expr</span> $mark <span class=3D"hljs-number">-2</sp=
an>] <span class=3D"hljs-number">2</span> \
      [<span class=3D"hljs-keyword">expr</span> $mark <span class=3D"hljs-n=
umber">-1</span>] <span class=3D"hljs-number">2</span> <span class=3D"hljs-=
number">4</span> <span class=3D"hljs-number">2</span>} {}
line $rgb(2) pb2 {<span class=3D"hljs-number">3</span> <span class=3D"hljs-=
number">2</span> <span class=3D"hljs-number">2</span> <span class=3D"hljs-n=
umber">2</span> <span class=3D"hljs-number">2</span> <span class=3D"hljs-nu=
mber">11</span> <span class=3D"hljs-number">2</span> <span class=3D"hljs-nu=
mber">10</span> <span class=3D"hljs-number">3</span> <span class=3D"hljs-nu=
mber">10</span> <span class=3D"hljs-number">3</span> <span class=3D"hljs-nu=
mber">9</span> [<span class=3D"hljs-keyword">expr</span> $mark <span class=
=3D"hljs-number">-3</span>] <span class=3D"hljs-number">9</span> \
      [<span class=3D"hljs-keyword">expr</span> $mark <span class=3D"hljs-n=
umber">-3</span>] <span class=3D"hljs-number">3</span> [<span class=3D"hljs=
-keyword">expr</span> $mark <span class=3D"hljs-number">-2</span>] <span cl=
ass=3D"hljs-number">3</span> <span class=3D"hljs-number">4</span> <span cla=
ss=3D"hljs-number">3</span>} {}
line $rgb(3) pb3 {<span class=3D"hljs-number">3</span> <span class=3D"hljs-=
number">3</span> <span class=3D"hljs-number">3</span> <span class=3D"hljs-n=
umber">9</span> <span class=3D"hljs-number">3</span> <span class=3D"hljs-nu=
mber">8</span> [<span class=3D"hljs-keyword">expr</span> $mark <span class=
=3D"hljs-number">-3</span>] <span class=3D"hljs-number">8</span> [<span cla=
ss=3D"hljs-keyword">expr</span> $mark <span class=3D"hljs-number">-3</span>=
] <span class=3D"hljs-number">4</span> <span class=3D"hljs-number">4</span>=
 <span class=3D"hljs-number">4</span>} {}
line $rgb(4) pb4 {<span class=3D"hljs-number">3</span> <span class=3D"hljs-=
number">4</span> <span class=3D"hljs-number">3</span> <span class=3D"hljs-n=
umber">8</span> <span class=3D"hljs-number">3</span> <span class=3D"hljs-nu=
mber">7</span> [<span class=3D"hljs-keyword">expr</span> $mark <span class=
=3D"hljs-number">-3</span>] <span class=3D"hljs-number">7</span> [<span cla=
ss=3D"hljs-keyword">expr</span> $mark <span class=3D"hljs-number">-3</span>=
] <span class=3D"hljs-number">5</span> <span class=3D"hljs-number">4</span>=
 <span class=3D"hljs-number">5</span>} {}
line $rgb(5) pb5 {<span class=3D"hljs-number">3</span> <span class=3D"hljs-=
number">5</span> <span class=3D"hljs-number">3</span> <span class=3D"hljs-n=
umber">7</span> <span class=3D"hljs-number">3</span> <span class=3D"hljs-nu=
mber">6</span> [<span class=3D"hljs-keyword">expr</span> $mark <span class=
=3D"hljs-number">-3</span>] <span class=3D"hljs-number">6</span>} {}
line #<span class=3D"hljs-number">000000</span> mrk {$mark <span class=3D"h=
ljs-number">1</span> $mark <span class=3D"hljs-number">12</span>} {}
line #adadad fr0 {<span class=3D"hljs-number">0</span> <span class=3D"hljs-=
number">12</span> <span class=3D"hljs-number">0</span> <span class=3D"hljs-=
number">0</span> [<span class=3D"hljs-keyword">expr</span> $width <span cla=
ss=3D"hljs-number">-1</span>] <span class=3D"hljs-number">0</span>} {}
line #ffffff fr1 {<span class=3D"hljs-number">1</span> <span class=3D"hljs-=
number">13</span> [<span class=3D"hljs-keyword">expr</span> $width <span cl=
ass=3D"hljs-number">-1</span>] <span class=3D"hljs-number">13</span> [<span=
 class=3D"hljs-keyword">expr</span> $width <span class=3D"hljs-number">-1</=
span>] <span class=3D"hljs-number">1</span>} {}
line #<span class=3D"hljs-number">000000</span> fr2 {<span class=3D"hljs-nu=
mber">1</span> <span class=3D"hljs-number">1</span> [<span class=3D"hljs-ke=
yword">expr</span> $width <span class=3D"hljs-number">-2</span>] <span clas=
s=3D"hljs-number">1</span> [<span class=3D"hljs-keyword">expr</span> $width=
 <span class=3D"hljs-number">-2</span>] <span class=3D"hljs-number">12</spa=
n> <span class=3D"hljs-number">1</span> <span class=3D"hljs-number">12</spa=
n> <span class=3D"hljs-number">1</span> <span class=3D"hljs-number">1</span=
>} {}
}
    <span class=3D"hljs-keyword">set</span> widgetGlobals(@blue0) {#<span c=
lass=3D"hljs-number">000052</span> #<span class=3D"hljs-number">0031</span>=
ce #<span class=3D"hljs-number">3163</span>ff #<span class=3D"hljs-number">=
639</span>cff #<span class=3D"hljs-number">9</span>cceff #efefef}
    <span class=3D"hljs-keyword">set</span> widgetGlobals(@blue1) {#<span c=
lass=3D"hljs-number">000021</span> #<span class=3D"hljs-number">00639</span=
>c #<span class=3D"hljs-number">009</span>cce #<span class=3D"hljs-number">=
00</span>ceff #<span class=3D"hljs-number">63</span>ffff #ceffff}
    <span class=3D"hljs-keyword">set</span> widgetGlobals(@blue2) {#<span c=
lass=3D"hljs-number">000052</span> #<span class=3D"hljs-number">31319</span=
>c #<span class=3D"hljs-number">6363</span>ce #<span class=3D"hljs-number">=
9</span>c9cff #ceceff #efefef}
    <span class=3D"hljs-keyword">set</span> widgetGlobals(@blue3) {#<span c=
lass=3D"hljs-number">21214</span>a #<span class=3D"hljs-number">52527</span=
>b #<span class=3D"hljs-number">63639</span>c #<span class=3D"hljs-number">=
8484</span>bd #b5b5ef #ceceff}
    <span class=3D"hljs-keyword">set</span> widgetGlobals(@blue4) {#<span c=
lass=3D"hljs-number">29396</span>b #<span class=3D"hljs-number">4</span>a6b=
9c #<span class=3D"hljs-number">6384</span>b5 #<span class=3D"hljs-number">=
739</span>cd6 #<span class=3D"hljs-number">94</span>b5ef #adceff}
    <span class=3D"hljs-keyword">set</span> widgetGlobals(@green0) {#<span =
class=3D"hljs-number">003131</span> #<span class=3D"hljs-number">08736</spa=
n>b #<span class=3D"hljs-number">318</span>c94 #<span class=3D"hljs-number"=
>5</span>abdad #<span class=3D"hljs-number">63</span>dece #ceffef}
    <span class=3D"hljs-keyword">set</span> widgetGlobals(@green1) {#<span =
class=3D"hljs-number">001000</span> #<span class=3D"hljs-number">003100</sp=
an> #<span class=3D"hljs-number">316331</span> #<span class=3D"hljs-number"=
>639</span>c63 #<span class=3D"hljs-number">9</span>cce9c #ceffce}
    <span class=3D"hljs-keyword">set</span> widgetGlobals(@green2) {#<span =
class=3D"hljs-number">002100</span> #<span class=3D"hljs-number">006331</sp=
an> #<span class=3D"hljs-number">319</span>c63 #<span class=3D"hljs-number"=
>31</span>ce63 #<span class=3D"hljs-number">63</span>ff9c #ceffce}
    <span class=3D"hljs-keyword">set</span> widgetGlobals(@green3) {#<span =
class=3D"hljs-number">003131</span> #<span class=3D"hljs-number">316363</sp=
an> #<span class=3D"hljs-number">427</span>b7b #<span class=3D"hljs-number"=
>639</span>c9c #<span class=3D"hljs-number">9</span>ccece #bdefef}
    <span class=3D"hljs-keyword">set</span> widgetGlobals(@yellow0) {#<span=
 class=3D"hljs-number">101010</span> #<span class=3D"hljs-number">636300</s=
pan> #<span class=3D"hljs-number">9</span>c9c00 #cece00 #ffff00 #ffff9c}
    <span class=3D"hljs-keyword">set</span> widgetGlobals(@yellow1) {#<span=
 class=3D"hljs-number">8</span>c7321 #cead39 #e7c642 #f7de63 #f7de63 #ffffe=
7}
    <span class=3D"hljs-keyword">set</span> widgetGlobals(@red0) {#<span cl=
ass=3D"hljs-number">420000</span> #<span class=3D"hljs-number">9</span>c000=
0 #ce3131 #ff6363 #ff9c9c #ffcece}
    <span class=3D"hljs-keyword">set</span> widgetGlobals(@red1) {#<span cl=
ass=3D"hljs-number">210000</span> #<span class=3D"hljs-number">9</span>c310=
0 #ce6331 #ff9c63 #ffce9c #ffffce}
    <span class=3D"hljs-keyword">set</span> widgetGlobals(@magenta0) {#<spa=
n class=3D"hljs-number">210000</span> #<span class=3D"hljs-number">630063</=
span> #<span class=3D"hljs-number">9</span>c319c #ce63ce #ff9cff #ffceff}
    <span class=3D"hljs-keyword">set</span> widgetGlobals(@brown0) {#<span =
class=3D"hljs-number">210000</span> #<span class=3D"hljs-number">633100</sp=
an> #<span class=3D"hljs-number">9</span>c6331 #ce9c63 #efb573 #ffdeb5}
    <span class=3D"hljs-keyword">set</span> widgetGlobals(@brown1) {#<span =
class=3D"hljs-number">310000</span> #<span class=3D"hljs-number">7</span>b4=
242 #<span class=3D"hljs-number">9</span>c6363 #ce9c9c #efcece #ffdede}
    <span class=3D"hljs-keyword">set</span> widgetGlobals(@gray0) {#<span c=
lass=3D"hljs-number">212121</span> #<span class=3D"hljs-number">525252</spa=
n> #<span class=3D"hljs-number">737373</span> #adadad #cecece #efefef}
    <span class=3D"hljs-keyword">set</span> tmpWidget <span class=3D"hljs-s=
tring">".__tmp__"</span>
    label $tmpWidget
    <span class=3D"hljs-keyword">foreach</span> option [<span class=3D"hljs=
-keyword">list</span> Background Relief] {
	<span class=3D"hljs-keyword">set</span> values [$tmpWidget configure -[<sp=
an class=3D"hljs-keyword">string</span> tolower $option]]
	option add *Progressbar.$option [<span class=3D"hljs-keyword">lindex</span=
> $values <span class=3D"hljs-number">3</span>]
    }
    destroy $tmpWidget
    option add *Progressbar.borderWidth <span class=3D"hljs-number">5</span=
> widgetDefault
    option add *Progressbar.color @blue0 widgetDefault
    option add *Progressbar.percent <span class=3D"hljs-number">0</span> wi=
dgetDefault
    option add *Progressbar.shape <span class=3D"hljs-number">3</span>D wid=
getDefault
    option add *Progressbar.<span class=3D"hljs-keyword">variable</span> {}=
 widgetDefault
    option add *Progressbar.width <span class=3D"hljs-number">180</span> wi=
dgetDefault
    bind Progressbar &lt;Destroy&gt; [<span class=3D"hljs-keyword">list</sp=
an> ::progressbar::DestroyHandler %W]
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::progr=
essbar::progressbar</span> {args} {
    <span class=3D"hljs-keyword">variable</span> widgetOptions
    <span class=3D"hljs-keyword">variable</span> widgetGlobals
    <span class=3D"hljs-keyword">if</span> {$widgetGlobals(debug)} then {
	<span class=3D"hljs-keyword">puts</span> stderr <span class=3D"hljs-string=
">"pb_progressbar '$args'"</span>
    }
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists widgetOptions]} then {
	Init
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">l=
length</span> $args] =3D=3D <span class=3D"hljs-number">0</span>} then {
	<span class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">"wro=
ng # args: should be \"progressbar pathName ?options?\""</span>
    }
    <span class=3D"hljs-keyword">if</span> {[winfo exists [<span class=3D"h=
ljs-keyword">lindex</span> $args <span class=3D"hljs-number">0</span>]]} th=
en {
	<span class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">"win=
dow name \"[lindex $args 0]\" already exists"</span>
    }
    <span class=3D"hljs-keyword">foreach</span> {name value} [<span class=
=3D"hljs-keyword">lrange</span> $args <span class=3D"hljs-number">1</span> =
end] {
	Canonize [<span class=3D"hljs-keyword">lindex</span> $args <span class=3D"=
hljs-number">0</span>] option $name
    }
    <span class=3D"hljs-keyword">set</span> w [<span class=3D"hljs-keyword"=
>eval</span> Build $args]
    <span class=3D"hljs-keyword">return</span> $w
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::progr=
essbar::Build</span> {w args} {
    <span class=3D"hljs-keyword">variable</span> widgetOptions
    <span class=3D"hljs-keyword">variable</span> widgetGlobals
    <span class=3D"hljs-keyword">if</span> {$widgetGlobals(debug)} then {
	<span class=3D"hljs-keyword">puts</span> stderr <span class=3D"hljs-string=
">"pb_Build '$w' '$args'"</span>
    }
    <span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keywo=
rd">eval</span> ::progressbar::$w {
	<span class=3D"hljs-keyword">variable</span> options
	<span class=3D"hljs-keyword">variable</span> widgets
    }
    <span class=3D"hljs-keyword">upvar</span> ::progressbar::${w}::widgets =
widgets
    <span class=3D"hljs-keyword">upvar</span> ::progressbar::${w}::options =
options
    <span class=3D"hljs-keyword">set</span> widgets(this) [frame $w -class =
Progressbar]
    <span class=3D"hljs-keyword">foreach</span> name [<span class=3D"hljs-k=
eyword">array</span> names widgetOptions] {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">llen=
gth</span> $widgetOptions($name)] =3D=3D <span class=3D"hljs-number">1</spa=
n>} then <span class=3D"hljs-keyword">continue</span>
	<span class=3D"hljs-keyword">set</span> optName [<span class=3D"hljs-keywo=
rd">lindex</span> $widgetOptions($name) <span class=3D"hljs-number">0</span=
>]
	<span class=3D"hljs-keyword">set</span> optClass [<span class=3D"hljs-keyw=
ord">lindex</span> $widgetOptions($name) <span class=3D"hljs-number">1</spa=
n>]
	<span class=3D"hljs-keyword">set</span> options($name) [option get $w $opt=
Name $optClass]
	<span class=3D"hljs-keyword">if</span> {$widgetGlobals(debug) &gt; <span c=
lass=3D"hljs-number">1</span>} then {
	    <span class=3D"hljs-keyword">puts</span> stderr <span class=3D"hljs-st=
ring">"pb_Build:Opt '$w' '$optName' '$optClass' '$options($name)'"</span>
	}
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">l=
length</span> $args] &gt; <span class=3D"hljs-number">0</span>} then {
	<span class=3D"hljs-keyword">array</span> <span class=3D"hljs-keyword">set=
</span> options $args
    }
    <span class=3D"hljs-keyword">set</span> widgets(canvas) $w.pb
    <span class=3D"hljs-keyword">set</span> widgets(frame) ::progressbar::$=
{w}::$w
    <span class=3D"hljs-keyword">rename</span> ::$w $widgets(frame)
    <span class=3D"hljs-keyword">proc</span> ::$w {command args} <span clas=
s=3D"hljs-string">"eval ::progressbar::WidgetProc {$w} \$command \$args"</s=
pan>
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">c=
atch</span> <span class=3D"hljs-string">"Configure $widgets(this) [array ge=
t options]"</span> <span class=3D"hljs-keyword">error</span>]} then {
	<span class=3D"hljs-keyword">catch</span> {destroy $w}
    }
    <span class=3D"hljs-keyword">return</span> $w
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::progr=
essbar::WidgetProc</span> {w command args} {
    <span class=3D"hljs-keyword">variable</span> widgetOptions
    <span class=3D"hljs-keyword">variable</span> widgetGlobals
    <span class=3D"hljs-keyword">if</span> {$widgetGlobals(debug)} then {
	<span class=3D"hljs-keyword">puts</span> stderr <span class=3D"hljs-string=
">"pb_WidgetProc '$w' '$command' '$args'"</span>
    }
    <span class=3D"hljs-keyword">upvar</span> ::progressbar::${w}::widgets =
widgets
    <span class=3D"hljs-keyword">upvar</span> ::progressbar::${w}::options =
options
    <span class=3D"hljs-keyword">set</span> command [Canonize $w command $c=
ommand]
    <span class=3D"hljs-keyword">set</span> result <span class=3D"hljs-stri=
ng">""</span>
    <span class=3D"hljs-keyword">catch</span> {<span class=3D"hljs-keyword"=
>unset</span> priorSelection}
    <span class=3D"hljs-keyword">switch</span> $command {
    cget {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
llength</span> $args] !=3D <span class=3D"hljs-number">1</span>} then {
		<span class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">"wr=
ong # args: should be $w cget option"</span>
	    }
	    <span class=3D"hljs-keyword">set</span> opt [Canonize $w option [<span=
 class=3D"hljs-keyword">lindex</span> $args <span class=3D"hljs-number">0</=
span>]]
	    <span class=3D"hljs-keyword">set</span> result $options($opt)
	}
    configure {
	    <span class=3D"hljs-keyword">set</span> result [<span class=3D"hljs-ke=
yword">eval</span> Configure {$w} $args]
	}
    }
    <span class=3D"hljs-keyword">return</span> $result
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::progr=
essbar::HumanizeList</span> {<span class=3D"hljs-keyword">list</span>} {
    <span class=3D"hljs-keyword">variable</span> widgetGlobals
    <span class=3D"hljs-keyword">if</span> {$widgetGlobals(debug)} then {
	<span class=3D"hljs-keyword">puts</span> stderr <span class=3D"hljs-string=
">"pb_HumanizeList $list"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">l=
length</span> $list] =3D=3D <span class=3D"hljs-number">1</span>} then {
	<span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keyword">l=
index</span> $list <span class=3D"hljs-number">0</span>]
    } else {
	<span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">list<=
/span> [<span class=3D"hljs-keyword">lsort</span> $list]
	<span class=3D"hljs-keyword">set</span> secondToLast [<span class=3D"hljs-=
keyword">expr</span> {[<span class=3D"hljs-keyword">llength</span> $list] <=
span class=3D"hljs-number">-2</span>}]
	<span class=3D"hljs-keyword">set</span> most [<span class=3D"hljs-keyword"=
>lrange</span> $list <span class=3D"hljs-number">0</span> $secondToLast]
	<span class=3D"hljs-keyword">set</span> last [<span class=3D"hljs-keyword"=
>lindex</span> $list end]
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-string">"[j=
oin $most {, }] or $last"</span>
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::progr=
essbar::Canonize</span> {w object opt} {
    <span class=3D"hljs-keyword">variable</span> widgetOptions
    <span class=3D"hljs-keyword">variable</span> widgetCommands
    <span class=3D"hljs-keyword">variable</span> widgetGlobals
    <span class=3D"hljs-keyword">variable</span> widgetShapes
    <span class=3D"hljs-keyword">if</span> {$widgetGlobals(debug)} then {
	<span class=3D"hljs-keyword">puts</span> stderr <span class=3D"hljs-string=
">"pb_Canonize '$w' '$object' '$opt'"</span>
    }
    <span class=3D"hljs-keyword">switch</span> $object {
    command {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
lsearch</span> -exact $widgetCommands $opt] &gt;=3D <span class=3D"hljs-num=
ber">0</span>} then {
		<span class=3D"hljs-keyword">return</span> $opt
	    }
	    <span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">l=
ist</span> $widgetCommands
	    <span class=3D"hljs-keyword">foreach</span> element $list {
		<span class=3D"hljs-keyword">set</span> tmp($element) <span class=3D"hljs=
-string">""</span>
	    }
	    <span class=3D"hljs-keyword">set</span> matches [<span class=3D"hljs-k=
eyword">array</span> names tmp ${opt}*]
	}
    option {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
info</span> exists widgetOptions($opt)] &amp;&amp; [<span class=3D"hljs-key=
word">llength</span> $widgetOptions($opt)] =3D=3D <span class=3D"hljs-numbe=
r">3</span>} then {
		<span class=3D"hljs-keyword">return</span> $opt
	    }
	    <span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">l=
ist</span> [<span class=3D"hljs-keyword">array</span> names widgetOptions]
	    <span class=3D"hljs-keyword">set</span> matches [<span class=3D"hljs-k=
eyword">array</span> names widgetOptions ${opt}*]
	}
    shape {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
lsearch</span> -exact $widgetShapes $opt] &gt;=3D <span class=3D"hljs-numbe=
r">0</span>} then {
		<span class=3D"hljs-keyword">return</span> $opt
	    }
	    <span class=3D"hljs-keyword">set</span> <span class=3D"hljs-keyword">l=
ist</span> $widgetShapes
	    <span class=3D"hljs-keyword">foreach</span> element $list {
		<span class=3D"hljs-keyword">set</span> tmp($element) <span class=3D"hljs=
-string">""</span>
	    }
	    <span class=3D"hljs-keyword">set</span> matches [<span class=3D"hljs-k=
eyword">array</span> names tmp ${opt}*]
	}
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">l=
length</span> $matches] =3D=3D <span class=3D"hljs-number">0</span>} then {
	<span class=3D"hljs-keyword">set</span> choices [HumanizeList $list]
	<span class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">"unk=
nown $object \"$opt\"; must be one of $choices"</span>
    } elseif {[<span class=3D"hljs-keyword">llength</span> $matches] =3D=3D=
 <span class=3D"hljs-number">1</span>} {
	<span class=3D"hljs-keyword">set</span> opt [<span class=3D"hljs-keyword">=
lindex</span> $matches <span class=3D"hljs-number">0</span>]
	<span class=3D"hljs-keyword">switch</span> $object {
	option {
		<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">lle=
ngth</span> $widgetOptions($opt)] =3D=3D <span class=3D"hljs-number">1</spa=
n>} then {
		    <span class=3D"hljs-keyword">set</span> opt $widgetOptions($opt)
		}
	    }
	}
	<span class=3D"hljs-keyword">return</span> $opt
    } else {
	<span class=3D"hljs-keyword">set</span> choices [HumanizeList $list]
	<span class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">"amb=
iguous $object \"$opt\"; must be one of $choices"</span>
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::progr=
essbar::RGBs</span> {color} {
    <span class=3D"hljs-keyword">variable</span> widgetGlobals
    <span class=3D"hljs-keyword">if</span> {$widgetGlobals(debug)} then {
	<span class=3D"hljs-keyword">puts</span> stderr <span class=3D"hljs-string=
">"pb_RGB '$color'"</span>
    }
    <span class=3D"hljs-keyword">set</span> color [winfo rgb . $color]
    <span class=3D"hljs-keyword">set</span> R [<span class=3D"hljs-keyword"=
>expr</span> int([<span class=3D"hljs-keyword">lindex</span> $color <span c=
lass=3D"hljs-number">0</span>] / <span class=3D"hljs-number">256</span>)]
    <span class=3D"hljs-keyword">set</span> G [<span class=3D"hljs-keyword"=
>expr</span> int([<span class=3D"hljs-keyword">lindex</span> $color <span c=
lass=3D"hljs-number">1</span>] / <span class=3D"hljs-number">256</span>)]
    <span class=3D"hljs-keyword">set</span> B [<span class=3D"hljs-keyword"=
>expr</span> int([<span class=3D"hljs-keyword">lindex</span> $color <span c=
lass=3D"hljs-number">2</span>] / <span class=3D"hljs-number">256</span>)]
    <span class=3D"hljs-keyword">set</span> rgb {}
    <span class=3D"hljs-keyword">foreach</span> factor {<span class=3D"hljs=
-number">0.13</span> <span class=3D"hljs-number">0.32</span> <span class=3D=
"hljs-number">0.45</span> <span class=3D"hljs-number">0.68</span> <span cla=
ss=3D"hljs-number">0.8</span> <span class=3D"hljs-number">0.93</span>} {
	<span class=3D"hljs-keyword">set</span> r [<span class=3D"hljs-keyword">ex=
pr</span> int($R * $factor)]
	<span class=3D"hljs-keyword">set</span> g [<span class=3D"hljs-keyword">ex=
pr</span> int($G * $factor)]
	<span class=3D"hljs-keyword">set</span> b [<span class=3D"hljs-keyword">ex=
pr</span> int($B * $factor)]
	<span class=3D"hljs-keyword">lappend</span> rgb [<span class=3D"hljs-keywo=
rd">format</span> <span class=3D"hljs-string">"#%02x%02x%02x"</span> $r $g =
$b]
    }
    <span class=3D"hljs-keyword">lappend</span> rgb [<span class=3D"hljs-ke=
yword">format</span> <span class=3D"hljs-string">"#%02x%02x%02x"</span> $R =
$G $B]
    <span class=3D"hljs-keyword">return</span> $rgb
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::progr=
essbar::Configure</span> {w args} {
    <span class=3D"hljs-keyword">variable</span> widgetOptions
    <span class=3D"hljs-keyword">variable</span> widgetGlobals
    <span class=3D"hljs-keyword">if</span> {$widgetGlobals(debug)} then {
	<span class=3D"hljs-keyword">puts</span> stderr <span class=3D"hljs-string=
">"pb_Configure '$w' '$args'"</span>
    }
    <span class=3D"hljs-keyword">upvar</span> ${w}::widgets widgets
    <span class=3D"hljs-keyword">upvar</span> ${w}::options options
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">l=
length</span> $args] =3D=3D <span class=3D"hljs-number">0</span>} then {
	<span class=3D"hljs-keyword">set</span> results {}
	<span class=3D"hljs-keyword">foreach</span> opt [<span class=3D"hljs-keywo=
rd">lsort</span> [<span class=3D"hljs-keyword">array</span> names widgetOpt=
ions]] {
	    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">=
llength</span> $widgetOptions($opt)] =3D=3D <span class=3D"hljs-number">1</=
span>} then {
		<span class=3D"hljs-keyword">set</span> alias $widgetOptions($opt)
		<span class=3D"hljs-keyword">set</span> optName $widgetOptions($alias)
		<span class=3D"hljs-keyword">lappend</span> results [<span class=3D"hljs-=
keyword">list</span> $opt $optName]
	    } else {
		<span class=3D"hljs-keyword">set</span> optName [<span class=3D"hljs-keyw=
ord">lindex</span> $widgetOptions($opt) <span class=3D"hljs-number">0</span=
>]
		<span class=3D"hljs-keyword">set</span> optClass [<span class=3D"hljs-key=
word">lindex</span> $widgetOptions($opt) <span class=3D"hljs-number">1</spa=
n>]
		<span class=3D"hljs-keyword">set</span> default [option get $w $optName $=
optClass]
		<span class=3D"hljs-keyword">lappend</span> results [<span class=3D"hljs-=
keyword">list</span> $opt $optName $optClass $default $options($opt)]
	    }
	}
	<span class=3D"hljs-keyword">return</span> $results
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">l=
length</span> $args] =3D=3D <span class=3D"hljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> opt [Canonize $w option [<span cla=
ss=3D"hljs-keyword">lindex</span> $args <span class=3D"hljs-number">0</span=
>]]
	<span class=3D"hljs-keyword">set</span> optName [<span class=3D"hljs-keywo=
rd">lindex</span> $widgetOptions($opt) <span class=3D"hljs-number">0</span>=
]
	<span class=3D"hljs-keyword">set</span> optClass [<span class=3D"hljs-keyw=
ord">lindex</span> $widgetOptions($opt) <span class=3D"hljs-number">1</span=
>]
	<span class=3D"hljs-keyword">set</span> default [option get $w $optName $o=
ptClass]
	<span class=3D"hljs-keyword">set</span> results [<span class=3D"hljs-keywo=
rd">list</span> $opt $optName $optClass $default $options($opt)]
	<span class=3D"hljs-keyword">return</span> $results
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">e=
xpr</span> {[<span class=3D"hljs-keyword">llength</span> $args]%<span class=
=3D"hljs-number">2</span>}] =3D=3D <span class=3D"hljs-number">1</span>} th=
en {
	<span class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">"val=
ue for \"[lindex $args end]\" missing"</span>
    }
    <span class=3D"hljs-keyword">foreach</span> {name value} $args {
	<span class=3D"hljs-keyword">set</span> name [Canonize $w option $name]
	<span class=3D"hljs-keyword">set</span> opts($name) $value
    }
    <span class=3D"hljs-keyword">foreach</span> option [<span class=3D"hljs=
-keyword">array</span> names opts] {
	<span class=3D"hljs-keyword">set</span> newValue $opts($option)
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">info=
</span> exists options($option)]} then {
	    <span class=3D"hljs-keyword">set</span> oldValue $options($option)
	}
	<span class=3D"hljs-keyword">if</span> {$widgetGlobals(debug) &gt; <span c=
lass=3D"hljs-number">2</span>} then {
	    <span class=3D"hljs-keyword">puts</span> stderr <span class=3D"hljs-st=
ring">"pb_Configure:Opt '$option' n=3D'$newValue' o=3D'$oldValue'"</span>
	}
	<span class=3D"hljs-keyword">switch</span> -- $option {
	-background -
	-borderwidth -
	-relief {
		<span class=3D"hljs-keyword">if</span> {[winfo exists $widgets(this)]} th=
en {
		    $widgets(frame) configure $option $newValue
		    <span class=3D"hljs-keyword">set</span> options($option) [$widgets(fr=
ame) cget $option]
		}
	    }
	-color {
		<span class=3D"hljs-keyword">switch</span> -- $newValue {
		@blue0 -
		@blue1 -
		@blue2 -
		@blue3 -
		@blue4 -
		@green0 -
		@green1 -
		@green2 -
		@green3 -
		@yellow0 -
		@yellow1 -
		@red0 -
		@red1 -
		@magenta0 -
		@brown0 -
		@brown1 -
		@gray0 {
			<span class=3D"hljs-keyword">set</span> options(rgb) $widgetGlobals($new=
Value)
		    }
		@* {
			<span class=3D"hljs-keyword">set</span> options(rgb) $widgetGlobals(@sap=
hir)
		    }
		default {
			<span class=3D"hljs-keyword">set</span> options(rgb) [RGBs $newValue]
		    }
		}
		<span class=3D"hljs-keyword">set</span> options(rgbHasChanged) <span clas=
s=3D"hljs-number">1</span>
	    }
	-percent {
		<span class=3D"hljs-keyword">set</span> options($option) $newValue
	    }
	-shape {
		<span class=3D"hljs-keyword">set</span> options($option) [Canonize $w sha=
pe $newValue]
		<span class=3D"hljs-keyword">set</span> options(rgbHasChanged) <span clas=
s=3D"hljs-number">1</span>
	    }
	-<span class=3D"hljs-keyword">variable</span> {
		<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">inf=
o</span> procs Trace($w)] !=3D <span class=3D"hljs-string">""</span>} then =
{
		    <span class=3D"hljs-keyword">uplevel</span> <span class=3D"hljs-numbe=
r">3</span> <span class=3D"hljs-keyword">trace</span> vdelete $oldValue wu =
::progressbar::Trace($w)
		    <span class=3D"hljs-keyword">unset</span> widgetGlobals($w)
		    <span class=3D"hljs-keyword">after</span> idle <span class=3D"hljs-st=
ring">"catch {rename Trace($w) {}}"</span>
		}
		<span class=3D"hljs-keyword">if</span> {$newValue !=3D <span class=3D"hlj=
s-string">""</span>} then {
		    <span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> :=
:progressbar::Trace($w)</span> {name1 name2 op} <span class=3D"hljs-string"=
>"
variable widgetGlobals
if {\$widgetGlobals(debug)} {
puts stderr \"pb_Trace($w) '\$name1' '\$name2' '\$op'\"
}
switch -- \$op {
w {
if {\$name2 !=3D \"\"} {
upvar 1 \${name1}(\$name2) var
catch {$w configure -percent \$var}
} else {
upvar 1 \$name1 var
catch {$w configure -percent \$var}
}
}
u {
unset widgetGlobals($w)
after idle \"catch {rename Trace($w) {}}\"
}
}
"</span>
		    <span class=3D"hljs-keyword">uplevel</span> <span class=3D"hljs-numbe=
r">3</span> <span class=3D"hljs-keyword">trace</span> <span class=3D"hljs-k=
eyword">variable</span> $newValue wu ::progressbar::Trace($w)
		}
		<span class=3D"hljs-keyword">set</span> options($option) $newValue
		<span class=3D"hljs-keyword">set</span> widgetGlobals($w) $newValue
	    }
	-width {
		<span class=3D"hljs-keyword">if</span> {$newValue &lt; <span class=3D"hlj=
s-number">20</span>} then {
		    <span class=3D"hljs-keyword">error</span> <span class=3D"hljs-string"=
>"a -width of less than 20 is not supported."</span>
		}
		<span class=3D"hljs-keyword">if</span> {[winfo exists $widgets(canvas)]} =
then {
		    $widgets(canvas) configure $option $newValue
		    <span class=3D"hljs-keyword">set</span> options($option) [$widgets(ca=
nvas) cget $option]
		} else {
		    <span class=3D"hljs-keyword">set</span> options($option) $newValue
		}
	    }
	}
    }
    Draw $w
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::progr=
essbar::DestroyHandler</span> {w} {
    <span class=3D"hljs-keyword">variable</span> widgetGlobals
    <span class=3D"hljs-keyword">if</span> {$widgetGlobals(debug)} then {
	<span class=3D"hljs-keyword">puts</span> stderr <span class=3D"hljs-string=
">"pb_DestroyHandler '$w'"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> procs Trace($w)] !=3D <span class=3D"hljs-string">""</span>} the=
n {
	<span class=3D"hljs-keyword">uplevel</span> <span class=3D"hljs-number">1<=
/span> <span class=3D"hljs-keyword">trace</span> vdelete $widgetGlobals($w)=
 wu ::progressbar::Trace($w)
	<span class=3D"hljs-keyword">unset</span> widgetGlobals($w)
	<span class=3D"hljs-keyword">after</span> idle <span class=3D"hljs-string"=
>"catch {rename Trace($w) {}}"</span>
    }
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">s=
tring</span> compare [winfo class $w] <span class=3D"hljs-string">"Progress=
bar"</span>] =3D=3D <span class=3D"hljs-number">0</span>} then {
	<span class=3D"hljs-keyword">namespace</span> delete ::progressbar::$w
	<span class=3D"hljs-keyword">rename</span> $w {}
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::progr=
essbar::Draw</span> {w} {
    <span class=3D"hljs-keyword">variable</span> widgetGlobals
    <span class=3D"hljs-keyword">if</span> {$widgetGlobals(debug) &gt; <spa=
n class=3D"hljs-number">2</span>} then {
	<span class=3D"hljs-keyword">puts</span> stderr <span class=3D"hljs-string=
">"pb_Draw '$w'"</span>
    }
    <span class=3D"hljs-keyword">upvar</span> ${w}::widgets widgets
    <span class=3D"hljs-keyword">upvar</span> ${w}::options options
    <span class=3D"hljs-keyword">set</span> width $options(-width)
    <span class=3D"hljs-keyword">set</span> percent $options(-percent)
    <span class=3D"hljs-keyword">if</span> {$options(-shape) =3D=3D <span c=
lass=3D"hljs-string">"flat"</span>} then {
	<span class=3D"hljs-keyword">set</span> minDisplay <span class=3D"hljs-num=
ber">0</span>
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">llen=
gth</span> $options(rgb)] =3D=3D <span class=3D"hljs-number">7</span>} then=
 {
	    <span class=3D"hljs-keyword">set</span> rgb(<span class=3D"hljs-number=
">0</span>) [<span class=3D"hljs-keyword">lindex</span> $options(rgb) <span=
 class=3D"hljs-number">6</span>]
	} else {
	    <span class=3D"hljs-keyword">set</span> rgb(<span class=3D"hljs-number=
">0</span>) [<span class=3D"hljs-keyword">lindex</span> $options(rgb) <span=
 class=3D"hljs-number">2</span>]
	}
	<span class=3D"hljs-keyword">set</span> rgb(<span class=3D"hljs-number">1<=
/span>) $rgb(0)
	<span class=3D"hljs-keyword">set</span> rgb(<span class=3D"hljs-number">2<=
/span>) $rgb(0)
	<span class=3D"hljs-keyword">set</span> rgb(<span class=3D"hljs-number">3<=
/span>) $rgb(0)
	<span class=3D"hljs-keyword">set</span> rgb(<span class=3D"hljs-number">4<=
/span>) $rgb(0)
	<span class=3D"hljs-keyword">set</span> rgb(<span class=3D"hljs-number">5<=
/span>) $rgb(0)
    } else {
	<span class=3D"hljs-keyword">set</span> minDisplay <span class=3D"hljs-num=
ber">7</span>
	<span class=3D"hljs-keyword">set</span> rgb(<span class=3D"hljs-number">0<=
/span>) [<span class=3D"hljs-keyword">lindex</span> $options(rgb) <span cla=
ss=3D"hljs-number">0</span>]
	<span class=3D"hljs-keyword">set</span> rgb(<span class=3D"hljs-number">1<=
/span>) [<span class=3D"hljs-keyword">lindex</span> $options(rgb) <span cla=
ss=3D"hljs-number">1</span>]
	<span class=3D"hljs-keyword">set</span> rgb(<span class=3D"hljs-number">2<=
/span>) [<span class=3D"hljs-keyword">lindex</span> $options(rgb) <span cla=
ss=3D"hljs-number">2</span>]
	<span class=3D"hljs-keyword">set</span> rgb(<span class=3D"hljs-number">3<=
/span>) [<span class=3D"hljs-keyword">lindex</span> $options(rgb) <span cla=
ss=3D"hljs-number">3</span>]
	<span class=3D"hljs-keyword">set</span> rgb(<span class=3D"hljs-number">4<=
/span>) [<span class=3D"hljs-keyword">lindex</span> $options(rgb) <span cla=
ss=3D"hljs-number">4</span>]
	<span class=3D"hljs-keyword">set</span> rgb(<span class=3D"hljs-number">5<=
/span>) [<span class=3D"hljs-keyword">lindex</span> $options(rgb) <span cla=
ss=3D"hljs-number">5</span>]
    }
    <span class=3D"hljs-keyword">if</span> {$percent &lt; <span class=3D"hl=
js-number">0</span>} then {
	<span class=3D"hljs-keyword">set</span> percent <span class=3D"hljs-number=
">0</span>
    } elseif {$percent &gt; <span class=3D"hljs-number">100</span>} {
	<span class=3D"hljs-keyword">set</span> percent <span class=3D"hljs-number=
">100</span>
    }
    <span class=3D"hljs-keyword">if</span> {$percent =3D=3D <span class=3D"=
hljs-number">0</span>} then {
	<span class=3D"hljs-keyword">set</span> mark $minDisplay
    } else {
	<span class=3D"hljs-keyword">set</span> mark [<span class=3D"hljs-keyword"=
>expr</span> (($width - $minDisplay) / <span class=3D"hljs-number">100.0</s=
pan> * $percent) + $minDisplay]
    }
    <span class=3D"hljs-keyword">if</span> {![winfo exists $widgets(canvas)=
]} then {
	canvas $widgets(canvas) -width $width -height <span class=3D"hljs-number">=
14</span> -bd <span class=3D"hljs-number">0</span> -highlightthickness <spa=
n class=3D"hljs-number">0</span>
	pack $widgets(canvas) -side left -anchor nw -fill both
	<span class=3D"hljs-keyword">foreach</span> {type color tag coords opts} $=
widgetGlobals(toDraw) {
	    <span class=3D"hljs-keyword">eval</span> $widgets(canvas) create $type=
 $coords -fill $color -tag t$tag $opts
	}
	<span class=3D"hljs-keyword">set</span> options(rgbHasChanged) <span class=
=3D"hljs-number">0</span>
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">foreach</span> {type color tag coords opts=
} $widgetGlobals(toDraw) {
	<span class=3D"hljs-keyword">eval</span> $widgets(canvas) coords t$tag $co=
ords
	<span class=3D"hljs-keyword">if</span> {$options(rgbHasChanged)} then {
	    <span class=3D"hljs-keyword">eval</span> $widgets(canvas) itemconfigur=
e t$tag -fill $color
	}
    }
    <span class=3D"hljs-keyword">set</span> options(rgbHasChanged) <span cl=
ass=3D"hljs-number">0</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> Rnotebo=
ok:create</span> {w args} {
    <span class=3D"hljs-keyword">global</span> Rnotebook tcl_platform
    frame $w -borderwidth <span class=3D"hljs-number">0</span> -relief flat
    <span class=3D"hljs-keyword">set</span> Rnotebook($w,nbtab) <span class=
=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">set</span> Rnotebook($w,tabs) {<span class=
=3D"hljs-number">1</span>}
    <span class=3D"hljs-keyword">set</span> Rnotebook($w,current) <span cla=
ss=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> Rnotebook($w,theight) <span cla=
ss=3D"hljs-number">30</span>
    <span class=3D"hljs-keyword">set</span> Rnotebook($w,padx) <span class=
=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> Rnotebook($w,bwidth) <span clas=
s=3D"hljs-number">2</span>
    <span class=3D"hljs-keyword">set</span> Rnotebook($w,background) [$w cg=
et -background]
    <span class=3D"hljs-keyword">set</span> Rnotebook($w,foreground) black
    <span class=3D"hljs-keyword">foreach</span> {tag value} $args {
	<span class=3D"hljs-keyword">switch</span> -- $tag {
	-borderwidth {
		<span class=3D"hljs-keyword">set</span> Rnotebook($w,bwidth) $value
	    }
	-height {
		<span class=3D"hljs-keyword">set</span> Rnotebook($w,theight) $value
	    }
	-tabs {
		<span class=3D"hljs-keyword">set</span> Rnotebook($w,tabs) $value
		<span class=3D"hljs-keyword">set</span> Rnotebook($w,nbtab) [<span class=
=3D"hljs-keyword">llength</span> $value]
	    }
	-nbtab {
		<span class=3D"hljs-keyword">set</span> Rnotebook($w,nbtab) $value
	    }
	-padx {
		<span class=3D"hljs-keyword">set</span> Rnotebook($w,padx) $value
	    }
	-background {
		<span class=3D"hljs-keyword">set</span> Rnotebook($w,background) $value
	    }
	-foreground {
		<span class=3D"hljs-keyword">set</span> Rnotebook($w,foreground) $value
	    }
	}
    }
    frame $w.tabs -borderwidth <span class=3D"hljs-number">0</span> -relief=
 flat
    frame $w.body -borderwidth $Rnotebook($w,bwidth) -relief raised -backgr=
ound $Rnotebook($w,background)
    frame $w.mask -borderwidth <span class=3D"hljs-number">0</span> -relief=
 flat -background $Rnotebook($w,background)
    frame $w.mskl -borderwidth <span class=3D"hljs-number">0</span> -relief=
 flat -background $Rnotebook($w,background)
    <span class=3D"hljs-keyword">if</span> [<span class=3D"hljs-keyword">st=
ring</span> compare $tcl_platform(platform) windows] then {
	frame $w.mskl.ml -borderwidth $Rnotebook($w,bwidth) -relief sunken
	place $w.mskl.ml -x -$Rnotebook($w,bwidth) -y -$Rnotebook($w,bwidth) -widt=
h [<span class=3D"hljs-keyword">expr</span> <span class=3D"hljs-number">2</=
span> * $Rnotebook($w,bwidth)] -height [<span class=3D"hljs-keyword">expr</=
span> <span class=3D"hljs-number">3</span> * $Rnotebook($w,bwidth)]
    } else {
	frame $w.mskl.ml -borderwidth $Rnotebook($w,bwidth) -relief raised
	place $w.mskl.ml -x <span class=3D"hljs-number">0</span> -y -$Rnotebook($w=
,bwidth) -width [<span class=3D"hljs-keyword">expr</span> <span class=3D"hl=
js-number">2</span> * $Rnotebook($w,bwidth)] -height [<span class=3D"hljs-k=
eyword">expr</span> <span class=3D"hljs-number">4</span> * $Rnotebook($w,bw=
idth)]
    }
    frame $w.mskr -borderwidth <span class=3D"hljs-number">0</span> -relief=
 flat -background $Rnotebook($w,background)
    <span class=3D"hljs-keyword">if</span> [<span class=3D"hljs-keyword">st=
ring</span> compare $tcl_platform(platform) windows] then {
	frame $w.mskr.mr -borderwidth $Rnotebook($w,bwidth) -relief sunken
	place $w.mskr.mr -x <span class=3D"hljs-number">0</span> -y -$Rnotebook($w=
,bwidth) -width [<span class=3D"hljs-keyword">expr</span> <span class=3D"hl=
js-number">2</span> * $Rnotebook($w,bwidth)] -height [<span class=3D"hljs-k=
eyword">expr</span> <span class=3D"hljs-number">3</span> * $Rnotebook($w,bw=
idth)]
    } else {
	frame $w.mskr.mr -borderwidth $Rnotebook($w,bwidth) -relief raised
	place $w.mskr.mr -x -$Rnotebook($w,bwidth) -y -$Rnotebook($w,bwidth) -widt=
h [<span class=3D"hljs-keyword">expr</span> <span class=3D"hljs-number">2</=
span> * $Rnotebook($w,bwidth)] -height [<span class=3D"hljs-keyword">expr</=
span> <span class=3D"hljs-number">4</span> * $Rnotebook($w,bwidth)]
    }
    place $w.tabs -x <span class=3D"hljs-number">0</span> -y <span class=3D=
"hljs-number">0</span> -relwidth <span class=3D"hljs-number">1.0</span> -he=
ight $Rnotebook($w,theight)
    place $w.body -x <span class=3D"hljs-number">0</span> -y $Rnotebook($w,=
theight) -relwidth <span class=3D"hljs-number">1.0</span> -relheight <span =
class=3D"hljs-number">1.0</span> -height -$Rnotebook($w,theight)
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> ind <span class=3D"hljs-number">1</span>} {$ind &lt;=3D $Rnoteboo=
k($w,nbtab)} {<span class=3D"hljs-keyword">incr</span> ind} {
	Rnotebook:addtab $w $ind
    }
    <span class=3D"hljs-keyword">eval</span> Rnotebook:raise $w <span class=
=3D"hljs-number">1</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> Rnotebo=
ok:addtab</span> {w ind} {
    <span class=3D"hljs-keyword">global</span> Rnotebook
    <span class=3D"hljs-keyword">set</span> i2 [<span class=3D"hljs-keyword=
">expr</span> $ind - <span class=3D"hljs-number">1</span>]
    <span class=3D"hljs-keyword">set</span> txt [<span class=3D"hljs-keywor=
d">lindex</span> $Rnotebook($w,tabs) $i2]
    <span class=3D"hljs-keyword">if</span> {! [<span class=3D"hljs-keyword"=
>string</span> length $txt]} then {
	<span class=3D"hljs-keyword">set</span> txt $ind
    }
    button $w.tabs.b$ind -text $txt -borderwidth $Rnotebook($w,bwidth) -bac=
kground $Rnotebook($w,background) -foreground $Rnotebook($w,foreground) -co=
mmand <span class=3D"hljs-string">"Rnotebook:raise $w $ind"</span>
    pack $w.tabs.b$ind -side left -pady <span class=3D"hljs-number">0</span=
> -padx $Rnotebook($w,padx) -fill y
    bind $w.tabs.b$ind &lt;Configure&gt; <span class=3D"hljs-string">"Rnote=
book:raise $w current"</span>
    frame $w.body.f$ind -borderwidth <span class=3D"hljs-number">0</span> -=
background $Rnotebook($w,background)
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> Rnotebo=
ok:config</span> {w args} {
    <span class=3D"hljs-keyword">global</span> Rnotebook tcl_platform
    <span class=3D"hljs-keyword">set</span> nbt $Rnotebook($w,nbtab)
    <span class=3D"hljs-keyword">foreach</span> {tag value} $args {
	<span class=3D"hljs-keyword">switch</span> -- $tag {
	-borderwidth {
		<span class=3D"hljs-keyword">set</span> Rnotebook($w,bwidth) $value
		$w.body configure -borderwidth $Rnotebook($w,bwidth)
		$w.mskl.ml configure -borderwidth $Rnotebook($w,bwidth)
		$w.mskr.mr configure -borderwidth $Rnotebook($w,bwidth)
		<span class=3D"hljs-keyword">set</span> lst [winfo children $w.tabs]
		<span class=3D"hljs-keyword">foreach</span> wid $lst {
		    $wid configure -borderwidth $Rnotebook($w,bwidth)
		}
		<span class=3D"hljs-keyword">if</span> [<span class=3D"hljs-keyword">stri=
ng</span> compare $tcl_platform(platform) windows] then {
		    place $w.mskl.ml -x -$Rnotebook($w,bwidth) -y -$Rnotebook($w,bwidth) =
-width [<span class=3D"hljs-keyword">expr</span> <span class=3D"hljs-number=
">2</span> * $Rnotebook($w,bwidth)] -height [<span class=3D"hljs-keyword">e=
xpr</span> <span class=3D"hljs-number">3</span> * $Rnotebook($w,bwidth)]
		} else {
		    place $w.mskl.ml -x <span class=3D"hljs-number">0</span> -y -$Rnotebo=
ok($w,bwidth) -width [<span class=3D"hljs-keyword">expr</span> <span class=
=3D"hljs-number">2</span> * $Rnotebook($w,bwidth)] -height [<span class=3D"=
hljs-keyword">expr</span> <span class=3D"hljs-number">4</span> * $Rnotebook=
($w,bwidth)]
		}
		<span class=3D"hljs-keyword">if</span> [<span class=3D"hljs-keyword">stri=
ng</span> compare $tcl_platform(platform) windows] then {
		    place $w.mskr.mr -x <span class=3D"hljs-number">0</span> -y -$Rnotebo=
ok($w,bwidth) -width [<span class=3D"hljs-keyword">expr</span> <span class=
=3D"hljs-number">2</span> * $Rnotebook($w,bwidth)] -height [<span class=3D"=
hljs-keyword">expr</span> <span class=3D"hljs-number">3</span> * $Rnotebook=
($w,bwidth)]
		} else {
		    place $w.mskr.mr -x -$Rnotebook($w,bwidth) -y -$Rnotebook($w,bwidth) =
-width [<span class=3D"hljs-keyword">expr</span> <span class=3D"hljs-number=
">2</span> * $Rnotebook($w,bwidth)] -height [<span class=3D"hljs-keyword">e=
xpr</span> <span class=3D"hljs-number">4</span> * $Rnotebook($w,bwidth)]
		}
	    }
	-background {
		<span class=3D"hljs-keyword">set</span> Rnotebook($w,background) $value
		$w.body configure -background $Rnotebook($w,background)
		$w.mskl.ml configure -background $Rnotebook($w,background)
		$w.mskr.mr configure -background $Rnotebook($w,background)
		<span class=3D"hljs-keyword">set</span> lst [winfo children $w.tabs]
		<span class=3D"hljs-keyword">foreach</span> wid $lst {
		    $wid configure -background $Rnotebook($w,background)
		}
		$w.mask configure -background $Rnotebook($w,background)
	    }
	-foreground {
		<span class=3D"hljs-keyword">set</span> Rnotebook($w,foreground) $value
		<span class=3D"hljs-keyword">set</span> lst [winfo children $w.tabs]
		<span class=3D"hljs-keyword">foreach</span> wid $lst {
		    $wid configure -foreground $Rnotebook($w,foreground)
		}
	    }
	-height {
		<span class=3D"hljs-keyword">set</span> Rnotebook($w,theight) $value
		place $w.tabs -x <span class=3D"hljs-number">0</span> -y <span class=3D"h=
ljs-number">0</span> -relwidth <span class=3D"hljs-number">1.0</span> -heig=
ht $Rnotebook($w,theight)
		place $w.body -x <span class=3D"hljs-number">0</span> -y $Rnotebook($w,th=
eight) -relwidth <span class=3D"hljs-number">1.0</span> -relheight <span cl=
ass=3D"hljs-number">1.0</span> -height -$Rnotebook($w,theight)
	    }
	-padx {
		<span class=3D"hljs-keyword">set</span> Rnotebook($w,padx) $value
		<span class=3D"hljs-keyword">set</span> lst [winfo children $w.tabs]
		<span class=3D"hljs-keyword">foreach</span> wid $lst {
		    pack $wid -padx $Rnotebook($w,padx)
		}
	    }
	-tabs {
		<span class=3D"hljs-keyword">set</span> Rnotebook($w,tabs) $value
		<span class=3D"hljs-keyword">set</span> Rnotebook($w,nbtab) [<span class=
=3D"hljs-keyword">llength</span> $value]
	    }
	-nbtab {
		<span class=3D"hljs-keyword">set</span> Rnotebook($w,nbtab) $value
	    }
	}
    }
    <span class=3D"hljs-keyword">if</span> {$nbt &lt; $Rnotebook($w,nbtab)}=
 then {
	<span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">set<=
/span> ind [<span class=3D"hljs-keyword">expr</span> $nbt+<span class=3D"hl=
js-number">1</span>]} {$ind &lt;=3D $Rnotebook($w,nbtab)} {<span class=3D"h=
ljs-keyword">incr</span> ind} {
	    Rnotebook:addtab $w $ind
	}
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> Rnotebo=
ok:raise</span> {w num} {
    <span class=3D"hljs-keyword">global</span> Rnotebook
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
string</span> compare $num <span class=3D"hljs-string">"current"</span>]} t=
hen {
	<span class=3D"hljs-keyword">set</span> num $Rnotebook($w,current)
    }
    <span class=3D"hljs-keyword">if</span> {$num =3D=3D <span class=3D"hljs=
-number">0</span>} then {
	<span class=3D"hljs-keyword">set</span> num <span class=3D"hljs-number">1<=
/span>
    }
    <span class=3D"hljs-keyword">if</span> {$num !=3D $Rnotebook($w,current=
)} then {
	pack forget $w.body.f$Rnotebook($w,current)
	pack $w.body.f$num -fill both -expand <span class=3D"hljs-number">1</span>
    }
    <span class=3D"hljs-keyword">set</span> Rnotebook($w,current) $num
    <span class=3D"hljs-keyword">set</span> bw $Rnotebook($w,bwidth)
    <span class=3D"hljs-keyword">set</span> x0 [<span class=3D"hljs-keyword=
">expr</span> [winfo x $w.tabs.b$num] + [winfo x $w.tabs] + $bw]
    <span class=3D"hljs-keyword">set</span> y0 [<span class=3D"hljs-keyword=
">expr</span> [winfo y $w.tabs.b$num] + [winfo y $w.tabs] + [winfo height $=
w.tabs.b$num] - $bw]
    <span class=3D"hljs-keyword">set</span> w0 [<span class=3D"hljs-keyword=
">expr</span> [winfo width $w.tabs.b$num] - ($bw * <span class=3D"hljs-numb=
er">2</span>)]
    <span class=3D"hljs-keyword">set</span> h0 [<span class=3D"hljs-keyword=
">expr</span> $bw * <span class=3D"hljs-number">2</span>]
    place $w.mask -x $x0 -y $y0 -width $w0 -height $h0
    <span class=3D"hljs-keyword">set</span> x1 [<span class=3D"hljs-keyword=
">expr</span> $x0 - $bw]
    <span class=3D"hljs-keyword">set</span> y1 $y0
    <span class=3D"hljs-keyword">set</span> w1 $bw
    <span class=3D"hljs-keyword">set</span> h1 $h0
    place $w.mskl -x $x1 -y $y1 -width $w1 -height $h1
    <span class=3D"hljs-keyword">set</span> x2 [<span class=3D"hljs-keyword=
">expr</span> $x0 + $w0]
    <span class=3D"hljs-keyword">set</span> y2 $y0
    <span class=3D"hljs-keyword">set</span> w2 $bw
    <span class=3D"hljs-keyword">set</span> h2 $h0
    place $w.mskr -x $x2 -y $y2 -width $w2 -height $h2
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> Rnotebo=
ok:frame</span> {w num} {
    <span class=3D"hljs-keyword">global</span> Rnotebook
    <span class=3D"hljs-keyword">set</span> i <span class=3D"hljs-string">"=
$w.body.f$num"</span>
    <span class=3D"hljs-keyword">if</span> [winfo exists $i] then {
	<span class=3D"hljs-keyword">return</span> $i
    } else {
	<span class=3D"hljs-keyword">return</span> {}
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> Rnotebo=
ok:button</span> {w num} {
    <span class=3D"hljs-keyword">global</span> Rnotebook
    <span class=3D"hljs-keyword">set</span> i <span class=3D"hljs-string">"=
$w.tabs.b$num"</span>
    <span class=3D"hljs-keyword">if</span> [winfo exists $i] then {
	<span class=3D"hljs-keyword">return</span> $i
    } else {
	<span class=3D"hljs-keyword">return</span> {}
    }
}
<span class=3D"hljs-keyword">package</span> provide sio <span class=3D"hljs=
-number">1.2</span>
<span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keyword">=
eval</span> ::sio:: {
    <span class=3D"hljs-keyword">namespace</span> export openDevice clearRx=
Buffer autoBaudSync startTimeOutCounter readLine closeDevice sendChar sendA=
scii waitForXon setBaud sioVars devId
    <span class=3D"hljs-keyword">variable</span> sioVars
    <span class=3D"hljs-keyword">variable</span> devId
    <span class=3D"hljs-keyword">set</span> sioVars(SerialEventOccured) <sp=
an class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> sioVars(bootloaderId) <span cla=
ss=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> sioVars(AfterTimeOutId) <span c=
lass=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> sioVars(RxBuffer) <span class=
=3D"hljs-string">""</span>
    <span class=3D"hljs-keyword">set</span> sioVars(TxOff) <span class=3D"h=
ljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> sioVars(TxOn) <span class=3D"hl=
js-number">0</span>
    <span class=3D"hljs-keyword">set</span> sioVars(XOFF) [<span class=3D"h=
ljs-keyword">format</span> %c <span class=3D"hljs-number">0x13</span>]
    <span class=3D"hljs-keyword">set</span> sioVars(XON) [<span class=3D"hl=
js-keyword">format</span> %c <span class=3D"hljs-number">0x11</span>]
    <span class=3D"hljs-keyword">set</span> sioVars(AbortTx) <span class=3D=
"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> sioVars(TempString) <span class=
=3D"hljs-string">""</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::sio::=
InterruptHandlerXonXoff</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">variable</span> sioVars
    <span class=3D"hljs-keyword">variable</span> devId
    StopTimeOutCounter
    <span class=3D"hljs-keyword">set</span> ::sio::sioVars(AbortTx) <span c=
lass=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">c=
atch</span> {<span class=3D"hljs-keyword">set</span> ::sio::sioVars(TempStr=
ing) [<span class=3D"hljs-keyword">read</span> $devId]} err_id]} then {
	<span class=3D"hljs-keyword">set</span> ::sio::sioVars(AbortTx) <span clas=
s=3D"hljs-number">1</span>
<span class=3D"hljs-comment">	#dbgShowError "  reading error"</span>
    } else {
	<span class=3D"hljs-keyword">set</span> xoffPos [<span class=3D"hljs-keywo=
rd">string</span> first $::sio::sioVars(XOFF) $::sio::sioVars(TempString)]
	<span class=3D"hljs-keyword">set</span> xonPos [<span class=3D"hljs-keywor=
d">string</span> first $::sio::sioVars(XON) $::sio::sioVars(TempString)]
	<span class=3D"hljs-keyword">if</span> {$xoffPos !=3D <span class=3D"hljs-=
number">-1</span>} then {
	    <span class=3D"hljs-keyword">set</span> ::sio::sioVars(TxOff) <span cl=
ass=3D"hljs-number">1</span>
	    <span class=3D"hljs-keyword">set</span> ::sio::sioVars(TxOn) <span cla=
ss=3D"hljs-number">0</span>
<span class=3D"hljs-comment">	    #dbgShowInfo "  XOFF received"</span>
	    <span class=3D"hljs-keyword">set</span> ::sio::sioVars(TempString) [<s=
pan class=3D"hljs-keyword">string</span> replace $::sio::sioVars(TempString=
) $xoffPos $xoffPos]
	} elseif {$xonPos !=3D <span class=3D"hljs-number">-1</span>} {
	    <span class=3D"hljs-keyword">set</span> ::sio::sioVars(TxOn) <span cla=
ss=3D"hljs-number">1</span>
	    <span class=3D"hljs-keyword">set</span> ::sio::sioVars(TxOff) <span cl=
ass=3D"hljs-number">0</span>
<span class=3D"hljs-comment">	    #dbgShowInfo "  XON received"</span>
	    <span class=3D"hljs-keyword">set</span> ::sio::sioVars(TempString) [<s=
pan class=3D"hljs-keyword">string</span> replace $::sio::sioVars(TempString=
) $xonPos $xonPos]
	}
	<span class=3D"hljs-keyword">append</span> ::sio::sioVars(RxBuffer) $::sio=
::sioVars(TempString)
    }
    <span class=3D"hljs-keyword">set</span> ::sio::sioVars(SerialEventOccur=
ed) <span class=3D"hljs-number">1</span>
<span class=3D"hljs-comment">    #dbgShowVar " RxBuffer =3D $::sio::sioVars=
(RxBuffer)"</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::sio::=
InterruptHandlerNoXonXoff</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">variable</span> sioVars
    <span class=3D"hljs-keyword">variable</span> devId
    <span class=3D"hljs-keyword">global</span> tcl_platform
    StopTimeOutCounter
    <span class=3D"hljs-keyword">set</span> ::sio::sioVars(SerialEventOccur=
ed) <span class=3D"hljs-number">1</span>
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">c=
atch</span> {<span class=3D"hljs-keyword">set</span> ::sio::sioVars(TempStr=
ing) [<span class=3D"hljs-keyword">read</span> $devId]} err_id]} then {
	<span class=3D"hljs-keyword">set</span> ::sio::sioVars(AbortTx) <span clas=
s=3D"hljs-number">1</span>
    } else {
	<span class=3D"hljs-keyword">append</span> ::sio::sioVars(RxBuffer) $::sio=
::sioVars(TempString)
    }
<span class=3D"hljs-comment">    #dbgShowVar " RxBuffer =3D $::sio::sioVars=
(RxBuffer)"</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::sio::=
openDevice</span> {Device Baud SyncMode Parity Data Stop XonCtrl} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">variable</span> sioVars
    <span class=3D"hljs-keyword">variable</span> devId
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">c=
atch</span> {<span class=3D"hljs-keyword">set</span> devId [<span class=3D"=
hljs-keyword">open</span> $Device RDWR]} err_id]} then {
	<span class=3D"hljs-keyword">set</span> devId <span class=3D"hljs-number">=
0</span>
    } else {
	<span class=3D"hljs-keyword">if</span> {$SyncMode =3D=3D <span class=3D"hl=
js-string">"sync"</span>} then {
	    <span class=3D"hljs-keyword">fconfigure</span> $devId -mode $Baud,$Par=
ity,$Data,$Stop -blocking <span class=3D"hljs-number">1</span> -buffering n=
one
	} else {
	    <span class=3D"hljs-keyword">fconfigure</span> $devId -mode $Baud,$Par=
ity,$Data,$Stop -blocking <span class=3D"hljs-number">0</span> -buffering n=
one
	    <span class=3D"hljs-keyword">if</span> {$XonCtrl} then {
		<span class=3D"hljs-keyword">fileevent</span> $devId readable ::sio::Inte=
rruptHandlerXonXoff
	    } else {
		<span class=3D"hljs-keyword">fileevent</span> $devId readable ::sio::Inte=
rruptHandlerNoXonXoff
	    }
	}
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $devId
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::sio::=
setBaud</span> {Baud} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">variable</span> sioVars
    <span class=3D"hljs-keyword">variable</span> devId
    <span class=3D"hljs-keyword">set</span> currentConfig [<span class=3D"h=
ljs-keyword">fconfigure</span> $devId]
    <span class=3D"hljs-keyword">set</span> commaIndex [<span class=3D"hljs=
-keyword">string</span> first <span class=3D"hljs-string">","</span> $curre=
ntConfig]
    <span class=3D"hljs-keyword">set</span> config [<span class=3D"hljs-key=
word">string</span> range $currentConfig $commaIndex [<span class=3D"hljs-k=
eyword">expr</span> $commaIndex + <span class=3D"hljs-number">5</span>]]
    <span class=3D"hljs-keyword">fconfigure</span> $devId -mode $Baud$confi=
g
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::sio::=
clearRxBuffer</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">variable</span> sioVars
    <span class=3D"hljs-keyword">set</span> ::sio::sioVars(RxBuffer) <span =
class=3D"hljs-string">""</span>
    <span class=3D"hljs-keyword">update</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">=
1</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::sio::=
autoBaudSync</span> {responseChar timeOutDelay} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">variable</span> sioVars
    <span class=3D"hljs-keyword">global</span> ExtraTimeOut
    clearRxBuffer
    startTimeOutCounter $timeOutDelay
    <span class=3D"hljs-keyword">set</span> ExtraTimeOut <span class=3D"hlj=
s-number">1</span>
    <span class=3D"hljs-keyword">set</span> ExtraTimeOutId [<span class=3D"=
hljs-keyword">after</span> <span class=3D"hljs-number">5000</span> <span cl=
ass=3D"hljs-string">"set ExtraTimeOut -1"</span>]
    <span class=3D"hljs-keyword">set</span> sync <span class=3D"hljs-number=
">1</span>
    sendChar <span class=3D"hljs-string">"U"</span>
    <span class=3D"hljs-keyword">while</span> {[<span class=3D"hljs-keyword=
">string</span> index $::sio::sioVars(RxBuffer) end] !=3D $responseChar} {
	<span class=3D"hljs-keyword">if</span> {$::sio::sioVars(SerialEventOccured=
) =3D=3D <span class=3D"hljs-number">-1</span>} then {
	    <span class=3D"hljs-keyword">set</span> sync <span class=3D"hljs-numbe=
r">-2</span>
<span class=3D"hljs-comment">	    #dbgShowError "Autobaud sync Time out"</s=
pan>
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">if</span> {$ExtraTimeOut =3D=3D <span class=
=3D"hljs-number">-1</span>} then {
	    <span class=3D"hljs-keyword">set</span> sync <span class=3D"hljs-numbe=
r">-2</span>
<span class=3D"hljs-comment">	    #dbgShowError "Autobaud sync Extra Time o=
ut"</span>
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">update</span>
    }
    <span class=3D"hljs-keyword">if</span> {$ExtraTimeOut =3D=3D <span clas=
s=3D"hljs-number">1</span>} then {
	<span class=3D"hljs-keyword">catch</span> [<span class=3D"hljs-keyword">af=
ter</span> cancel $ExtraTimeOutId]
    }
    <span class=3D"hljs-keyword">if</span> {$sync =3D=3D <span class=3D"hlj=
s-number">1</span>} then {
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> length $::sio::sioVars(RxBuffer)] =3D=3D <span class=3D"hljs-numb=
er">1</span>} then {
	    <span class=3D"hljs-keyword">set</span> ::sio::sioVars(bootloaderId) <=
span class=3D"hljs-number">0</span>
<span class=3D"hljs-comment">	    #dbgShowVar "bootloaderId =3D $::sio::sio=
Vars(bootloaderId)"</span>
	} elseif {[<span class=3D"hljs-keyword">string</span> length $::sio::sioVa=
rs(RxBuffer)] =3D=3D <span class=3D"hljs-number">5</span>} {
	    <span class=3D"hljs-keyword">set</span> ::sio::sioVars(bootloaderId) [=
<span class=3D"hljs-keyword">string</span> range $::sio::sioVars(RxBuffer) =
<span class=3D"hljs-number">0</span> end<span class=3D"hljs-number">-1</spa=
n>]
<span class=3D"hljs-comment">	    #dbgShowVar "bootloaderId =3D $::sio::sio=
Vars(bootloaderId)"</span>
	} else {
	    <span class=3D"hljs-keyword">set</span> ::sio::sioVars(bootloaderId) X
<span class=3D"hljs-comment">	    #dbgShowVar "bootloaderId =3D $::sio::sio=
Vars(bootloaderId)"</span>
	    <span class=3D"hljs-keyword">set</span> sync <span class=3D"hljs-numbe=
r">-1</span>
	}
    }
    clearRxBuffer
<span class=3D"hljs-comment">    #dbgShowVar "sync =3D $sync"</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $sync
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::sio::=
startTimeOutCounter</span> {TimeOut} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">variable</span> sioVars
    <span class=3D"hljs-keyword">set</span> ::sio::sioVars(SerialEventOccur=
ed) <span class=3D"hljs-number">0</span>
    <span class=3D"hljs-keyword">set</span> ::sio::sioVars(AfterTimeOutId) =
[<span class=3D"hljs-keyword">after</span> $TimeOut <span class=3D"hljs-str=
ing">"set ::sio::sioVars(SerialEventOccured) -1"</span>]
    <span class=3D"hljs-keyword">update</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">=
1</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::sio::=
StopTimeOutCounter</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">variable</span> sioVars
    <span class=3D"hljs-keyword">catch</span> [<span class=3D"hljs-keyword"=
>after</span> cancel $::sio::sioVars(AfterTimeOutId)]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">=
1</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::sio::=
readLine</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">variable</span> devId
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> [<span class=3D"hljs-keyword=
">gets</span> $devId]
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::sio::=
closeDevice</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">variable</span> devId
    <span class=3D"hljs-keyword">if</span> {([<span class=3D"hljs-keyword">=
info</span> exists devId]) &amp;&amp;($devId !=3D <span class=3D"hljs-numbe=
r">0</span>)} then {
	<span class=3D"hljs-keyword">catch</span> [<span class=3D"hljs-keyword">cl=
ose</span> $devId]
	<span class=3D"hljs-keyword">catch</span> [<span class=3D"hljs-keyword">un=
set</span> devId]
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">=
1</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::sio::=
sendChar</span> {Cput} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">variable</span> devId
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">c=
atch</span> {<span class=3D"hljs-keyword">puts</span> -nonewline $devId $Cp=
ut}]} then {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    } else {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>1</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::sio::=
sendAscii</span> {byte} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">variable</span> devId
    sendChar [<span class=3D"hljs-keyword">string</span> index $byte end<sp=
an class=3D"hljs-number">-1</span>]
    sendChar [<span class=3D"hljs-keyword">string</span> index $byte end]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">=
1</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::sio::=
waitForXon</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">while</span> {$::sio::sioVars(TxOff)} {
	<span class=3D"hljs-keyword">update</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">package</span> provide splash <span class=3D"h=
ljs-number">1.0</span>
<span class=3D"hljs-keyword">namespace</span> <span class=3D"hljs-keyword">=
eval</span> ::splash {
    <span class=3D"hljs-keyword">namespace</span> export createSplash updat=
eSplash removeSplash
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::splas=
h::createSplash</span> {image product copyright msg} {
    <span class=3D"hljs-keyword">global</span> tcl_version tk_version tcl_p=
latform
    <span class=3D"hljs-keyword">global</span> tcl_patchLevel
    removeSplash
    toplevel .splash
    wm overrideredirect .splash <span class=3D"hljs-number">1</span>
    wm withdraw .splash
    dialogPosition .splash
    <span class=3D"hljs-keyword">set</span> frm .splash.top
    frame $frm -bd <span class=3D"hljs-number">2</span> -relief groove
    label $frm.logo -image $image
    label $frm.product -text <span class=3D"hljs-string">"$product"</span>
    message $frm.copyright -text <span class=3D"hljs-string">"$copyright"</=
span> -width <span class=3D"hljs-number">3</span>i
    label $frm.tclversion -text <span class=3D"hljs-string">"Tcl $tcl_versi=
on/Tk $tk_version, $tcl_patchLevel"</span>
    label $frm.osversion -text <span class=3D"hljs-string">"$tcl_platform(o=
s) $tcl_platform(osVersion)"</span>
    pack $frm.logo -side top -fill x -pady <span class=3D"hljs-number">4</s=
pan> -ipadx <span class=3D"hljs-number">4</span> -ipady <span class=3D"hljs=
-number">4</span>
    pack $frm.product $frm.copyright $frm.tclversion $frm.osversion -side t=
op -fill x
    pack $frm -side top -fill x -padx <span class=3D"hljs-number">8</span> =
-pady <span class=3D"hljs-number">8</span>
    <span class=3D"hljs-keyword">set</span> frm .splash.bottom
    frame $frm -bd <span class=3D"hljs-number">2</span> -relief groove
    label $frm.msg -text <span class=3D"hljs-string">"$msg"</span> -anchor =
w
    pack $frm.msg -side left -ipadx <span class=3D"hljs-number">6</span> -i=
pady <span class=3D"hljs-number">4</span>
    pack $frm -side bottom -fill x -padx <span class=3D"hljs-number">8</spa=
n> -pady <span class=3D"hljs-number">8</span>
    wm deiconify .splash
    <span class=3D"hljs-keyword">update</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::splas=
h::updateSplash</span> {msg} {
    <span class=3D"hljs-keyword">set</span> name .splash.bottom.msg
    <span class=3D"hljs-keyword">if</span> {[winfo exists $name]} then {
	$name config -text <span class=3D"hljs-string">"$msg"</span>
	<span class=3D"hljs-keyword">update</span>
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::splas=
h::removeSplash</span> {} {
    <span class=3D"hljs-keyword">if</span> {[winfo exists .splash]} then {
	destroy .splash
    }
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ::splas=
h::dialogPosition</span> {dlg} {
    <span class=3D"hljs-keyword">set</span> width [winfo screenwidth .]
    <span class=3D"hljs-keyword">set</span> height [winfo screenheight .]
    <span class=3D"hljs-keyword">set</span> x [<span class=3D"hljs-keyword"=
>expr</span> ($width/<span class=3D"hljs-number">2</span>) - <span class=3D=
"hljs-number">260</span>]
    <span class=3D"hljs-keyword">set</span> y [<span class=3D"hljs-keyword"=
>expr</span> ($height/<span class=3D"hljs-number">2</span>) - <span class=
=3D"hljs-number">260</span>]
    wm geometry $dlg +$x+$y
}
<span class=3D"hljs-keyword">lappend</span> auto_path <span class=3D"hljs-s=
tring">"."</span>
<span class=3D"hljs-keyword">auto_mkindex</span> . libtcl.tcl libtk.tcl abo=
ut.tcl progressbar.tcl combobox.tcl fontchoose.tcl
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> main</s=
pan> {} {
    wm title . <span class=3D"hljs-string">"Tcl/Tk Applab Lib Test"</span>
    wm protocol . WM_DELETE_WINDOW <span class=3D"hljs-keyword">exit</span>
    <span class=3D"hljs-keyword">set</span> font {Helvetica <span class=3D"=
hljs-number">14</span>}
    <span class=3D"hljs-keyword">set</span> text_f [frame .textFrame]
    scrollbar .s -orient vertical -command {.t yview} -highlightthickness <=
span class=3D"hljs-number">0</span> -takefocus <span class=3D"hljs-number">=
1</span>
    pack .s -in .textFrame -side right -fill y
    text .t -yscrollcommand {.s <span class=3D"hljs-keyword">set</span>} -w=
rap word -width <span class=3D"hljs-number">60</span> -height <span class=
=3D"hljs-number">30</span> -font $font -setgrid <span class=3D"hljs-number"=
>1</span> -highlightthickness <span class=3D"hljs-number">0</span> -padx <s=
pan class=3D"hljs-number">4</span> -pady <span class=3D"hljs-number">2</spa=
n> -takefocus <span class=3D"hljs-number">0</span>
    pack .t -in .textFrame -expand y -fill both -padx <span class=3D"hljs-n=
umber">1</span>
    pack .textFrame -expand yes -fill both
    .t tag configure demospace -lmargin1 <span class=3D"hljs-number">1</spa=
n>c -lmargin2 <span class=3D"hljs-number">1</span>c
    .t tag configure title -font {Helvetica <span class=3D"hljs-number">18<=
/span> bold}
    .t tag configure demo -lmargin1 <span class=3D"hljs-number">1</span>c -=
lmargin2 <span class=3D"hljs-number">1</span>c -foreground blue -underline =
<span class=3D"hljs-number">1</span>
    .t tag configure visited -lmargin1 <span class=3D"hljs-number">1</span>=
c -lmargin2 <span class=3D"hljs-number">1</span>c -foreground #<span class=
=3D"hljs-number">303080</span> -underline <span class=3D"hljs-number">1</sp=
an>
    .t tag bind demo &lt;ButtonRelease<span class=3D"hljs-number">-1</span>=
&gt; {
invoke [.t index {@%x,%y}]
}
    <span class=3D"hljs-keyword">set</span> lastLine <span class=3D"hljs-st=
ring">""</span>
    .t insert end <span class=3D"hljs-string">"Tk Widget Test Using AppLab =
Tcl/Tk Lib\n"</span> title
    .t insert end {Select an item to run the test.}
    .t insert end <span class=3D"hljs-string">" \n "</span> {demospace}
    .t insert end <span class=3D"hljs-string">" \n "</span> {} <span class=
=3D"hljs-string">"About window"</span> title
    .t insert end <span class=3D"hljs-string">" \n "</span> {demospace}
    .t insert end <span class=3D"hljs-string">"All fields are used (default=
 font)"</span> {demo demo_about_full}
    .t insert end <span class=3D"hljs-string">" \n "</span> {demospace}
    .t insert end <span class=3D"hljs-string">"About no title"</span> {demo=
 demo_about_no_title}
    .t insert end <span class=3D"hljs-string">" \n "</span> {demospace}
    .t insert end <span class=3D"hljs-string">"About no authors"</span> {de=
mo demo_about_no_authors}
    .t insert end <span class=3D"hljs-string">" \n "</span> {demospace}
    .t insert end <span class=3D"hljs-string">"About no copyright"</span> {=
demo demo_about_no_copyright}
    .t insert end <span class=3D"hljs-string">" \n "</span> {demospace}
    .t insert end <span class=3D"hljs-string">"About no comment"</span> {de=
mo demo_about_no_comment}
    .t insert end <span class=3D"hljs-string">" \n "</span> {demospace}
    .t insert end <span class=3D"hljs-string">"About no logo"</span> {demo =
demo_about_no_logo}
    .t insert end <span class=3D"hljs-string">" \n "</span> {demospace}
    .t insert end <span class=3D"hljs-string">"About no url"</span> {demo d=
emo_about_no_url}
    .t insert end <span class=3D"hljs-string">" \n "</span> {demospace}
    .t insert end <span class=3D"hljs-string">"About no info"</span> {demo =
demo_about_no_info}
    .t insert end <span class=3D"hljs-string">" \n "</span> {demospace}
    .t insert end <span class=3D"hljs-string">"All fields are used (courier=
 font)"</span> {demo demo_about_full_courier}
    .t insert end <span class=3D"hljs-string">" \n "</span> {demospace}
    .t insert end <span class=3D"hljs-string">" \n "</span> {} <span class=
=3D"hljs-string">"Progress Bar"</span> title
    .t insert end <span class=3D"hljs-string">" \n "</span> {demospace}
    .t insert end <span class=3D"hljs-string">"Flat Progress Bar"</span> {d=
emo demo_progressbar_flat}
    .t insert end <span class=3D"hljs-string">" \n "</span> {demospace}
    .t insert end <span class=3D"hljs-string">"3D Progress Bar"</span> {dem=
o demo_progressbar_3d}
    .t insert end <span class=3D"hljs-string">" \n "</span> {demospace}
    .t insert end <span class=3D"hljs-string">" \n "</span> {} <span class=
=3D"hljs-string">"Fonts"</span> title
    .t insert end <span class=3D"hljs-string">" \n "</span> {demospace}
    .t insert end <span class=3D"hljs-string">"Font Choose"</span> {demo de=
mo_font_choose}
    .t insert end <span class=3D"hljs-string">" \n "</span> {demospace}
    .t configure -state disabled
    focus .s
    button .ok -text OK -command {<span class=3D"hljs-keyword">set</span> l=
ib_test_ok <span class=3D"hljs-number">1</span>}
    pack .ok
    tkwait <span class=3D"hljs-keyword">variable</span> lib_test_ok
    <span class=3D"hljs-keyword">exit</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> invoke<=
/span> index {
    <span class=3D"hljs-keyword">global</span> tk_library
    <span class=3D"hljs-keyword">set</span> tags [.t tag names $index]
    <span class=3D"hljs-keyword">set</span> i [<span class=3D"hljs-keyword"=
>lsearch</span> -<span class=3D"hljs-keyword">glob</span> $tags demo_*]
    <span class=3D"hljs-keyword">if</span> {$i &lt; <span class=3D"hljs-num=
ber">0</span>} then {
	<span class=3D"hljs-keyword">return</span>
    }
    <span class=3D"hljs-keyword">set</span> cursor [.t cget -cursor]
    .t configure -cursor watch
    <span class=3D"hljs-keyword">update</span>
    <span class=3D"hljs-keyword">set</span> demo [<span class=3D"hljs-keywo=
rd">string</span> range [<span class=3D"hljs-keyword">lindex</span> $tags $=
i] <span class=3D"hljs-number">5</span> end]
    $demo
    <span class=3D"hljs-keyword">update</span>
    .t configure -cursor $cursor
    .t tag add visited <span class=3D"hljs-string">"$index linestart +1 cha=
rs"</span> <span class=3D"hljs-string">"$index lineend -1 chars"</span>
}
<span class=3D"hljs-keyword">namespace</span> import about::*
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> about_f=
ull</span> {} {
    setSystemFonts
    showAbout -title <span class=3D"hljs-string">"Test"</span> -version <sp=
an class=3D"hljs-string">"0.0.0"</span> -authors <span class=3D"hljs-string=
">"James Brown\nBob Marley\nJimmy Hendix"</span> -copyright <span class=3D"=
hljs-string">"(C) 2000 Application Lab"</span> -comment <span class=3D"hljs=
-string">"This window demonstates the About widget called with all options =
used (title, version, authors, copyright, comment, logo and url)."</span> -=
logo <span class=3D"hljs-string">"atmel_wm.gif"</span> -url <span class=3D"=
hljs-string">"www.atmel-wm.com"</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> about_n=
o_title</span> {} {
    setSystemFonts
    showAbout -authors <span class=3D"hljs-string">"James Brown\nBob Marley=
\nJimmy Hendix"</span> -copyright <span class=3D"hljs-string">"(C) 2000 App=
lication Lab"</span> -comment <span class=3D"hljs-string">"This window demo=
nstates the About widget called with all options used (title, version, auth=
ors, copyright, comment, logo and url)."</span> -logo <span class=3D"hljs-s=
tring">"atmel_wm.gif"</span> -url <span class=3D"hljs-string">"www.atmel-wm=
.com"</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> about_n=
o_authors</span> {} {
    setSystemFonts
    showAbout -title <span class=3D"hljs-string">"Test"</span> -version <sp=
an class=3D"hljs-string">"0.0.0"</span> -copyright <span class=3D"hljs-stri=
ng">"(C) 2000 Application Lab"</span> -comment <span class=3D"hljs-string">=
"This window demonstates the About widget called with all options used (tit=
le, version, authors, copyright, comment, logo and url)."</span> -logo <spa=
n class=3D"hljs-string">"atmel_wm.gif"</span> -url <span class=3D"hljs-stri=
ng">"www.atmel-wm.com"</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> about_n=
o_copyright</span> {} {
    setSystemFonts
    showAbout -title <span class=3D"hljs-string">"Test"</span> -version <sp=
an class=3D"hljs-string">"0.0.0"</span> -authors <span class=3D"hljs-string=
">"James Brown\nBob Marley\nJimmy Hendix"</span> -comment <span class=3D"hl=
js-string">"This window demonstates the About widget called with all option=
s used (title, version, authors, copyright, comment, logo and url)."</span>=
 -logo <span class=3D"hljs-string">"atmel_wm.gif"</span> -url <span class=
=3D"hljs-string">"www.atmel-wm.com"</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> about_n=
o_comment</span> {} {
    setSystemFonts
    showAbout -title <span class=3D"hljs-string">"Test"</span> -version <sp=
an class=3D"hljs-string">"0.0.0"</span> -authors <span class=3D"hljs-string=
">"James Brown\nBob Marley\nJimmy Hendix"</span> -copyright <span class=3D"=
hljs-string">"(C) 2000 Application Lab"</span> -logo <span class=3D"hljs-st=
ring">"atmel_wm.gif"</span> -url <span class=3D"hljs-string">"www.atmel-wm.=
com"</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> about_n=
o_logo</span> {} {
    setSystemFonts
    showAbout -title <span class=3D"hljs-string">"Test"</span> -version <sp=
an class=3D"hljs-string">"0.0.0"</span> -authors <span class=3D"hljs-string=
">"James Brown\nBob Marley\nJimmy Hendix"</span> -copyright <span class=3D"=
hljs-string">"(C) 2000 Application Lab"</span> -comment <span class=3D"hljs=
-string">"This window demonstates the About widget called with all options =
used (title, version, authors, copyright, comment, logo and url)."</span> -=
url <span class=3D"hljs-string">"www.atmel-wm.com"</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> about_n=
o_url</span> {} {
    setSystemFonts
    showAbout -title <span class=3D"hljs-string">"Test"</span> -version <sp=
an class=3D"hljs-string">"0.0.0"</span> -authors <span class=3D"hljs-string=
">"James Brown\nBob Marley\nJimmy Hendix"</span> -copyright <span class=3D"=
hljs-string">"(C) 2000 Application Lab"</span> -comment <span class=3D"hljs=
-string">"This window demonstates the About widget called with all options =
used (title, version, authors, copyright, comment, logo and url)."</span> -=
logo <span class=3D"hljs-string">"atmel_wm.gif"</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> about_n=
o_info</span> {} {
    setSystemFonts
    showAbout -title <span class=3D"hljs-string">"Test"</span> -version <sp=
an class=3D"hljs-string">"0.0.0"</span> -logo <span class=3D"hljs-string">"=
atmel_wm.gif"</span> -url <span class=3D"hljs-string">"www.atmel-wm.com"</s=
pan>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> about_f=
ull_courier</span> {} {
    setSystemFonts
    setDefaultFonts courier
    showAbout -title <span class=3D"hljs-string">"Test"</span> -version <sp=
an class=3D"hljs-string">"0.0.0"</span> -authors <span class=3D"hljs-string=
">"James Brown\nBob Marley\nJimmy Hendix"</span> -copyright <span class=3D"=
hljs-string">"(C) 2000 Application Lab"</span> -comment <span class=3D"hljs=
-string">"This window demonstates the About widget called with all options =
used (title, version, authors, copyright, comment, logo and url)."</span> -=
logo <span class=3D"hljs-string">"atmel_wm.gif"</span> -url <span class=3D"=
hljs-string">"www.atmel_wm.com"</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> progres=
sbar_flat</span> {} {
    setSystemFonts
    toplevel .top
    pack [<span class=3D"hljs-keyword">set</span> w [::progressbar::progres=
sbar .top.pb -shape flat]]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> percent <span class=3D"hljs-number">0</span>} {$percent &lt;=3D <=
span class=3D"hljs-number">100</span>} {<span class=3D"hljs-keyword">incr</=
span> percent} {
	$w configure -percent $percent
	<span class=3D"hljs-keyword">update</span>
    }
    destroy .top
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> progres=
sbar_3d</span> {} {
    setSystemFonts
    toplevel .top
    pack [<span class=3D"hljs-keyword">set</span> w [::progressbar::progres=
sbar .top.pb -shape <span class=3D"hljs-number">3</span>D]]
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> percent <span class=3D"hljs-number">0</span>} {$percent &lt;=3D <=
span class=3D"hljs-number">100</span>} {<span class=3D"hljs-keyword">incr</=
span> percent} {
	$w configure -percent $percent
	<span class=3D"hljs-keyword">update</span>
    }
    destroy .top
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> font_ch=
oose</span> {} {
    setSystemFonts
    <span class=3D"hljs-keyword">puts</span> [fontchoose]
}
main
</code></pre>
=09
=09
=09

=09
=09
=09

</body></html>
------MultipartBoundary--xlhojiW3QPKL7wqKJw6yCE1xA9Dpwi1jQtYcmnCE38----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-f52cbe0b-b911-4037-82a2-fc83e18c7e45@mhtml.blink

@charset "utf-8";

table, tbody, tr, th, td { border: 1px solid black; border-collapse: collap=
se; }

th { border-bottom: 2px solid black; }

td, th { padding-left: 5px; padding-right: 5px; }

.center, .center * { text-align: center; margin-left: auto; margin-right: a=
uto; }
------MultipartBoundary--xlhojiW3QPKL7wqKJw6yCE1xA9Dpwi1jQtYcmnCE38----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://creativetechguy.com/global/css/games.css?v=1555270978969

@charset "windows-1252";

.error-popup-container { background: rgb(153, 153, 153); width: 600px; max-=
width: 85vw; left: 50%; top: 50%; transform: translate(-50%, -50%); text-al=
ign: center; font-size: 25px; position: fixed; box-shadow: rgb(153, 153, 15=
3) 0px 0px 100px; border-radius: 60px; border: 1px solid black; z-index: 21=
47483646; }

.error-popup-message { color: rgb(105, 0, 0); font-weight: bold; padding: 2=
0px; }

.more-games-logo { position: absolute; margin: 8px; z-index: 100000000; lef=
t: 0px; top: 0px; }
------MultipartBoundary--xlhojiW3QPKL7wqKJw6yCE1xA9Dpwi1jQtYcmnCE38----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://creativetechguy.com/utilities/codedetector/styles/vs2015.css?v=1552844680374

@charset "windows-1252";

.hljs { display: block; overflow-x: auto; padding: 0.5em; background: rgb(3=
0, 30, 30); color: rgb(220, 220, 220); }

.hljs-keyword, .hljs-literal, .hljs-symbol, .hljs-name { color: rgb(86, 156=
, 214); }

.hljs-link { color: rgb(86, 156, 214); text-decoration: underline; }

.hljs-built_in, .hljs-type { color: rgb(78, 201, 176); }

.hljs-number, .hljs-class { color: rgb(184, 215, 163); }

.hljs-string, .hljs-meta-string { color: rgb(214, 157, 133); }

.hljs-regexp, .hljs-template-tag { color: rgb(154, 83, 52); }

.hljs-subst, .hljs-function, .hljs-title, .hljs-params, .hljs-formula { col=
or: rgb(220, 220, 220); }

.hljs-comment, .hljs-quote { color: rgb(87, 166, 74); font-style: italic; }

.hljs-doctag { color: rgb(96, 139, 78); }

.hljs-meta, .hljs-meta-keyword, .hljs-tag { color: rgb(155, 155, 155); }

.hljs-variable, .hljs-template-variable { color: rgb(189, 99, 197); }

.hljs-attr, .hljs-attribute, .hljs-builtin-name { color: rgb(156, 220, 254)=
; }

.hljs-section { color: gold; }

.hljs-emphasis { font-style: italic; }

.hljs-strong { font-weight: bold; }

.hljs-bullet, .hljs-selector-tag, .hljs-selector-id, .hljs-selector-class, =
.hljs-selector-attr, .hljs-selector-pseudo { color: rgb(215, 186, 125); }

.hljs-addition { background-color: rgb(20, 66, 18); display: inline-block; =
width: 100%; }

.hljs-deletion { background-color: rgb(102, 0, 0); display: inline-block; w=
idth: 100%; }
------MultipartBoundary--xlhojiW3QPKL7wqKJw6yCE1xA9Dpwi1jQtYcmnCE38------
