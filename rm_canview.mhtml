From: <Saved by Blink>
Snapshot-Content-Location: https://creativetechguy.com/utilities/codedetector
Subject: Code Detector & Formatter
Date: Wed, 1 Feb 2023 20:32:22 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--LTwbzBtmCyiBiNHv56BjIvoYorS2HgUm17lD4krM9m----"


------MultipartBoundary--LTwbzBtmCyiBiNHv56BjIvoYorS2HgUm17lD4krM9m----
Content-Type: text/html
Content-ID: <frame-3C61109AEA395EBB7F964A376C2205BB@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://creativetechguy.com/utilities/codedetector

<!DOCTYPE html><html lang=3D"en"><head><meta http-equiv=3D"Content-Type" co=
ntent=3D"text/html; charset=3DUTF-8"><link rel=3D"stylesheet" type=3D"text/=
css" href=3D"cid:css-682e52e1-d461-417d-b27c-bff53ba44a84@mhtml.blink" />
=09
	<meta name=3D"keywords" content=3D"programming, language, detector, identi=
fier, highlighter, syntax, code, ctg, Creative Tech Guy, Jason O'Neill">
	<meta name=3D"description" content=3D"Automatically detect a programming l=
anguage by pasting a snippet of code.">
	<meta name=3D"author" content=3D"Jason O'Neill">
	<meta name=3D"viewport" content=3D"width=3Ddevice-width, initial-scale=3D1=
.0">

	<title>Code Detector &amp; Formatter</title>

	<link rel=3D"apple-touch-icon" sizes=3D"180x180" href=3D"https://creativet=
echguy.com/apple-touch-icon.png">
	<link rel=3D"icon" type=3D"image/png" sizes=3D"32x32" href=3D"https://crea=
tivetechguy.com/favicon-32x32.png">
	<link rel=3D"icon" type=3D"image/png" sizes=3D"16x16" href=3D"https://crea=
tivetechguy.com/favicon-16x16.png">
	<link rel=3D"manifest" href=3D"https://creativetechguy.com/manifest.json">
	<link rel=3D"mask-icon" href=3D"https://creativetechguy.com/safari-pinned-=
tab.svg" color=3D"#5bbad5">
	<link rel=3D"shortcut icon" href=3D"https://creativetechguy.com/favicon.ic=
o">
	<meta name=3D"apple-mobile-web-app-title" content=3D"Code Detector">
	<meta name=3D"application-name" content=3D"Code Detector">
	<meta name=3D"theme-color" content=3D"#ffffff">

	<meta property=3D"og:title" content=3D"Code Detector &amp; Formatter">
	<meta property=3D"og:type" content=3D"website">
	<meta property=3D"og:locale" content=3D"en_US">
	<meta property=3D"og:url" content=3D"https://creativetechguy.com/utilities=
/codedetector">
	<meta property=3D"og:description" content=3D"Automatically detect a progra=
mming language by pasting a snippet of code.">
	<meta property=3D"og:image" content=3D"https://creativetechguy.com/images/=
logo.png">

	<meta name=3D"twitter:card" content=3D"summary">
	<meta name=3D"twitter:site" content=3D"@JasonONeillCTG">
	<meta name=3D"twitter:title" content=3D"Code Detector &amp; Formatter">
	<meta name=3D"twitter:description" content=3D"Automatically detect a progr=
amming language by pasting a snippet of code.">
	<meta name=3D"twitter:image" content=3D"https://creativetechguy.com/images=
/logo.png">

	<link rel=3D"stylesheet" href=3D"https://creativetechguy.com/global/css/ga=
mes.css?v=3D1555270978969" type=3D"text/css">
	<link rel=3D"stylesheet" href=3D"https://creativetechguy.com/utilities/cod=
edetector/styles/vs2015.css?v=3D1552844680374">
=09
</head>
<body>
=09
=09
	<pre><code id=3D"highlightCode" style=3D"overflow: auto;" class=3D"hljs"><=
span class=3D"hljs-comment">#dbgBeginSrc [info script]</span>
<span class=3D"hljs-keyword">global</span> atmelProtocol protocol
<span class=3D"hljs-keyword">global</span> cmd dongle cv
<span class=3D"hljs-keyword">set</span> cv(STB) <span class=3D"hljs-string"=
>"C"</span>
<span class=3D"hljs-keyword">set</span> cv(SPB) [<span class=3D"hljs-keywor=
d">format</span> %c <span class=3D"hljs-number">0X0A</span>]
<span class=3D"hljs-keyword">set</span> atmelProtocol(ci_select_node) <span=
 class=3D"hljs-number">0</span>
<span class=3D"hljs-keyword">set</span> atmelProtocol(ci_prog_start) <span =
class=3D"hljs-number">1</span>
<span class=3D"hljs-keyword">set</span> atmelProtocol(ci_prog_data) <span c=
lass=3D"hljs-number">2</span>
<span class=3D"hljs-keyword">set</span> atmelProtocol(ci_display_data) <spa=
n class=3D"hljs-number">3</span>
<span class=3D"hljs-keyword">set</span> atmelProtocol(ci_write_command) <sp=
an class=3D"hljs-number">4</span>
<span class=3D"hljs-keyword">set</span> atmelProtocol(ci_read_command) <spa=
n class=3D"hljs-number">5</span>
<span class=3D"hljs-keyword">set</span> atmelProtocol(ci_error) <span class=
=3D"hljs-number">6</span>
<span class=3D"hljs-keyword">set</span> atmelProtocol(dongle) FFFF
<span class=3D"hljs-keyword">set</span> ::deviceArray(crisConnect) <span cl=
ass=3D"hljs-number">00</span>
<span class=3D"hljs-keyword">set</span> cmd(select_node) [<span class=3D"hl=
js-keyword">format</span> %<span class=3D"hljs-number">04</span>X [<span cl=
ass=3D"hljs-keyword">expr</span> $atmelProtocol(ci_select_node) - <span cla=
ss=3D"hljs-number">0</span>x$::deviceArray(crisConnect)0]]
<span class=3D"hljs-keyword">set</span> cmd(prog_start) [<span class=3D"hlj=
s-keyword">format</span> %<span class=3D"hljs-number">04</span>X [<span cla=
ss=3D"hljs-keyword">expr</span> $atmelProtocol(ci_prog_start) - <span class=
=3D"hljs-number">0</span>x$::deviceArray(crisConnect)0]]
<span class=3D"hljs-keyword">set</span> cmd(prog_data) [<span class=3D"hljs=
-keyword">format</span> %<span class=3D"hljs-number">04</span>X [<span clas=
s=3D"hljs-keyword">expr</span> $atmelProtocol(ci_prog_data) - <span class=
=3D"hljs-number">0</span>x$::deviceArray(crisConnect)0]]
<span class=3D"hljs-keyword">set</span> cmd(display_data) [<span class=3D"h=
ljs-keyword">format</span> %<span class=3D"hljs-number">04</span>X [<span c=
lass=3D"hljs-keyword">expr</span> $atmelProtocol(ci_display_data) - <span c=
lass=3D"hljs-number">0</span>x$::deviceArray(crisConnect)0]]
<span class=3D"hljs-keyword">set</span> cmd(write_command) [<span class=3D"=
hljs-keyword">format</span> %<span class=3D"hljs-number">04</span>X [<span =
class=3D"hljs-keyword">expr</span> $atmelProtocol(ci_write_command) - <span=
 class=3D"hljs-number">0</span>x$::deviceArray(crisConnect)0]]
<span class=3D"hljs-keyword">set</span> cmd(read_command) [<span class=3D"h=
ljs-keyword">format</span> %<span class=3D"hljs-number">04</span>X [<span c=
lass=3D"hljs-keyword">expr</span> $atmelProtocol(ci_read_command) - <span c=
lass=3D"hljs-number">0</span>x$::deviceArray(crisConnect)0]]
<span class=3D"hljs-keyword">set</span> cmd(ciError) [<span class=3D"hljs-k=
eyword">format</span> %<span class=3D"hljs-number">04</span>X [<span class=
=3D"hljs-keyword">expr</span> $atmelProtocol(ci_error) - <span class=3D"hlj=
s-number">0</span>x$::deviceArray(crisConnect)0]]
<span class=3D"hljs-keyword">set</span> dongle [<span class=3D"hljs-keyword=
">format</span> %<span class=3D"hljs-number">04</span>X <span class=3D"hljs=
-number">0</span>x$atmelProtocol(dongle)]
<span class=3D"hljs-keyword">if</span> {! [<span class=3D"hljs-keyword">inf=
o</span> exists protocol(frameLengthW)]} then {
    <span class=3D"hljs-keyword">set</span> protocol(frameLengthW) <span cl=
ass=3D"hljs-number">8</span>
    <span class=3D"hljs-keyword">set</span> protocol(frameLengthR) <span cl=
ass=3D"hljs-number">8</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclIni=
tComm</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> canBaud flipStates
    <span class=3D"hljs-keyword">set</span> status [ptclInitRs232Comm]
    <span class=3D"hljs-keyword">if</span> {$status =3D=3D <span class=3D"h=
ljs-number">1</span>} then {
	<span class=3D"hljs-keyword">set</span> status [ptclInitDongle]
    } else {
	ptclCancelRs232Comm
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclIni=
tRs232Comm</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> flipStates port baud baudLis=
t prot waitTime loadConfig projDir
    log_message <span class=3D"hljs-string">"Selected protocol : $prot Rs23=
2"</span>
    log_message <span class=3D"hljs-string">"Initializing Rs232 communicati=
on..."</span>
    <span class=3D"hljs-keyword">set</span> sync <span class=3D"hljs-number=
">0</span>
<span class=3D"hljs-comment">    #dbgShowVar "port =3D $port"</span>
<span class=3D"hljs-comment">    #dbgShowVar "baud =3D $baud"</span>
    <span class=3D"hljs-keyword">if</span> {![<span class=3D"hljs-keyword">=
info</span> exists ::sio::devId]} then {
	<span class=3D"hljs-keyword">set</span> ::sio::devId [::sio::openDevice $p=
ort $baud async n <span class=3D"hljs-number">8</span> <span class=3D"hljs-=
number">1</span> <span class=3D"hljs-number">0</span>]
    }
    <span class=3D"hljs-keyword">if</span> {$::sio::devId !=3D <span class=
=3D"hljs-number">0</span>} then {
	<span class=3D"hljs-keyword">set</span> loadConfig(globals) <span class=3D=
"hljs-string">"global port baud"</span>
	<span class=3D"hljs-keyword">set</span> loadConfig(port) <span class=3D"hl=
js-string">"set port $port"</span>
	<span class=3D"hljs-keyword">set</span> loadConfig(baud) <span class=3D"hl=
js-string">"set baud $baud"</span>
	<span class=3D"hljs-keyword">set</span> loadConfig(initComm) <span class=
=3D"hljs-string">"connectRS232 Standard"</span>
	::sio::setBaud $baud
	<span class=3D"hljs-keyword">set</span> sync <span class=3D"hljs-number">1=
</span>
    } else {
	<span class=3D"hljs-keyword">catch</span> [<span class=3D"hljs-keyword">un=
set</span> ::sio::devId]
	updateGUI onRs232CommunicationOff
	updateGUI onAnyCommunicationOff
	<span class=3D"hljs-keyword">set</span> sync <span class=3D"hljs-number">-=
3</span>
	<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-string=
">"The RS232 port could not be opened."</span>
	messageBox <span class=3D"hljs-string">"RS232 Communication"</span> <span =
class=3D"hljs-keyword">error</span> $message
	log_message <span class=3D"hljs-string">"RS232 Communication could not be =
opened."</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $sync
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclCan=
celRs232Comm</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> flipStates
    <span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">i=
nfo</span> exists ::sio::devId]} then {
	::sio::closeDevice
	updateGUI onRs232CommunicationOff
	updateGUI onAnyCommunicationOff
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclSen=
dFrame</span> {frame} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> waitTime
    <span class=3D"hljs-keyword">set</span> ::sio::sioVars(AbortTx) <span c=
lass=3D"hljs-number">0</span>
    ::sio::clearRxBuffer
    startTimeOutCounter $waitTime(standard)
    <span class=3D"hljs-keyword">puts</span> -nonewline $::sio::devId $fram=
e
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $frame
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclUpd=
ateOrCompareBuffer</span> {addr6digit action} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> cv
    <span class=3D"hljs-keyword">set</span> addr <span class=3D"hljs-number=
">1</span>
    <span class=3D"hljs-keyword">set</span> lineIdx <span class=3D"hljs-num=
ber">0</span>
    <span class=3D"hljs-keyword">while</span> {[<span class=3D"hljs-keyword=
">string</span> length $::sio::sioVars(RxBuffer)] !=3D <span class=3D"hljs-=
number">0</span>} {
	<span class=3D"hljs-keyword">set</span> line [<span class=3D"hljs-keyword"=
>string</span> range $::sio::sioVars(RxBuffer) <span class=3D"hljs-number">=
0</span> [<span class=3D"hljs-keyword">string</span> first $cv(SPB) $::sio:=
:sioVars(RxBuffer) <span class=3D"hljs-number">0</span>]]
	<span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">set<=
/span> i <span class=3D"hljs-number">5</span>; <span class=3D"hljs-keyword"=
>set</span> j <span class=3D"hljs-number">0</span>} {[<span class=3D"hljs-k=
eyword">string</span> range $line $i $i] !=3D $cv(SPB)} {<span class=3D"hlj=
s-keyword">incr</span> i <span class=3D"hljs-number">2</span>; <span class=
=3D"hljs-keyword">incr</span> j <span class=3D"hljs-number">1</span>} {
	    <span class=3D"hljs-keyword">if</span> {$action =3D=3D <span class=3D"=
hljs-string">"update"</span>} then {
		writeBuffer [<span class=3D"hljs-keyword">format</span> <span class=3D"hl=
js-string">"%06X"</span> [<span class=3D"hljs-keyword">expr</span> $addr6di=
git + $lineIdx*<span class=3D"hljs-number">8</span> + $j]] [<span class=3D"=
hljs-keyword">string</span> range $line $i [<span class=3D"hljs-keyword">ex=
pr</span> $i + <span class=3D"hljs-number">1</span>]]
	    } else {
		<span class=3D"hljs-keyword">set</span> addr <span class=3D"hljs-number">=
-1</span>
		<span class=3D"hljs-keyword">if</span> {[readBuffer [<span class=3D"hljs-=
keyword">format</span> <span class=3D"hljs-string">"%06X"</span> [<span cla=
ss=3D"hljs-keyword">expr</span> $addr6digit + $lineIdx*<span class=3D"hljs-=
number">8</span> + $j]]] !=3D [<span class=3D"hljs-keyword">string</span> r=
ange $line $i [<span class=3D"hljs-keyword">expr</span> $i + <span class=3D=
"hljs-number">1</span>]]} then {
		    <span class=3D"hljs-keyword">set</span> addr [<span class=3D"hljs-key=
word">format</span> <span class=3D"hljs-string">"%#06X"</span> [<span class=
=3D"hljs-keyword">expr</span> $addr6digit + $lineIdx*<span class=3D"hljs-nu=
mber">8</span> + $j]]
		    <span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-s=
tring">"Memory Verify Fail at: $addr"</span>
		    log_message $message
		    actionsLog_message <span class=3D"hljs-string">"Memory Verify Fail at=
: $addr"</span>
		    cmdsResetProgressBar
<span class=3D"hljs-comment">		    #dbgShowInfo "Verify FAIL."</span>
		    <span class=3D"hljs-keyword">break</span>
		}
	    }
	}
	<span class=3D"hljs-keyword">if</span> {($addr !=3D <span class=3D"hljs-nu=
mber">-1</span>) &amp;&amp;($addr !=3D <span class=3D"hljs-number">1</span>=
)} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">set</span> ::sio::sioVars(RxBuffer) [<span cl=
ass=3D"hljs-keyword">string</span> replace $::sio::sioVars(RxBuffer) <span =
class=3D"hljs-number">0</span> [<span class=3D"hljs-keyword">string</span> =
first $cv(SPB) $::sio::sioVars(RxBuffer) <span class=3D"hljs-number">0</spa=
n>]]
	<span class=3D"hljs-keyword">incr</span> lineIdx
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $addr
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclSel=
ectNode</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> cv cmd
<span class=3D"hljs-comment">    #dbgShowInfo "*********** Looping 50 times=
 to clear the error counter ************"</span>
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i <span class=3D"hljs-number">0</span>} {$i &lt; <span class=3D"h=
ljs-number">50</span>} {<span class=3D"hljs-keyword">incr</span> i} {
	ptclSelectNod <span class=3D"hljs-number">0</span>
	<span class=3D"hljs-keyword">update</span>
    }
<span class=3D"hljs-comment">    #dbgShowInfo "*********** End of clearing =
error counter loop ************"</span>
    ptclSelectNod <span class=3D"hljs-number">1</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span>
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclSel=
ectNod</span> {displayCanError} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> flipStates atmelProtocol wai=
tTime readframe
    <span class=3D"hljs-keyword">global</span> dongle sendframe cmd canBaud=
 cv
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">set</span> frame <span class=3D"hljs-strin=
g">"${cv(STB)}${cmd(select_node)}"</span>
    ptclSendFrame <span class=3D"hljs-string">"${frame}${::deviceArray(nnbC=
onnect)}${cv(SPB)}"</span>
    <span class=3D"hljs-keyword">if</span> {! [getCmdEcho $frame <span clas=
s=3D"hljs-number">10</span> <span class=3D"hljs-number">1000</span>]} then =
{
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">set</span> tmp [<span class=3D"hljs-keywor=
d">string</span> range $::sio::sioVars(RxBuffer) end<span class=3D"hljs-num=
ber">-2</span> end<span class=3D"hljs-number">-1</span>]
    <span class=3D"hljs-keyword">if</span> {$displayCanError} then {
	<span class=3D"hljs-keyword">if</span> {[noCANviewError]} then {
	    <span class=3D"hljs-keyword">set</span> atmelProtocol(commState) $tmp
	    <span class=3D"hljs-keyword">if</span> {$atmelProtocol(commState) =3D=
=3D <span class=3D"hljs-string">"01"</span>} then {
		<span class=3D"hljs-keyword">if</span> {[winfo exists .main.f_buffer.b_me=
mSelect]} then {
		    pack .main.f_buffer.b_memSelect -side bottom -expand <span class=3D"h=
ljs-number">0</span> -pady <span class=3D"hljs-number">17</span>
		}
		ptclReadBootlVer
		updateGUI onAnyCommunicationOn
		updateGUI onCanNodeSelectionOpened
		log_message <span class=3D"hljs-string">"CAN node $::deviceArray(nnbConne=
ct) opened."</span>
<span class=3D"hljs-comment">		#dbgShowInfo "CAN node $::deviceArray(nnbCon=
nect) opened."</span>
	    } else {
		<span class=3D"hljs-keyword">if</span> {[winfo exists .main.f_buffer.b_me=
mSelect]} then {
		    pack forget .main.f_buffer.b_memSelect
		}
		updateGUI onAnyCommunicationOff
		updateGUI onCanNodeSelectionClosed
		log_message <span class=3D"hljs-string">"CAN node $::deviceArray(nnbConne=
ct) closed."</span>
<span class=3D"hljs-comment">		#dbgShowInfo "CAN node $::deviceArray(nnbCon=
nect) closed."</span>
	    }
	} else {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	    <span class=3D"hljs-keyword">set</span> flipStates(anyComm) <span clas=
s=3D"hljs-string">"off"</span>
	    updateGUI onAnyCommunicationOff
	}
    }
<span class=3D"hljs-comment">    #dbgShowVar "status =3D $status"</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclSen=
dIdProgStart</span> {addLo addHi {<span class=3D"hljs-keyword">memory</span=
> <span class=3D"hljs-string">"00"</span>}} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> cv cmd
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">set</span> frame <span class=3D"hljs-strin=
g">"${cv(STB)}${cmd(prog_start)}"</span>
    <span class=3D"hljs-keyword">set</span> addrStr <span class=3D"hljs-str=
ing">"[format %04X 0x$addLo][format %04X 0x$addHi]"</span>
    ptclSendFrame <span class=3D"hljs-string">"${frame}${memory}${addrStr}$=
{cv(SPB)}"</span>
    <span class=3D"hljs-keyword">if</span> {! [getCmdEcho $frame <span clas=
s=3D"hljs-number">0</span> <span class=3D"hljs-number">1000</span>]} then {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclPro=
gramData</span> {addLo addHi dummyArg} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> cv cmd
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">set</span> frame <span class=3D"hljs-strin=
g">"${cv(STB)}${cmd(prog_data)}"</span>
    <span class=3D"hljs-keyword">set</span> fullFrame $frame
    <span class=3D"hljs-keyword">for</span> {<span class=3D"hljs-keyword">s=
et</span> i $addLo} {$i &lt;=3D $addHi} {<span class=3D"hljs-keyword">incr<=
/span> i} {
	<span class=3D"hljs-keyword">set</span> fullFrame ${fullFrame}[readBuffer =
[<span class=3D"hljs-keyword">format</span> <span class=3D"hljs-string">"%0=
6X"</span> $i]]
    }
<span class=3D"hljs-comment">    #dbgShowVar "frame =3D $fullFrame"</span>
    ptclSendFrame <span class=3D"hljs-string">"${fullFrame}${cv(SPB)}"</spa=
n>
    <span class=3D"hljs-keyword">if</span> {! [getCmdEcho $frame <span clas=
s=3D"hljs-number">8</span> <span class=3D"hljs-number">3000</span>]} then {
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">set</span> tmp [<span class=3D"hljs-keywor=
d">string</span> range $::sio::sioVars(RxBuffer) end<span class=3D"hljs-num=
ber">-2</span> end<span class=3D"hljs-number">-1</span>]
    <span class=3D"hljs-keyword">if</span> {$tmp =3D=3D <span class=3D"hljs=
-string">"00"</span>} then {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>1</span>
    } elseif {$tmp =3D=3D <span class=3D"hljs-string">"01"</span>} {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    } elseif {$tmp =3D=3D <span class=3D"hljs-string">"02"</span>} {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>2</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dBlock</span> {addrLo addrHi {<span class=3D"hljs-keyword">memory</span> <s=
pan class=3D"hljs-string">"00"</span>} {action <span class=3D"hljs-string">=
"update"</span>}} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> cv cmd
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">set</span> mod [<span class=3D"hljs-keywor=
d">expr</span> ($addrHi - $addrLo + <span class=3D"hljs-number">1</span>) %=
 <span class=3D"hljs-number">8</span>]
    <span class=3D"hljs-keyword">set</span> nbFrames [<span class=3D"hljs-k=
eyword">expr</span> ($addrHi - $addrLo + <span class=3D"hljs-number">1</spa=
n>) / <span class=3D"hljs-number">8</span>]
    <span class=3D"hljs-keyword">if</span> {$mod} then {
	<span class=3D"hljs-keyword">set</span> nbChars [<span class=3D"hljs-keywo=
rd">expr</span> ($nbFrames * (<span class=3D"hljs-number">5</span>+<span cl=
ass=3D"hljs-number">16</span>+<span class=3D"hljs-number">1</span>)) + <spa=
n class=3D"hljs-number">5</span> + ($mod * <span class=3D"hljs-number">2</s=
pan>) + <span class=3D"hljs-number">1</span>]
    } else {
	<span class=3D"hljs-keyword">set</span> nbChars [<span class=3D"hljs-keywo=
rd">expr</span> $nbFrames * (<span class=3D"hljs-number">5</span>+<span cla=
ss=3D"hljs-number">16</span>+<span class=3D"hljs-number">1</span>)]
    }
<span class=3D"hljs-comment">    #dbgShowVar "Expected number of chars =3D =
$nbChars"</span>
    <span class=3D"hljs-keyword">set</span> addrStr <span class=3D"hljs-str=
ing">"[format %04X $addrLo][format %04X $addrHi]"</span>
    <span class=3D"hljs-keyword">set</span> frame <span class=3D"hljs-strin=
g">"${cv(STB)}${cmd(display_data)}"</span>
    ptclSendFrame <span class=3D"hljs-string">"${frame}${memory}${addrStr}$=
{cv(SPB)}"</span>
    <span class=3D"hljs-keyword">if</span> {! [getCmdEcho $frame $nbChars <=
span class=3D"hljs-number">4000</span>]} then {
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">set</span> failAddr [ptclUpdateOrCompareBu=
ffer [<span class=3D"hljs-keyword">format</span> <span class=3D"hljs-string=
">"%#06X"</span> $addrLo] $action]
    <span class=3D"hljs-keyword">if</span> {($action =3D=3D <span class=3D"=
hljs-string">"compare"</span>) &amp;&amp;($failAddr !=3D <span class=3D"hlj=
s-number">-1</span>)} then {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclBla=
nkCheck</span> {addrLo addrHi {<span class=3D"hljs-keyword">memory</span> <=
span class=3D"hljs-string">"01"</span>}} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> cv cmd
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">-1</span>
    <span class=3D"hljs-keyword">set</span> addrStr [<span class=3D"hljs-ke=
yword">format</span> %<span class=3D"hljs-number">04</span>X <span class=3D=
"hljs-string">"0x$addrLo"</span>][<span class=3D"hljs-keyword">format</span=
> %<span class=3D"hljs-number">04</span>X <span class=3D"hljs-string">"0x$a=
ddrHi"</span>]
    <span class=3D"hljs-keyword">set</span> frame <span class=3D"hljs-strin=
g">"${cv(STB)}${cmd(display_data)}"</span>
    ptclSendFrame <span class=3D"hljs-string">"${frame}${memory}${addrStr}$=
{cv(SPB)}"</span>
    <span class=3D"hljs-keyword">if</span> {! [getCmdEcho $frame <span clas=
s=3D"hljs-number">0</span> <span class=3D"hljs-number">4000</span>]} then {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>-2</span>
    } else {
	<span class=3D"hljs-keyword">set</span> tmpStr $::sio::sioVars(RxBuffer)
	<span class=3D"hljs-keyword">if</span> {! [noCANviewError]} then {
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">-2</span>
	} elseif {[<span class=3D"hljs-keyword">string</span> length $tmpStr] =3D=
=3D <span class=3D"hljs-number">10</span>} {
	    <span class=3D"hljs-keyword">set</span> status [<span class=3D"hljs-ke=
yword">string</span> range $tmpStr end<span class=3D"hljs-number">-4</span>=
 end<span class=3D"hljs-number">-1</span>]
	}
    }
<span class=3D"hljs-comment">    #dbgShowVar "ptclBlankCheck status =3D $st=
atus"</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclEra=
seBlock0</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclWriteByte <span cla=
ss=3D"hljs-string">""</span> <span class=3D"hljs-string">"0000"</span> <spa=
n class=3D"hljs-number">3000</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclEra=
seBlock1</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclWriteByte <span cla=
ss=3D"hljs-string">""</span> <span class=3D"hljs-string">"0020"</span> <spa=
n class=3D"hljs-number">3000</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclEra=
seBlock2</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclWriteByte <span cla=
ss=3D"hljs-string">""</span> <span class=3D"hljs-string">"0040"</span> <spa=
n class=3D"hljs-number">3000</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclFul=
lChipErase</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclWriteByte <span cla=
ss=3D"hljs-string">""</span> <span class=3D"hljs-string">"00FF"</span> <spa=
n class=3D"hljs-number">10000</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teByte</span> {data cmdBytes {timeOut <span class=3D"hljs-number">1000</spa=
n>}} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> cv cmd
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">set</span> frame <span class=3D"hljs-strin=
g">"${cv(STB)}${cmd(write_command)}"</span>
    ptclSendFrame <span class=3D"hljs-string">"${frame}${cmdBytes}${data}${=
cv(SPB)}"</span>
    <span class=3D"hljs-keyword">if</span> {! [getCmdEcho $frame <span clas=
s=3D"hljs-number">8</span> $timeOut]} then {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    } elseif {! [noCANviewError]} {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teBSB</span> {data} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclWriteByte $data <sp=
an class=3D"hljs-string">"0100"</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teSBV</span> {data} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclWriteByte $data <sp=
an class=3D"hljs-string">"0101"</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclPro=
gSSBlev1</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> expAnsw
    <span class=3D"hljs-keyword">set</span> status [ptclWriteByte $expAnsw(=
readSSBlev1Test) <span class=3D"hljs-string">"0105"</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclPro=
gSSBlev2</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> expAnsw
    <span class=3D"hljs-keyword">set</span> status [ptclWriteByte $expAnsw(=
readSSBlev2Test) <span class=3D"hljs-string">"0105"</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teEB</span> {data} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclWriteByte $data <sp=
an class=3D"hljs-string">"0106"</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teBTC1</span> {data} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclWriteByte $data <sp=
an class=3D"hljs-string">"011C"</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teBTC2</span> {data} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclWriteByte $data <sp=
an class=3D"hljs-string">"011D"</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teBTC3</span> {data} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclWriteByte $data <sp=
an class=3D"hljs-string">"011E"</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teNNB</span> {data} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclWriteByte $data <sp=
an class=3D"hljs-string">"011F"</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teCRIS</span> {data} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclWriteByte $data <sp=
an class=3D"hljs-string">"0120"</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teHwByte</span> {{data <span class=3D"hljs-string">"X"</span>}} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">if</span> {$data =3D=3D <span class=3D"hlj=
s-string">"X"</span>} then {
	<span class=3D"hljs-keyword">set</span> data [<span class=3D"hljs-keyword"=
>format</span> %<span class=3D"hljs-number">02</span>X [<span class=3D"hljs=
-keyword">expr</span> [<span class=3D"hljs-keyword">expr</span> <span class=
=3D"hljs-number">0</span>x$::deviceArray(hsb) &amp; <span class=3D"hljs-num=
ber">0x3F</span>] | [<span class=3D"hljs-keyword">expr</span> <span class=
=3D"hljs-number">0</span>x$::deviceArray(x2Fuse) &lt;&lt; <span class=3D"hl=
js-number">7</span>] | [<span class=3D"hljs-keyword">expr</span> <span clas=
s=3D"hljs-number">0</span>x$::deviceArray(bljbFuse) &lt;&lt; <span class=3D=
"hljs-number">6</span>]]]
    }
    <span class=3D"hljs-keyword">set</span> status [ptclWriteByte $data <sp=
an class=3D"hljs-string">"0200"</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teHwReset</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclWriteByte $data <sp=
an class=3D"hljs-string">"0300"</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclWri=
teLJMP</span> {address} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclWriteByte $address =
<span class=3D"hljs-string">"0301"</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclSet=
PortsConfig</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> bootloaderVerDependent
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">if</span> {$bootloaderVerDependent(p1p3p4_=
config)} then {
	<span class=3D"hljs-keyword">set</span> d0 <span class=3D"hljs-number">01<=
/span>
	<span class=3D"hljs-keyword">foreach</span> p {p1 p3 p4} d1 {<span class=
=3D"hljs-number">02</span> <span class=3D"hljs-number">03</span> <span clas=
s=3D"hljs-number">04</span>} {
	    <span class=3D"hljs-keyword">if</span> {! [ptclWriteByte $::deviceArra=
y(${p}_config) ${d0}${d1}]} then {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
		<span class=3D"hljs-keyword">break</span>
	    }
	}
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dBootlVer</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> cv flipStates cmd
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">set</span> p bootlVer
    <span class=3D"hljs-keyword">set</span> frame <span class=3D"hljs-strin=
g">"${cv(STB)}${cmd(read_command)}"</span>
    ptclSendFrame <span class=3D"hljs-string">"${frame}0000${cv(SPB)}"</spa=
n>
    <span class=3D"hljs-keyword">if</span> {! [getCmdEcho $frame <span clas=
s=3D"hljs-number">8</span> <span class=3D"hljs-number">1000</span>]} then {
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">set</span> tmp [<span class=3D"hljs-keywor=
d">string</span> range $::sio::sioVars(RxBuffer) end<span class=3D"hljs-num=
ber">-2</span> end<span class=3D"hljs-number">-1</span>]
    <span class=3D"hljs-keyword">if</span> {[noCANviewError]} then {
	<span class=3D"hljs-keyword">set</span> c1 [<span class=3D"hljs-keyword">s=
tring</span> index $tmp end<span class=3D"hljs-number">-1</span>]
	<span class=3D"hljs-keyword">set</span> c2 [<span class=3D"hljs-keyword">s=
tring</span> index $tmp end]
	<span class=3D"hljs-keyword">set</span> ::deviceArray($p) <span class=3D"h=
ljs-string">"1.$c1.$c2"</span>
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($p) =3D $::deviceA=
rray($p)" </span>
	setBootlVerDepFeatures <span class=3D"hljs-string">"CAN"</span> ${c1}${c2}
    } else {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
	<span class=3D"hljs-keyword">set</span> flipStates(anyComm) <span class=3D=
"hljs-string">"off"</span>
	updateGUI onAnyCommunicationOff
    }
<span class=3D"hljs-comment">    #dbgShowVar "status =3D $status"</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dDevBootId1</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclreadByte <span clas=
s=3D"hljs-string">"deviceBootId1"</span> <span class=3D"hljs-string">"0001"=
</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dDevBootId2</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclreadByte <span clas=
s=3D"hljs-string">"deviceBootId2"</span> <span class=3D"hljs-string">"0002"=
</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dBSB</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclreadByte <span clas=
s=3D"hljs-string">"bsb"</span> <span class=3D"hljs-string">"0100"</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dSBV</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclreadByte <span clas=
s=3D"hljs-string">"sbv"</span> <span class=3D"hljs-string">"0101"</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dSSB</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> expAnsw
    <span class=3D"hljs-keyword">set</span> status [ptclreadByte <span clas=
s=3D"hljs-string">"ssb"</span> <span class=3D"hljs-string">"0105"</span>]
    <span class=3D"hljs-keyword">set</span> ::deviceArray(level) X
    <span class=3D"hljs-keyword">foreach</span> lev {<span class=3D"hljs-nu=
mber">0</span> <span class=3D"hljs-number">1</span> <span class=3D"hljs-num=
ber">2</span>} {
	<span class=3D"hljs-keyword">foreach</span> i $expAnsw(readSSBlev$lev) {
	    <span class=3D"hljs-keyword">if</span> {$::deviceArray(ssb) =3D=3D $i}=
 then {
		<span class=3D"hljs-keyword">set</span> ::deviceArray(level) $lev
	    }
	}
    }
    updateGUI onSecurityLevelChange
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dEB</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclreadByte <span clas=
s=3D"hljs-string">"eb"</span> <span class=3D"hljs-string">"0106"</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dManufId</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclreadByte <span clas=
s=3D"hljs-string">"manufId"</span> <span class=3D"hljs-string">"0130"</span=
>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dDeviceId1</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclreadByte <span clas=
s=3D"hljs-string">"deviceId1"</span> <span class=3D"hljs-string">"0131"</sp=
an>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dDeviceId2</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclreadByte <span clas=
s=3D"hljs-string">"deviceId2"</span> <span class=3D"hljs-string">"0160"</sp=
an>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dDeviceId3</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclreadByte <span clas=
s=3D"hljs-string">"deviceId3"</span> <span class=3D"hljs-string">"0161"</sp=
an>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dBTC1</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclreadByte <span clas=
s=3D"hljs-string">"btc1"</span> <span class=3D"hljs-string">"011C"</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dBTC2</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclreadByte <span clas=
s=3D"hljs-string">"btc2"</span> <span class=3D"hljs-string">"011D"</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dBTC3</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclreadByte <span clas=
s=3D"hljs-string">"btc3"</span> <span class=3D"hljs-string">"011E"</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dNNB</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclreadByte <span clas=
s=3D"hljs-string">"nnbProg"</span> <span class=3D"hljs-string">"011F"</span=
>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dCRIS</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclreadByte <span clas=
s=3D"hljs-string">"crisProg"</span> <span class=3D"hljs-string">"0120"</spa=
n>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dHwByte</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">set</span> status [ptclreadByte <span clas=
s=3D"hljs-string">"hsb"</span> <span class=3D"hljs-string">"0200"</span>]
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dPortsConfig</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> bootloaderVerDependent cv fl=
ipStates cmd
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">if</span> {$bootloaderVerDependent(p1p3p4_=
config)} then {
	<span class=3D"hljs-keyword">set</span> d0 <span class=3D"hljs-number">01<=
/span>
	<span class=3D"hljs-keyword">foreach</span> p {p1 p3 p4} d1 {<span class=
=3D"hljs-number">02</span> <span class=3D"hljs-number">03</span> <span clas=
s=3D"hljs-number">04</span>} {
	    <span class=3D"hljs-keyword">set</span> frame <span class=3D"hljs-stri=
ng">"${cv(STB)}${cmd(read_command)}${d0}${d1}"</span>
	    ptclSendFrame <span class=3D"hljs-string">"${frame}${cv(SPB)}"</span>
	    <span class=3D"hljs-keyword">if</span> {! [getCmdEcho $frame <span cla=
ss=3D"hljs-number">8</span> <span class=3D"hljs-number">1000</span>]} then =
{
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
		<span class=3D"hljs-keyword">break</span>
	    }
	    <span class=3D"hljs-keyword">set</span> tmp [<span class=3D"hljs-keywo=
rd">string</span> range $::sio::sioVars(RxBuffer) end<span class=3D"hljs-nu=
mber">-2</span> end<span class=3D"hljs-number">-1</span>]
	    <span class=3D"hljs-keyword">if</span> {[noCANviewError]} then {
		<span class=3D"hljs-keyword">set</span> ::deviceArray(${p}_config) $tmp
<span class=3D"hljs-comment">		#dbgShowVar "::deviceArray(${p}_config) =3D =
$::deviceArray(${p}_config)" </span>
	    } else {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
		<span class=3D"hljs-keyword">set</span> flipStates(anyComm) <span class=
=3D"hljs-string">"off"</span>
		updateGUI onAnyCommunicationOff
		<span class=3D"hljs-keyword">break</span>
	    }
	}
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> getCmdE=
cho</span> {echo length timeOut} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> cv extraTimeOut errCode
    <span class=3D"hljs-keyword">set</span> extraTimeOut <span class=3D"hlj=
s-number">1</span>
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">set</span> errCode <span class=3D"hljs-num=
ber">0</span>
    startExtraTimeOutCounter $timeOut
    <span class=3D"hljs-keyword">if</span> {$length =3D=3D <span class=3D"h=
ljs-number">0</span>} then {
	<span class=3D"hljs-keyword">while</span> {([<span class=3D"hljs-keyword">=
string</span> first <span class=3D"hljs-string">"$echo"</span> $::sio::sioV=
ars(RxBuffer)] =3D=3D <span class=3D"hljs-number">-1</span>) &amp;&amp;([<s=
pan class=3D"hljs-keyword">string</span> first <span class=3D"hljs-string">=
"C0006"</span> $::sio::sioVars(RxBuffer)] =3D=3D <span class=3D"hljs-number=
">-1</span>)} {
	    <span class=3D"hljs-keyword">if</span> {$extraTimeOut =3D=3D <span cla=
ss=3D"hljs-number">-1</span>} then {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
		<span class=3D"hljs-keyword">break</span>
	    }
	    <span class=3D"hljs-keyword">update</span>
	}
    } else {
	<span class=3D"hljs-keyword">while</span> {([<span class=3D"hljs-keyword">=
string</span> length $::sio::sioVars(RxBuffer)] &lt; $length) &amp;&amp;([<=
span class=3D"hljs-keyword">string</span> first <span class=3D"hljs-string"=
>"C0006"</span> $::sio::sioVars(RxBuffer)] =3D=3D <span class=3D"hljs-numbe=
r">-1</span>)} {
	    <span class=3D"hljs-keyword">if</span> {$extraTimeOut =3D=3D <span cla=
ss=3D"hljs-number">-1</span>} then {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
		<span class=3D"hljs-keyword">break</span>
	    }
	    <span class=3D"hljs-keyword">update</span>
	}
    }
    <span class=3D"hljs-keyword">if</span> {$status} then {
	stopExtraTimeOutCounter
	<span class=3D"hljs-keyword">if</span> {[<span class=3D"hljs-keyword">stri=
ng</span> first <span class=3D"hljs-string">"C0006"</span> $::sio::sioVars(=
RxBuffer)] =3D=3D <span class=3D"hljs-number">0</span>} then {
	    cmdsResetProgressBar
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	    <span class=3D"hljs-keyword">set</span> errCode <span class=3D"hljs-nu=
mber">-12</span>
	    messageBox <span class=3D"hljs-string">"CANview message"</span> <span =
class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">"Security b=
it set.\nCannot access device memory."</span>
	}
    } else {
	cmdsResetProgressBar
	<span class=3D"hljs-keyword">set</span> errCode <span class=3D"hljs-number=
">-10</span>
	messageBox <span class=3D"hljs-string">"CANview message"</span> <span clas=
s=3D"hljs-keyword">error</span> <span class=3D"hljs-string">"Time out error=
.\nFLIP and CANview baud rates  may not match.\n"</span>
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> noCANvi=
ewError</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> cv
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">set</span> frame <span class=3D"hljs-strin=
g">"${cv(STB)}8"</span>
    ptclSendFrame <span class=3D"hljs-string">"${frame}${cv(SPB)}"</span>
    <span class=3D"hljs-keyword">while</span> {[<span class=3D"hljs-keyword=
">string</span> length $::sio::sioVars(RxBuffer)] &lt; <span class=3D"hljs-=
number">5</span>} {
	<span class=3D"hljs-keyword">if</span> {$::sio::sioVars(SerialEventOccured=
) =3D=3D <span class=3D"hljs-number">-1</span>} then {
	    cmdsResetProgressBar
	    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-num=
ber">0</span>
	    messageBox <span class=3D"hljs-string">"CANview message"</span> <span =
class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">"Time out e=
rror.\nFLIP and CANview baud rates  may not match.\n"</span>
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">update</span>
    }
    <span class=3D"hljs-keyword">if</span> {$status} then {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
	<span class=3D"hljs-keyword">set</span> errStatus [<span class=3D"hljs-key=
word">string</span> range $::sio::sioVars(RxBuffer) <span class=3D"hljs-num=
ber">2</span> <span class=3D"hljs-number">3</span>]
	<span class=3D"hljs-keyword">switch</span> $errStatus {
	<span class=3D"hljs-string">"01"</span> {
		<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-strin=
g">"CAN Buffer Overflow."</span>
	    }
	<span class=3D"hljs-string">"02"</span> {
		<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-strin=
g">"CAN Transmit Timeout."</span>
	    }
	<span class=3D"hljs-string">"04"</span> {
		<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-strin=
g">"CAN Error Counter Overflow."</span>
	    }
	<span class=3D"hljs-string">"08"</span> {
		<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-strin=
g">"CAN Bus-Off Error."</span>
	    }
	<span class=3D"hljs-string">"10"</span> {
		<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-strin=
g">"RS232 Syntax Error."</span>
	    }
	<span class=3D"hljs-string">"20"</span> {
		<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-strin=
g">"RS232 Format Error."</span>
	    }
	<span class=3D"hljs-string">"40"</span> {
		<span class=3D"hljs-keyword">set</span> message <span class=3D"hljs-strin=
g">"RS232 Buffer Overflow."</span>
	    }
	default {
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">1</span>
	    }
	}
	<span class=3D"hljs-keyword">if</span> {! $status} then {
	    messageBox <span class=3D"hljs-string">"CANview Message"</span> <span =
class=3D"hljs-keyword">error</span> <span class=3D"hljs-string">"${message}=
\n FLIP will attempt to  reset the error status."</span>
	    <span class=3D"hljs-keyword">set</span> frame <span class=3D"hljs-stri=
ng">"${cv(STB)}A"</span>
	    ptclSendFrame <span class=3D"hljs-string">"${frame}${cv(SPB)}"</span>
	}
    }
<span class=3D"hljs-comment">    #dbgShowVar "status =3D $status"</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclIni=
tDongle</span> {} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> canBaud cv
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">set</span> frame <span class=3D"hljs-strin=
g">"${cv(STB)}E"</span>
    ptclSendFrame <span class=3D"hljs-string">"${frame}${cv(SPB)}"</span>
    <span class=3D"hljs-keyword">set</span> status [getCmdEcho $frame <span=
 class=3D"hljs-number">0</span> <span class=3D"hljs-number">1000</span>]
    <span class=3D"hljs-keyword">if</span> {$status} then {
	updateGUI onRs232CommunicationOn
	updateGUI onAnyCommunicationOff
	updateGUI onCanCommStatusModified
	<span class=3D"hljs-keyword">switch</span> $canBaud {
	<span class=3D"hljs-number">20</span>k {
		<span class=3D"hljs-keyword">set</span> frame <span class=3D"hljs-string"=
>"${cv(STB)}62101"</span>
	    }
	<span class=3D"hljs-number">125</span>k {
		<span class=3D"hljs-keyword">set</span> frame <span class=3D"hljs-string"=
>"${cv(STB)}62103"</span>
	    }
	<span class=3D"hljs-number">250</span>k {
		<span class=3D"hljs-keyword">set</span> frame <span class=3D"hljs-string"=
>"${cv(STB)}62104"</span>
	    }
	<span class=3D"hljs-number">500</span>k {
		<span class=3D"hljs-keyword">set</span> frame <span class=3D"hljs-string"=
>"${cv(STB)}62105"</span>
	    }
	<span class=3D"hljs-number">1000</span>k {
		<span class=3D"hljs-keyword">set</span> frame <span class=3D"hljs-string"=
>"${cv(STB)}62107"</span>
	    }
	default {
		messageBox <span class=3D"hljs-string">"CANview Message"</span> warning <=
span class=3D"hljs-string">"The selected bit rate is not supported by CANvi=
ew."</span>
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
	    }
	}
	<span class=3D"hljs-keyword">if</span> {$status} then {
	    ptclSendFrame <span class=3D"hljs-string">"${frame}${cv(SPB)}"</span>
	    <span class=3D"hljs-keyword">if</span> {! [getCmdEcho $frame <span cla=
ss=3D"hljs-number">0</span> <span class=3D"hljs-number">1000</span>]} then =
{
		<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number=
">0</span>
	    }
	}
    }
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclChe=
ckCanEntries</span> {} {
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">if</span> {! [isValidHexaInput $::deviceAr=
ray(nnbProg)]} then {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
    <span class=3D"hljs-keyword">if</span> {! [isValidHexaInput $::deviceAr=
ray(crisProg)]} then {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
    <span class=3D"hljs-keyword">if</span> {! [isValidHexaInput $::deviceAr=
ray(btc1)]} then {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
    <span class=3D"hljs-keyword">if</span> {! [isValidHexaInput $::deviceAr=
ray(btc2)]} then {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
    <span class=3D"hljs-keyword">if</span> {! [isValidHexaInput $::deviceAr=
ray(btc3)]} then {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
    }
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclRea=
dCanConfig</span> {} {
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">0</span>
    <span class=3D"hljs-keyword">while</span> {<span class=3D"hljs-number">=
1</span>} {
	<span class=3D"hljs-keyword">if</span> {! [ptclReadNNB]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">if</span> {! [ptclReadCRIS]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">if</span> {! [ptclReadBTC1]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">if</span> {! [ptclReadBTC2]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">if</span> {! [ptclReadBTC3]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>1</span>
	<span class=3D"hljs-keyword">break</span>
    }
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclSet=
CanConfig</span> {} {
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">0</span>
    <span class=3D"hljs-keyword">while</span> {<span class=3D"hljs-number">=
1</span>} {
	<span class=3D"hljs-keyword">if</span> {! [ptclCheckCanEntries]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">if</span> {! [ptclWriteNNB $::deviceArray(nnb=
Prog)]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">if</span> {! [ptclWriteCRIS $::deviceArray(cr=
isProg)]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">if</span> {! [ptclWriteBTC1 $::deviceArray(bt=
c1)]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">if</span> {! [ptclWriteBTC2 $::deviceArray(bt=
c2)]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">if</span> {! [ptclWriteBTC3 $::deviceArray(bt=
c3)]} then {
	    <span class=3D"hljs-keyword">break</span>
	}
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>1</span>
	<span class=3D"hljs-keyword">break</span>
    }
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclSta=
rtAppli</span> {reset} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">if</span> {$reset} then {
	<span class=3D"hljs-keyword">set</span> status [ptclWriteHwReset]
    } else {
	<span class=3D"hljs-keyword">set</span> status [ptclWriteLJMP <span class=
=3D"hljs-number">0000</span>]
    }
    updateGUI onAnyCommunicationOff
    updateGUI onCanNodeSelectionClosed
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-keyword">proc</span><span class=3D"hljs-title"> ptclrea=
dByte</span> {parameter cmdBytes} {
<span class=3D"hljs-comment">    #dbgBeginProc [info level [info level]]</s=
pan>
    <span class=3D"hljs-keyword">global</span> cv flipStates cmd
    <span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-numb=
er">1</span>
    <span class=3D"hljs-keyword">set</span> frame <span class=3D"hljs-strin=
g">"${cv(STB)}${cmd(read_command)}"</span>
    ptclSendFrame <span class=3D"hljs-string">"${frame}${cmdBytes}${cv(SPB)=
}"</span>
    <span class=3D"hljs-keyword">if</span> {! [getCmdEcho $frame <span clas=
s=3D"hljs-number">8</span> <span class=3D"hljs-number">1000</span>]} then {
	<span class=3D"hljs-keyword">return</span> <span class=3D"hljs-number">0</=
span>
    }
    <span class=3D"hljs-keyword">set</span> tmp [<span class=3D"hljs-keywor=
d">string</span> range $::sio::sioVars(RxBuffer) end<span class=3D"hljs-num=
ber">-2</span> end<span class=3D"hljs-number">-1</span>]
    <span class=3D"hljs-keyword">if</span> {[noCANviewError]} then {
	<span class=3D"hljs-keyword">set</span> ::deviceArray($parameter) $tmp
<span class=3D"hljs-comment">	#dbgShowVar "::deviceArray($parameter) =3D $:=
:deviceArray($parameter)" </span>
    } else {
	<span class=3D"hljs-keyword">set</span> status <span class=3D"hljs-number"=
>0</span>
	<span class=3D"hljs-keyword">set</span> flipStates(anyComm) <span class=3D=
"hljs-string">"off"</span>
	updateGUI onAnyCommunicationOff
    }
<span class=3D"hljs-comment">    #dbgShowVar "status =3D $status"</span>
<span class=3D"hljs-comment">    #dbgEndProc [info level [info level]]</spa=
n>
    <span class=3D"hljs-keyword">return</span> $status
}
<span class=3D"hljs-comment">#dbgEndSrc [info script]</span></code></pre>
=09
=09
=09

=09
=09
=09

</body></html>
------MultipartBoundary--LTwbzBtmCyiBiNHv56BjIvoYorS2HgUm17lD4krM9m----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-682e52e1-d461-417d-b27c-bff53ba44a84@mhtml.blink

@charset "utf-8";

table, tbody, tr, th, td { border: 1px solid black; border-collapse: collap=
se; }

th { border-bottom: 2px solid black; }

td, th { padding-left: 5px; padding-right: 5px; }

.center, .center * { text-align: center; margin-left: auto; margin-right: a=
uto; }
------MultipartBoundary--LTwbzBtmCyiBiNHv56BjIvoYorS2HgUm17lD4krM9m----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://creativetechguy.com/global/css/games.css?v=1555270978969

@charset "windows-1252";

.error-popup-container { background: rgb(153, 153, 153); width: 600px; max-=
width: 85vw; left: 50%; top: 50%; transform: translate(-50%, -50%); text-al=
ign: center; font-size: 25px; position: fixed; box-shadow: rgb(153, 153, 15=
3) 0px 0px 100px; border-radius: 60px; border: 1px solid black; z-index: 21=
47483646; }

.error-popup-message { color: rgb(105, 0, 0); font-weight: bold; padding: 2=
0px; }

.more-games-logo { position: absolute; margin: 8px; z-index: 100000000; lef=
t: 0px; top: 0px; }
------MultipartBoundary--LTwbzBtmCyiBiNHv56BjIvoYorS2HgUm17lD4krM9m----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://creativetechguy.com/utilities/codedetector/styles/vs2015.css?v=1552844680374

@charset "windows-1252";

.hljs { display: block; overflow-x: auto; padding: 0.5em; background: rgb(3=
0, 30, 30); color: rgb(220, 220, 220); }

.hljs-keyword, .hljs-literal, .hljs-symbol, .hljs-name { color: rgb(86, 156=
, 214); }

.hljs-link { color: rgb(86, 156, 214); text-decoration: underline; }

.hljs-built_in, .hljs-type { color: rgb(78, 201, 176); }

.hljs-number, .hljs-class { color: rgb(184, 215, 163); }

.hljs-string, .hljs-meta-string { color: rgb(214, 157, 133); }

.hljs-regexp, .hljs-template-tag { color: rgb(154, 83, 52); }

.hljs-subst, .hljs-function, .hljs-title, .hljs-params, .hljs-formula { col=
or: rgb(220, 220, 220); }

.hljs-comment, .hljs-quote { color: rgb(87, 166, 74); font-style: italic; }

.hljs-doctag { color: rgb(96, 139, 78); }

.hljs-meta, .hljs-meta-keyword, .hljs-tag { color: rgb(155, 155, 155); }

.hljs-variable, .hljs-template-variable { color: rgb(189, 99, 197); }

.hljs-attr, .hljs-attribute, .hljs-builtin-name { color: rgb(156, 220, 254)=
; }

.hljs-section { color: gold; }

.hljs-emphasis { font-style: italic; }

.hljs-strong { font-weight: bold; }

.hljs-bullet, .hljs-selector-tag, .hljs-selector-id, .hljs-selector-class, =
.hljs-selector-attr, .hljs-selector-pseudo { color: rgb(215, 186, 125); }

.hljs-addition { background-color: rgb(20, 66, 18); display: inline-block; =
width: 100%; }

.hljs-deletion { background-color: rgb(102, 0, 0); display: inline-block; w=
idth: 100%; }
------MultipartBoundary--LTwbzBtmCyiBiNHv56BjIvoYorS2HgUm17lD4krM9m------
